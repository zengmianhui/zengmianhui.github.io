{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/blog_head.jpg","path":"blog_head.jpg","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1557049419904},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1557049419906},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1557049419915},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1557049419918},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1557049419920},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1557049419922},{"_id":"source/blog_head.jpg","hash":"46f3f6dcc3278f3b995a489c0e41f88842cbe2b6","modified":1557049419418},{"_id":"source/favicon.ico","hash":"f674a0dad4d06dd5416e7b8d1b3fa24d34c4bb43","modified":1557049419423},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1557049419943},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1557049419954},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1557049419946},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1557049419952},{"_id":"themes/next/_config.yml","hash":"8dd01c23254fe8d3e1a62ae42b150874e795a238","modified":1557049419949},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1557049420162},{"_id":"source/_posts/AlarmManager详解.md","hash":"c44717b7ffdfe3e4384a3960edf4eb9379fcf884","modified":1557049418847},{"_id":"source/_posts/Android中传递对象的三种方法.md","hash":"29bb331a37763536a69cdf29f3eb2fc1d6c16058","modified":1557049418873},{"_id":"source/_posts/GreenDao的使用以及一些细节的总结.md","hash":"d05456b7cb9ae1e3f796281ce1bf66ee5f8da94d","modified":1557049418878},{"_id":"source/_posts/Java面试宝典.md","hash":"04e8f3e841ae08a28fd4e75d473cd2e961487f9b","modified":1557049418902},{"_id":"source/_posts/Javascript之AMD模块化规范.md","hash":"8fd333abc35c7fcd84707e42cbf17ed7508a76d0","modified":1557049418890},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手.md","hash":"a6952ad930537afed784c3197b7cb4ee894f7a43","modified":1557049418904},{"_id":"source/_posts/android-Material-Design-底部导航栏.md","hash":"18c06ceca46edeb64d285917a1fc7355eb970d89","modified":1557049418928},{"_id":"source/_posts/android-Toolbar的使用.md","hash":"d590cde0a2ffa585ab2d7c96dadb89a974472f5e","modified":1557049418930},{"_id":"source/_posts/broadcast与broadcast-receiver.md","hash":"9985d80a6b5f47b7b9d11e030584d0593d6dd303","modified":1557049418934},{"_id":"source/_posts/android-studio配置git.md","hash":"472d084c94ce2ed7f6698b15e39ef3dd22c98dec","modified":1557049418932},{"_id":"source/_posts/github博客如何增加评论？.md","hash":"02faf41e2274bbaf05be7f3255c61854720ead70","modified":1557049418949},{"_id":"source/_posts/github博客没有category和tags？.md","hash":"5926a17c066d6816f159da804062a3888fb2d861","modified":1557049418958},{"_id":"source/_posts/git之head-detached-from-xxx.md","hash":"a80c643e48a5187cd20b68ddd62cf67e524f4ee4","modified":1557049418966},{"_id":"source/_posts/git经验之更改远程仓库地址.md","hash":"e5e79bc819760d94df2e09b9dd0a125eb09280f3","modified":1557049418991},{"_id":"source/_posts/hexo个人博客-如何在markdown上引用本地图片的地址？.md","hash":"3c002dbf3d9e2e0e58b31c9d47a90d5c1ca827fd","modified":1557049419004},{"_id":"source/_posts/hexo如何为github博客设置一个域名？.md","hash":"5bde174853e74df3bb89d5c6d6d28970a85037a0","modified":1557049419051},{"_id":"source/_posts/hexo之如何强制访问https.md","hash":"df26014635ffb28080d866e4d6a16e81eea554e4","modified":1557049419019},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论.md","hash":"ed3f8b44ade3514e9a47422585603100d8ed7336","modified":1557049419026},{"_id":"source/_posts/hexo如何更换github博客主题.md","hash":"01eae76613c32f1df7951d874650d405d84e3319","modified":1557049419053},{"_id":"source/_posts/Android-Service总结.md","hash":"551eac61d35302adf09446f433d3c43ffb804354","modified":1557049418859},{"_id":"source/_posts/javatoexe之exe4j和innosetup打包jar.md","hash":"f4b9b1d40807c5d8d8a0d5b22ae3a7ddca791491","modified":1557049419068},{"_id":"source/_posts/javascript之闭包-closure.md","hash":"4c3c01af4d5511f18d62acb48069bdd6a64a871f","modified":1557049419061},{"_id":"source/_posts/tomcat之如何让tomcat运行在指定JDK环境上.md","hash":"d8a457e25b6a9b0a76d2a65342896c3f9dd95077","modified":1557049419082},{"_id":"source/_posts/oracle之partition-by与group-by的区别.md","hash":"aa11a1c98dd4a8924507999482d673d3c81e4a53","modified":1557049419075},{"_id":"source/_posts/javascript之模块化.md","hash":"54eab5190a8308466183a5f0e7be51c1cc1b336d","modified":1557049419055},{"_id":"source/_posts/javascript之模拟ajax.md","hash":"6b7725bf9ffaee2c4d2874a8b3e9c7283da1f1c5","modified":1557049419058},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网.md","hash":"e8630442158f4a7dfa596f5b0ed57f8961954eb2","modified":1557049419114},{"_id":"source/_posts/我的第一篇博客.md","hash":"966072886378ca6fae2a99bc8b72d7b9baa534c3","modified":1557049419160},{"_id":"source/_posts/viewpager在最后一页滑动之后，跳转到主页面.md","hash":"2a466737ade7d244ada992ea49a31b89682cec6f","modified":1557049419093},{"_id":"source/_posts/如何在github上创建个人博客？.md","hash":"b83ffcbee141371b089ad8e2c587b5a5fad73f4c","modified":1557049419158},{"_id":"source/_posts/再总结一下activity的生命周期吧.md","hash":"21b4c3cd58185c5ebef96e6f3c1d9bfeeea7c272","modified":1557049419142},{"_id":"source/_posts/正则表达式之环视-lookaround.md","hash":"c4feac6de6a8f08cc9961b9fcc6716dfb9a4db59","modified":1557049419163},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）.md","hash":"ea741d10be4432646915efba975e47e2f5013175","modified":1557049419180},{"_id":"source/_posts/算法：冒泡排序.md","hash":"94b0aac8ba305e666ec9bcd8c95f75a6afae5888","modified":1557049419287},{"_id":"source/_posts/设计模式：适配器模式.md","hash":"cb277091c21ae04cc28b7d47478a3a56d41f6923","modified":1557049419395},{"_id":"source/about/index.md","hash":"0c7f98139c1c7d92737562eb724c286f7bd2e876","modified":1557049419417},{"_id":"source/_posts/算法：二分查找法.md","hash":"29cc4c6b673df963b9e75001b385a878e219f561","modified":1557049419253},{"_id":"source/tags/index.md","hash":"460550569fb28015a9add1405e0f499b23e37fd8","modified":1557049419426},{"_id":"source/categories/index.md","hash":"597076a599593fa5f5177c7862f5ab07f11c3ff5","modified":1557049419421},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1557049419911},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1557049419912},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1557049419958},{"_id":"source/_posts/运行我的第一个php程序.md","hash":"f1dd1587ee922a608c48fd3fc9fb710786b704fd","modified":1557049419399},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1557049419961},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1557049419963},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1557049419973},{"_id":"source/_posts/运行我的第一个python程序.md","hash":"dbcd324293eb1df8c4bc6cd14d8ead996dd3e4a0","modified":1557049419414},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1557049419969},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1557049419965},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1557049419976},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1557049419979},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5cdd6f7a0a02b6bfba3374779deb9c469f59e574","modified":1557049419982},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1557049420000},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1557049419988},{"_id":"themes/next/layout/_layout.swig","hash":"d1464665e5030439543bd7e7d6f417be7d0a61ae","modified":1557049420016},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1557049420155},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1557049420152},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1557049420153},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1557049420157},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1557049420164},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1557049420159},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1557049420578},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1557049420160},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1557049420582},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1557049420580},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420392},{"_id":"source/_posts/设计模式：工厂方法模式、简单工厂模式与抽象工厂模式.md","hash":"fa6ea097b93c9b6e9b95c0c2b93dc21872488e08","modified":1557049419379},{"_id":"source/_posts/Android-Service总结/1.jpg","hash":"f9a59b3ffbe5237e8bc0fe79c3d1b1196a25b4b1","modified":1557049418862},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/1.gif","hash":"52328e00c06a03d9cd25ed51de41ee70075b5b97","modified":1557049418907},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/3.gif","hash":"95a5df6edf4c7ceab7a3390de3f0bc67d4d9f82f","modified":1557049418912},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_154037.png","hash":"3460140e4415d42f56b9291c94f0e2073e7c08d4","modified":1557049418969},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_162203.png","hash":"f00e8dc87fc2da6bf59c8f66f0178b12a2707e00","modified":1557049418971},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_181946.png","hash":"6d6dd5f79a6ad12ca4955a813ba7adc3a63ad3d3","modified":1557049418974},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_182814.png","hash":"414add041f10230f3aa045f9ad28662c111447b2","modified":1557049418975},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_183817.png","hash":"821ea3b174c209658d16aae996131f595fc29aa4","modified":1557049418977},{"_id":"source/_posts/hexo之如何强制访问https/1.png","hash":"7b8532b7ab961218e1b79a2d84f250643858d4a3","modified":1557049419022},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_181756.png","hash":"e0f3e41212a3fd358df0456f9627af629a4908ac","modified":1557049418973},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130204.jpg","hash":"9f97b7e2bd98a6122772f5528562e83288fba72a","modified":1557049419029},{"_id":"source/_posts/Android中传递对象的三种方法/1.png","hash":"e3ed188bb7ac6f711cd4f7609cdfc8171e5ce61a","modified":1557049418875},{"_id":"source/_posts/hexo个人博客-如何在markdown上引用本地图片的地址？/1.png","hash":"1e9e3e50abf129976e1af5e3605b9057ca79d3df","modified":1557049419006},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130841.jpg","hash":"6cb962e034bf6b1bf7eb354f478fc737292642ea","modified":1557049419037},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130706.jpg","hash":"7c411fb8f56020ca655718a8cd50cddee19408d2","modified":1557049419035},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130529.jpg","hash":"c698a884e996f296525b13ece2dd79db640e8f09","modified":1557049419031},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_131313.jpg","hash":"41ea273b211155690bab0dc280293975dcab9e64","modified":1557049419041},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_134259.jpg","hash":"c9afd292030dbb7d2cb4c50708c358e62faf106e","modified":1557049419045},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_150715.png","hash":"ab399b7f61b1be0ae90e77c0b50145f218ca662e","modified":1557049419047},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234335.png","hash":"6bd21c01d0e60cf8d893c314ce09164372901943","modified":1557049419117},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234739.png","hash":"f7289d334793461b8222cc7c9869db4be9c028e6","modified":1557049419119},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_000208.png","hash":"026aad7126a876a90819c49a5b4d9fbb7c3103c1","modified":1557049419126},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002457.png","hash":"8f5087a45331cfa55675349ca292f8df22ce7396","modified":1557049419132},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001931.png","hash":"294cacb54f0d25722b9cfb349bcdaf6b85b59499","modified":1557049419130},{"_id":"source/_posts/yuque/Websphere Application Server之知识汇总.md","hash":"bae703555c77141715bf9f0e97562a6d27b83875","modified":1582960514783},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png","hash":"bb4575c551df0d8a04a7a4a1c7fccac0e890e45e","modified":1557049419134},{"_id":"source/_posts/yuque/android小经验.md","hash":"8a05ad46da04667889ff6a2f1badfd0a8650ec99","modified":1582960514799},{"_id":"source/_posts/yuque/go之我的第一个go程序.md","hash":"cb9ae3d6a833c8ee9b795fd6e059c2ff75017b11","modified":1582960514799},{"_id":"source/_posts/yuque/java之如何使当前程序使用代理.md","hash":"956244e76808f403b38949bce45c488a6f0162ff","modified":1582960514814},{"_id":"source/_posts/yuque/java经验.md","hash":"565ccf73a92d167ed9231eeef527675f6eed58f7","modified":1582960514799},{"_id":"source/_posts/yuque/deepin之使用教程及问题总结.md","hash":"554b18dafb23de66e8d643b7b98a9688d9e1c831","modified":1582960514799},{"_id":"source/_posts/yuque/linux之添加环境变量.md","hash":"1486a9558edaa5d26cd0300d2d26beb55744323c","modified":1582960514799},{"_id":"source/_posts/yuque/mysql之Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver.md","hash":"f1e2b8d863f520bbde4c885bbab9941c174278fa","modified":1582960514814},{"_id":"source/_posts/yuque/maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误.md","hash":"1b0daf39b89f8db7bb305da9ac1db4a3fa103b3b","modified":1582960514814},{"_id":"source/_posts/yuque/maven之如何引入oracle依赖.md","hash":"e3d928ef2d4d53e9855de272a892371b8083b8ff","modified":1582960514814},{"_id":"source/_posts/yuque/oracle之技术经验.md","hash":"4eb3fe10182046d38852696008c4af8ca9950c5a","modified":1582960514830},{"_id":"source/_posts/yuque/oracle之表空间数据文件扩容.md","hash":"3d90f66b3d30dcb8025c2d5939dc273609d808ed","modified":1582960514814},{"_id":"source/_posts/yuque/windows之常用设置及安全管理.md","hash":"db1fc2c2afcea4ecc72f82e841b1c953f40c4f84","modified":1582960514799},{"_id":"source/_posts/yuque/oracle之记录被另一个用户锁住.md","hash":"25b62edd166f3de803d024c356496b8efcbf783d","modified":1582960514814},{"_id":"source/_posts/yuque/oracle之重装系统后恢复.md","hash":"327445303831cfb3d3460b3d8e6a1ad672f97e1b","modified":1582960514830},{"_id":"source/_posts/yuque/spring boot之配置数据源时提示无法加载驱动类.md","hash":"f08665b5335a6d8fb536ad9fa83a08fc25762140","modified":1582960514814},{"_id":"source/_posts/yuque/使用Builder设计模式，设计ToolBar.md","hash":"9767660c98d28954972ac64177b4de8fde46ea21","modified":1582960514814},{"_id":"source/_posts/yuque/mysql之绿色版.md","hash":"eb5a2e70759e89cb03545d2d21b761feb5bd24c4","modified":1582960514830},{"_id":"source/_posts/yuque/语雀之Hello World.md","hash":"b82760bbb2e16c0beb6cc68beea9ee910c062ba7","modified":1582960514830},{"_id":"source/_posts/yuque/开发工具之arthas命令.md","hash":"db88de0cde4ad5bd599fedf398b5784ffa00f083","modified":1582960514799},{"_id":"source/_posts/yuque/设计模式之mvp设计模式.md","hash":"8b3804787801631bb6a281ae3e5dd52333c5bfa7","modified":1582960514814},{"_id":"source/_posts/yuque/语雀之语雀+serverless+travis CI+hexo+github搭建云写作博客.md","hash":"b3207d9a518f3903d6053e457365932991d00c31","modified":1582960514830},{"_id":"source/_posts/yuque/svn之svn server重装系统恢复.md","hash":"fb795713f852ee706799fe0a855b83bffb8e01fb","modified":1582960514830},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/diagram_backstack.png","hash":"f9aa03c60f35fed0cc13f7225e1ef2cc04a1baeb","modified":1557049419195},{"_id":"source/_posts/设计模式：工厂方法模式、简单工厂模式与抽象工厂模式/1.jpg","hash":"fe0063637a48575c6512770f4b30409ad28178b5","modified":1557049419382},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/singleInstance.png","hash":"016681e6630958e1acdb8a67944055fad2274d42","modified":1557049419198},{"_id":"source/_posts/算法：冒泡排序/来自算法爱好者.png","hash":"ca38515cfd64ef12ffebfd7394fcd661a14435d7","modified":1557049419290},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1557049420024},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1557049420019},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1557049420041},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1557049420026},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1557049420048},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4d55a4d8945b35b3f29e31a8b9ef4dea7165e834","modified":1557049420050},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5974d1d29e1f465ff9d41ce1763d1ad1cb9a59a9","modified":1557049420044},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/2017-03-23_105452.png","hash":"3be16f7f68ef1241a3790abf12d609587628fc0c","modified":1557049419183},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1557049420068},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1557049420069},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1557049420103},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1557049420105},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c5a74f3bca77336d5b34992b869df72f16375e80","modified":1557049420107},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1557049420066},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1557049420166},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1557049420168},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1557049420170},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1557049420150},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1557049420394},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1557049420390},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557049420396},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1557049420061},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557049420398},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557049420397},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557049420399},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557049420400},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557049420402},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557049420401},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557049420403},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557049420401},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a07004f5a80096d2834a2b320b6f843b51d4fe78","modified":1557049420039},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557049420406},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1557049420407},{"_id":"source/_posts/hexo之如何强制访问https/2.png","hash":"67c16a98c11ef84a60e9db842c9ad4148b66de68","modified":1557049419024},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_131022.jpg","hash":"b06a24cabec2ed4c611adb61f47aeb9810560235","modified":1557049419039},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_132947.jpg","hash":"2ad910b94ed5f4ce6bd339dfca72a965b23a9c7d","modified":1557049419043},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_235311.png","hash":"95bb86c6e54a9edbb55926dafa8f33b96e58b659","modified":1557049419122},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001401.png","hash":"bf2c2676074e28c508cad26afafd5f024012a628","modified":1557049419128},{"_id":"source/_posts/再总结一下activity的生命周期吧/1生命周期中文.png","hash":"adf6cf8a6bc7cb578c0603b2bab2ca2151ebf55a","modified":1557049419148},{"_id":"source/_posts/再总结一下activity的生命周期吧/2生命周期英文.png","hash":"eaa05bf64aa061d1d7de4193c0a31cdc46e317c8","modified":1557049419151},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420112},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420113},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420308},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420309},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557049420404},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420314},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420366},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557049420388},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1557049420064},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1557049420071},{"_id":"themes/next/source/images/avatar.jpg","hash":"e80edf9b35fcc75c31a46d53b984706dc731db2d","modified":1557049420395},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1557049420085},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1557049420086},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1557049420090},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1557049420094},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1557049420111},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1557049420115},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1557049420118},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1557049420096},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"99eef9eb385431e1718cdbe93298ce8e6b1c2552","modified":1557049420133},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1557049420099},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1557049420143},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1557049420307},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1557049420310},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1557049420313},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1557049420366},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1557049420142},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1557049420145},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1557049420148},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1557049420387},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1557049420379},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1557049420426},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1557049420428},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1557049420422},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1557049420425},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1557049420458},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1557049420424},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1557049420431},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1557049420479},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1557049420459},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1557049420486},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1557049420490},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1557049420488},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1557049420492},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1557049420515},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1557049420485},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1557049420430},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1557049420545},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1557049420556},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1557049420520},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1557049420558},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1557049420554},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1557049420567},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1557049420569},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1557049420477},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1557049420574},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1557049420575},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/2.png","hash":"446b22ae02abc25c0466ee5be782d0dcd89d9245","modified":1557049418910},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1557049420559},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1557049420123},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1557049420120},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1557049420129},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1557049420125},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1557049420131},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1557049420137},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"259ebc365b6778930d84b229404b5b70e7577e1f","modified":1557049420140},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1557049420122},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1557049420176},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1557049420135},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1557049420179},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1557049420180},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1557049420208},{"_id":"themes/next/layout/_scripts/third-party/comments/laibili.swig","hash":"5d8052ec7b234ac8bcd79a9da18bafbacc853a9d","modified":1557049420138},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1557049420247},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1557049420177},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1557049420292},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1557049420288},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1557049420302},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1557049420294},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1557049420318},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1557049420304},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1557049420321},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1557049420301},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1557049420319},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1557049420327},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1557049420323},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1557049420337},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1557049420339},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1557049420341},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1557049420344},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1557049420342},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1557049420349},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1557049420350},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1557049420325},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1557049420329},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1557049420354},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1557049420352},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1557049420363},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1557049420430},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1557049420434},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1557049420353},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1557049420361},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1557049420435},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1557049420438},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1557049420439},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1557049420440},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1557049420451},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1557049420436},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1557049420481},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1557049420453},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1557049420498},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557049420496},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1557049420495},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1557049420483},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1557049420518},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1557049420576},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1557049420563},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1557049420513},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1557049420454},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1557049420504},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1557049420502},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1557049420512},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1557049420564},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1557049420182},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1557049420184},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1557049420185},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1557049420192},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1557049420188},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1557049420199},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1557049420200},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1557049420202},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1557049420205},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1557049420191},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1557049420212},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1557049420195},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1557049420216},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1557049420197},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1557049420219},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1557049420221},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1557049420211},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1557049420224},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1557049420214},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1557049420227},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1557049420217},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1557049420231},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1557049420223},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1557049420234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1557049420235},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1557049420226},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1557049420229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1557049420232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1557049420236},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1557049420242},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1557049420253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1557049420239},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1557049420251},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1557049420257},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1557049420260},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1557049420255},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1557049420275},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1557049420263},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1557049420244},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1557049420286},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1557049420332},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1557049420335},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1557049420346},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1557049420245},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1557049420444},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1557049420443},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1557049420271},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1557049420446},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1557049420449},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1557049420510},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1557049420572},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1557049420448},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1557049420445},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1557049420284},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1557049420507},{"_id":"source/_posts/broadcast与broadcast-receiver/01.gif","hash":"fbff750a3eccddd134b3666e1d2e2bdfa515656c","modified":1557049418941},{"_id":"source/_posts/viewpager在最后一页滑动之后，跳转到主页面/20160731130745293.gif","hash":"db8d1b552f31862bcc48a3a790b7c85e59d37d07","modified":1557049419104},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/singleTask.gif","hash":"eacde4cfb94b7b17950ce3583b662edf14327f78","modified":1557049419223},{"_id":"source/_posts/AlarmManager详解/01.gif","hash":"b51f76a2928b5f50aac3b6aa67e6daf0ef688940","modified":1557049418857}],"Category":[{"name":"android","_id":"ck77ncidx0004y8us7s9v919c"},{"name":"android各种manager","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncigl0017y8usff3oxanc"},{"name":"通讯","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncigp001cy8us6ndqlqb4"},{"name":"javascript","_id":"ck77ncigr001fy8us7fuj4nwp"},{"name":"TCP/IP","_id":"ck77ncigt001hy8usontnj968"},{"name":"git","_id":"ck77ncigv001jy8uszw6cogm3"},{"name":"java","_id":"ck77ncihb0023y8usufhop95x"},{"name":"server","_id":"ck77ncihc0025y8usida8x24z"},{"name":"oralce","_id":"ck77ncihg0029y8usk6ms6m66"},{"name":"vmware","_id":"ck77ncihj002dy8usqacx55yy"},{"name":"regex","_id":"ck77ncihl002hy8us4scl474y"},{"name":"算法","_id":"ck77ncihm002jy8usznqgdhza"},{"name":"设计模式","_id":"ck77ncihn002ly8us3y5zo8t1"},{"name":"python","_id":"ck77ncihq002py8usgrc4fkrf"},{"name":"php","_id":"ck77ncihs002ry8uski26sq6r"},{"name":"框架","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77nciht002ty8usba9gz3tw"},{"name":"Material Design","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncihu002vy8usytykle2j"},{"name":"四大组件","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncihw002zy8uslksy4uge"},{"name":"android studio","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncihx0031y8uskyu7hy5m"},{"name":"对象传递","parent":"ck77ncigp001cy8us6ndqlqb4","_id":"ck77nciji0038y8usvldeh44p"},{"name":"模块化","parent":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncijn003iy8usep4embq7"},{"name":"TCP","parent":"ck77ncigt001hy8usontnj968","_id":"ck77ncijr003ny8usk917z1t6"},{"name":"hexo","parent":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncijt003sy8usvc428mqv"},{"name":"git","parent":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncijw003xy8usmhs8w8sy"},{"name":"javatoexe","parent":"ck77ncihb0023y8usufhop95x","_id":"ck77ncikc004sy8usz2ve86b2"},{"name":"tomcat","parent":"ck77ncihc0025y8usida8x24z","_id":"ck77ncikd004vy8us9tnuf2a7"},{"name":"sql","parent":"ck77ncihg0029y8usk6ms6m66","_id":"ck77ncikg0051y8us9csgfs0x"},{"name":"ajax","parent":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncikh0054y8usnoiadpbk"},{"name":"冒泡排序","parent":"ck77ncihm002jy8usznqgdhza","_id":"ck77ncikk005by8usszbfpgkc"},{"name":"适配器模式","parent":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncikl005ey8usbteniry7"},{"name":"二分查找法","parent":"ck77ncihm002jy8usznqgdhza","_id":"ck77ncikm005fy8usirtpv6x6"},{"name":"broadcast","parent":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncikm005gy8us11tw4kdy"},{"name":"activity","parent":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncikn005hy8uswudt4wje"},{"name":"service","parent":"ck77ncihw002zy8uslksy4uge","_id":"ck77nciko005iy8usp99mux3q"},{"name":"widget","parent":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncimd005my8usmmbolj8m"},{"name":"操作系统","_id":"ck77ncioc007wy8usefxb7frb"},{"name":"maven","_id":"ck77ncioi0085y8usqbv1vla0"},{"name":"oracle","_id":"ck77nciok0088y8us2bg7sr5u"},{"name":"svn","_id":"ck77ncion008cy8usvluaqhlx"},{"name":"语雀","_id":"ck77ncipd008qy8us2ee0gpv4"},{"name":"工厂模式","parent":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncipl008xy8usom63uvxd"},{"name":"面试","_id":"ck77ncir7009iy8us92sjtm7t"},{"name":"java","parent":"ck77ncir7009iy8us92sjtm7t","_id":"ck77ncirf009ry8us3996z0ty"}],"Data":[],"Page":[{"title":"about","date":"2017-01-26T16:00:52.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-27 00:00:52\n---\n","updated":"2019-05-05T09:43:39.417Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck77ncidw0003y8usd4t4xzpk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-26T15:59:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-26 23:59:59\ntype: \"tags\"\n---\n","updated":"2019-05-05T09:43:39.426Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck77ncie20007y8usvgrvgt5z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-01-26T16:00:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-27 00:00:36\ntype: \"categories\"\n---\n","updated":"2019-05-05T09:43:39.421Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck77ncie40009y8usdwgwjx4y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AlarmManager详解","date":"2017-04-09T13:48:25.000Z","_content":"# 参考链接\n[Android闹钟设置的解决方案——HanWen](http://www.jianshu.com/p/1f919c6eeff6)  \n\n[Android AlarmManager 定时会 “失效” 的问题——开源中国社区的问答](http://www.oschina.net/question/261246_140677) \n\n[保证Android后台不被杀死的几种方法——不吃早饭好不好](http://www.cnblogs.com/dixonyy/p/5163880.html)  \n\n[Android中运用AlarmManager需注意设置进程属性——choujs](http://www.myexception.cn/android/917358.html)  \n\n[AlarmManager 怎样在进程被干掉的情况下触发回调——百度知道](https://zhidao.baidu.com/question/1178427619022141179.html)\n# AlarmManager详解\nAlarmManager通常用途是用来开发手机闹钟，但是AlarmManager的用处并只是这个。AlarmManager其实是一个全局定时器，它可以在指定时间或指定周期启动其他组件（`Activity`、`Service`、`BroadcastReceiver`）\n## 主要遇到一些问题\n* 华为手机上kill应用后，无法唤醒Alarm  \n    参考了一些社区问答，大部分原因都是手机为Alarm设置了**统一的唤醒时间**\n* 不能精确启动闹钟服务  \n    API19以上是无法精确时间的，可以调用`setExact()`和`setWindow()`\n* 华为手机上休眠无法启动闹钟服务\n\n<!--more-->\n\n##  主要方法\n### set(int type,long triggerAtTime,PendingIntent operation)\n设置指定triggerAtTime时间启动由operation参数指定组件。其中第一个参数指定定时服务的类型，该参数可接受如下值。\n* `ElAPSED_REALTIME`：  \n指定从现在开始过了一定时间后启动operation所对应的组件。\n\n* `ELASPED_REALTIME_WAKEUP`：  \n指定从现在开始时间过了一定时间operation所对应的组件。即使系统处于休眠状态也会执行也会执行operation所对应的组件。\n\n* `RTC`：  \n指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation所对应的组件。\n\n* `RTC_WAKEUP`:指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation对应的组件，即使系统休眠状态也会执行operation所对应的组件。\n\n### setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\n设置非精确的周期性任务。例如，我们设置Alarm每个小时启动一次，但是系统不一定总在每个小时的开始启动Alarm服务。\n\n### setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\n设置一个周期性执行的定时服务。\n### cancel(PendingIntent operation)\n取消AlarmManager的定时服务。\n### 注意\n* API 19(Android4.4)开始，AlarmManager的机制是非准确激发的，操作系统会偏移(shift)闹钟来最小化唤醒和电池消耗。不过AlarManager新增了如下两个方法来支持精确激发。\n    * `setExact(int type long triggerAtMillis,PendingIntent operation)`\n    设置闹钟闹钟将在精确的时间被激发。\n\n    * `setWindow(int type,long windowStartMillis,long windowLengthMillis,PendingIntent operation)`\n    设置闹钟将在精确的时间段内被激发。\n* 很显示API19以后无法使用`setInexactRepeating()`和`setRepeating()`，也就是无法设置重复闹钟，**唯一解决的方式，也只有启动闹钟的时候再设置一次闹钟，也就变相地实现了重复闹钟了。**\n* API19以下使用`setExact()`和`setWindow()`将会报没有匹配的方法  \n```\njava.lang.NoSuchMethodError: android.app.AlarmManager.setExact  \n```\n\n解决办法是判断SDK版本，根据SDK版本来定义不同的方法。\n```\nint sdkVersion = Integer.valueOf(Build.VERSION.SDK_INT);\n```\n## 使用AlarmManager做demo示例\n### 使用AlarmManager\n### 闹钟服务\n代码结构：  \nmain/com.app.demo  \n└──MainActivity.java——>用户设置闹钟时间  \n└──AlarmActivity.java——>闹钟启动时，将启动的Activity  \n└──AudioPlayer.java———>封装的，用来播放音频  \n\n> MainActivity.java\n\n```\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        findViewById(R.id.setDate).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Calendar currentTime = Calendar.getInstance();\n                new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() {\n\n                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n                    @Override\n                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\n                        Intent i=new Intent(MainActivity.this,AlarmActivity.class);\n                        //创建PendingIntent对象\n                        PendingIntent pi=PendingIntent.getActivity(MainActivity.this,0,i,0);\n                        Calendar c=Calendar.getInstance();\n                        c.setTimeInMillis(System.currentTimeMillis());\n                        \n                        //Calendar.HOUR这是12小时制因为无论你的TimePickerDialog设置的是12还是24，hourOfDay默认获取的是24小时制的  \n                        //根据用户的选择的时间来设置Calendar对象 c.set(Calendar.HOUR_OF_DAY,hourOfDay);\n                        c.set(Calendar.MINUTE,minute);\n                        //获取AlarmManager\n                        AlarmManager am= (AlarmManager) getSystemService(ALARM_SERVICE);\n                        Log.i(TAG, \"onTimeSet: \"+SystemInfoUtil.getSDKVersionNumber());\n                        if (SystemInfoUtil.getSDKVersionNumber()>=19){\n                        //API19以上使用\n                            am.setExact(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);\n                        }else {\n                            am.set(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);\n                        }\n                        Toast.makeText(MainActivity.this,\"设置闹钟成功\", Toast.LENGTH_LONG).show();\n                    }\n                },currentTime.get(Calendar.HOUR_OF_DAY),currentTime.get(Calendar.MINUTE),false).show();\n            }\n        });\n    }\n```\n\n> AlarmActivity.java\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_alarm);\n    // 加载音乐\n    try {\n//            String path = RingtoneManager.getActualDefaultRingtoneUri(this, RingtoneManager.TYPE_RINGTONE).getPath();\n        AssetFileDescriptor openFd=getAssets().openFd(\"music.mp3\");\n        AudioPlayer.getInstance().play(openFd);\n        AudioPlayer.getInstance().setLooping(true);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    new AlertDialog.Builder(this)\n            .setTitle(\"闹钟\")\n            .setTitle(\"时间到！！！！！ \")\n            .setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    AudioPlayer.getInstance().stop();\n                }\n            })\n            .create().show();\n}\n\n```\n\n","source":"_posts/AlarmManager详解.md","raw":"---\ntitle: AlarmManager详解\ndate: 2017-04-09 21:48:25\ncategories:\n  - android\n  - android各种manager\ntags:\n  - android\n  - android各种manager\n---\n# 参考链接\n[Android闹钟设置的解决方案——HanWen](http://www.jianshu.com/p/1f919c6eeff6)  \n\n[Android AlarmManager 定时会 “失效” 的问题——开源中国社区的问答](http://www.oschina.net/question/261246_140677) \n\n[保证Android后台不被杀死的几种方法——不吃早饭好不好](http://www.cnblogs.com/dixonyy/p/5163880.html)  \n\n[Android中运用AlarmManager需注意设置进程属性——choujs](http://www.myexception.cn/android/917358.html)  \n\n[AlarmManager 怎样在进程被干掉的情况下触发回调——百度知道](https://zhidao.baidu.com/question/1178427619022141179.html)\n# AlarmManager详解\nAlarmManager通常用途是用来开发手机闹钟，但是AlarmManager的用处并只是这个。AlarmManager其实是一个全局定时器，它可以在指定时间或指定周期启动其他组件（`Activity`、`Service`、`BroadcastReceiver`）\n## 主要遇到一些问题\n* 华为手机上kill应用后，无法唤醒Alarm  \n    参考了一些社区问答，大部分原因都是手机为Alarm设置了**统一的唤醒时间**\n* 不能精确启动闹钟服务  \n    API19以上是无法精确时间的，可以调用`setExact()`和`setWindow()`\n* 华为手机上休眠无法启动闹钟服务\n\n<!--more-->\n\n##  主要方法\n### set(int type,long triggerAtTime,PendingIntent operation)\n设置指定triggerAtTime时间启动由operation参数指定组件。其中第一个参数指定定时服务的类型，该参数可接受如下值。\n* `ElAPSED_REALTIME`：  \n指定从现在开始过了一定时间后启动operation所对应的组件。\n\n* `ELASPED_REALTIME_WAKEUP`：  \n指定从现在开始时间过了一定时间operation所对应的组件。即使系统处于休眠状态也会执行也会执行operation所对应的组件。\n\n* `RTC`：  \n指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation所对应的组件。\n\n* `RTC_WAKEUP`:指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation对应的组件，即使系统休眠状态也会执行operation所对应的组件。\n\n### setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\n设置非精确的周期性任务。例如，我们设置Alarm每个小时启动一次，但是系统不一定总在每个小时的开始启动Alarm服务。\n\n### setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\n设置一个周期性执行的定时服务。\n### cancel(PendingIntent operation)\n取消AlarmManager的定时服务。\n### 注意\n* API 19(Android4.4)开始，AlarmManager的机制是非准确激发的，操作系统会偏移(shift)闹钟来最小化唤醒和电池消耗。不过AlarManager新增了如下两个方法来支持精确激发。\n    * `setExact(int type long triggerAtMillis,PendingIntent operation)`\n    设置闹钟闹钟将在精确的时间被激发。\n\n    * `setWindow(int type,long windowStartMillis,long windowLengthMillis,PendingIntent operation)`\n    设置闹钟将在精确的时间段内被激发。\n* 很显示API19以后无法使用`setInexactRepeating()`和`setRepeating()`，也就是无法设置重复闹钟，**唯一解决的方式，也只有启动闹钟的时候再设置一次闹钟，也就变相地实现了重复闹钟了。**\n* API19以下使用`setExact()`和`setWindow()`将会报没有匹配的方法  \n```\njava.lang.NoSuchMethodError: android.app.AlarmManager.setExact  \n```\n\n解决办法是判断SDK版本，根据SDK版本来定义不同的方法。\n```\nint sdkVersion = Integer.valueOf(Build.VERSION.SDK_INT);\n```\n## 使用AlarmManager做demo示例\n### 使用AlarmManager\n### 闹钟服务\n代码结构：  \nmain/com.app.demo  \n└──MainActivity.java——>用户设置闹钟时间  \n└──AlarmActivity.java——>闹钟启动时，将启动的Activity  \n└──AudioPlayer.java———>封装的，用来播放音频  \n\n> MainActivity.java\n\n```\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        findViewById(R.id.setDate).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Calendar currentTime = Calendar.getInstance();\n                new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() {\n\n                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n                    @Override\n                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {\n                        Intent i=new Intent(MainActivity.this,AlarmActivity.class);\n                        //创建PendingIntent对象\n                        PendingIntent pi=PendingIntent.getActivity(MainActivity.this,0,i,0);\n                        Calendar c=Calendar.getInstance();\n                        c.setTimeInMillis(System.currentTimeMillis());\n                        \n                        //Calendar.HOUR这是12小时制因为无论你的TimePickerDialog设置的是12还是24，hourOfDay默认获取的是24小时制的  \n                        //根据用户的选择的时间来设置Calendar对象 c.set(Calendar.HOUR_OF_DAY,hourOfDay);\n                        c.set(Calendar.MINUTE,minute);\n                        //获取AlarmManager\n                        AlarmManager am= (AlarmManager) getSystemService(ALARM_SERVICE);\n                        Log.i(TAG, \"onTimeSet: \"+SystemInfoUtil.getSDKVersionNumber());\n                        if (SystemInfoUtil.getSDKVersionNumber()>=19){\n                        //API19以上使用\n                            am.setExact(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);\n                        }else {\n                            am.set(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);\n                        }\n                        Toast.makeText(MainActivity.this,\"设置闹钟成功\", Toast.LENGTH_LONG).show();\n                    }\n                },currentTime.get(Calendar.HOUR_OF_DAY),currentTime.get(Calendar.MINUTE),false).show();\n            }\n        });\n    }\n```\n\n> AlarmActivity.java\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_alarm);\n    // 加载音乐\n    try {\n//            String path = RingtoneManager.getActualDefaultRingtoneUri(this, RingtoneManager.TYPE_RINGTONE).getPath();\n        AssetFileDescriptor openFd=getAssets().openFd(\"music.mp3\");\n        AudioPlayer.getInstance().play(openFd);\n        AudioPlayer.getInstance().setLooping(true);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    new AlertDialog.Builder(this)\n            .setTitle(\"闹钟\")\n            .setTitle(\"时间到！！！！！ \")\n            .setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    AudioPlayer.getInstance().stop();\n                }\n            })\n            .create().show();\n}\n\n```\n\n","slug":"AlarmManager详解","published":1,"updated":"2019-05-05T09:43:38.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nci8o0000y8usscw0ynuk","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jianshu.com/p/1f919c6eeff6\" target=\"_blank\" rel=\"noopener\">Android闹钟设置的解决方案——HanWen</a>  </p>\n<p><a href=\"http://www.oschina.net/question/261246_140677\" target=\"_blank\" rel=\"noopener\">Android AlarmManager 定时会 “失效” 的问题——开源中国社区的问答</a> </p>\n<p><a href=\"http://www.cnblogs.com/dixonyy/p/5163880.html\" target=\"_blank\" rel=\"noopener\">保证Android后台不被杀死的几种方法——不吃早饭好不好</a>  </p>\n<p><a href=\"http://www.myexception.cn/android/917358.html\" target=\"_blank\" rel=\"noopener\">Android中运用AlarmManager需注意设置进程属性——choujs</a>  </p>\n<p><a href=\"https://zhidao.baidu.com/question/1178427619022141179.html\" target=\"_blank\" rel=\"noopener\">AlarmManager 怎样在进程被干掉的情况下触发回调——百度知道</a></p>\n<h1 id=\"AlarmManager详解\"><a href=\"#AlarmManager详解\" class=\"headerlink\" title=\"AlarmManager详解\"></a>AlarmManager详解</h1><p>AlarmManager通常用途是用来开发手机闹钟，但是AlarmManager的用处并只是这个。AlarmManager其实是一个全局定时器，它可以在指定时间或指定周期启动其他组件（<code>Activity</code>、<code>Service</code>、<code>BroadcastReceiver</code>）</p>\n<h2 id=\"主要遇到一些问题\"><a href=\"#主要遇到一些问题\" class=\"headerlink\" title=\"主要遇到一些问题\"></a>主要遇到一些问题</h2><ul>\n<li>华为手机上kill应用后，无法唤醒Alarm<br>  参考了一些社区问答，大部分原因都是手机为Alarm设置了<strong>统一的唤醒时间</strong></li>\n<li>不能精确启动闹钟服务<br>  API19以上是无法精确时间的，可以调用<code>setExact()</code>和<code>setWindow()</code></li>\n<li>华为手机上休眠无法启动闹钟服务</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><h3 id=\"set-int-type-long-triggerAtTime-PendingIntent-operation\"><a href=\"#set-int-type-long-triggerAtTime-PendingIntent-operation\" class=\"headerlink\" title=\"set(int type,long triggerAtTime,PendingIntent operation)\"></a>set(int type,long triggerAtTime,PendingIntent operation)</h3><p>设置指定triggerAtTime时间启动由operation参数指定组件。其中第一个参数指定定时服务的类型，该参数可接受如下值。</p>\n<ul>\n<li><p><code>ElAPSED_REALTIME</code>：<br>指定从现在开始过了一定时间后启动operation所对应的组件。</p>\n</li>\n<li><p><code>ELASPED_REALTIME_WAKEUP</code>：<br>指定从现在开始时间过了一定时间operation所对应的组件。即使系统处于休眠状态也会执行也会执行operation所对应的组件。</p>\n</li>\n<li><p><code>RTC</code>：<br>指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation所对应的组件。</p>\n</li>\n<li><p><code>RTC_WAKEUP</code>:指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation对应的组件，即使系统休眠状态也会执行operation所对应的组件。</p>\n</li>\n</ul>\n<h3 id=\"setInexactRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\"><a href=\"#setInexactRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\" class=\"headerlink\" title=\"setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\"></a>setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)</h3><p>设置非精确的周期性任务。例如，我们设置Alarm每个小时启动一次，但是系统不一定总在每个小时的开始启动Alarm服务。</p>\n<h3 id=\"setRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\"><a href=\"#setRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\" class=\"headerlink\" title=\"setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\"></a>setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)</h3><p>设置一个周期性执行的定时服务。</p>\n<h3 id=\"cancel-PendingIntent-operation\"><a href=\"#cancel-PendingIntent-operation\" class=\"headerlink\" title=\"cancel(PendingIntent operation)\"></a>cancel(PendingIntent operation)</h3><p>取消AlarmManager的定时服务。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li><p>API 19(Android4.4)开始，AlarmManager的机制是非准确激发的，操作系统会偏移(shift)闹钟来最小化唤醒和电池消耗。不过AlarManager新增了如下两个方法来支持精确激发。</p>\n<ul>\n<li><p><code>setExact(int type long triggerAtMillis,PendingIntent operation)</code><br>设置闹钟闹钟将在精确的时间被激发。</p>\n</li>\n<li><p><code>setWindow(int type,long windowStartMillis,long windowLengthMillis,PendingIntent operation)</code><br>设置闹钟将在精确的时间段内被激发。</p>\n</li>\n</ul>\n</li>\n<li>很显示API19以后无法使用<code>setInexactRepeating()</code>和<code>setRepeating()</code>，也就是无法设置重复闹钟，<strong>唯一解决的方式，也只有启动闹钟的时候再设置一次闹钟，也就变相地实现了重复闹钟了。</strong></li>\n<li>API19以下使用<code>setExact()</code>和<code>setWindow()</code>将会报没有匹配的方法  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: android.app.AlarmManager.setExact</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决办法是判断SDK版本，根据SDK版本来定义不同的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sdkVersion &#x3D; Integer.valueOf(Build.VERSION.SDK_INT);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用AlarmManager做demo示例\"><a href=\"#使用AlarmManager做demo示例\" class=\"headerlink\" title=\"使用AlarmManager做demo示例\"></a>使用AlarmManager做demo示例</h2><h3 id=\"使用AlarmManager\"><a href=\"#使用AlarmManager\" class=\"headerlink\" title=\"使用AlarmManager\"></a>使用AlarmManager</h3><h3 id=\"闹钟服务\"><a href=\"#闹钟服务\" class=\"headerlink\" title=\"闹钟服务\"></a>闹钟服务</h3><p>代码结构：<br>main/com.app.demo<br>└──MainActivity.java——&gt;用户设置闹钟时间<br>└──AlarmActivity.java——&gt;闹钟启动时，将启动的Activity<br>└──AudioPlayer.java———&gt;封装的，用来播放音频  </p>\n<blockquote>\n<p>MainActivity.java</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">       super.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">       findViewById(R.id.setDate).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void onClick(View v) &#123;</span><br><span class=\"line\">               Calendar currentTime &#x3D; Calendar.getInstance();</span><br><span class=\"line\">               new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                   @RequiresApi(api &#x3D; Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public void onTimeSet(TimePicker view, int hourOfDay, int minute) &#123;</span><br><span class=\"line\">                       Intent i&#x3D;new Intent(MainActivity.this,AlarmActivity.class);</span><br><span class=\"line\">                       &#x2F;&#x2F;创建PendingIntent对象</span><br><span class=\"line\">                       PendingIntent pi&#x3D;PendingIntent.getActivity(MainActivity.this,0,i,0);</span><br><span class=\"line\">                       Calendar c&#x3D;Calendar.getInstance();</span><br><span class=\"line\">                       c.setTimeInMillis(System.currentTimeMillis());</span><br><span class=\"line\">                       </span><br><span class=\"line\">                       &#x2F;&#x2F;Calendar.HOUR这是12小时制因为无论你的TimePickerDialog设置的是12还是24，hourOfDay默认获取的是24小时制的  </span><br><span class=\"line\">                       &#x2F;&#x2F;根据用户的选择的时间来设置Calendar对象 c.set(Calendar.HOUR_OF_DAY,hourOfDay);</span><br><span class=\"line\">                       c.set(Calendar.MINUTE,minute);</span><br><span class=\"line\">                       &#x2F;&#x2F;获取AlarmManager</span><br><span class=\"line\">                       AlarmManager am&#x3D; (AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class=\"line\">                       Log.i(TAG, &quot;onTimeSet: &quot;+SystemInfoUtil.getSDKVersionNumber());</span><br><span class=\"line\">                       if (SystemInfoUtil.getSDKVersionNumber()&gt;&#x3D;19)&#123;</span><br><span class=\"line\">                       &#x2F;&#x2F;API19以上使用</span><br><span class=\"line\">                           am.setExact(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);</span><br><span class=\"line\">                       &#125;else &#123;</span><br><span class=\"line\">                           am.set(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       Toast.makeText(MainActivity.this,&quot;设置闹钟成功&quot;, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;,currentTime.get(Calendar.HOUR_OF_DAY),currentTime.get(Calendar.MINUTE),false).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>AlarmActivity.java</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_alarm);</span><br><span class=\"line\">    &#x2F;&#x2F; 加载音乐</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            String path &#x3D; RingtoneManager.getActualDefaultRingtoneUri(this, RingtoneManager.TYPE_RINGTONE).getPath();</span><br><span class=\"line\">        AssetFileDescriptor openFd&#x3D;getAssets().openFd(&quot;music.mp3&quot;);</span><br><span class=\"line\">        AudioPlayer.getInstance().play(openFd);</span><br><span class=\"line\">        AudioPlayer.getInstance().setLooping(true);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new AlertDialog.Builder(this)</span><br><span class=\"line\">            .setTitle(&quot;闹钟&quot;)</span><br><span class=\"line\">            .setTitle(&quot;时间到！！！！！ &quot;)</span><br><span class=\"line\">            .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">                    AudioPlayer.getInstance().stop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .create().show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jianshu.com/p/1f919c6eeff6\" target=\"_blank\" rel=\"noopener\">Android闹钟设置的解决方案——HanWen</a>  </p>\n<p><a href=\"http://www.oschina.net/question/261246_140677\" target=\"_blank\" rel=\"noopener\">Android AlarmManager 定时会 “失效” 的问题——开源中国社区的问答</a> </p>\n<p><a href=\"http://www.cnblogs.com/dixonyy/p/5163880.html\" target=\"_blank\" rel=\"noopener\">保证Android后台不被杀死的几种方法——不吃早饭好不好</a>  </p>\n<p><a href=\"http://www.myexception.cn/android/917358.html\" target=\"_blank\" rel=\"noopener\">Android中运用AlarmManager需注意设置进程属性——choujs</a>  </p>\n<p><a href=\"https://zhidao.baidu.com/question/1178427619022141179.html\" target=\"_blank\" rel=\"noopener\">AlarmManager 怎样在进程被干掉的情况下触发回调——百度知道</a></p>\n<h1 id=\"AlarmManager详解\"><a href=\"#AlarmManager详解\" class=\"headerlink\" title=\"AlarmManager详解\"></a>AlarmManager详解</h1><p>AlarmManager通常用途是用来开发手机闹钟，但是AlarmManager的用处并只是这个。AlarmManager其实是一个全局定时器，它可以在指定时间或指定周期启动其他组件（<code>Activity</code>、<code>Service</code>、<code>BroadcastReceiver</code>）</p>\n<h2 id=\"主要遇到一些问题\"><a href=\"#主要遇到一些问题\" class=\"headerlink\" title=\"主要遇到一些问题\"></a>主要遇到一些问题</h2><ul>\n<li>华为手机上kill应用后，无法唤醒Alarm<br>  参考了一些社区问答，大部分原因都是手机为Alarm设置了<strong>统一的唤醒时间</strong></li>\n<li>不能精确启动闹钟服务<br>  API19以上是无法精确时间的，可以调用<code>setExact()</code>和<code>setWindow()</code></li>\n<li>华为手机上休眠无法启动闹钟服务</li>\n</ul>","more":"<h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><h3 id=\"set-int-type-long-triggerAtTime-PendingIntent-operation\"><a href=\"#set-int-type-long-triggerAtTime-PendingIntent-operation\" class=\"headerlink\" title=\"set(int type,long triggerAtTime,PendingIntent operation)\"></a>set(int type,long triggerAtTime,PendingIntent operation)</h3><p>设置指定triggerAtTime时间启动由operation参数指定组件。其中第一个参数指定定时服务的类型，该参数可接受如下值。</p>\n<ul>\n<li><p><code>ElAPSED_REALTIME</code>：<br>指定从现在开始过了一定时间后启动operation所对应的组件。</p>\n</li>\n<li><p><code>ELASPED_REALTIME_WAKEUP</code>：<br>指定从现在开始时间过了一定时间operation所对应的组件。即使系统处于休眠状态也会执行也会执行operation所对应的组件。</p>\n</li>\n<li><p><code>RTC</code>：<br>指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation所对应的组件。</p>\n</li>\n<li><p><code>RTC_WAKEUP</code>:指定当系统调用System.currentTimeMillis()方法的返回值与triggerAtTime相等时启动operation对应的组件，即使系统休眠状态也会执行operation所对应的组件。</p>\n</li>\n</ul>\n<h3 id=\"setInexactRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\"><a href=\"#setInexactRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\" class=\"headerlink\" title=\"setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\"></a>setInexactRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)</h3><p>设置非精确的周期性任务。例如，我们设置Alarm每个小时启动一次，但是系统不一定总在每个小时的开始启动Alarm服务。</p>\n<h3 id=\"setRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\"><a href=\"#setRepeating-int-type-long-triggerAtTime-long-interval-PendingIntent-operation\" class=\"headerlink\" title=\"setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)\"></a>setRepeating(int type,long triggerAtTime,long interval,PendingIntent operation)</h3><p>设置一个周期性执行的定时服务。</p>\n<h3 id=\"cancel-PendingIntent-operation\"><a href=\"#cancel-PendingIntent-operation\" class=\"headerlink\" title=\"cancel(PendingIntent operation)\"></a>cancel(PendingIntent operation)</h3><p>取消AlarmManager的定时服务。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li><p>API 19(Android4.4)开始，AlarmManager的机制是非准确激发的，操作系统会偏移(shift)闹钟来最小化唤醒和电池消耗。不过AlarManager新增了如下两个方法来支持精确激发。</p>\n<ul>\n<li><p><code>setExact(int type long triggerAtMillis,PendingIntent operation)</code><br>设置闹钟闹钟将在精确的时间被激发。</p>\n</li>\n<li><p><code>setWindow(int type,long windowStartMillis,long windowLengthMillis,PendingIntent operation)</code><br>设置闹钟将在精确的时间段内被激发。</p>\n</li>\n</ul>\n</li>\n<li>很显示API19以后无法使用<code>setInexactRepeating()</code>和<code>setRepeating()</code>，也就是无法设置重复闹钟，<strong>唯一解决的方式，也只有启动闹钟的时候再设置一次闹钟，也就变相地实现了重复闹钟了。</strong></li>\n<li>API19以下使用<code>setExact()</code>和<code>setWindow()</code>将会报没有匹配的方法  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.NoSuchMethodError: android.app.AlarmManager.setExact</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决办法是判断SDK版本，根据SDK版本来定义不同的方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sdkVersion &#x3D; Integer.valueOf(Build.VERSION.SDK_INT);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用AlarmManager做demo示例\"><a href=\"#使用AlarmManager做demo示例\" class=\"headerlink\" title=\"使用AlarmManager做demo示例\"></a>使用AlarmManager做demo示例</h2><h3 id=\"使用AlarmManager\"><a href=\"#使用AlarmManager\" class=\"headerlink\" title=\"使用AlarmManager\"></a>使用AlarmManager</h3><h3 id=\"闹钟服务\"><a href=\"#闹钟服务\" class=\"headerlink\" title=\"闹钟服务\"></a>闹钟服务</h3><p>代码结构：<br>main/com.app.demo<br>└──MainActivity.java——&gt;用户设置闹钟时间<br>└──AlarmActivity.java——&gt;闹钟启动时，将启动的Activity<br>└──AudioPlayer.java———&gt;封装的，用来播放音频  </p>\n<blockquote>\n<p>MainActivity.java</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">       super.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">       findViewById(R.id.setDate).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void onClick(View v) &#123;</span><br><span class=\"line\">               Calendar currentTime &#x3D; Calendar.getInstance();</span><br><span class=\"line\">               new TimePickerDialog(MainActivity.this, new TimePickerDialog.OnTimeSetListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                   @RequiresApi(api &#x3D; Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public void onTimeSet(TimePicker view, int hourOfDay, int minute) &#123;</span><br><span class=\"line\">                       Intent i&#x3D;new Intent(MainActivity.this,AlarmActivity.class);</span><br><span class=\"line\">                       &#x2F;&#x2F;创建PendingIntent对象</span><br><span class=\"line\">                       PendingIntent pi&#x3D;PendingIntent.getActivity(MainActivity.this,0,i,0);</span><br><span class=\"line\">                       Calendar c&#x3D;Calendar.getInstance();</span><br><span class=\"line\">                       c.setTimeInMillis(System.currentTimeMillis());</span><br><span class=\"line\">                       </span><br><span class=\"line\">                       &#x2F;&#x2F;Calendar.HOUR这是12小时制因为无论你的TimePickerDialog设置的是12还是24，hourOfDay默认获取的是24小时制的  </span><br><span class=\"line\">                       &#x2F;&#x2F;根据用户的选择的时间来设置Calendar对象 c.set(Calendar.HOUR_OF_DAY,hourOfDay);</span><br><span class=\"line\">                       c.set(Calendar.MINUTE,minute);</span><br><span class=\"line\">                       &#x2F;&#x2F;获取AlarmManager</span><br><span class=\"line\">                       AlarmManager am&#x3D; (AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class=\"line\">                       Log.i(TAG, &quot;onTimeSet: &quot;+SystemInfoUtil.getSDKVersionNumber());</span><br><span class=\"line\">                       if (SystemInfoUtil.getSDKVersionNumber()&gt;&#x3D;19)&#123;</span><br><span class=\"line\">                       &#x2F;&#x2F;API19以上使用</span><br><span class=\"line\">                           am.setExact(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);</span><br><span class=\"line\">                       &#125;else &#123;</span><br><span class=\"line\">                           am.set(AlarmManager.RTC_WAKEUP,c.getTimeInMillis(),pi);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       Toast.makeText(MainActivity.this,&quot;设置闹钟成功&quot;, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;,currentTime.get(Calendar.HOUR_OF_DAY),currentTime.get(Calendar.MINUTE),false).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>AlarmActivity.java</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_alarm);</span><br><span class=\"line\">    &#x2F;&#x2F; 加载音乐</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            String path &#x3D; RingtoneManager.getActualDefaultRingtoneUri(this, RingtoneManager.TYPE_RINGTONE).getPath();</span><br><span class=\"line\">        AssetFileDescriptor openFd&#x3D;getAssets().openFd(&quot;music.mp3&quot;);</span><br><span class=\"line\">        AudioPlayer.getInstance().play(openFd);</span><br><span class=\"line\">        AudioPlayer.getInstance().setLooping(true);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new AlertDialog.Builder(this)</span><br><span class=\"line\">            .setTitle(&quot;闹钟&quot;)</span><br><span class=\"line\">            .setTitle(&quot;时间到！！！！！ &quot;)</span><br><span class=\"line\">            .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">                    AudioPlayer.getInstance().stop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .create().show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android中传递对象的三种方法","date":"2017-04-30T10:29:33.000Z","_content":"# 参考链接\n[《Android中传递对象的三种方法》——Malinkang](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html)  \n[《Android Serializable与Parcelable原理与区别》——love_world_](http://blog.csdn.net/androiddevelop/article/details/22108843)  \n[《探索Android中的Parcel机制（上）》——文斌](http://blog.csdn.net/caowenbin/article/details/6532217)\n# Android中传递对象\n`Serializable`，`Parcelable`和`转为JSON字符串`，JSON就不解析了大家都懂，Serializable是jdk提供的方法，最熟悉的序列化，Parcelable是android.os包里面的,也是序列化。两种都是用于支持序列化、反序列化话操作，两者最大的区别在于存储媒介的不同，**Serializable使用IO读写存储在硬盘上**，而**Parcelable是直接在内存中读写**，很明显内存的读写速度通常大于IO读写，所以在Android中通常优先选择Parcelable。\n<!--more-->\n## Serializable\n> 通过让实体类实现Serializable，这个也不需要太多解释，只是一个标志而已，表示可以序列化。\n\n```\npublic class Bean implements Serializable {\n    private int id;\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n//略·····················\n\n```\n> 调用Intent.putExtra(String name, Serializable value)，可以看到value是Serializable。\n```\nBean b=new Bean();\nb.setId(1);\nb.setName(\"小明\");\nIntent intent=new Intent(this,TargetActivity.class);\nintent.putExtra(\"serializable\",b);//在Bundle中存放序列化对象\nstartActivity(intent);\n```\n>在目标Activity中调用getIntent().getSerializableExtra(\"serializable\");\n```\nBean b= (Bean) getIntent().getSerializableExtra(\"serializable\");\nLog.i(TAG, \"onCreate: \"+b.getName());\n```\n\n打印出数据\n```\n04-30 07:30:47.764 1974-1974/com.app.demodeliverobject I/TargetActivity: onCreate: 小明\n```\n\n## Parcelable\n### Parcelable机制原理\n> 以下引用CSDN博客专家文斌解析，不敢说全懂\n\n1. 整个读写全是在内存中进行，主要是通过malloc()、realloc()、memcpy()等内存操作进行，所以效率比JAVA序列化中使用外部存储器会高很多；\n2. 读写时是4字节对齐的，可以看到#define PAD_SIZE(s) (((s)+3)&~3)这句宏定义就是在做这件事情；\n3. 如果预分配的空间不够时newSize = ((mDataSize+len)*3)/2;会一次多分配50%；\n4. 对于普通数据，使用的是mData内存地址，对于IBinder类型的数据以及FileDescriptor使用的是mObjects内存地址。后者是通过flatten\\_binder()和unflatten_binder()实现的，目的是反序列化时读出的对象就是原对象而不用重新new一个新对象。\n\n### 示例\n> ParcelableBean实现Parcelable，表示可序列化\n```\npublic class ParcelableBean implements Parcelable {\n    private int id;\n    private int age;\n    private String name;\n\n    protected ParcelableBean(Parcel in) {\n        id = in.readInt();\n        age = in.readInt();\n        name = in.readString();\n    }\n\n    /**\n     * 将数据存入Parcel容器中\n     * Flatten this object in to a Parcel.\n     * @param dest\n     * @param flags\n     */\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(id);\n        dest.writeInt(age);\n        dest.writeString(name);\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    public static final Creator<ParcelableBean> CREATOR = new Creator<ParcelableBean>() {\n        @Override\n        public ParcelableBean createFromParcel(Parcel in) {\n            return new ParcelableBean(in);\n        }\n\n        @Override\n        public ParcelableBean[] newArray(int size) {\n            return new ParcelableBean[size];\n        }\n    };\n//get and set略 ·························\n}\n```\n> 传入Parcel.obtain()，并通过Intent.putExtra(String name, Parcelable value)保存Parcelable对象\n```\nParcelableBean b=new ParcelableBean(Parcel.obtain());\nb.setId(1);\nb.setAge(14);\nb.setName(\"小明\");\nIntent intent=new Intent(this,TargetActivity.class);\nintent.putExtra(\"parcelable\",b);\nstartActivity(intent);\n```\n\n> 在目标Activity中调用getParcelableExtra(\"parcelable\");\n```\nParcelableBean b= (ParcelableBean) getIntent().getParcelableExtra(\"parcelable\");\nLog.i(TAG, \"onCreate: ID号\"+b.getId());\nLog.i(TAG, \"onCreate: 年龄\"+b.getAge());\nLog.i(TAG, \"onCreate: 名字\"+b.getName());\n```\n\n>以下为打印结果\n\n```\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: ID号1\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: 年龄14\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: 名字小明\n```\n## 三种数据传输速度的比较\n![参考链接中的图片](Android中传递对象的三种方法/1.png)","source":"_posts/Android中传递对象的三种方法.md","raw":"---\ntitle: Android中传递对象的三种方法\ndate: 2017-04-30 18:29:33\ncategories:\n  - android\n  - 通讯\n  - 对象传递\ntags:\n  - android\n  - 对象传递\n---\n# 参考链接\n[《Android中传递对象的三种方法》——Malinkang](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html)  \n[《Android Serializable与Parcelable原理与区别》——love_world_](http://blog.csdn.net/androiddevelop/article/details/22108843)  \n[《探索Android中的Parcel机制（上）》——文斌](http://blog.csdn.net/caowenbin/article/details/6532217)\n# Android中传递对象\n`Serializable`，`Parcelable`和`转为JSON字符串`，JSON就不解析了大家都懂，Serializable是jdk提供的方法，最熟悉的序列化，Parcelable是android.os包里面的,也是序列化。两种都是用于支持序列化、反序列化话操作，两者最大的区别在于存储媒介的不同，**Serializable使用IO读写存储在硬盘上**，而**Parcelable是直接在内存中读写**，很明显内存的读写速度通常大于IO读写，所以在Android中通常优先选择Parcelable。\n<!--more-->\n## Serializable\n> 通过让实体类实现Serializable，这个也不需要太多解释，只是一个标志而已，表示可以序列化。\n\n```\npublic class Bean implements Serializable {\n    private int id;\n    private String name;\n\n    public int getId() {\n        return id;\n    }\n//略·····················\n\n```\n> 调用Intent.putExtra(String name, Serializable value)，可以看到value是Serializable。\n```\nBean b=new Bean();\nb.setId(1);\nb.setName(\"小明\");\nIntent intent=new Intent(this,TargetActivity.class);\nintent.putExtra(\"serializable\",b);//在Bundle中存放序列化对象\nstartActivity(intent);\n```\n>在目标Activity中调用getIntent().getSerializableExtra(\"serializable\");\n```\nBean b= (Bean) getIntent().getSerializableExtra(\"serializable\");\nLog.i(TAG, \"onCreate: \"+b.getName());\n```\n\n打印出数据\n```\n04-30 07:30:47.764 1974-1974/com.app.demodeliverobject I/TargetActivity: onCreate: 小明\n```\n\n## Parcelable\n### Parcelable机制原理\n> 以下引用CSDN博客专家文斌解析，不敢说全懂\n\n1. 整个读写全是在内存中进行，主要是通过malloc()、realloc()、memcpy()等内存操作进行，所以效率比JAVA序列化中使用外部存储器会高很多；\n2. 读写时是4字节对齐的，可以看到#define PAD_SIZE(s) (((s)+3)&~3)这句宏定义就是在做这件事情；\n3. 如果预分配的空间不够时newSize = ((mDataSize+len)*3)/2;会一次多分配50%；\n4. 对于普通数据，使用的是mData内存地址，对于IBinder类型的数据以及FileDescriptor使用的是mObjects内存地址。后者是通过flatten\\_binder()和unflatten_binder()实现的，目的是反序列化时读出的对象就是原对象而不用重新new一个新对象。\n\n### 示例\n> ParcelableBean实现Parcelable，表示可序列化\n```\npublic class ParcelableBean implements Parcelable {\n    private int id;\n    private int age;\n    private String name;\n\n    protected ParcelableBean(Parcel in) {\n        id = in.readInt();\n        age = in.readInt();\n        name = in.readString();\n    }\n\n    /**\n     * 将数据存入Parcel容器中\n     * Flatten this object in to a Parcel.\n     * @param dest\n     * @param flags\n     */\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(id);\n        dest.writeInt(age);\n        dest.writeString(name);\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    public static final Creator<ParcelableBean> CREATOR = new Creator<ParcelableBean>() {\n        @Override\n        public ParcelableBean createFromParcel(Parcel in) {\n            return new ParcelableBean(in);\n        }\n\n        @Override\n        public ParcelableBean[] newArray(int size) {\n            return new ParcelableBean[size];\n        }\n    };\n//get and set略 ·························\n}\n```\n> 传入Parcel.obtain()，并通过Intent.putExtra(String name, Parcelable value)保存Parcelable对象\n```\nParcelableBean b=new ParcelableBean(Parcel.obtain());\nb.setId(1);\nb.setAge(14);\nb.setName(\"小明\");\nIntent intent=new Intent(this,TargetActivity.class);\nintent.putExtra(\"parcelable\",b);\nstartActivity(intent);\n```\n\n> 在目标Activity中调用getParcelableExtra(\"parcelable\");\n```\nParcelableBean b= (ParcelableBean) getIntent().getParcelableExtra(\"parcelable\");\nLog.i(TAG, \"onCreate: ID号\"+b.getId());\nLog.i(TAG, \"onCreate: 年龄\"+b.getAge());\nLog.i(TAG, \"onCreate: 名字\"+b.getName());\n```\n\n>以下为打印结果\n\n```\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: ID号1\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: 年龄14\n04-30 08:42:49.874 30499-30499/com.app.demodeliverobject I/TargetActivity: onCreate: 名字小明\n```\n## 三种数据传输速度的比较\n![参考链接中的图片](Android中传递对象的三种方法/1.png)","slug":"Android中传递对象的三种方法","published":1,"updated":"2019-05-05T09:43:38.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nci8x0001y8us10fz3a9r","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html\" target=\"_blank\" rel=\"noopener\">《Android中传递对象的三种方法》——Malinkang</a><br><a href=\"http://blog.csdn.net/androiddevelop/article/details/22108843\" target=\"_blank\" rel=\"noopener\">《Android Serializable与Parcelable原理与区别》——love<em>world</em></a><br><a href=\"http://blog.csdn.net/caowenbin/article/details/6532217\" target=\"_blank\" rel=\"noopener\">《探索Android中的Parcel机制（上）》——文斌</a></p>\n<h1 id=\"Android中传递对象\"><a href=\"#Android中传递对象\" class=\"headerlink\" title=\"Android中传递对象\"></a>Android中传递对象</h1><p><code>Serializable</code>，<code>Parcelable</code>和<code>转为JSON字符串</code>，JSON就不解析了大家都懂，Serializable是jdk提供的方法，最熟悉的序列化，Parcelable是android.os包里面的,也是序列化。两种都是用于支持序列化、反序列化话操作，两者最大的区别在于存储媒介的不同，<strong>Serializable使用IO读写存储在硬盘上</strong>，而<strong>Parcelable是直接在内存中读写</strong>，很明显内存的读写速度通常大于IO读写，所以在Android中通常优先选择Parcelable。<br><a id=\"more\"></a></p>\n<h2 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h2><blockquote>\n<p>通过让实体类实现Serializable，这个也不需要太多解释，只是一个标志而已，表示可以序列化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bean implements Serializable &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#x2F;&#x2F;略·····················</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用Intent.putExtra(String name, Serializable value)，可以看到value是Serializable。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bean b&#x3D;new Bean();</span><br><span class=\"line\">b.setId(1);</span><br><span class=\"line\">b.setName(&quot;小明&quot;);</span><br><span class=\"line\">Intent intent&#x3D;new Intent(this,TargetActivity.class);</span><br><span class=\"line\">intent.putExtra(&quot;serializable&quot;,b);&#x2F;&#x2F;在Bundle中存放序列化对象</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure><br>在目标Activity中调用getIntent().getSerializableExtra(“serializable”);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bean b&#x3D; (Bean) getIntent().getSerializableExtra(&quot;serializable&quot;);</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: &quot;+b.getName());</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打印出数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-30 07:30:47.764 1974-1974&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 小明</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Parcelable\"><a href=\"#Parcelable\" class=\"headerlink\" title=\"Parcelable\"></a>Parcelable</h2><h3 id=\"Parcelable机制原理\"><a href=\"#Parcelable机制原理\" class=\"headerlink\" title=\"Parcelable机制原理\"></a>Parcelable机制原理</h3><blockquote>\n<p>以下引用CSDN博客专家文斌解析，不敢说全懂</p>\n</blockquote>\n<ol>\n<li>整个读写全是在内存中进行，主要是通过malloc()、realloc()、memcpy()等内存操作进行，所以效率比JAVA序列化中使用外部存储器会高很多；</li>\n<li>读写时是4字节对齐的，可以看到#define PAD_SIZE(s) (((s)+3)&amp;~3)这句宏定义就是在做这件事情；</li>\n<li>如果预分配的空间不够时newSize = ((mDataSize+len)*3)/2;会一次多分配50%；</li>\n<li>对于普通数据，使用的是mData内存地址，对于IBinder类型的数据以及FileDescriptor使用的是mObjects内存地址。后者是通过flatten_binder()和unflatten_binder()实现的，目的是反序列化时读出的对象就是原对象而不用重新new一个新对象。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><blockquote>\n<p>ParcelableBean实现Parcelable，表示可序列化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ParcelableBean implements Parcelable &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected ParcelableBean(Parcel in) &#123;</span><br><span class=\"line\">        id &#x3D; in.readInt();</span><br><span class=\"line\">        age &#x3D; in.readInt();</span><br><span class=\"line\">        name &#x3D; in.readString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 将数据存入Parcel容器中</span><br><span class=\"line\">     * Flatten this object in to a Parcel.</span><br><span class=\"line\">     * @param dest</span><br><span class=\"line\">     * @param flags</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void writeToParcel(Parcel dest, int flags) &#123;</span><br><span class=\"line\">        dest.writeInt(id);</span><br><span class=\"line\">        dest.writeInt(age);</span><br><span class=\"line\">        dest.writeString(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int describeContents() &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final Creator&lt;ParcelableBean&gt; CREATOR &#x3D; new Creator&lt;ParcelableBean&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public ParcelableBean createFromParcel(Parcel in) &#123;</span><br><span class=\"line\">            return new ParcelableBean(in);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public ParcelableBean[] newArray(int size) &#123;</span><br><span class=\"line\">            return new ParcelableBean[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#x2F;&#x2F;get and set略 ·························</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>传入Parcel.obtain()，并通过Intent.putExtra(String name, Parcelable value)保存Parcelable对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParcelableBean b&#x3D;new ParcelableBean(Parcel.obtain());</span><br><span class=\"line\">b.setId(1);</span><br><span class=\"line\">b.setAge(14);</span><br><span class=\"line\">b.setName(&quot;小明&quot;);</span><br><span class=\"line\">Intent intent&#x3D;new Intent(this,TargetActivity.class);</span><br><span class=\"line\">intent.putExtra(&quot;parcelable&quot;,b);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure></p>\n<p>在目标Activity中调用getParcelableExtra(“parcelable”);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParcelableBean b&#x3D; (ParcelableBean) getIntent().getParcelableExtra(&quot;parcelable&quot;);</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: ID号&quot;+b.getId());</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: 年龄&quot;+b.getAge());</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: 名字&quot;+b.getName());</span><br></pre></td></tr></table></figure></p>\n<p>以下为打印结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: ID号1</span><br><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 年龄14</span><br><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 名字小明</span><br></pre></td></tr></table></figure>\n<h2 id=\"三种数据传输速度的比较\"><a href=\"#三种数据传输速度的比较\" class=\"headerlink\" title=\"三种数据传输速度的比较\"></a>三种数据传输速度的比较</h2><p><img src=\"/2017/04/30/Android%E4%B8%AD%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/1.png\" alt=\"参考链接中的图片\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html\" target=\"_blank\" rel=\"noopener\">《Android中传递对象的三种方法》——Malinkang</a><br><a href=\"http://blog.csdn.net/androiddevelop/article/details/22108843\" target=\"_blank\" rel=\"noopener\">《Android Serializable与Parcelable原理与区别》——love<em>world</em></a><br><a href=\"http://blog.csdn.net/caowenbin/article/details/6532217\" target=\"_blank\" rel=\"noopener\">《探索Android中的Parcel机制（上）》——文斌</a></p>\n<h1 id=\"Android中传递对象\"><a href=\"#Android中传递对象\" class=\"headerlink\" title=\"Android中传递对象\"></a>Android中传递对象</h1><p><code>Serializable</code>，<code>Parcelable</code>和<code>转为JSON字符串</code>，JSON就不解析了大家都懂，Serializable是jdk提供的方法，最熟悉的序列化，Parcelable是android.os包里面的,也是序列化。两种都是用于支持序列化、反序列化话操作，两者最大的区别在于存储媒介的不同，<strong>Serializable使用IO读写存储在硬盘上</strong>，而<strong>Parcelable是直接在内存中读写</strong>，很明显内存的读写速度通常大于IO读写，所以在Android中通常优先选择Parcelable。<br></p>","more":"<p></p>\n<h2 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h2><blockquote>\n<p>通过让实体类实现Serializable，这个也不需要太多解释，只是一个标志而已，表示可以序列化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bean implements Serializable &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#x2F;&#x2F;略·····················</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用Intent.putExtra(String name, Serializable value)，可以看到value是Serializable。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bean b&#x3D;new Bean();</span><br><span class=\"line\">b.setId(1);</span><br><span class=\"line\">b.setName(&quot;小明&quot;);</span><br><span class=\"line\">Intent intent&#x3D;new Intent(this,TargetActivity.class);</span><br><span class=\"line\">intent.putExtra(&quot;serializable&quot;,b);&#x2F;&#x2F;在Bundle中存放序列化对象</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure><br>在目标Activity中调用getIntent().getSerializableExtra(“serializable”);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bean b&#x3D; (Bean) getIntent().getSerializableExtra(&quot;serializable&quot;);</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: &quot;+b.getName());</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打印出数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-30 07:30:47.764 1974-1974&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 小明</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Parcelable\"><a href=\"#Parcelable\" class=\"headerlink\" title=\"Parcelable\"></a>Parcelable</h2><h3 id=\"Parcelable机制原理\"><a href=\"#Parcelable机制原理\" class=\"headerlink\" title=\"Parcelable机制原理\"></a>Parcelable机制原理</h3><blockquote>\n<p>以下引用CSDN博客专家文斌解析，不敢说全懂</p>\n</blockquote>\n<ol>\n<li>整个读写全是在内存中进行，主要是通过malloc()、realloc()、memcpy()等内存操作进行，所以效率比JAVA序列化中使用外部存储器会高很多；</li>\n<li>读写时是4字节对齐的，可以看到#define PAD_SIZE(s) (((s)+3)&amp;~3)这句宏定义就是在做这件事情；</li>\n<li>如果预分配的空间不够时newSize = ((mDataSize+len)*3)/2;会一次多分配50%；</li>\n<li>对于普通数据，使用的是mData内存地址，对于IBinder类型的数据以及FileDescriptor使用的是mObjects内存地址。后者是通过flatten_binder()和unflatten_binder()实现的，目的是反序列化时读出的对象就是原对象而不用重新new一个新对象。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><blockquote>\n<p>ParcelableBean实现Parcelable，表示可序列化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ParcelableBean implements Parcelable &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected ParcelableBean(Parcel in) &#123;</span><br><span class=\"line\">        id &#x3D; in.readInt();</span><br><span class=\"line\">        age &#x3D; in.readInt();</span><br><span class=\"line\">        name &#x3D; in.readString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 将数据存入Parcel容器中</span><br><span class=\"line\">     * Flatten this object in to a Parcel.</span><br><span class=\"line\">     * @param dest</span><br><span class=\"line\">     * @param flags</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void writeToParcel(Parcel dest, int flags) &#123;</span><br><span class=\"line\">        dest.writeInt(id);</span><br><span class=\"line\">        dest.writeInt(age);</span><br><span class=\"line\">        dest.writeString(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int describeContents() &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final Creator&lt;ParcelableBean&gt; CREATOR &#x3D; new Creator&lt;ParcelableBean&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public ParcelableBean createFromParcel(Parcel in) &#123;</span><br><span class=\"line\">            return new ParcelableBean(in);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public ParcelableBean[] newArray(int size) &#123;</span><br><span class=\"line\">            return new ParcelableBean[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#x2F;&#x2F;get and set略 ·························</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>传入Parcel.obtain()，并通过Intent.putExtra(String name, Parcelable value)保存Parcelable对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParcelableBean b&#x3D;new ParcelableBean(Parcel.obtain());</span><br><span class=\"line\">b.setId(1);</span><br><span class=\"line\">b.setAge(14);</span><br><span class=\"line\">b.setName(&quot;小明&quot;);</span><br><span class=\"line\">Intent intent&#x3D;new Intent(this,TargetActivity.class);</span><br><span class=\"line\">intent.putExtra(&quot;parcelable&quot;,b);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure></p>\n<p>在目标Activity中调用getParcelableExtra(“parcelable”);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ParcelableBean b&#x3D; (ParcelableBean) getIntent().getParcelableExtra(&quot;parcelable&quot;);</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: ID号&quot;+b.getId());</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: 年龄&quot;+b.getAge());</span><br><span class=\"line\">Log.i(TAG, &quot;onCreate: 名字&quot;+b.getName());</span><br></pre></td></tr></table></figure></p>\n<p>以下为打印结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: ID号1</span><br><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 年龄14</span><br><span class=\"line\">04-30 08:42:49.874 30499-30499&#x2F;com.app.demodeliverobject I&#x2F;TargetActivity: onCreate: 名字小明</span><br></pre></td></tr></table></figure>\n<h2 id=\"三种数据传输速度的比较\"><a href=\"#三种数据传输速度的比较\" class=\"headerlink\" title=\"三种数据传输速度的比较\"></a>三种数据传输速度的比较</h2><p><img src=\"/2017/04/30/Android%E4%B8%AD%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/1.png\" alt=\"参考链接中的图片\"></p>"},{"title":"GreenDao的使用以及一些细节的总结","date":"2017-02-19T19:49:11.000Z","_content":"# GreenDao\n## 一、简介\nGreenDao是一个对象映射数据解决方案的快速开发框架，很多sql语句直接变换简单的代码。\n## 一、greenDao的配置\n### project/build.gradle\n```\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n### app/build.gradle\n```\napply plugin: 'org.greenrobot.greendao'\nandroid {\n………………\n}\ndependencies {\n\n………………\n    //数据库操作\n    compile 'org.greenrobot:greendao-generator:3.2.0'\n    compile 'org.greenrobot:greendao:3.2.0'\n}\n```\n<!--more-->\n\n##二、使用\n### 配置注解映射实体类\ngreendao是插件化开发的，所以配置完注解，直接整个工程rebuild一下，就会自动生成Dao部分代码\n```\n@Entity(nameInDb = \"t_book\")\npublic class Book {\n    @Id(autoincrement = true)\n    @Property(nameInDb = \"id\")\n    private Long id;\n    @Property(nameInDb = \"f_book\")\n    private String book;\n    @ToMany(referencedJoinProperty = \"bookId\")\n    private List<Unit> units;\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getBook() {\n        return book;\n    }\n\n    public void setBook(String book) {\n        this.book = book;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public List<Unit> getUnits() {\n    return units;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public void setUnits(List<Unit> units) {\n        this.units = null;\n    }\n}\n```\n\n```\n@Id(autoincrement = true)\n    @Property(nameInDb = \"id\")\n    private long id;\n    @Property(nameInDb = \"f_book_id\")\n    private long bookId;//书籍id\n    @ToOne(joinProperty = \"bookId\")//请注意：joinProperty这是变量名，不是数据库字段\n    private Book book;\n    @Property(nameInDb = \"f_unit\")\n    private String unit;//单元\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public long getBookId() {\n        return bookId;\n    }\n\n    public void setBookId(long bookId) {\n        this.bookId = bookId;\n    }\n    @Generated(hash = 8805314)//一定要标识这个@Generated，不要标识@Keep\n    public Book getBook() {\n\t    return book;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public void setBook( Book book) {\n\t    this.book=book;\n    }\n```\n@Entity：标识这是一个数据库映射类\n@Id(autoincrement = true)：标识主键，autoincrement = true设置主键自增\n@Property(nameInDb = \"id\")：标识为数据库字段，nameInDb = \"id\"表示对应数据库的字段名。如果不使用nameInDb，将默认采用变量名作为数据库的字段名。\n@ToMany(referencedJoinProperty = \"bookId\")：表示一对多的关系，referencedJoinProperty = \"bookId\"，表示引用关联实体的属性“bookId”，此属性名对应引用实体类的变量名。\n@ToOne(joinProperty = \"bookId\")：表示一对一，或者多对一的关系，joinProperty = \"bookId\"，表示分享属性“bookId”，此属性名对应本类的变量名。\n### 获取DaoSession对数据进行操作\n\n```\nDaoMaster.DevOpenHelper mHelper =new DaoMaster.DevOpenHelper(App.getInstance(), DB_NAME, null);//DB_NAME，可以设置为已经存在的外部数据库，如果没有，会自动创建\nSQLiteDatabase db = mHelper.getWritableDatabase();\nDaoSession mDaoSession = mDaoMaster.newSession();//同步操作时，需要使用DaoSession\nAsyncSession mAsyncSession= mDaoSession.startAsyncSession();//异步处理时，需要使用AsyncSession \n```\n查询数据\n\n```\n//直接查询全部\nUnitDao unitDao = GreenDaoHelper.getDaoSession().getUnitDao();\n        unitDao.loadAll();\n//根据条件查询\nUnitDao unitDao = mDaoSession .getUnitDao();\n        WhereCondition eq = unitDao.Properties.Id.eq(1);\n        WhereCondition eq5 = unitDao.Properties.BookId.eq(1);\n        List<Unit> list = unitDao.queryBuilder().where(eq1, eq2, eq3, eq4).build().list();\n```\n\n```\n//异步数据查询\nStudyWordScoreDao studyWordScoreDao = GreenDaoHelper.getDaoSession().getStudyWordScoreDao();\n        WhereCondition eq1 = StudyWordScoreDao.Properties.BookId.eq(bookId);\n        WhereCondition eq2 = StudyWordScoreDao.Properties.UnitId.eq(unitId);\n        WhereCondition eq3 = StudyWordScoreDao.Properties.UnitId.eq(userId);\n        WhereCondition eq4 = StudyWordScoreDao.Properties.UnitId.eq(recordId);\n        Query<StudyWordScore> build = studyWordScoreDao.queryBuilder().where(eq1, eq2, eq3, eq4).build();\n//        WhereCondition and = wordDao.queryBuilder().and(eq, eq1);\n        asyncSession.queryList(build);\n        asyncSession.setListenerMainThread(asyncOperationListener);\n```\n\n## \n##细节问题\n### 凡是涉及ID的一定要使用Long类型的包装类\n 凡是涉及ID的一定要使用Long类型的包装类，不然，autoincrement = true会失效，我之前就是这样，插入的数据会直接赋为“0”\n```\n//根据官网的方法，说主键赋值为空，主键就会自增，但是编译器不通过，报错，因为初始为0，不是null，所以我就直接不设置主键值，果然就可以了\nnew Book(null,\"必修一\");\n```\n### 关联实体的类的get/set方法一定要使用@Generate\n\n```\n//只有使用了Generated，greenDao的插件才会将getset修改成以下代码，如果使用@keep那就保留getset代码，也就没有关联效果了\n@Generated(hash = 835179934)\n    public List<Unit> getUnits() {\n        if (units == null) {\n            final DaoSession daoSession = this.daoSession;\n            if (daoSession == null) {\n                throw new DaoException(\"Entity is detached from DAO context\");\n            }\n            UnitDao targetDao = daoSession.getUnitDao();\n            List<Unit> unitsNew = targetDao._queryBook_Units(id);\n            synchronized (this) {\n                if (units == null) {\n                    units = unitsNew;\n                }\n            }\n        }\n        return units;\n    }\n\n    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n    @Generated(hash = 121816020)\n    public synchronized void resetUnits() {\n        units = null;\n    }\n```\n\n暂时只总结部分，后续会继续更新此文章\n","source":"_posts/GreenDao的使用以及一些细节的总结.md","raw":"---\ntitle: GreenDao的使用以及一些细节的总结\ndate: 2017-02-20 03:49:11\ntags:\n\t- GreenDao\n\t- sqlite\n\t- 框架\n\t- android\ncategories:\n\t- android\n\t- 框架\n---\n# GreenDao\n## 一、简介\nGreenDao是一个对象映射数据解决方案的快速开发框架，很多sql语句直接变换简单的代码。\n## 一、greenDao的配置\n### project/build.gradle\n```\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n### app/build.gradle\n```\napply plugin: 'org.greenrobot.greendao'\nandroid {\n………………\n}\ndependencies {\n\n………………\n    //数据库操作\n    compile 'org.greenrobot:greendao-generator:3.2.0'\n    compile 'org.greenrobot:greendao:3.2.0'\n}\n```\n<!--more-->\n\n##二、使用\n### 配置注解映射实体类\ngreendao是插件化开发的，所以配置完注解，直接整个工程rebuild一下，就会自动生成Dao部分代码\n```\n@Entity(nameInDb = \"t_book\")\npublic class Book {\n    @Id(autoincrement = true)\n    @Property(nameInDb = \"id\")\n    private Long id;\n    @Property(nameInDb = \"f_book\")\n    private String book;\n    @ToMany(referencedJoinProperty = \"bookId\")\n    private List<Unit> units;\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getBook() {\n        return book;\n    }\n\n    public void setBook(String book) {\n        this.book = book;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public List<Unit> getUnits() {\n    return units;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public void setUnits(List<Unit> units) {\n        this.units = null;\n    }\n}\n```\n\n```\n@Id(autoincrement = true)\n    @Property(nameInDb = \"id\")\n    private long id;\n    @Property(nameInDb = \"f_book_id\")\n    private long bookId;//书籍id\n    @ToOne(joinProperty = \"bookId\")//请注意：joinProperty这是变量名，不是数据库字段\n    private Book book;\n    @Property(nameInDb = \"f_unit\")\n    private String unit;//单元\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public long getBookId() {\n        return bookId;\n    }\n\n    public void setBookId(long bookId) {\n        this.bookId = bookId;\n    }\n    @Generated(hash = 8805314)//一定要标识这个@Generated，不要标识@Keep\n    public Book getBook() {\n\t    return book;\n    }\n    @Generated//一定要标识这个@Generated，不要标识@Keep\n    public void setBook( Book book) {\n\t    this.book=book;\n    }\n```\n@Entity：标识这是一个数据库映射类\n@Id(autoincrement = true)：标识主键，autoincrement = true设置主键自增\n@Property(nameInDb = \"id\")：标识为数据库字段，nameInDb = \"id\"表示对应数据库的字段名。如果不使用nameInDb，将默认采用变量名作为数据库的字段名。\n@ToMany(referencedJoinProperty = \"bookId\")：表示一对多的关系，referencedJoinProperty = \"bookId\"，表示引用关联实体的属性“bookId”，此属性名对应引用实体类的变量名。\n@ToOne(joinProperty = \"bookId\")：表示一对一，或者多对一的关系，joinProperty = \"bookId\"，表示分享属性“bookId”，此属性名对应本类的变量名。\n### 获取DaoSession对数据进行操作\n\n```\nDaoMaster.DevOpenHelper mHelper =new DaoMaster.DevOpenHelper(App.getInstance(), DB_NAME, null);//DB_NAME，可以设置为已经存在的外部数据库，如果没有，会自动创建\nSQLiteDatabase db = mHelper.getWritableDatabase();\nDaoSession mDaoSession = mDaoMaster.newSession();//同步操作时，需要使用DaoSession\nAsyncSession mAsyncSession= mDaoSession.startAsyncSession();//异步处理时，需要使用AsyncSession \n```\n查询数据\n\n```\n//直接查询全部\nUnitDao unitDao = GreenDaoHelper.getDaoSession().getUnitDao();\n        unitDao.loadAll();\n//根据条件查询\nUnitDao unitDao = mDaoSession .getUnitDao();\n        WhereCondition eq = unitDao.Properties.Id.eq(1);\n        WhereCondition eq5 = unitDao.Properties.BookId.eq(1);\n        List<Unit> list = unitDao.queryBuilder().where(eq1, eq2, eq3, eq4).build().list();\n```\n\n```\n//异步数据查询\nStudyWordScoreDao studyWordScoreDao = GreenDaoHelper.getDaoSession().getStudyWordScoreDao();\n        WhereCondition eq1 = StudyWordScoreDao.Properties.BookId.eq(bookId);\n        WhereCondition eq2 = StudyWordScoreDao.Properties.UnitId.eq(unitId);\n        WhereCondition eq3 = StudyWordScoreDao.Properties.UnitId.eq(userId);\n        WhereCondition eq4 = StudyWordScoreDao.Properties.UnitId.eq(recordId);\n        Query<StudyWordScore> build = studyWordScoreDao.queryBuilder().where(eq1, eq2, eq3, eq4).build();\n//        WhereCondition and = wordDao.queryBuilder().and(eq, eq1);\n        asyncSession.queryList(build);\n        asyncSession.setListenerMainThread(asyncOperationListener);\n```\n\n## \n##细节问题\n### 凡是涉及ID的一定要使用Long类型的包装类\n 凡是涉及ID的一定要使用Long类型的包装类，不然，autoincrement = true会失效，我之前就是这样，插入的数据会直接赋为“0”\n```\n//根据官网的方法，说主键赋值为空，主键就会自增，但是编译器不通过，报错，因为初始为0，不是null，所以我就直接不设置主键值，果然就可以了\nnew Book(null,\"必修一\");\n```\n### 关联实体的类的get/set方法一定要使用@Generate\n\n```\n//只有使用了Generated，greenDao的插件才会将getset修改成以下代码，如果使用@keep那就保留getset代码，也就没有关联效果了\n@Generated(hash = 835179934)\n    public List<Unit> getUnits() {\n        if (units == null) {\n            final DaoSession daoSession = this.daoSession;\n            if (daoSession == null) {\n                throw new DaoException(\"Entity is detached from DAO context\");\n            }\n            UnitDao targetDao = daoSession.getUnitDao();\n            List<Unit> unitsNew = targetDao._queryBook_Units(id);\n            synchronized (this) {\n                if (units == null) {\n                    units = unitsNew;\n                }\n            }\n        }\n        return units;\n    }\n\n    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n    @Generated(hash = 121816020)\n    public synchronized void resetUnits() {\n        units = null;\n    }\n```\n\n暂时只总结部分，后续会继续更新此文章\n","slug":"GreenDao的使用以及一些细节的总结","published":1,"updated":"2019-05-05T09:43:38.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncidv0002y8useix6lx1v","content":"<h1 id=\"GreenDao\"><a href=\"#GreenDao\" class=\"headerlink\" title=\"GreenDao\"></a>GreenDao</h1><h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>GreenDao是一个对象映射数据解决方案的快速开发框架，很多sql语句直接变换简单的代码。</p>\n<h2 id=\"一、greenDao的配置\"><a href=\"#一、greenDao的配置\" class=\"headerlink\" title=\"一、greenDao的配置\"></a>一、greenDao的配置</h2><h3 id=\"project-build-gradle\"><a href=\"#project-build-gradle\" class=\"headerlink\" title=\"project/build.gradle\"></a>project/build.gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &#39;org.greenrobot:greendao-gradle-plugin:3.2.1&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        &#x2F;&#x2F; in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"app-build-gradle\"><a href=\"#app-build-gradle\" class=\"headerlink\" title=\"app/build.gradle\"></a>app/build.gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;org.greenrobot.greendao&#39;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">………………</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">………………</span><br><span class=\"line\">    &#x2F;&#x2F;数据库操作</span><br><span class=\"line\">    compile &#39;org.greenrobot:greendao-generator:3.2.0&#39;</span><br><span class=\"line\">    compile &#39;org.greenrobot:greendao:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>##二、使用</p>\n<h3 id=\"配置注解映射实体类\"><a href=\"#配置注解映射实体类\" class=\"headerlink\" title=\"配置注解映射实体类\"></a>配置注解映射实体类</h3><p>greendao是插件化开发的，所以配置完注解，直接整个工程rebuild一下，就会自动生成Dao部分代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity(nameInDb &#x3D; &quot;t_book&quot;)</span><br><span class=\"line\">public class Book &#123;</span><br><span class=\"line\">    @Id(autoincrement &#x3D; true)</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;id&quot;)</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_book&quot;)</span><br><span class=\"line\">    private String book;</span><br><span class=\"line\">    @ToMany(referencedJoinProperty &#x3D; &quot;bookId&quot;)</span><br><span class=\"line\">    private List&lt;Unit&gt; units;</span><br><span class=\"line\">    public Long getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Long id) &#123;</span><br><span class=\"line\">        this.id &#x3D; id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getBook() &#123;</span><br><span class=\"line\">        return book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBook(String book) &#123;</span><br><span class=\"line\">        this.book &#x3D; book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public List&lt;Unit&gt; getUnits() &#123;</span><br><span class=\"line\">    return units;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public void setUnits(List&lt;Unit&gt; units) &#123;</span><br><span class=\"line\">        this.units &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Id(autoincrement &#x3D; true)</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;id&quot;)</span><br><span class=\"line\">    private long id;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_book_id&quot;)</span><br><span class=\"line\">    private long bookId;&#x2F;&#x2F;书籍id</span><br><span class=\"line\">    @ToOne(joinProperty &#x3D; &quot;bookId&quot;)&#x2F;&#x2F;请注意：joinProperty这是变量名，不是数据库字段</span><br><span class=\"line\">    private Book book;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_unit&quot;)</span><br><span class=\"line\">    private String unit;&#x2F;&#x2F;单元</span><br><span class=\"line\">    public long getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(long id) &#123;</span><br><span class=\"line\">        this.id &#x3D; id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public long getBookId() &#123;</span><br><span class=\"line\">        return bookId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBookId(long bookId) &#123;</span><br><span class=\"line\">        this.bookId &#x3D; bookId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated(hash &#x3D; 8805314)&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public Book getBook() &#123;</span><br><span class=\"line\">\t    return book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public void setBook( Book book) &#123;</span><br><span class=\"line\">\t    this.book&#x3D;book;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>@Entity：标识这是一个数据库映射类<br>@Id(autoincrement = true)：标识主键，autoincrement = true设置主键自增<br>@Property(nameInDb = “id”)：标识为数据库字段，nameInDb = “id”表示对应数据库的字段名。如果不使用nameInDb，将默认采用变量名作为数据库的字段名。<br>@ToMany(referencedJoinProperty = “bookId”)：表示一对多的关系，referencedJoinProperty = “bookId”，表示引用关联实体的属性“bookId”，此属性名对应引用实体类的变量名。<br>@ToOne(joinProperty = “bookId”)：表示一对一，或者多对一的关系，joinProperty = “bookId”，表示分享属性“bookId”，此属性名对应本类的变量名。</p>\n<h3 id=\"获取DaoSession对数据进行操作\"><a href=\"#获取DaoSession对数据进行操作\" class=\"headerlink\" title=\"获取DaoSession对数据进行操作\"></a>获取DaoSession对数据进行操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DaoMaster.DevOpenHelper mHelper &#x3D;new DaoMaster.DevOpenHelper(App.getInstance(), DB_NAME, null);&#x2F;&#x2F;DB_NAME，可以设置为已经存在的外部数据库，如果没有，会自动创建</span><br><span class=\"line\">SQLiteDatabase db &#x3D; mHelper.getWritableDatabase();</span><br><span class=\"line\">DaoSession mDaoSession &#x3D; mDaoMaster.newSession();&#x2F;&#x2F;同步操作时，需要使用DaoSession</span><br><span class=\"line\">AsyncSession mAsyncSession&#x3D; mDaoSession.startAsyncSession();&#x2F;&#x2F;异步处理时，需要使用AsyncSession</span><br></pre></td></tr></table></figure>\n<p>查询数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;直接查询全部</span><br><span class=\"line\">UnitDao unitDao &#x3D; GreenDaoHelper.getDaoSession().getUnitDao();</span><br><span class=\"line\">        unitDao.loadAll();</span><br><span class=\"line\">&#x2F;&#x2F;根据条件查询</span><br><span class=\"line\">UnitDao unitDao &#x3D; mDaoSession .getUnitDao();</span><br><span class=\"line\">        WhereCondition eq &#x3D; unitDao.Properties.Id.eq(1);</span><br><span class=\"line\">        WhereCondition eq5 &#x3D; unitDao.Properties.BookId.eq(1);</span><br><span class=\"line\">        List&lt;Unit&gt; list &#x3D; unitDao.queryBuilder().where(eq1, eq2, eq3, eq4).build().list();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;异步数据查询</span><br><span class=\"line\">StudyWordScoreDao studyWordScoreDao &#x3D; GreenDaoHelper.getDaoSession().getStudyWordScoreDao();</span><br><span class=\"line\">        WhereCondition eq1 &#x3D; StudyWordScoreDao.Properties.BookId.eq(bookId);</span><br><span class=\"line\">        WhereCondition eq2 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(unitId);</span><br><span class=\"line\">        WhereCondition eq3 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(userId);</span><br><span class=\"line\">        WhereCondition eq4 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(recordId);</span><br><span class=\"line\">        Query&lt;StudyWordScore&gt; build &#x3D; studyWordScoreDao.queryBuilder().where(eq1, eq2, eq3, eq4).build();</span><br><span class=\"line\">&#x2F;&#x2F;        WhereCondition and &#x3D; wordDao.queryBuilder().and(eq, eq1);</span><br><span class=\"line\">        asyncSession.queryList(build);</span><br><span class=\"line\">        asyncSession.setListenerMainThread(asyncOperationListener);</span><br></pre></td></tr></table></figure>\n<p>## </p>\n<p>##细节问题</p>\n<h3 id=\"凡是涉及ID的一定要使用Long类型的包装类\"><a href=\"#凡是涉及ID的一定要使用Long类型的包装类\" class=\"headerlink\" title=\"凡是涉及ID的一定要使用Long类型的包装类\"></a>凡是涉及ID的一定要使用Long类型的包装类</h3><p> 凡是涉及ID的一定要使用Long类型的包装类，不然，autoincrement = true会失效，我之前就是这样，插入的数据会直接赋为“0”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;根据官网的方法，说主键赋值为空，主键就会自增，但是编译器不通过，报错，因为初始为0，不是null，所以我就直接不设置主键值，果然就可以了</span><br><span class=\"line\">new Book(null,&quot;必修一&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联实体的类的get-set方法一定要使用-Generate\"><a href=\"#关联实体的类的get-set方法一定要使用-Generate\" class=\"headerlink\" title=\"关联实体的类的get/set方法一定要使用@Generate\"></a>关联实体的类的get/set方法一定要使用@Generate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;只有使用了Generated，greenDao的插件才会将getset修改成以下代码，如果使用@keep那就保留getset代码，也就没有关联效果了</span><br><span class=\"line\">@Generated(hash &#x3D; 835179934)</span><br><span class=\"line\">    public List&lt;Unit&gt; getUnits() &#123;</span><br><span class=\"line\">        if (units &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            final DaoSession daoSession &#x3D; this.daoSession;</span><br><span class=\"line\">            if (daoSession &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                throw new DaoException(&quot;Entity is detached from DAO context&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            UnitDao targetDao &#x3D; daoSession.getUnitDao();</span><br><span class=\"line\">            List&lt;Unit&gt; unitsNew &#x3D; targetDao._queryBook_Units(id);</span><br><span class=\"line\">            synchronized (this) &#123;</span><br><span class=\"line\">                if (units &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                    units &#x3D; unitsNew;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return units;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** Resets a to-many relationship, making the next get call to query for a fresh result. *&#x2F;</span><br><span class=\"line\">    @Generated(hash &#x3D; 121816020)</span><br><span class=\"line\">    public synchronized void resetUnits() &#123;</span><br><span class=\"line\">        units &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>暂时只总结部分，后续会继续更新此文章</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"GreenDao\"><a href=\"#GreenDao\" class=\"headerlink\" title=\"GreenDao\"></a>GreenDao</h1><h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>GreenDao是一个对象映射数据解决方案的快速开发框架，很多sql语句直接变换简单的代码。</p>\n<h2 id=\"一、greenDao的配置\"><a href=\"#一、greenDao的配置\" class=\"headerlink\" title=\"一、greenDao的配置\"></a>一、greenDao的配置</h2><h3 id=\"project-build-gradle\"><a href=\"#project-build-gradle\" class=\"headerlink\" title=\"project/build.gradle\"></a>project/build.gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &#39;org.greenrobot:greendao-gradle-plugin:3.2.1&#39;</span><br><span class=\"line\">        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        &#x2F;&#x2F; in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"app-build-gradle\"><a href=\"#app-build-gradle\" class=\"headerlink\" title=\"app/build.gradle\"></a>app/build.gradle</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;org.greenrobot.greendao&#39;</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">………………</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">………………</span><br><span class=\"line\">    &#x2F;&#x2F;数据库操作</span><br><span class=\"line\">    compile &#39;org.greenrobot:greendao-generator:3.2.0&#39;</span><br><span class=\"line\">    compile &#39;org.greenrobot:greendao:3.2.0&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>##二、使用</p>\n<h3 id=\"配置注解映射实体类\"><a href=\"#配置注解映射实体类\" class=\"headerlink\" title=\"配置注解映射实体类\"></a>配置注解映射实体类</h3><p>greendao是插件化开发的，所以配置完注解，直接整个工程rebuild一下，就会自动生成Dao部分代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Entity(nameInDb &#x3D; &quot;t_book&quot;)</span><br><span class=\"line\">public class Book &#123;</span><br><span class=\"line\">    @Id(autoincrement &#x3D; true)</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;id&quot;)</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_book&quot;)</span><br><span class=\"line\">    private String book;</span><br><span class=\"line\">    @ToMany(referencedJoinProperty &#x3D; &quot;bookId&quot;)</span><br><span class=\"line\">    private List&lt;Unit&gt; units;</span><br><span class=\"line\">    public Long getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(Long id) &#123;</span><br><span class=\"line\">        this.id &#x3D; id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getBook() &#123;</span><br><span class=\"line\">        return book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBook(String book) &#123;</span><br><span class=\"line\">        this.book &#x3D; book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public List&lt;Unit&gt; getUnits() &#123;</span><br><span class=\"line\">    return units;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public void setUnits(List&lt;Unit&gt; units) &#123;</span><br><span class=\"line\">        this.units &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Id(autoincrement &#x3D; true)</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;id&quot;)</span><br><span class=\"line\">    private long id;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_book_id&quot;)</span><br><span class=\"line\">    private long bookId;&#x2F;&#x2F;书籍id</span><br><span class=\"line\">    @ToOne(joinProperty &#x3D; &quot;bookId&quot;)&#x2F;&#x2F;请注意：joinProperty这是变量名，不是数据库字段</span><br><span class=\"line\">    private Book book;</span><br><span class=\"line\">    @Property(nameInDb &#x3D; &quot;f_unit&quot;)</span><br><span class=\"line\">    private String unit;&#x2F;&#x2F;单元</span><br><span class=\"line\">    public long getId() &#123;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setId(long id) &#123;</span><br><span class=\"line\">        this.id &#x3D; id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public long getBookId() &#123;</span><br><span class=\"line\">        return bookId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setBookId(long bookId) &#123;</span><br><span class=\"line\">        this.bookId &#x3D; bookId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated(hash &#x3D; 8805314)&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public Book getBook() &#123;</span><br><span class=\"line\">\t    return book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Generated&#x2F;&#x2F;一定要标识这个@Generated，不要标识@Keep</span><br><span class=\"line\">    public void setBook( Book book) &#123;</span><br><span class=\"line\">\t    this.book&#x3D;book;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>@Entity：标识这是一个数据库映射类<br>@Id(autoincrement = true)：标识主键，autoincrement = true设置主键自增<br>@Property(nameInDb = “id”)：标识为数据库字段，nameInDb = “id”表示对应数据库的字段名。如果不使用nameInDb，将默认采用变量名作为数据库的字段名。<br>@ToMany(referencedJoinProperty = “bookId”)：表示一对多的关系，referencedJoinProperty = “bookId”，表示引用关联实体的属性“bookId”，此属性名对应引用实体类的变量名。<br>@ToOne(joinProperty = “bookId”)：表示一对一，或者多对一的关系，joinProperty = “bookId”，表示分享属性“bookId”，此属性名对应本类的变量名。</p>\n<h3 id=\"获取DaoSession对数据进行操作\"><a href=\"#获取DaoSession对数据进行操作\" class=\"headerlink\" title=\"获取DaoSession对数据进行操作\"></a>获取DaoSession对数据进行操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DaoMaster.DevOpenHelper mHelper &#x3D;new DaoMaster.DevOpenHelper(App.getInstance(), DB_NAME, null);&#x2F;&#x2F;DB_NAME，可以设置为已经存在的外部数据库，如果没有，会自动创建</span><br><span class=\"line\">SQLiteDatabase db &#x3D; mHelper.getWritableDatabase();</span><br><span class=\"line\">DaoSession mDaoSession &#x3D; mDaoMaster.newSession();&#x2F;&#x2F;同步操作时，需要使用DaoSession</span><br><span class=\"line\">AsyncSession mAsyncSession&#x3D; mDaoSession.startAsyncSession();&#x2F;&#x2F;异步处理时，需要使用AsyncSession</span><br></pre></td></tr></table></figure>\n<p>查询数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;直接查询全部</span><br><span class=\"line\">UnitDao unitDao &#x3D; GreenDaoHelper.getDaoSession().getUnitDao();</span><br><span class=\"line\">        unitDao.loadAll();</span><br><span class=\"line\">&#x2F;&#x2F;根据条件查询</span><br><span class=\"line\">UnitDao unitDao &#x3D; mDaoSession .getUnitDao();</span><br><span class=\"line\">        WhereCondition eq &#x3D; unitDao.Properties.Id.eq(1);</span><br><span class=\"line\">        WhereCondition eq5 &#x3D; unitDao.Properties.BookId.eq(1);</span><br><span class=\"line\">        List&lt;Unit&gt; list &#x3D; unitDao.queryBuilder().where(eq1, eq2, eq3, eq4).build().list();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;异步数据查询</span><br><span class=\"line\">StudyWordScoreDao studyWordScoreDao &#x3D; GreenDaoHelper.getDaoSession().getStudyWordScoreDao();</span><br><span class=\"line\">        WhereCondition eq1 &#x3D; StudyWordScoreDao.Properties.BookId.eq(bookId);</span><br><span class=\"line\">        WhereCondition eq2 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(unitId);</span><br><span class=\"line\">        WhereCondition eq3 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(userId);</span><br><span class=\"line\">        WhereCondition eq4 &#x3D; StudyWordScoreDao.Properties.UnitId.eq(recordId);</span><br><span class=\"line\">        Query&lt;StudyWordScore&gt; build &#x3D; studyWordScoreDao.queryBuilder().where(eq1, eq2, eq3, eq4).build();</span><br><span class=\"line\">&#x2F;&#x2F;        WhereCondition and &#x3D; wordDao.queryBuilder().and(eq, eq1);</span><br><span class=\"line\">        asyncSession.queryList(build);</span><br><span class=\"line\">        asyncSession.setListenerMainThread(asyncOperationListener);</span><br></pre></td></tr></table></figure>\n<p>## </p>\n<p>##细节问题</p>\n<h3 id=\"凡是涉及ID的一定要使用Long类型的包装类\"><a href=\"#凡是涉及ID的一定要使用Long类型的包装类\" class=\"headerlink\" title=\"凡是涉及ID的一定要使用Long类型的包装类\"></a>凡是涉及ID的一定要使用Long类型的包装类</h3><p> 凡是涉及ID的一定要使用Long类型的包装类，不然，autoincrement = true会失效，我之前就是这样，插入的数据会直接赋为“0”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;根据官网的方法，说主键赋值为空，主键就会自增，但是编译器不通过，报错，因为初始为0，不是null，所以我就直接不设置主键值，果然就可以了</span><br><span class=\"line\">new Book(null,&quot;必修一&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联实体的类的get-set方法一定要使用-Generate\"><a href=\"#关联实体的类的get-set方法一定要使用-Generate\" class=\"headerlink\" title=\"关联实体的类的get/set方法一定要使用@Generate\"></a>关联实体的类的get/set方法一定要使用@Generate</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;只有使用了Generated，greenDao的插件才会将getset修改成以下代码，如果使用@keep那就保留getset代码，也就没有关联效果了</span><br><span class=\"line\">@Generated(hash &#x3D; 835179934)</span><br><span class=\"line\">    public List&lt;Unit&gt; getUnits() &#123;</span><br><span class=\"line\">        if (units &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            final DaoSession daoSession &#x3D; this.daoSession;</span><br><span class=\"line\">            if (daoSession &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                throw new DaoException(&quot;Entity is detached from DAO context&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            UnitDao targetDao &#x3D; daoSession.getUnitDao();</span><br><span class=\"line\">            List&lt;Unit&gt; unitsNew &#x3D; targetDao._queryBook_Units(id);</span><br><span class=\"line\">            synchronized (this) &#123;</span><br><span class=\"line\">                if (units &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                    units &#x3D; unitsNew;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return units;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** Resets a to-many relationship, making the next get call to query for a fresh result. *&#x2F;</span><br><span class=\"line\">    @Generated(hash &#x3D; 121816020)</span><br><span class=\"line\">    public synchronized void resetUnits() &#123;</span><br><span class=\"line\">        units &#x3D; null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>暂时只总结部分，后续会继续更新此文章</p>"},{"title":"Javascript之AMD模块化规范","date":"2017-05-10T03:54:39.000Z","_content":"# 参考链接\n[《Javascript模块化编程（二）：AMD规范》——阮一峰](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n# Javascript之AMD模块化规范\n## 说明\n&emsp;&emsp;现今通行的模块化规范有三种AMD、CMD和Commonjs（AMD和CMD是Commonjs衍生出来的模块化，Commonjs应该也是CMD）\n<!-- more -->\n## 服务器环境（CommonJs）\n&emsp;&emsp;2009年，当nodejs被美国程序员Ryan Dah开发出来后，javascript也可以作为服务器端语言，开发服务器功能，但是为了解决服务器端的复杂性，开发Commonjs来使javascript模块化操作。\n\n> 假定有一个数学模块math.js\n```\n var math=require(\"math\");\n```\n\n> 然后就可以调用它模块方法了\n\n```\n var math=require(\"math\");\n math.add(2,3);//得到5\n```\n\n## 浏览器环境（AMD）\n\n```\n var math=require(\"math\");\n math.add(2,3);//得到5\n```\n&emsp;&emsp;上面这段代码是Commonjs的模块化，但是很明显有一个缺点，可以看出需要先加载math这个模块，获取再调用add()，这样可能会浏览器出现卡死的情况，因为同步执行，js没有执行完无法继续加载页面，所以就使用到**异步加载模块**，AMD就是异步加载模块规范，待模块加载完成后，自动回调方法。`require([module], callback);`\n```\n require(['math'],function(math){\n     math.add(2,3);\n });\n```\n> 这样的话，就算模块未加载完成也不会造成页面假死\n\n> 目前使用AMD规范是流行库，require.js和curl.js，异步模块化益于浏览器端\n","source":"_posts/Javascript之AMD模块化规范.md","raw":"---\ntitle: Javascript之AMD模块化规范\ndate: 2017-05-10 11:54:39\ncategories:\n  - javascript\n  - 模块化\ntags:\n  - javascript模块化\n---\n# 参考链接\n[《Javascript模块化编程（二）：AMD规范》——阮一峰](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n# Javascript之AMD模块化规范\n## 说明\n&emsp;&emsp;现今通行的模块化规范有三种AMD、CMD和Commonjs（AMD和CMD是Commonjs衍生出来的模块化，Commonjs应该也是CMD）\n<!-- more -->\n## 服务器环境（CommonJs）\n&emsp;&emsp;2009年，当nodejs被美国程序员Ryan Dah开发出来后，javascript也可以作为服务器端语言，开发服务器功能，但是为了解决服务器端的复杂性，开发Commonjs来使javascript模块化操作。\n\n> 假定有一个数学模块math.js\n```\n var math=require(\"math\");\n```\n\n> 然后就可以调用它模块方法了\n\n```\n var math=require(\"math\");\n math.add(2,3);//得到5\n```\n\n## 浏览器环境（AMD）\n\n```\n var math=require(\"math\");\n math.add(2,3);//得到5\n```\n&emsp;&emsp;上面这段代码是Commonjs的模块化，但是很明显有一个缺点，可以看出需要先加载math这个模块，获取再调用add()，这样可能会浏览器出现卡死的情况，因为同步执行，js没有执行完无法继续加载页面，所以就使用到**异步加载模块**，AMD就是异步加载模块规范，待模块加载完成后，自动回调方法。`require([module], callback);`\n```\n require(['math'],function(math){\n     math.add(2,3);\n });\n```\n> 这样的话，就算模块未加载完成也不会造成页面假死\n\n> 目前使用AMD规范是流行库，require.js和curl.js，异步模块化益于浏览器端\n","slug":"Javascript之AMD模块化规范","published":1,"updated":"2019-05-05T09:43:38.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncie10006y8us1zydsc43","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"noopener\">《Javascript模块化编程（二）：AMD规范》——阮一峰</a></p>\n<h1 id=\"Javascript之AMD模块化规范\"><a href=\"#Javascript之AMD模块化规范\" class=\"headerlink\" title=\"Javascript之AMD模块化规范\"></a>Javascript之AMD模块化规范</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;现今通行的模块化规范有三种AMD、CMD和Commonjs（AMD和CMD是Commonjs衍生出来的模块化，Commonjs应该也是CMD）<br><a id=\"more\"></a></p>\n<h2 id=\"服务器环境（CommonJs）\"><a href=\"#服务器环境（CommonJs）\" class=\"headerlink\" title=\"服务器环境（CommonJs）\"></a>服务器环境（CommonJs）</h2><p>&emsp;&emsp;2009年，当nodejs被美国程序员Ryan Dah开发出来后，javascript也可以作为服务器端语言，开发服务器功能，但是为了解决服务器端的复杂性，开发Commonjs来使javascript模块化操作。</p>\n<blockquote>\n<p>假定有一个数学模块math.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以调用它模块方法了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br><span class=\"line\">math.add(2,3);&#x2F;&#x2F;得到5</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器环境（AMD）\"><a href=\"#浏览器环境（AMD）\" class=\"headerlink\" title=\"浏览器环境（AMD）\"></a>浏览器环境（AMD）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br><span class=\"line\">math.add(2,3);&#x2F;&#x2F;得到5</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面这段代码是Commonjs的模块化，但是很明显有一个缺点，可以看出需要先加载math这个模块，获取再调用add()，这样可能会浏览器出现卡死的情况，因为同步执行，js没有执行完无法继续加载页面，所以就使用到<strong>异步加载模块</strong>，AMD就是异步加载模块规范，待模块加载完成后，自动回调方法。<code>require([module], callback);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&#39;math&#39;],function(math)&#123;</span><br><span class=\"line\">    math.add(2,3);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样的话，就算模块未加载完成也不会造成页面假死</p>\n<p>目前使用AMD规范是流行库，require.js和curl.js，异步模块化益于浏览器端</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"noopener\">《Javascript模块化编程（二）：AMD规范》——阮一峰</a></p>\n<h1 id=\"Javascript之AMD模块化规范\"><a href=\"#Javascript之AMD模块化规范\" class=\"headerlink\" title=\"Javascript之AMD模块化规范\"></a>Javascript之AMD模块化规范</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;现今通行的模块化规范有三种AMD、CMD和Commonjs（AMD和CMD是Commonjs衍生出来的模块化，Commonjs应该也是CMD）<br></p>","more":"<p></p>\n<h2 id=\"服务器环境（CommonJs）\"><a href=\"#服务器环境（CommonJs）\" class=\"headerlink\" title=\"服务器环境（CommonJs）\"></a>服务器环境（CommonJs）</h2><p>&emsp;&emsp;2009年，当nodejs被美国程序员Ryan Dah开发出来后，javascript也可以作为服务器端语言，开发服务器功能，但是为了解决服务器端的复杂性，开发Commonjs来使javascript模块化操作。</p>\n<blockquote>\n<p>假定有一个数学模块math.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以调用它模块方法了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br><span class=\"line\">math.add(2,3);&#x2F;&#x2F;得到5</span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览器环境（AMD）\"><a href=\"#浏览器环境（AMD）\" class=\"headerlink\" title=\"浏览器环境（AMD）\"></a>浏览器环境（AMD）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math&#x3D;require(&quot;math&quot;);</span><br><span class=\"line\">math.add(2,3);&#x2F;&#x2F;得到5</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面这段代码是Commonjs的模块化，但是很明显有一个缺点，可以看出需要先加载math这个模块，获取再调用add()，这样可能会浏览器出现卡死的情况，因为同步执行，js没有执行完无法继续加载页面，所以就使用到<strong>异步加载模块</strong>，AMD就是异步加载模块规范，待模块加载完成后，自动回调方法。<code>require([module], callback);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&#39;math&#39;],function(math)&#123;</span><br><span class=\"line\">    math.add(2,3);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样的话，就算模块未加载完成也不会造成页面假死</p>\n<p>目前使用AMD规范是流行库，require.js和curl.js，异步模块化益于浏览器端</p>\n</blockquote>"},{"title":"TCP协议中的三次握手和四次挥手","date":"2017-05-11T14:12:08.000Z","_content":"# 参考链接\n[《TCP协议中的三次握手和四次挥手(图解)》——whuslei](http://blog.csdn.net/whuslei/article/details/6667471/)\n# TCP协议中的三次握手和四次挥手\n\n## 图解\n![TCP协议中的三次握手和四次挥手图解](TCP协议中的三次握手和四次挥手/1.gif)\n<!-- more -->\n## 建立连接（三次握手）\n> 三次握手分别是以下三个过程\n1. client发送**YSN连接请求报文**\n2. server接收到请求报文后向client发送**ACK确认报文**，请过程server会为连接分配分配资源。\n3. client收到ACK报文后，也会向server发送**ACK确认报文**，此时TCP连接成功。\n\n![TCP协议中的三次握手图解](TCP协议中的三次握手和四次挥手/2.png)\n## 断开连接（四次挥手）\n> 四次挥手分别是以下四个过程\n1. client发送断开连接的**FIN请求报文**，server接收到FIN请求报文\n2. 如果server正在发送的数据还没有发送完毕，会**向client发送ACK报文，表示client需要继续接收未发送完的数据**，client接收到ACK报文，继续接收数据\n3. server数据发送完毕，**向client发送FIN报文，表示准备关闭连接**，client接收到报文。\n4. client也会**向server发送ACK报文**，表示可以关闭连接了，server接收到报文，关闭连接。\n\n![image](TCP协议中的三次握手和四次挥手/3.gif)\n\n## 为什么是三次握手？两次不行吗\n&emsp;&emsp;这是为了防止接收到“已失效的连接请求报文”，可能是网络延误，假设为两次握手，server一接收到“失效的连接请求报文”，就向client发送ACK报文，server开始分配资源，一直在等待client的数据，但是client在此阶段并没有连接server的需求，自然没有数据发送；这种是不安全的也是极为浪费server资源的。\n> 三次握手是最优也最安全的三个过程","source":"_posts/TCP协议中的三次握手和四次挥手.md","raw":"---\ntitle: TCP协议中的三次握手和四次挥手\ndate: 2017-05-11 22:12:08\ncategories:\n  - TCP/IP\n  - TCP\ntags:\n  - TCP\n---\n# 参考链接\n[《TCP协议中的三次握手和四次挥手(图解)》——whuslei](http://blog.csdn.net/whuslei/article/details/6667471/)\n# TCP协议中的三次握手和四次挥手\n\n## 图解\n![TCP协议中的三次握手和四次挥手图解](TCP协议中的三次握手和四次挥手/1.gif)\n<!-- more -->\n## 建立连接（三次握手）\n> 三次握手分别是以下三个过程\n1. client发送**YSN连接请求报文**\n2. server接收到请求报文后向client发送**ACK确认报文**，请过程server会为连接分配分配资源。\n3. client收到ACK报文后，也会向server发送**ACK确认报文**，此时TCP连接成功。\n\n![TCP协议中的三次握手图解](TCP协议中的三次握手和四次挥手/2.png)\n## 断开连接（四次挥手）\n> 四次挥手分别是以下四个过程\n1. client发送断开连接的**FIN请求报文**，server接收到FIN请求报文\n2. 如果server正在发送的数据还没有发送完毕，会**向client发送ACK报文，表示client需要继续接收未发送完的数据**，client接收到ACK报文，继续接收数据\n3. server数据发送完毕，**向client发送FIN报文，表示准备关闭连接**，client接收到报文。\n4. client也会**向server发送ACK报文**，表示可以关闭连接了，server接收到报文，关闭连接。\n\n![image](TCP协议中的三次握手和四次挥手/3.gif)\n\n## 为什么是三次握手？两次不行吗\n&emsp;&emsp;这是为了防止接收到“已失效的连接请求报文”，可能是网络延误，假设为两次握手，server一接收到“失效的连接请求报文”，就向client发送ACK报文，server开始分配资源，一直在等待client的数据，但是client在此阶段并没有连接server的需求，自然没有数据发送；这种是不安全的也是极为浪费server资源的。\n> 三次握手是最优也最安全的三个过程","slug":"TCP协议中的三次握手和四次挥手","published":1,"updated":"2019-05-05T09:43:38.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncie30008y8us30z3j4n0","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/whuslei/article/details/6667471/\" target=\"_blank\" rel=\"noopener\">《TCP协议中的三次握手和四次挥手(图解)》——whuslei</a></p>\n<h1 id=\"TCP协议中的三次握手和四次挥手\"><a href=\"#TCP协议中的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP协议中的三次握手和四次挥手\"></a>TCP协议中的三次握手和四次挥手</h1><h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/1.gif\" alt=\"TCP协议中的三次握手和四次挥手图解\"><br><a id=\"more\"></a></p>\n<h2 id=\"建立连接（三次握手）\"><a href=\"#建立连接（三次握手）\" class=\"headerlink\" title=\"建立连接（三次握手）\"></a>建立连接（三次握手）</h2><blockquote>\n<p>三次握手分别是以下三个过程</p>\n<ol>\n<li>client发送<strong>YSN连接请求报文</strong></li>\n<li>server接收到请求报文后向client发送<strong>ACK确认报文</strong>，请过程server会为连接分配分配资源。</li>\n<li>client收到ACK报文后，也会向server发送<strong>ACK确认报文</strong>，此时TCP连接成功。</li>\n</ol>\n</blockquote>\n<p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/2.png\" alt=\"TCP协议中的三次握手图解\"></p>\n<h2 id=\"断开连接（四次挥手）\"><a href=\"#断开连接（四次挥手）\" class=\"headerlink\" title=\"断开连接（四次挥手）\"></a>断开连接（四次挥手）</h2><blockquote>\n<p>四次挥手分别是以下四个过程</p>\n<ol>\n<li>client发送断开连接的<strong>FIN请求报文</strong>，server接收到FIN请求报文</li>\n<li>如果server正在发送的数据还没有发送完毕，会<strong>向client发送ACK报文，表示client需要继续接收未发送完的数据</strong>，client接收到ACK报文，继续接收数据</li>\n<li>server数据发送完毕，<strong>向client发送FIN报文，表示准备关闭连接</strong>，client接收到报文。</li>\n<li>client也会<strong>向server发送ACK报文</strong>，表示可以关闭连接了，server接收到报文，关闭连接。</li>\n</ol>\n</blockquote>\n<p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/3.gif\" alt=\"image\"></p>\n<h2 id=\"为什么是三次握手？两次不行吗\"><a href=\"#为什么是三次握手？两次不行吗\" class=\"headerlink\" title=\"为什么是三次握手？两次不行吗\"></a>为什么是三次握手？两次不行吗</h2><p>&emsp;&emsp;这是为了防止接收到“已失效的连接请求报文”，可能是网络延误，假设为两次握手，server一接收到“失效的连接请求报文”，就向client发送ACK报文，server开始分配资源，一直在等待client的数据，但是client在此阶段并没有连接server的需求，自然没有数据发送；这种是不安全的也是极为浪费server资源的。</p>\n<blockquote>\n<p>三次握手是最优也最安全的三个过程</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/whuslei/article/details/6667471/\" target=\"_blank\" rel=\"noopener\">《TCP协议中的三次握手和四次挥手(图解)》——whuslei</a></p>\n<h1 id=\"TCP协议中的三次握手和四次挥手\"><a href=\"#TCP协议中的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP协议中的三次握手和四次挥手\"></a>TCP协议中的三次握手和四次挥手</h1><h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/1.gif\" alt=\"TCP协议中的三次握手和四次挥手图解\"><br></p>","more":"<p></p>\n<h2 id=\"建立连接（三次握手）\"><a href=\"#建立连接（三次握手）\" class=\"headerlink\" title=\"建立连接（三次握手）\"></a>建立连接（三次握手）</h2><blockquote>\n<p>三次握手分别是以下三个过程</p>\n<ol>\n<li>client发送<strong>YSN连接请求报文</strong></li>\n<li>server接收到请求报文后向client发送<strong>ACK确认报文</strong>，请过程server会为连接分配分配资源。</li>\n<li>client收到ACK报文后，也会向server发送<strong>ACK确认报文</strong>，此时TCP连接成功。</li>\n</ol>\n</blockquote>\n<p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/2.png\" alt=\"TCP协议中的三次握手图解\"></p>\n<h2 id=\"断开连接（四次挥手）\"><a href=\"#断开连接（四次挥手）\" class=\"headerlink\" title=\"断开连接（四次挥手）\"></a>断开连接（四次挥手）</h2><blockquote>\n<p>四次挥手分别是以下四个过程</p>\n<ol>\n<li>client发送断开连接的<strong>FIN请求报文</strong>，server接收到FIN请求报文</li>\n<li>如果server正在发送的数据还没有发送完毕，会<strong>向client发送ACK报文，表示client需要继续接收未发送完的数据</strong>，client接收到ACK报文，继续接收数据</li>\n<li>server数据发送完毕，<strong>向client发送FIN报文，表示准备关闭连接</strong>，client接收到报文。</li>\n<li>client也会<strong>向server发送ACK报文</strong>，表示可以关闭连接了，server接收到报文，关闭连接。</li>\n</ol>\n</blockquote>\n<p><img src=\"/2017/05/11/TCP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/3.gif\" alt=\"image\"></p>\n<h2 id=\"为什么是三次握手？两次不行吗\"><a href=\"#为什么是三次握手？两次不行吗\" class=\"headerlink\" title=\"为什么是三次握手？两次不行吗\"></a>为什么是三次握手？两次不行吗</h2><p>&emsp;&emsp;这是为了防止接收到“已失效的连接请求报文”，可能是网络延误，假设为两次握手，server一接收到“失效的连接请求报文”，就向client发送ACK报文，server开始分配资源，一直在等待client的数据，但是client在此阶段并没有连接server的需求，自然没有数据发送；这种是不安全的也是极为浪费server资源的。</p>\n<blockquote>\n<p>三次握手是最优也最安全的三个过程</p>\n</blockquote>"},{"title":"android Toolbar的使用","date":"2017-02-08T17:53:47.000Z","_content":"# android Toolbar的使用\n## 参考文章\n[ToolBar详解（手把手教程）](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html)\n[stackoverflow-Android toolbar menu is not showing](http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing)\n[actionBar和Toolbar中如何动态隐藏和修改menu上的菜单](http://blog.csdn.net/chenguang79/article/details/48826199)\n## 效果图\n![这里写图片描述](http://img.blog.csdn.net/20170209010427047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n## 配置material design\n请确保有依赖以下三项\n```\n\tcompile 'com.android.support:appcompat-v7:25.1.1'\n    compile 'com.android.support:support-v4:25.1.1'\n    compile 'com.android.support:design:25.1.1'\n```\n## 去除原有的actionBar\n\n```\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n        <!--增加以下三行，为app去除原有actionBar-->\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"windowNoTitle\">true</item>\n    </style>\n```\n\n## toolbar代码\nres\\layout\\toolbar.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--colorPrimary是主题使用的颜色，可以value/color.xml中修改-->\n<!--actionBarSize是系统actionBar的高度-->\n<android.support.v7.widget.Toolbar\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"?attr/actionBarSize\"\n    android:background=\"?attr/colorPrimary\"\n    app:menu=\"@menu/menu_toolbar\"\n    >\n\n</android.support.v7.widget.Toolbar>\n```\n一般来说toolbar会应用多个activity，所以我单独作为一个xml来使用，\n在activity.xml中只需使用include标签，方便使用\n\n```\n\t<include\n        android:id=\"@+id/toolbar\"\n        layout=\"@layout/toolbar\"\n        />\n```\n## 编写menu/menu_toolbar.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <!--showAsAction如果有足够的空间会显示出来，否则隐藏在工具栏里面-->\n    <item\n        android:id=\"@+id/search\"\n        android:icon=\"@mipmap/search\"\n        android:title=\"搜索\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n    <item\n        android:id=\"@+id/write\"\n        android:icon=\"@mipmap/write\"\n        android:title=\"书写\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n    <item\n        android:id=\"@+id/book\"\n        android:icon=\"@mipmap/book\"\n        android:title=\"书籍\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n</menu>\n```\n\n## java注意setSupportActionBar和onPrepareOptionsMenu\nsrc\\MainActivity.java\n```\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        final TextView hello= (TextView) findViewById(R.id.hello);\n        Toolbar toolbar= (Toolbar) findViewById(R.id.toolbar);\n        //配置代替actionBar\n        setSupportActionBar(toolbar);\n        //设置图标\n        toolbar.setLogo(getResources().getDrawable(R.mipmap.ic_launcher));\n        toolbar.setNavigationIcon(R.mipmap.ic_launcher);\n        toolbar.setTitle(\"setTitle主标题\");\n        toolbar.setSubtitle(\"setSubtitle副标题\");\n        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem item) {\n                switch (item.getItemId()){\n                    case R.id.search:\n                        hello.setText(\"您点击了搜索\");\n                        break;\n                    case R.id.write:\n                        hello.setText(\"您点击了书写\");\n                        break;\n                    case R.id.book:\n                        hello.setText(\"您点击了书籍\");\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_toolbar,menu);\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n## 遇见的问题\n### menu没有展示\n出现我第一时间考虑，没有使用menu属性配置。\n很显然我是有的\n\n```\n<android.support.v7.widget.Toolbar\n……\napp:menu=\"@menu/menu_toolbar\"\n>\n</android.support.v7.widget.Toolbar>\n```\n\n[stackoverflow-Android toolbar menu is not showing](http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing)\n我在参考了stackoverflow的问题，之后发现是我没有使用\nonPrepareOptionsMenu()\n\n```\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_toolbar,menu);\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n后来，我尝试保留onPrepareOptionsMenu()，把setSupportActionBar()去掉，发现menu同样也会消失不见。\n我由此估计，menu是actionbar才有的功能，toolbar只是调用了actionbar功能的部分方法。\n\n所以，才有先用setSupportActionBar()替换actionbar\n再onPrepareOptionsMenu();创建menu\n### onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\nonCreateOptionsMenu():创建菜单，但是从初始开始就只运行一次，所以activity实例化后，无法修改菜单内容\nonOptionsItemSelected():对选中的菜单进行操作\nonPrepareOptionsMenu()：创建菜单，activity初始化后仍会调用此方法，所以可在方法编写activity初始化后的功能\n","source":"_posts/android-Toolbar的使用.md","raw":"---\ntitle: android Toolbar的使用\ndate: 2017-02-09 01:53:47\ncategories:\n  - android\n  - Material Design\ntags:\n  - android\n  - Material Design\n---\n# android Toolbar的使用\n## 参考文章\n[ToolBar详解（手把手教程）](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html)\n[stackoverflow-Android toolbar menu is not showing](http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing)\n[actionBar和Toolbar中如何动态隐藏和修改menu上的菜单](http://blog.csdn.net/chenguang79/article/details/48826199)\n## 效果图\n![这里写图片描述](http://img.blog.csdn.net/20170209010427047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n## 配置material design\n请确保有依赖以下三项\n```\n\tcompile 'com.android.support:appcompat-v7:25.1.1'\n    compile 'com.android.support:support-v4:25.1.1'\n    compile 'com.android.support:design:25.1.1'\n```\n## 去除原有的actionBar\n\n```\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n        <!--增加以下三行，为app去除原有actionBar-->\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"windowNoTitle\">true</item>\n    </style>\n```\n\n## toolbar代码\nres\\layout\\toolbar.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--colorPrimary是主题使用的颜色，可以value/color.xml中修改-->\n<!--actionBarSize是系统actionBar的高度-->\n<android.support.v7.widget.Toolbar\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"?attr/actionBarSize\"\n    android:background=\"?attr/colorPrimary\"\n    app:menu=\"@menu/menu_toolbar\"\n    >\n\n</android.support.v7.widget.Toolbar>\n```\n一般来说toolbar会应用多个activity，所以我单独作为一个xml来使用，\n在activity.xml中只需使用include标签，方便使用\n\n```\n\t<include\n        android:id=\"@+id/toolbar\"\n        layout=\"@layout/toolbar\"\n        />\n```\n## 编写menu/menu_toolbar.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <!--showAsAction如果有足够的空间会显示出来，否则隐藏在工具栏里面-->\n    <item\n        android:id=\"@+id/search\"\n        android:icon=\"@mipmap/search\"\n        android:title=\"搜索\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n    <item\n        android:id=\"@+id/write\"\n        android:icon=\"@mipmap/write\"\n        android:title=\"书写\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n    <item\n        android:id=\"@+id/book\"\n        android:icon=\"@mipmap/book\"\n        android:title=\"书籍\"\n        app:showAsAction=\"ifRoom\"\n        >\n    </item>\n</menu>\n```\n\n## java注意setSupportActionBar和onPrepareOptionsMenu\nsrc\\MainActivity.java\n```\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        final TextView hello= (TextView) findViewById(R.id.hello);\n        Toolbar toolbar= (Toolbar) findViewById(R.id.toolbar);\n        //配置代替actionBar\n        setSupportActionBar(toolbar);\n        //设置图标\n        toolbar.setLogo(getResources().getDrawable(R.mipmap.ic_launcher));\n        toolbar.setNavigationIcon(R.mipmap.ic_launcher);\n        toolbar.setTitle(\"setTitle主标题\");\n        toolbar.setSubtitle(\"setSubtitle副标题\");\n        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemClick(MenuItem item) {\n                switch (item.getItemId()){\n                    case R.id.search:\n                        hello.setText(\"您点击了搜索\");\n                        break;\n                    case R.id.write:\n                        hello.setText(\"您点击了书写\");\n                        break;\n                    case R.id.book:\n                        hello.setText(\"您点击了书籍\");\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_toolbar,menu);\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n## 遇见的问题\n### menu没有展示\n出现我第一时间考虑，没有使用menu属性配置。\n很显然我是有的\n\n```\n<android.support.v7.widget.Toolbar\n……\napp:menu=\"@menu/menu_toolbar\"\n>\n</android.support.v7.widget.Toolbar>\n```\n\n[stackoverflow-Android toolbar menu is not showing](http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing)\n我在参考了stackoverflow的问题，之后发现是我没有使用\nonPrepareOptionsMenu()\n\n```\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_toolbar,menu);\n        return super.onPrepareOptionsMenu(menu);\n    }\n```\n后来，我尝试保留onPrepareOptionsMenu()，把setSupportActionBar()去掉，发现menu同样也会消失不见。\n我由此估计，menu是actionbar才有的功能，toolbar只是调用了actionbar功能的部分方法。\n\n所以，才有先用setSupportActionBar()替换actionbar\n再onPrepareOptionsMenu();创建menu\n### onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\nonCreateOptionsMenu():创建菜单，但是从初始开始就只运行一次，所以activity实例化后，无法修改菜单内容\nonOptionsItemSelected():对选中的菜单进行操作\nonPrepareOptionsMenu()：创建菜单，activity初始化后仍会调用此方法，所以可在方法编写activity初始化后的功能\n","slug":"android-Toolbar的使用","published":1,"updated":"2019-05-05T09:43:38.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncie7000cy8us0wnvpfpp","content":"<h1 id=\"android-Toolbar的使用\"><a href=\"#android-Toolbar的使用\" class=\"headerlink\" title=\"android Toolbar的使用\"></a>android Toolbar的使用</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html\" target=\"_blank\" rel=\"noopener\">ToolBar详解（手把手教程）</a><br><a href=\"http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing\" target=\"_blank\" rel=\"noopener\">stackoverflow-Android toolbar menu is not showing</a><br><a href=\"http://blog.csdn.net/chenguang79/article/details/48826199\" target=\"_blank\" rel=\"noopener\">actionBar和Toolbar中如何动态隐藏和修改menu上的菜单</a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"http://img.blog.csdn.net/20170209010427047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><a id=\"more\"></a></p>\n<h2 id=\"配置material-design\"><a href=\"#配置material-design\" class=\"headerlink\" title=\"配置material design\"></a>配置material design</h2><p>请确保有依赖以下三项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.support:appcompat-v7:25.1.1&#39;</span><br><span class=\"line\">   compile &#39;com.android.support:support-v4:25.1.1&#39;</span><br><span class=\"line\">   compile &#39;com.android.support:design:25.1.1&#39;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除原有的actionBar\"><a href=\"#去除原有的actionBar\" class=\"headerlink\" title=\"去除原有的actionBar\"></a>去除原有的actionBar</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\">    &lt;!-- Customize your theme here. --&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;!--增加以下三行，为app去除原有actionBar--&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;android:windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"toolbar代码\"><a href=\"#toolbar代码\" class=\"headerlink\" title=\"toolbar代码\"></a>toolbar代码</h2><p>res\\layout\\toolbar.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--colorPrimary是主题使用的颜色，可以value&#x2F;color.xml中修改--&gt;</span><br><span class=\"line\">&lt;!--actionBarSize是系统actionBar的高度--&gt;</span><br><span class=\"line\">&lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">    android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">    app:menu&#x3D;&quot;@menu&#x2F;menu_toolbar&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure><br>一般来说toolbar会应用多个activity，所以我单独作为一个xml来使用，<br>在activity.xml中只需使用include标签，方便使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include</span><br><span class=\"line\">       android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">       layout&#x3D;&quot;@layout&#x2F;toolbar&quot;</span><br><span class=\"line\">       &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写menu-menu-toolbar-xml\"><a href=\"#编写menu-menu-toolbar-xml\" class=\"headerlink\" title=\"编写menu/menu_toolbar.xml\"></a>编写menu/menu_toolbar.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;!--showAsAction如果有足够的空间会显示出来，否则隐藏在工具栏里面--&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;search&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;search&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;搜索&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;write&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;write&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;书写&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;book&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;book&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;书籍&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java注意setSupportActionBar和onPrepareOptionsMenu\"><a href=\"#java注意setSupportActionBar和onPrepareOptionsMenu\" class=\"headerlink\" title=\"java注意setSupportActionBar和onPrepareOptionsMenu\"></a>java注意setSupportActionBar和onPrepareOptionsMenu</h2><p>src\\MainActivity.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        final TextView hello&#x3D; (TextView) findViewById(R.id.hello);</span><br><span class=\"line\">        Toolbar toolbar&#x3D; (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        &#x2F;&#x2F;配置代替actionBar</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        &#x2F;&#x2F;设置图标</span><br><span class=\"line\">        toolbar.setLogo(getResources().getDrawable(R.mipmap.ic_launcher));</span><br><span class=\"line\">        toolbar.setNavigationIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">        toolbar.setTitle(&quot;setTitle主标题&quot;);</span><br><span class=\"line\">        toolbar.setSubtitle(&quot;setSubtitle副标题&quot;);</span><br><span class=\"line\">        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onMenuItemClick(MenuItem item) &#123;</span><br><span class=\"line\">                switch (item.getItemId())&#123;</span><br><span class=\"line\">                    case R.id.search:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了搜索&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.write:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了书写&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.book:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了书籍&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onPrepareOptionsMenu(Menu menu) &#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.menu_toolbar,menu);</span><br><span class=\"line\">        return super.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"遇见的问题\"><a href=\"#遇见的问题\" class=\"headerlink\" title=\"遇见的问题\"></a>遇见的问题</h2><h3 id=\"menu没有展示\"><a href=\"#menu没有展示\" class=\"headerlink\" title=\"menu没有展示\"></a>menu没有展示</h3><p>出现我第一时间考虑，没有使用menu属性配置。<br>很显然我是有的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">……</span><br><span class=\"line\">app:menu&#x3D;&quot;@menu&#x2F;menu_toolbar&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing\" target=\"_blank\" rel=\"noopener\">stackoverflow-Android toolbar menu is not showing</a><br>我在参考了stackoverflow的问题，之后发现是我没有使用<br>onPrepareOptionsMenu()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public boolean onPrepareOptionsMenu(Menu menu) &#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.menu_toolbar,menu);</span><br><span class=\"line\">    return super.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后来，我尝试保留onPrepareOptionsMenu()，把setSupportActionBar()去掉，发现menu同样也会消失不见。<br>我由此估计，menu是actionbar才有的功能，toolbar只是调用了actionbar功能的部分方法。</p>\n<p>所以，才有先用setSupportActionBar()替换actionbar<br>再onPrepareOptionsMenu();创建menu</p>\n<h3 id=\"onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\"><a href=\"#onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\" class=\"headerlink\" title=\"onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\"></a>onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系</h3><p>onCreateOptionsMenu():创建菜单，但是从初始开始就只运行一次，所以activity实例化后，无法修改菜单内容<br>onOptionsItemSelected():对选中的菜单进行操作<br>onPrepareOptionsMenu()：创建菜单，activity初始化后仍会调用此方法，所以可在方法编写activity初始化后的功能</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"android-Toolbar的使用\"><a href=\"#android-Toolbar的使用\" class=\"headerlink\" title=\"android Toolbar的使用\"></a>android Toolbar的使用</h1><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html\" target=\"_blank\" rel=\"noopener\">ToolBar详解（手把手教程）</a><br><a href=\"http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing\" target=\"_blank\" rel=\"noopener\">stackoverflow-Android toolbar menu is not showing</a><br><a href=\"http://blog.csdn.net/chenguang79/article/details/48826199\" target=\"_blank\" rel=\"noopener\">actionBar和Toolbar中如何动态隐藏和修改menu上的菜单</a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"http://img.blog.csdn.net/20170209010427047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></p>","more":"<p></p>\n<h2 id=\"配置material-design\"><a href=\"#配置material-design\" class=\"headerlink\" title=\"配置material design\"></a>配置material design</h2><p>请确保有依赖以下三项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.support:appcompat-v7:25.1.1&#39;</span><br><span class=\"line\">   compile &#39;com.android.support:support-v4:25.1.1&#39;</span><br><span class=\"line\">   compile &#39;com.android.support:design:25.1.1&#39;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"去除原有的actionBar\"><a href=\"#去除原有的actionBar\" class=\"headerlink\" title=\"去除原有的actionBar\"></a>去除原有的actionBar</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\">    &lt;!-- Customize your theme here. --&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;!--增加以下三行，为app去除原有actionBar--&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowActionBar&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;android:windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item name&#x3D;&quot;windowNoTitle&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"toolbar代码\"><a href=\"#toolbar代码\" class=\"headerlink\" title=\"toolbar代码\"></a>toolbar代码</h2><p>res\\layout\\toolbar.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!--colorPrimary是主题使用的颜色，可以value&#x2F;color.xml中修改--&gt;</span><br><span class=\"line\">&lt;!--actionBarSize是系统actionBar的高度--&gt;</span><br><span class=\"line\">&lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">    android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">    app:menu&#x3D;&quot;@menu&#x2F;menu_toolbar&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure><br>一般来说toolbar会应用多个activity，所以我单独作为一个xml来使用，<br>在activity.xml中只需使用include标签，方便使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include</span><br><span class=\"line\">       android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">       layout&#x3D;&quot;@layout&#x2F;toolbar&quot;</span><br><span class=\"line\">       &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写menu-menu-toolbar-xml\"><a href=\"#编写menu-menu-toolbar-xml\" class=\"headerlink\" title=\"编写menu/menu_toolbar.xml\"></a>编写menu/menu_toolbar.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;!--showAsAction如果有足够的空间会显示出来，否则隐藏在工具栏里面--&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;search&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;search&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;搜索&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;write&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;write&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;书写&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">    &lt;item</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;book&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;book&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;书籍&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;&#x2F;item&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java注意setSupportActionBar和onPrepareOptionsMenu\"><a href=\"#java注意setSupportActionBar和onPrepareOptionsMenu\" class=\"headerlink\" title=\"java注意setSupportActionBar和onPrepareOptionsMenu\"></a>java注意setSupportActionBar和onPrepareOptionsMenu</h2><p>src\\MainActivity.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        final TextView hello&#x3D; (TextView) findViewById(R.id.hello);</span><br><span class=\"line\">        Toolbar toolbar&#x3D; (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        &#x2F;&#x2F;配置代替actionBar</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        &#x2F;&#x2F;设置图标</span><br><span class=\"line\">        toolbar.setLogo(getResources().getDrawable(R.mipmap.ic_launcher));</span><br><span class=\"line\">        toolbar.setNavigationIcon(R.mipmap.ic_launcher);</span><br><span class=\"line\">        toolbar.setTitle(&quot;setTitle主标题&quot;);</span><br><span class=\"line\">        toolbar.setSubtitle(&quot;setSubtitle副标题&quot;);</span><br><span class=\"line\">        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onMenuItemClick(MenuItem item) &#123;</span><br><span class=\"line\">                switch (item.getItemId())&#123;</span><br><span class=\"line\">                    case R.id.search:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了搜索&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.write:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了书写&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.book:</span><br><span class=\"line\">                        hello.setText(&quot;您点击了书籍&quot;);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onPrepareOptionsMenu(Menu menu) &#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.menu_toolbar,menu);</span><br><span class=\"line\">        return super.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"遇见的问题\"><a href=\"#遇见的问题\" class=\"headerlink\" title=\"遇见的问题\"></a>遇见的问题</h2><h3 id=\"menu没有展示\"><a href=\"#menu没有展示\" class=\"headerlink\" title=\"menu没有展示\"></a>menu没有展示</h3><p>出现我第一时间考虑，没有使用menu属性配置。<br>很显然我是有的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">……</span><br><span class=\"line\">app:menu&#x3D;&quot;@menu&#x2F;menu_toolbar&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://stackoverflow.com/questions/28317905/android-toolbar-menu-is-not-showing\" target=\"_blank\" rel=\"noopener\">stackoverflow-Android toolbar menu is not showing</a><br>我在参考了stackoverflow的问题，之后发现是我没有使用<br>onPrepareOptionsMenu()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public boolean onPrepareOptionsMenu(Menu menu) &#123;</span><br><span class=\"line\">    getMenuInflater().inflate(R.menu.menu_toolbar,menu);</span><br><span class=\"line\">    return super.onPrepareOptionsMenu(menu);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后来，我尝试保留onPrepareOptionsMenu()，把setSupportActionBar()去掉，发现menu同样也会消失不见。<br>我由此估计，menu是actionbar才有的功能，toolbar只是调用了actionbar功能的部分方法。</p>\n<p>所以，才有先用setSupportActionBar()替换actionbar<br>再onPrepareOptionsMenu();创建menu</p>\n<h3 id=\"onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\"><a href=\"#onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\" class=\"headerlink\" title=\"onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系\"></a>onPrepareOptionsMenu与onCreateOptionsMenu与onOptionsItemSelected的关系</h3><p>onCreateOptionsMenu():创建菜单，但是从初始开始就只运行一次，所以activity实例化后，无法修改菜单内容<br>onOptionsItemSelected():对选中的菜单进行操作<br>onPrepareOptionsMenu()：创建菜单，activity初始化后仍会调用此方法，所以可在方法编写activity初始化后的功能</p>"},{"title":"android Material Design 底部导航栏","date":"2017-02-07T19:22:38.000Z","_content":"\n# android Material Design 底部导航栏\n## 实现效果\n![这里写图片描述](http://img.blog.csdn.net/20170208030222983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n## 配置gradle依赖\n\n```\ncompile 'com.android.support:appcompat-v7:25.1.0'\n//注意：V4包一定要加，material design是依赖V4包的\n//不加，某些类可能报“ClassNotFoundException”\ncompile 'com.android.support:support-v4:25.1.0'\ncompile 'com.android.support:design:25.1.0'\n```\n## 使用BottomNavigationView\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.kangda.app.MainActivity\">\n    <!--一定要加入V4包和Material Design包的依赖-->\n    <!--itemIconTint设置图标的颜色-->\n    <!--itemTextColor设置文本标题的颜色-->\n    <android.support.design.widget.BottomNavigationView\n        android:id=\"@+id/nav_bottom\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"50dp\"\n        android:layout_alignParentBottom=\"true\"\n        app:itemIconTint=\"#767676\"\n        app:itemTextColor=\"#767676\"\n        app:menu=\"@menu/nav_bottom_item\"\n        > </android.support.design.widget.BottomNavigationView>\n</RelativeLayout>\n\n```\n## res/menu/nav_bottom_item.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <!--showAsAction如果有剩余空间就显示出来，否则隐藏-->\n    <item android:id=\"@+id/menu_pk\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_pk\"\n        android:icon=\"@mipmap/menu_pk\" />\n    <item android:id=\"@+id/menu_home\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_home\"\n        android:icon=\"@mipmap/menu_home_press\" />\n    <item android:id=\"@+id/menu_mine\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_mine\"\n        android:icon=\"@mipmap/menu_mine\" />\n</menu>\n```\n## src/MainActivity.java\n@BindView这注解依赖ButterKnife，这个不必理会\n```\n@BindView(R.id.nav_bottom)\n    protected BottomNavigationView navBottom;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.bind(this);\n        navBottom.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                switch (item.getItemId()){\n                    case R.id.menu_pk:\n                        Toast.makeText(MainActivity.this, \"PK\", Toast.LENGTH_SHORT).show();\n                        break;\n                    case R.id.menu_home:\n                        Toast.makeText(MainActivity.this, \"主页\", Toast.LENGTH_SHORT).show();\n                        break;\n                    case R.id.menu_mine:\n                        Toast.makeText(MainActivity.this, \"我的\", Toast.LENGTH_SHORT).show();\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n```\n\n## 注意\n \n\n> 盲目照抄android官方文档带来的问题\n\n> 以下是官方文档抄过来的，有点问题\n> 问题在这一句代码\n> xmlns:design=\"http://schema.android.com/apk/res/android.support.design\"\n> 正确的代码是\n> xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\n```\nlayout resource file:\n <android.support.design.widget.BottomNavigationView\n     xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     xmlns:design=\"http://schema.android.com/apk/res/android.support.design\"\n     android:id=\"@+id/navigation\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"56dp\"\n     android:layout_gravity=\"start\"\n     design:menu=\"@menu/my_navigation_items\" />\n\n res/menu/my_navigation_items.xml:\n <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <item android:id=\"@+id/action_search\"\n          android:title=\"@string/menu_search\"\n          android:icon=\"@drawable/ic_search\" />\n     <item android:id=\"@+id/action_settings\"\n          android:title=\"@string/menu_settings\"\n          android:icon=\"@drawable/ic_add\" />\n     <item android:id=\"@+id/action_navigation\"\n          android:title=\"@string/menu_navigation\"\n          android:icon=\"@drawable/ic_action_navigation_menu\" />\n </menu>\n```\n这个代码不会报错，但是XML布局预览无任何效果，暂时不知道是什么原因。\n## 问题总结\n> viewpager的滚动监听和bottomNavigationView有关系么，为什么没有viewpager的滚动监听会影响到bottomNavigationView，使bottomNavigationView只有点击事件，没有选中改变按钮颜色呢，难道是viewpager的滚动监听的配置增加了焦点，好像也不对，如果没有焦点，bottomNavigationView也就不能点击","source":"_posts/android-Material-Design-底部导航栏.md","raw":"---\ntitle: android Material Design 底部导航栏\ndate: 2017-02-08 03:22:38\ncategories:\n  - android\n  - Material Design\ntags:\n  - android\n  - Material Design\n---\n\n# android Material Design 底部导航栏\n## 实现效果\n![这里写图片描述](http://img.blog.csdn.net/20170208030222983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n## 配置gradle依赖\n\n```\ncompile 'com.android.support:appcompat-v7:25.1.0'\n//注意：V4包一定要加，material design是依赖V4包的\n//不加，某些类可能报“ClassNotFoundException”\ncompile 'com.android.support:support-v4:25.1.0'\ncompile 'com.android.support:design:25.1.0'\n```\n## 使用BottomNavigationView\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.kangda.app.MainActivity\">\n    <!--一定要加入V4包和Material Design包的依赖-->\n    <!--itemIconTint设置图标的颜色-->\n    <!--itemTextColor设置文本标题的颜色-->\n    <android.support.design.widget.BottomNavigationView\n        android:id=\"@+id/nav_bottom\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"50dp\"\n        android:layout_alignParentBottom=\"true\"\n        app:itemIconTint=\"#767676\"\n        app:itemTextColor=\"#767676\"\n        app:menu=\"@menu/nav_bottom_item\"\n        > </android.support.design.widget.BottomNavigationView>\n</RelativeLayout>\n\n```\n## res/menu/nav_bottom_item.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    >\n    <!--showAsAction如果有剩余空间就显示出来，否则隐藏-->\n    <item android:id=\"@+id/menu_pk\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_pk\"\n        android:icon=\"@mipmap/menu_pk\" />\n    <item android:id=\"@+id/menu_home\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_home\"\n        android:icon=\"@mipmap/menu_home_press\" />\n    <item android:id=\"@+id/menu_mine\"\n        android:enabled=\"true\"\n        app:showAsAction=\"ifRoom\"\n        android:title=\"@string/menu_title_mine\"\n        android:icon=\"@mipmap/menu_mine\" />\n</menu>\n```\n## src/MainActivity.java\n@BindView这注解依赖ButterKnife，这个不必理会\n```\n@BindView(R.id.nav_bottom)\n    protected BottomNavigationView navBottom;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.bind(this);\n        navBottom.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                switch (item.getItemId()){\n                    case R.id.menu_pk:\n                        Toast.makeText(MainActivity.this, \"PK\", Toast.LENGTH_SHORT).show();\n                        break;\n                    case R.id.menu_home:\n                        Toast.makeText(MainActivity.this, \"主页\", Toast.LENGTH_SHORT).show();\n                        break;\n                    case R.id.menu_mine:\n                        Toast.makeText(MainActivity.this, \"我的\", Toast.LENGTH_SHORT).show();\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n```\n\n## 注意\n \n\n> 盲目照抄android官方文档带来的问题\n\n> 以下是官方文档抄过来的，有点问题\n> 问题在这一句代码\n> xmlns:design=\"http://schema.android.com/apk/res/android.support.design\"\n> 正确的代码是\n> xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\n```\nlayout resource file:\n <android.support.design.widget.BottomNavigationView\n     xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     xmlns:design=\"http://schema.android.com/apk/res/android.support.design\"\n     android:id=\"@+id/navigation\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"56dp\"\n     android:layout_gravity=\"start\"\n     design:menu=\"@menu/my_navigation_items\" />\n\n res/menu/my_navigation_items.xml:\n <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n     <item android:id=\"@+id/action_search\"\n          android:title=\"@string/menu_search\"\n          android:icon=\"@drawable/ic_search\" />\n     <item android:id=\"@+id/action_settings\"\n          android:title=\"@string/menu_settings\"\n          android:icon=\"@drawable/ic_add\" />\n     <item android:id=\"@+id/action_navigation\"\n          android:title=\"@string/menu_navigation\"\n          android:icon=\"@drawable/ic_action_navigation_menu\" />\n </menu>\n```\n这个代码不会报错，但是XML布局预览无任何效果，暂时不知道是什么原因。\n## 问题总结\n> viewpager的滚动监听和bottomNavigationView有关系么，为什么没有viewpager的滚动监听会影响到bottomNavigationView，使bottomNavigationView只有点击事件，没有选中改变按钮颜色呢，难道是viewpager的滚动监听的配置增加了焦点，好像也不对，如果没有焦点，bottomNavigationView也就不能点击","slug":"android-Material-Design-底部导航栏","published":1,"updated":"2019-05-05T09:43:38.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncie9000dy8usahx7yarp","content":"<h1 id=\"android-Material-Design-底部导航栏\"><a href=\"#android-Material-Design-底部导航栏\" class=\"headerlink\" title=\"android Material Design 底部导航栏\"></a>android Material Design 底部导航栏</h1><h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p><img src=\"http://img.blog.csdn.net/20170208030222983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><a id=\"more\"></a></p>\n<h2 id=\"配置gradle依赖\"><a href=\"#配置gradle依赖\" class=\"headerlink\" title=\"配置gradle依赖\"></a>配置gradle依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.support:appcompat-v7:25.1.0&#39;</span><br><span class=\"line\">&#x2F;&#x2F;注意：V4包一定要加，material design是依赖V4包的</span><br><span class=\"line\">&#x2F;&#x2F;不加，某些类可能报“ClassNotFoundException”</span><br><span class=\"line\">compile &#39;com.android.support:support-v4:25.1.0&#39;</span><br><span class=\"line\">compile &#39;com.android.support:design:25.1.0&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用BottomNavigationView\"><a href=\"#使用BottomNavigationView\" class=\"headerlink\" title=\"使用BottomNavigationView\"></a>使用BottomNavigationView</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;activity_main&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;com.kangda.app.MainActivity&quot;&gt;</span><br><span class=\"line\">    &lt;!--一定要加入V4包和Material Design包的依赖--&gt;</span><br><span class=\"line\">    &lt;!--itemIconTint设置图标的颜色--&gt;</span><br><span class=\"line\">    &lt;!--itemTextColor设置文本标题的颜色--&gt;</span><br><span class=\"line\">    &lt;android.support.design.widget.BottomNavigationView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;nav_bottom&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;50dp&quot;</span><br><span class=\"line\">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:itemIconTint&#x3D;&quot;#767676&quot;</span><br><span class=\"line\">        app:itemTextColor&#x3D;&quot;#767676&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;nav_bottom_item&quot;</span><br><span class=\"line\">        &gt; &lt;&#x2F;android.support.design.widget.BottomNavigationView&gt;</span><br><span class=\"line\">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"res-menu-nav-bottom-item-xml\"><a href=\"#res-menu-nav-bottom-item-xml\" class=\"headerlink\" title=\"res/menu/nav_bottom_item.xml\"></a>res/menu/nav_bottom_item.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;!--showAsAction如果有剩余空间就显示出来，否则隐藏--&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_pk&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_pk&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_pk&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_home&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_home&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_home_press&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_mine&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_mine&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_mine&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"src-MainActivity-java\"><a href=\"#src-MainActivity-java\" class=\"headerlink\" title=\"src/MainActivity.java\"></a>src/MainActivity.java</h2><p>@BindView这注解依赖ButterKnife，这个不必理会<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@BindView(R.id.nav_bottom)</span><br><span class=\"line\">    protected BottomNavigationView navBottom;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ButterKnife.bind(this);</span><br><span class=\"line\">        navBottom.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123;</span><br><span class=\"line\">                switch (item.getItemId())&#123;</span><br><span class=\"line\">                    case R.id.menu_pk:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;PK&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.menu_home:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;主页&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.menu_mine:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;我的&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>盲目照抄android官方文档带来的问题</p>\n<p>以下是官方文档抄过来的，有点问题<br>问题在这一句代码<br>xmlns:design=”<a href=\"http://schema.android.com/apk/res/android.support.design\" target=\"_blank\" rel=\"noopener\">http://schema.android.com/apk/res/android.support.design</a>“<br>正确的代码是<br>xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto\" target=\"_blank\" rel=\"noopener\">http://schemas.android.com/apk/res-auto</a>“</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout resource file:</span><br><span class=\"line\"> &lt;android.support.design.widget.BottomNavigationView</span><br><span class=\"line\">     xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">     xmlns:design&#x3D;&quot;http:&#x2F;&#x2F;schema.android.com&#x2F;apk&#x2F;res&#x2F;android.support.design&quot;</span><br><span class=\"line\">     android:id&#x3D;&quot;@+id&#x2F;navigation&quot;</span><br><span class=\"line\">     android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">     android:layout_height&#x3D;&quot;56dp&quot;</span><br><span class=\"line\">     android:layout_gravity&#x3D;&quot;start&quot;</span><br><span class=\"line\">     design:menu&#x3D;&quot;@menu&#x2F;my_navigation_items&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> res&#x2F;menu&#x2F;my_navigation_items.xml:</span><br><span class=\"line\"> &lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_search&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_search&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_search&quot; &#x2F;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_settings&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_settings&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_add&quot; &#x2F;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_navigation&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_navigation&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_action_navigation_menu&quot; &#x2F;&gt;</span><br><span class=\"line\"> &lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<p>这个代码不会报错，但是XML布局预览无任何效果，暂时不知道是什么原因。</p>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><blockquote>\n<p>viewpager的滚动监听和bottomNavigationView有关系么，为什么没有viewpager的滚动监听会影响到bottomNavigationView，使bottomNavigationView只有点击事件，没有选中改变按钮颜色呢，难道是viewpager的滚动监听的配置增加了焦点，好像也不对，如果没有焦点，bottomNavigationView也就不能点击</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"android-Material-Design-底部导航栏\"><a href=\"#android-Material-Design-底部导航栏\" class=\"headerlink\" title=\"android Material Design 底部导航栏\"></a>android Material Design 底部导航栏</h1><h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p><img src=\"http://img.blog.csdn.net/20170208030222983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></p>","more":"<p></p>\n<h2 id=\"配置gradle依赖\"><a href=\"#配置gradle依赖\" class=\"headerlink\" title=\"配置gradle依赖\"></a>配置gradle依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;com.android.support:appcompat-v7:25.1.0&#39;</span><br><span class=\"line\">&#x2F;&#x2F;注意：V4包一定要加，material design是依赖V4包的</span><br><span class=\"line\">&#x2F;&#x2F;不加，某些类可能报“ClassNotFoundException”</span><br><span class=\"line\">compile &#39;com.android.support:support-v4:25.1.0&#39;</span><br><span class=\"line\">compile &#39;com.android.support:design:25.1.0&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用BottomNavigationView\"><a href=\"#使用BottomNavigationView\" class=\"headerlink\" title=\"使用BottomNavigationView\"></a>使用BottomNavigationView</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:id&#x3D;&quot;@+id&#x2F;activity_main&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    tools:context&#x3D;&quot;com.kangda.app.MainActivity&quot;&gt;</span><br><span class=\"line\">    &lt;!--一定要加入V4包和Material Design包的依赖--&gt;</span><br><span class=\"line\">    &lt;!--itemIconTint设置图标的颜色--&gt;</span><br><span class=\"line\">    &lt;!--itemTextColor设置文本标题的颜色--&gt;</span><br><span class=\"line\">    &lt;android.support.design.widget.BottomNavigationView</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;nav_bottom&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;50dp&quot;</span><br><span class=\"line\">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:itemIconTint&#x3D;&quot;#767676&quot;</span><br><span class=\"line\">        app:itemTextColor&#x3D;&quot;#767676&quot;</span><br><span class=\"line\">        app:menu&#x3D;&quot;@menu&#x2F;nav_bottom_item&quot;</span><br><span class=\"line\">        &gt; &lt;&#x2F;android.support.design.widget.BottomNavigationView&gt;</span><br><span class=\"line\">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"res-menu-nav-bottom-item-xml\"><a href=\"#res-menu-nav-bottom-item-xml\" class=\"headerlink\" title=\"res/menu/nav_bottom_item.xml\"></a>res/menu/nav_bottom_item.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;!--showAsAction如果有剩余空间就显示出来，否则隐藏--&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_pk&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_pk&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_pk&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_home&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_home&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_home_press&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;item android:id&#x3D;&quot;@+id&#x2F;menu_mine&quot;</span><br><span class=\"line\">        android:enabled&#x3D;&quot;true&quot;</span><br><span class=\"line\">        app:showAsAction&#x3D;&quot;ifRoom&quot;</span><br><span class=\"line\">        android:title&#x3D;&quot;@string&#x2F;menu_title_mine&quot;</span><br><span class=\"line\">        android:icon&#x3D;&quot;@mipmap&#x2F;menu_mine&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"src-MainActivity-java\"><a href=\"#src-MainActivity-java\" class=\"headerlink\" title=\"src/MainActivity.java\"></a>src/MainActivity.java</h2><p>@BindView这注解依赖ButterKnife，这个不必理会<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@BindView(R.id.nav_bottom)</span><br><span class=\"line\">    protected BottomNavigationView navBottom;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        ButterKnife.bind(this);</span><br><span class=\"line\">        navBottom.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123;</span><br><span class=\"line\">                switch (item.getItemId())&#123;</span><br><span class=\"line\">                    case R.id.menu_pk:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;PK&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.menu_home:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;主页&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case R.id.menu_mine:</span><br><span class=\"line\">                        Toast.makeText(MainActivity.this, &quot;我的&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>盲目照抄android官方文档带来的问题</p>\n<p>以下是官方文档抄过来的，有点问题<br>问题在这一句代码<br>xmlns:design=”<a href=\"http://schema.android.com/apk/res/android.support.design\" target=\"_blank\" rel=\"noopener\">http://schema.android.com/apk/res/android.support.design</a>“<br>正确的代码是<br>xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto\" target=\"_blank\" rel=\"noopener\">http://schemas.android.com/apk/res-auto</a>“</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout resource file:</span><br><span class=\"line\"> &lt;android.support.design.widget.BottomNavigationView</span><br><span class=\"line\">     xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">     xmlns:design&#x3D;&quot;http:&#x2F;&#x2F;schema.android.com&#x2F;apk&#x2F;res&#x2F;android.support.design&quot;</span><br><span class=\"line\">     android:id&#x3D;&quot;@+id&#x2F;navigation&quot;</span><br><span class=\"line\">     android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">     android:layout_height&#x3D;&quot;56dp&quot;</span><br><span class=\"line\">     android:layout_gravity&#x3D;&quot;start&quot;</span><br><span class=\"line\">     design:menu&#x3D;&quot;@menu&#x2F;my_navigation_items&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> res&#x2F;menu&#x2F;my_navigation_items.xml:</span><br><span class=\"line\"> &lt;menu xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_search&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_search&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_search&quot; &#x2F;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_settings&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_settings&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_add&quot; &#x2F;&gt;</span><br><span class=\"line\">     &lt;item android:id&#x3D;&quot;@+id&#x2F;action_navigation&quot;</span><br><span class=\"line\">          android:title&#x3D;&quot;@string&#x2F;menu_navigation&quot;</span><br><span class=\"line\">          android:icon&#x3D;&quot;@drawable&#x2F;ic_action_navigation_menu&quot; &#x2F;&gt;</span><br><span class=\"line\"> &lt;&#x2F;menu&gt;</span><br></pre></td></tr></table></figure>\n<p>这个代码不会报错，但是XML布局预览无任何效果，暂时不知道是什么原因。</p>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><blockquote>\n<p>viewpager的滚动监听和bottomNavigationView有关系么，为什么没有viewpager的滚动监听会影响到bottomNavigationView，使bottomNavigationView只有点击事件，没有选中改变按钮颜色呢，难道是viewpager的滚动监听的配置增加了焦点，好像也不对，如果没有焦点，bottomNavigationView也就不能点击</p>\n</blockquote>"},{"title":"broadcast与broadcast receiver","date":"2017-04-08T14:57:07.000Z","_content":"# broadcast与broadcast receiver\n我们需要注意，广播与广播接收者的区别\n## 广播接收者的注册\n一般面试官会问，广播的注册方式有几种，最好能解释一下，广播注册指的是广播接收者的注册。\n\n### 静态注册\n**也就是在AndroidManifests.xml中进行注册**\n```\n<receiver android:name=\".MyReceiver\">\n    <intent-filter android:priority=\"20\">\n        <action android:name=\"org.crazyit.action.CRAZY_BROADCAST\"/>\n    </intent-filter>\n</receiver>\n```\n这种方法的优点，在于**应用退出后也能接收广播**\n### 动态注册  \n动态注册是在程序运行中注册，**只能在应用运行时进行广播接收。**\n\n>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter)  注册广播接收者\n\n>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter,  String broadcastPermission,  Handler scheduler)  \nbroadcastPermission：命名一个权限，使广播必须持有这个权限，才能被这个Receiver接收  \nscheduler：handler识别线程将接收intent，如果为空，则将在main thread中接收intent\n\n>unregisterReceiver(BroadcastReceiver)取消广播接收者\n\n<!--more-->\n## 普通广播和有序广播  \n>Context.sendBroadcast(Intent)：发送普通广播  \n\n>Context.sendOrderedBroadcast(Intent):发送有序广播  \n\n### 普通广播(Normal Broadcast)\n普通广播是完全异步的，它可以在同一时刻被所有接收者接收到，但是缺点是无法将处理结果传递给下一个接收者，并且无法中断broadcast的传播。  \n\n### 有序广播(Ordered Broadcast)\n有序广播，故名思意，就是有顺序的广播，Ordered Broadcast的接收者将**按预先声明的优先级依次接收Broadcast**。比如，A>B>C，Broadcast会优先传给A，再到B，最后到C。优先级别可以使用`android:priority=\"\"`申明在AndroidManifests.xml中，`优先级在-1000~1000之间，`例：  \n```\n<receiver android:name=\".MyReceiver\">\n    <intent-filter android:priority=\"20\">\n        <action android:name=\"org.crazyit.action.CRAZY_BROADCAST\"/>\n    </intent-filter>\n</receiver>\n```\n也可以在src中调用`IntentFilter.setPriority()`设置优先级别。  \n**Ordered Broadcast的高优先级别的Receiver，可以将处理结果传递给一位Receiver，或者可以中止Broadcast的传播。** \n>BroadcastReceiver.abortBroadcast()中止广播  \n\n>BroadcastReceiver.setResultExtras(Bundle)：将处理结果存入Broadcast，然后传递给下一个Receiver\n\n>Bundle bundle=getResultExtras(true)可以获取上一个Receiver存入的数据\n\n## 疑问\n### Receiver的onReceive()是在子线程中吗？\nonReceive()是主线程中运行的,最大支持耗时是10秒，超过可能会触发ANR，在onReceive()中添加了睡眠方法，然后用另一个按钮触发事件，可以看出，onReceive()方法执行完成后才触发了另一个按钮的事件。  \n![发送广播后测试是否在主线程](broadcast与broadcast receiver/01.gif)  \n虽然也有可能是线程锁的，但是打印结果是在同一线程内\n```\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MainActivity: onCreate: 获取当前进程名com.app.demobroadcast\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MainActivity: onCreate: 获取当前线程名main\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MyReceiver: onReceive: 获取当前进程名com.app.demobroadcast\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MyReceiver: onReceive: 获取当前线程名main\n```\n### Broadcast是同步的？\nBroadcast是完全异步的，要区别Broadcast与BroadcastReceiver，Broadcast的发送过程是异步，BroadcastReceiver是接收Broadcast的是同步执行的，在main线程中。\n### Broadcast是启动activity？\n如果你直接使用以下代码肯定会报错\n```\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Intent i=new Intent(context,MainActivity.class);\n        context.startActivity(i);\n    }\n```\n\n```\n E/AndroidRuntime: FATAL EXCEPTION: main\n     java.lang.RuntimeException: Unable to start receiver com.app.demobroadcast.MyReceiver: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n         \n         ···········\n         \n      Caused by: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n         \n         ···········\n\n```\n\n报错原因是Activity是存储在Task中的，应用启动的时候会创建一个Task存储MainActivity，在MainActivity启动一个Activity时，Activity会依附于MainActivity的Task中，但是在BroadcastReceiver中context不是MainActivity，所以无法获取一个Task，解决方法是使用FLAG_ACTIVITY_NEW_TASK，这属于Activity的启动模式范畴，之前写过《[理解Android Activity运行模式](https://zengmianhui.github.io/2017/03/22/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/)》。\n\n\n```\nIntent i=new Intent(context,MainActivity.class);\n        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(i);\n```\n\n","source":"_posts/broadcast与broadcast-receiver.md","raw":"---\ntitle: broadcast与broadcast receiver\ndate: 2017-04-08 22:57:07\ncategories:\n  - android\n  - 四大组件\n  - broadcast\ntags:\n  - android\n  - android broadcast\n---\n# broadcast与broadcast receiver\n我们需要注意，广播与广播接收者的区别\n## 广播接收者的注册\n一般面试官会问，广播的注册方式有几种，最好能解释一下，广播注册指的是广播接收者的注册。\n\n### 静态注册\n**也就是在AndroidManifests.xml中进行注册**\n```\n<receiver android:name=\".MyReceiver\">\n    <intent-filter android:priority=\"20\">\n        <action android:name=\"org.crazyit.action.CRAZY_BROADCAST\"/>\n    </intent-filter>\n</receiver>\n```\n这种方法的优点，在于**应用退出后也能接收广播**\n### 动态注册  \n动态注册是在程序运行中注册，**只能在应用运行时进行广播接收。**\n\n>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter)  注册广播接收者\n\n>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter,  String broadcastPermission,  Handler scheduler)  \nbroadcastPermission：命名一个权限，使广播必须持有这个权限，才能被这个Receiver接收  \nscheduler：handler识别线程将接收intent，如果为空，则将在main thread中接收intent\n\n>unregisterReceiver(BroadcastReceiver)取消广播接收者\n\n<!--more-->\n## 普通广播和有序广播  \n>Context.sendBroadcast(Intent)：发送普通广播  \n\n>Context.sendOrderedBroadcast(Intent):发送有序广播  \n\n### 普通广播(Normal Broadcast)\n普通广播是完全异步的，它可以在同一时刻被所有接收者接收到，但是缺点是无法将处理结果传递给下一个接收者，并且无法中断broadcast的传播。  \n\n### 有序广播(Ordered Broadcast)\n有序广播，故名思意，就是有顺序的广播，Ordered Broadcast的接收者将**按预先声明的优先级依次接收Broadcast**。比如，A>B>C，Broadcast会优先传给A，再到B，最后到C。优先级别可以使用`android:priority=\"\"`申明在AndroidManifests.xml中，`优先级在-1000~1000之间，`例：  \n```\n<receiver android:name=\".MyReceiver\">\n    <intent-filter android:priority=\"20\">\n        <action android:name=\"org.crazyit.action.CRAZY_BROADCAST\"/>\n    </intent-filter>\n</receiver>\n```\n也可以在src中调用`IntentFilter.setPriority()`设置优先级别。  \n**Ordered Broadcast的高优先级别的Receiver，可以将处理结果传递给一位Receiver，或者可以中止Broadcast的传播。** \n>BroadcastReceiver.abortBroadcast()中止广播  \n\n>BroadcastReceiver.setResultExtras(Bundle)：将处理结果存入Broadcast，然后传递给下一个Receiver\n\n>Bundle bundle=getResultExtras(true)可以获取上一个Receiver存入的数据\n\n## 疑问\n### Receiver的onReceive()是在子线程中吗？\nonReceive()是主线程中运行的,最大支持耗时是10秒，超过可能会触发ANR，在onReceive()中添加了睡眠方法，然后用另一个按钮触发事件，可以看出，onReceive()方法执行完成后才触发了另一个按钮的事件。  \n![发送广播后测试是否在主线程](broadcast与broadcast receiver/01.gif)  \n虽然也有可能是线程锁的，但是打印结果是在同一线程内\n```\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MainActivity: onCreate: 获取当前进程名com.app.demobroadcast\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MainActivity: onCreate: 获取当前线程名main\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MyReceiver: onReceive: 获取当前进程名com.app.demobroadcast\n04-08 14:23:45.071 2306-2306/com.app.demobroadcast I/MyReceiver: onReceive: 获取当前线程名main\n```\n### Broadcast是同步的？\nBroadcast是完全异步的，要区别Broadcast与BroadcastReceiver，Broadcast的发送过程是异步，BroadcastReceiver是接收Broadcast的是同步执行的，在main线程中。\n### Broadcast是启动activity？\n如果你直接使用以下代码肯定会报错\n```\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Intent i=new Intent(context,MainActivity.class);\n        context.startActivity(i);\n    }\n```\n\n```\n E/AndroidRuntime: FATAL EXCEPTION: main\n     java.lang.RuntimeException: Unable to start receiver com.app.demobroadcast.MyReceiver: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n         \n         ···········\n         \n      Caused by: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?\n         \n         ···········\n\n```\n\n报错原因是Activity是存储在Task中的，应用启动的时候会创建一个Task存储MainActivity，在MainActivity启动一个Activity时，Activity会依附于MainActivity的Task中，但是在BroadcastReceiver中context不是MainActivity，所以无法获取一个Task，解决方法是使用FLAG_ACTIVITY_NEW_TASK，这属于Activity的启动模式范畴，之前写过《[理解Android Activity运行模式](https://zengmianhui.github.io/2017/03/22/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/)》。\n\n\n```\nIntent i=new Intent(context,MainActivity.class);\n        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(i);\n```\n\n","slug":"broadcast与broadcast-receiver","published":1,"updated":"2019-05-05T09:43:38.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncieb000fy8usn34joq7b","content":"<h1 id=\"broadcast与broadcast-receiver\"><a href=\"#broadcast与broadcast-receiver\" class=\"headerlink\" title=\"broadcast与broadcast receiver\"></a>broadcast与broadcast receiver</h1><p>我们需要注意，广播与广播接收者的区别</p>\n<h2 id=\"广播接收者的注册\"><a href=\"#广播接收者的注册\" class=\"headerlink\" title=\"广播接收者的注册\"></a>广播接收者的注册</h2><p>一般面试官会问，广播的注册方式有几种，最好能解释一下，广播注册指的是广播接收者的注册。</p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><p><strong>也就是在AndroidManifests.xml中进行注册</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name&#x3D;&quot;.MyReceiver&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority&#x3D;&quot;20&quot;&gt;</span><br><span class=\"line\">        &lt;action android:name&#x3D;&quot;org.crazyit.action.CRAZY_BROADCAST&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure><br>这种方法的优点，在于<strong>应用退出后也能接收广播</strong></p>\n<h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><p>动态注册是在程序运行中注册，<strong>只能在应用运行时进行广播接收。</strong></p>\n<blockquote>\n<p>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter)  注册广播接收者</p>\n<p>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter,  String broadcastPermission,  Handler scheduler)<br>broadcastPermission：命名一个权限，使广播必须持有这个权限，才能被这个Receiver接收<br>scheduler：handler识别线程将接收intent，如果为空，则将在main thread中接收intent</p>\n<p>unregisterReceiver(BroadcastReceiver)取消广播接收者</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"普通广播和有序广播\"><a href=\"#普通广播和有序广播\" class=\"headerlink\" title=\"普通广播和有序广播\"></a>普通广播和有序广播</h2><blockquote>\n<p>Context.sendBroadcast(Intent)：发送普通广播  </p>\n<p>Context.sendOrderedBroadcast(Intent):发送有序广播  </p>\n</blockquote>\n<h3 id=\"普通广播-Normal-Broadcast\"><a href=\"#普通广播-Normal-Broadcast\" class=\"headerlink\" title=\"普通广播(Normal Broadcast)\"></a>普通广播(Normal Broadcast)</h3><p>普通广播是完全异步的，它可以在同一时刻被所有接收者接收到，但是缺点是无法将处理结果传递给下一个接收者，并且无法中断broadcast的传播。  </p>\n<h3 id=\"有序广播-Ordered-Broadcast\"><a href=\"#有序广播-Ordered-Broadcast\" class=\"headerlink\" title=\"有序广播(Ordered Broadcast)\"></a>有序广播(Ordered Broadcast)</h3><p>有序广播，故名思意，就是有顺序的广播，Ordered Broadcast的接收者将<strong>按预先声明的优先级依次接收Broadcast</strong>。比如，A&gt;B&gt;C，Broadcast会优先传给A，再到B，最后到C。优先级别可以使用<code>android:priority=&quot;&quot;</code>申明在AndroidManifests.xml中，<code>优先级在-1000~1000之间，</code>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name&#x3D;&quot;.MyReceiver&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority&#x3D;&quot;20&quot;&gt;</span><br><span class=\"line\">        &lt;action android:name&#x3D;&quot;org.crazyit.action.CRAZY_BROADCAST&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure><br>也可以在src中调用<code>IntentFilter.setPriority()</code>设置优先级别。<br><strong>Ordered Broadcast的高优先级别的Receiver，可以将处理结果传递给一位Receiver，或者可以中止Broadcast的传播。</strong> </p>\n<blockquote>\n<p>BroadcastReceiver.abortBroadcast()中止广播  </p>\n<p>BroadcastReceiver.setResultExtras(Bundle)：将处理结果存入Broadcast，然后传递给下一个Receiver</p>\n<p>Bundle bundle=getResultExtras(true)可以获取上一个Receiver存入的数据</p>\n</blockquote>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><h3 id=\"Receiver的onReceive-是在子线程中吗？\"><a href=\"#Receiver的onReceive-是在子线程中吗？\" class=\"headerlink\" title=\"Receiver的onReceive()是在子线程中吗？\"></a>Receiver的onReceive()是在子线程中吗？</h3><p>onReceive()是主线程中运行的,最大支持耗时是10秒，超过可能会触发ANR，在onReceive()中添加了睡眠方法，然后用另一个按钮触发事件，可以看出，onReceive()方法执行完成后才触发了另一个按钮的事件。<br><img src=\"/2017/04/08/broadcast%E4%B8%8Ebroadcast-receiver/01.gif\" alt=\"发送广播后测试是否在主线程\"><br>虽然也有可能是线程锁的，但是打印结果是在同一线程内<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MainActivity: onCreate: 获取当前进程名com.app.demobroadcast</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MainActivity: onCreate: 获取当前线程名main</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MyReceiver: onReceive: 获取当前进程名com.app.demobroadcast</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MyReceiver: onReceive: 获取当前线程名main</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Broadcast是同步的？\"><a href=\"#Broadcast是同步的？\" class=\"headerlink\" title=\"Broadcast是同步的？\"></a>Broadcast是同步的？</h3><p>Broadcast是完全异步的，要区别Broadcast与BroadcastReceiver，Broadcast的发送过程是异步，BroadcastReceiver是接收Broadcast的是同步执行的，在main线程中。</p>\n<h3 id=\"Broadcast是启动activity？\"><a href=\"#Broadcast是启动activity？\" class=\"headerlink\" title=\"Broadcast是启动activity？\"></a>Broadcast是启动activity？</h3><p>如果你直接使用以下代码肯定会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onReceive(Context context, Intent intent) &#123;</span><br><span class=\"line\">    Intent i&#x3D;new Intent(context,MainActivity.class);</span><br><span class=\"line\">    context.startActivity(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E&#x2F;AndroidRuntime: FATAL EXCEPTION: main</span><br><span class=\"line\">    java.lang.RuntimeException: Unable to start receiver com.app.demobroadcast.MyReceiver: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br><span class=\"line\">        </span><br><span class=\"line\">        ···········</span><br><span class=\"line\">        </span><br><span class=\"line\">     Caused by: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br><span class=\"line\">        </span><br><span class=\"line\">        ···········</span><br></pre></td></tr></table></figure>\n<p>报错原因是Activity是存储在Task中的，应用启动的时候会创建一个Task存储MainActivity，在MainActivity启动一个Activity时，Activity会依附于MainActivity的Task中，但是在BroadcastReceiver中context不是MainActivity，所以无法获取一个Task，解决方法是使用FLAG_ACTIVITY_NEW_TASK，这属于Activity的启动模式范畴，之前写过《<a href=\"https://zengmianhui.github.io/2017/03/22/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/\" target=\"_blank\" rel=\"noopener\">理解Android Activity运行模式</a>》。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i&#x3D;new Intent(context,MainActivity.class);</span><br><span class=\"line\">        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">        context.startActivity(i);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"broadcast与broadcast-receiver\"><a href=\"#broadcast与broadcast-receiver\" class=\"headerlink\" title=\"broadcast与broadcast receiver\"></a>broadcast与broadcast receiver</h1><p>我们需要注意，广播与广播接收者的区别</p>\n<h2 id=\"广播接收者的注册\"><a href=\"#广播接收者的注册\" class=\"headerlink\" title=\"广播接收者的注册\"></a>广播接收者的注册</h2><p>一般面试官会问，广播的注册方式有几种，最好能解释一下，广播注册指的是广播接收者的注册。</p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><p><strong>也就是在AndroidManifests.xml中进行注册</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name&#x3D;&quot;.MyReceiver&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority&#x3D;&quot;20&quot;&gt;</span><br><span class=\"line\">        &lt;action android:name&#x3D;&quot;org.crazyit.action.CRAZY_BROADCAST&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure><br>这种方法的优点，在于<strong>应用退出后也能接收广播</strong></p>\n<h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><p>动态注册是在程序运行中注册，<strong>只能在应用运行时进行广播接收。</strong></p>\n<blockquote>\n<p>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter)  注册广播接收者</p>\n<p>Intent registerReceiver (BroadcastReceiver receiver, IntentFilter filter,  String broadcastPermission,  Handler scheduler)<br>broadcastPermission：命名一个权限，使广播必须持有这个权限，才能被这个Receiver接收<br>scheduler：handler识别线程将接收intent，如果为空，则将在main thread中接收intent</p>\n<p>unregisterReceiver(BroadcastReceiver)取消广播接收者</p>\n</blockquote>","more":"<h2 id=\"普通广播和有序广播\"><a href=\"#普通广播和有序广播\" class=\"headerlink\" title=\"普通广播和有序广播\"></a>普通广播和有序广播</h2><blockquote>\n<p>Context.sendBroadcast(Intent)：发送普通广播  </p>\n<p>Context.sendOrderedBroadcast(Intent):发送有序广播  </p>\n</blockquote>\n<h3 id=\"普通广播-Normal-Broadcast\"><a href=\"#普通广播-Normal-Broadcast\" class=\"headerlink\" title=\"普通广播(Normal Broadcast)\"></a>普通广播(Normal Broadcast)</h3><p>普通广播是完全异步的，它可以在同一时刻被所有接收者接收到，但是缺点是无法将处理结果传递给下一个接收者，并且无法中断broadcast的传播。  </p>\n<h3 id=\"有序广播-Ordered-Broadcast\"><a href=\"#有序广播-Ordered-Broadcast\" class=\"headerlink\" title=\"有序广播(Ordered Broadcast)\"></a>有序广播(Ordered Broadcast)</h3><p>有序广播，故名思意，就是有顺序的广播，Ordered Broadcast的接收者将<strong>按预先声明的优先级依次接收Broadcast</strong>。比如，A&gt;B&gt;C，Broadcast会优先传给A，再到B，最后到C。优先级别可以使用<code>android:priority=&quot;&quot;</code>申明在AndroidManifests.xml中，<code>优先级在-1000~1000之间，</code>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name&#x3D;&quot;.MyReceiver&quot;&gt;</span><br><span class=\"line\">    &lt;intent-filter android:priority&#x3D;&quot;20&quot;&gt;</span><br><span class=\"line\">        &lt;action android:name&#x3D;&quot;org.crazyit.action.CRAZY_BROADCAST&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure><br>也可以在src中调用<code>IntentFilter.setPriority()</code>设置优先级别。<br><strong>Ordered Broadcast的高优先级别的Receiver，可以将处理结果传递给一位Receiver，或者可以中止Broadcast的传播。</strong> </p>\n<blockquote>\n<p>BroadcastReceiver.abortBroadcast()中止广播  </p>\n<p>BroadcastReceiver.setResultExtras(Bundle)：将处理结果存入Broadcast，然后传递给下一个Receiver</p>\n<p>Bundle bundle=getResultExtras(true)可以获取上一个Receiver存入的数据</p>\n</blockquote>\n<h2 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h2><h3 id=\"Receiver的onReceive-是在子线程中吗？\"><a href=\"#Receiver的onReceive-是在子线程中吗？\" class=\"headerlink\" title=\"Receiver的onReceive()是在子线程中吗？\"></a>Receiver的onReceive()是在子线程中吗？</h3><p>onReceive()是主线程中运行的,最大支持耗时是10秒，超过可能会触发ANR，在onReceive()中添加了睡眠方法，然后用另一个按钮触发事件，可以看出，onReceive()方法执行完成后才触发了另一个按钮的事件。<br><img src=\"/2017/04/08/broadcast%E4%B8%8Ebroadcast-receiver/01.gif\" alt=\"发送广播后测试是否在主线程\"><br>虽然也有可能是线程锁的，但是打印结果是在同一线程内<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MainActivity: onCreate: 获取当前进程名com.app.demobroadcast</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MainActivity: onCreate: 获取当前线程名main</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MyReceiver: onReceive: 获取当前进程名com.app.demobroadcast</span><br><span class=\"line\">04-08 14:23:45.071 2306-2306&#x2F;com.app.demobroadcast I&#x2F;MyReceiver: onReceive: 获取当前线程名main</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Broadcast是同步的？\"><a href=\"#Broadcast是同步的？\" class=\"headerlink\" title=\"Broadcast是同步的？\"></a>Broadcast是同步的？</h3><p>Broadcast是完全异步的，要区别Broadcast与BroadcastReceiver，Broadcast的发送过程是异步，BroadcastReceiver是接收Broadcast的是同步执行的，在main线程中。</p>\n<h3 id=\"Broadcast是启动activity？\"><a href=\"#Broadcast是启动activity？\" class=\"headerlink\" title=\"Broadcast是启动activity？\"></a>Broadcast是启动activity？</h3><p>如果你直接使用以下代码肯定会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onReceive(Context context, Intent intent) &#123;</span><br><span class=\"line\">    Intent i&#x3D;new Intent(context,MainActivity.class);</span><br><span class=\"line\">    context.startActivity(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E&#x2F;AndroidRuntime: FATAL EXCEPTION: main</span><br><span class=\"line\">    java.lang.RuntimeException: Unable to start receiver com.app.demobroadcast.MyReceiver: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br><span class=\"line\">        </span><br><span class=\"line\">        ···········</span><br><span class=\"line\">        </span><br><span class=\"line\">     Caused by: android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br><span class=\"line\">        </span><br><span class=\"line\">        ···········</span><br></pre></td></tr></table></figure>\n<p>报错原因是Activity是存储在Task中的，应用启动的时候会创建一个Task存储MainActivity，在MainActivity启动一个Activity时，Activity会依附于MainActivity的Task中，但是在BroadcastReceiver中context不是MainActivity，所以无法获取一个Task，解决方法是使用FLAG_ACTIVITY_NEW_TASK，这属于Activity的启动模式范畴，之前写过《<a href=\"https://zengmianhui.github.io/2017/03/22/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/\" target=\"_blank\" rel=\"noopener\">理解Android Activity运行模式</a>》。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i&#x3D;new Intent(context,MainActivity.class);</span><br><span class=\"line\">        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">        context.startActivity(i);</span><br></pre></td></tr></table></figure>"},{"title":"github博客如何增加评论？","date":"2017-01-27T17:39:34.000Z","_content":"摘要：\n\tgithub博客如何增加评论？\n<!--more-->\n# github博客如何增加评论？\n## 1注册多说评论\n![这里写图片描述](http://img.blog.csdn.net/20170128011646246?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点击我要安装\n![这里写图片描述](http://img.blog.csdn.net/20170128011656497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n创建站点\n![这里写图片描述](http://img.blog.csdn.net/20170128011705809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 编辑主题配置文件theme/_config.yml\n![这里写图片描述](http://img.blog.csdn.net/20170128012414468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170128012423405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 编辑评论布局\n在下themes\\next\\layout\\_partials\nnext是你的主题的文件夹\n![这里写图片描述](http://img.blog.csdn.net/20170128012744426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 成效\n文章下面会有对应布局\n![这里写图片描述](http://img.blog.csdn.net/20170128012825271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/github博客如何增加评论？.md","raw":"---\ntitle: github博客如何增加评论？\ndate: 2017-01-28 01:39:34\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n摘要：\n\tgithub博客如何增加评论？\n<!--more-->\n# github博客如何增加评论？\n## 1注册多说评论\n![这里写图片描述](http://img.blog.csdn.net/20170128011646246?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点击我要安装\n![这里写图片描述](http://img.blog.csdn.net/20170128011656497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n创建站点\n![这里写图片描述](http://img.blog.csdn.net/20170128011705809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 编辑主题配置文件theme/_config.yml\n![这里写图片描述](http://img.blog.csdn.net/20170128012414468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170128012423405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 编辑评论布局\n在下themes\\next\\layout\\_partials\nnext是你的主题的文件夹\n![这里写图片描述](http://img.blog.csdn.net/20170128012744426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 成效\n文章下面会有对应布局\n![这里写图片描述](http://img.blog.csdn.net/20170128012825271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"github博客如何增加评论？","published":1,"updated":"2019-05-05T09:43:38.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciec000gy8usuiund6uo","content":"<p>摘要：<br>    github博客如何增加评论？<br><a id=\"more\"></a></p>\n<h1 id=\"github博客如何增加评论？\"><a href=\"#github博客如何增加评论？\" class=\"headerlink\" title=\"github博客如何增加评论？\"></a>github博客如何增加评论？</h1><h2 id=\"1注册多说评论\"><a href=\"#1注册多说评论\" class=\"headerlink\" title=\"1注册多说评论\"></a>1注册多说评论</h2><p><img src=\"http://img.blog.csdn.net/20170128011646246?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点击我要安装<br><img src=\"http://img.blog.csdn.net/20170128011656497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>创建站点<br><img src=\"http://img.blog.csdn.net/20170128011705809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"编辑主题配置文件theme-config-yml\"><a href=\"#编辑主题配置文件theme-config-yml\" class=\"headerlink\" title=\"编辑主题配置文件theme/_config.yml\"></a>编辑主题配置文件theme/_config.yml</h2><p><img src=\"http://img.blog.csdn.net/20170128012414468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170128012423405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"编辑评论布局\"><a href=\"#编辑评论布局\" class=\"headerlink\" title=\"编辑评论布局\"></a>编辑评论布局</h2><p>在下themes\\next\\layout_partials<br>next是你的主题的文件夹<br><img src=\"http://img.blog.csdn.net/20170128012744426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"成效\"><a href=\"#成效\" class=\"headerlink\" title=\"成效\"></a>成效</h2><p>文章下面会有对应布局<br><img src=\"http://img.blog.csdn.net/20170128012825271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>摘要：<br>    github博客如何增加评论？<br></p>","more":"<p></p>\n<h1 id=\"github博客如何增加评论？\"><a href=\"#github博客如何增加评论？\" class=\"headerlink\" title=\"github博客如何增加评论？\"></a>github博客如何增加评论？</h1><h2 id=\"1注册多说评论\"><a href=\"#1注册多说评论\" class=\"headerlink\" title=\"1注册多说评论\"></a>1注册多说评论</h2><p><img src=\"http://img.blog.csdn.net/20170128011646246?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点击我要安装<br><img src=\"http://img.blog.csdn.net/20170128011656497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>创建站点<br><img src=\"http://img.blog.csdn.net/20170128011705809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"编辑主题配置文件theme-config-yml\"><a href=\"#编辑主题配置文件theme-config-yml\" class=\"headerlink\" title=\"编辑主题配置文件theme/_config.yml\"></a>编辑主题配置文件theme/_config.yml</h2><p><img src=\"http://img.blog.csdn.net/20170128012414468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170128012423405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"编辑评论布局\"><a href=\"#编辑评论布局\" class=\"headerlink\" title=\"编辑评论布局\"></a>编辑评论布局</h2><p>在下themes\\next\\layout_partials<br>next是你的主题的文件夹<br><img src=\"http://img.blog.csdn.net/20170128012744426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"成效\"><a href=\"#成效\" class=\"headerlink\" title=\"成效\"></a>成效</h2><p>文章下面会有对应布局<br><img src=\"http://img.blog.csdn.net/20170128012825271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"android studio配置git","date":"2017-01-27T09:01:10.000Z","_content":"\n摘要:\n\t如今开发时代处于团队合作的时代，团队合作的工具是必不可少的，像git就是团队合作比较好的工具，这篇告诉大家如何在android studio中配置git版本控制工具，方便开发。\n<!-- more -->\n正文：\n部分教程来自[全面介绍Android Studio中Git 的使用（一）](http://blog.csdn.net/gao_chun/article/details/49817229/)\n\n当前文章目录：\n\n[TOC]\n## 首先当然是先创建一个本地仓库\n首先在一个目录准备作为仓库的目录下，右键“git bash here”\n \n ![这里写图片描述](http://img.blog.csdn.net/20170123012152124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n ![这里写图片描述](http://img.blog.csdn.net/20170123012239765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这样本地仓库创建完成了\n##配置远程仓库（提交的时候要注意，仓库至少要有一个文件，git不允许仓库为空）\n首先要知道“commit”是提交到本地仓库，“push”是提交到远程仓库，所以光有本地仓库是不能团队合作的，我要将本地仓库和远程仓库进行关联\n关联远程仓库，一个重要的条件就是本地git的“SSH”要和远程仓库的“SSH”相匹配。\n我首先要配置创建一个SSH在本地（在C盘本地用户目录里面）\n### 1、先配置git用户（不作截图）\n$ git config --global user.name \"xuhaiyan\"\n$ git config --global user.email \"haiyan.xu.vip@gmail.com\"\n###2、创建SSH，创建目录在C盘当前用户下\n\nssh-keygen -t rsa -C “zengmianhui”\n双引号内为电脑登录时的用户名\n ![这里写图片描述](http://img.blog.csdn.net/20170123012354325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n ![这里写图片描述](http://img.blog.csdn.net/20170123014626433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170123012425579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 3、\t查看SSH代码，并将其设置到远程仓库（这里示例github）\n ![这里写图片描述](http://img.blog.csdn.net/20170123012436748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n ![这里写图片描述](http://img.blog.csdn.net/20170123012528858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n### 4、\t将本地仓库关联到远程仓库\ngit remote add origin [url]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012548454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在Settings中选择Version Control 并配置Git，不多说，上个图\n ![这里写图片描述](http://img.blog.csdn.net/20170123012559015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n配置完后我们点下路径后的Test按钮，若出现该Success提示框则表明配置成功：\n ![这里写图片描述](http://img.blog.csdn.net/20170123012634579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n配置好后我们点击Version Control的时候，在右侧会提示该项目所采用的版本控制工具\n ![这里写图片描述](http://img.blog.csdn.net/20170123012659220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n若发现该路径为灰色，需要选中，点击\"+\"\n ![这里写图片描述](http://img.blog.csdn.net/20170123012731236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n因为我们是在一个已有的项目上创建的仓库，所以配置完后需要为项目指定版本控制工具，也可以在最开始Create项目的时候直接指定仓库路径。\n\n## 提交代码\n起初，我们项目所有文件颜色，都是 [白色：正常文件的颜色]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012757502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n但是当我们为项目指定仓库路径后，所有文件颜色的颜色变了 [红色：指定仓库路径后，未Add的文件]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012811659?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n切换为Project视图，对项目右键，Add文件。（在创建仓库的时候.gitignore文件已默认生成，可以修改添加需要ignore的文件）\n ![这里写图片描述](http://img.blog.csdn.net/20170123012834488?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nAdd成功后，我们在看看文件的颜色为 [绿色：已Add，但未commit的文件]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012855174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n也可查看Log日志\n ![这里写图片描述](http://img.blog.csdn.net/20170123012920552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nCommit文件可通过 项目右键--> Git --> Commit Directory...  也可点击 工具栏上的两个按钮。\n ![这里写图片描述](http://img.blog.csdn.net/20170123012947721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写提交信息，然后可先Commit 然后再 Push 或者直接选择 Commit And Push ...\n ![这里写图片描述](http://img.blog.csdn.net/20170123013016053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n当我们对某个类进行修改后，会发现文件颜色又变了 [墨蓝色：提交成功后修改过的文件]，到此就将项目上传至仓库了，可以通过Studio中的Version Control一目了然的查看提交Log。\n\n ![这里写图片描述](http://img.blog.csdn.net/20170123013030897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n关于如何下拉代码，我们可以点击工具栏上的“CVS↓”![这里写图片描述](http://img.blog.csdn.net/20170123013206754?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) 按钮，然后在在弹出框中选择 Merge 合并。\n \n![这里写图片描述](http://img.blog.csdn.net/20170123013226629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/android-studio配置git.md","raw":"---\ntitle: android studio配置git\ndate: 2017-01-27 17:01:10\ncategories:\n  - android\n  - android studio\ntags:\n  - android\n  - android studio\n  - git\n---\n\n摘要:\n\t如今开发时代处于团队合作的时代，团队合作的工具是必不可少的，像git就是团队合作比较好的工具，这篇告诉大家如何在android studio中配置git版本控制工具，方便开发。\n<!-- more -->\n正文：\n部分教程来自[全面介绍Android Studio中Git 的使用（一）](http://blog.csdn.net/gao_chun/article/details/49817229/)\n\n当前文章目录：\n\n[TOC]\n## 首先当然是先创建一个本地仓库\n首先在一个目录准备作为仓库的目录下，右键“git bash here”\n \n ![这里写图片描述](http://img.blog.csdn.net/20170123012152124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n ![这里写图片描述](http://img.blog.csdn.net/20170123012239765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这样本地仓库创建完成了\n##配置远程仓库（提交的时候要注意，仓库至少要有一个文件，git不允许仓库为空）\n首先要知道“commit”是提交到本地仓库，“push”是提交到远程仓库，所以光有本地仓库是不能团队合作的，我要将本地仓库和远程仓库进行关联\n关联远程仓库，一个重要的条件就是本地git的“SSH”要和远程仓库的“SSH”相匹配。\n我首先要配置创建一个SSH在本地（在C盘本地用户目录里面）\n### 1、先配置git用户（不作截图）\n$ git config --global user.name \"xuhaiyan\"\n$ git config --global user.email \"haiyan.xu.vip@gmail.com\"\n###2、创建SSH，创建目录在C盘当前用户下\n\nssh-keygen -t rsa -C “zengmianhui”\n双引号内为电脑登录时的用户名\n ![这里写图片描述](http://img.blog.csdn.net/20170123012354325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n ![这里写图片描述](http://img.blog.csdn.net/20170123014626433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170123012425579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 3、\t查看SSH代码，并将其设置到远程仓库（这里示例github）\n ![这里写图片描述](http://img.blog.csdn.net/20170123012436748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n ![这里写图片描述](http://img.blog.csdn.net/20170123012528858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n### 4、\t将本地仓库关联到远程仓库\ngit remote add origin [url]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012548454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在Settings中选择Version Control 并配置Git，不多说，上个图\n ![这里写图片描述](http://img.blog.csdn.net/20170123012559015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n配置完后我们点下路径后的Test按钮，若出现该Success提示框则表明配置成功：\n ![这里写图片描述](http://img.blog.csdn.net/20170123012634579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n配置好后我们点击Version Control的时候，在右侧会提示该项目所采用的版本控制工具\n ![这里写图片描述](http://img.blog.csdn.net/20170123012659220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n若发现该路径为灰色，需要选中，点击\"+\"\n ![这里写图片描述](http://img.blog.csdn.net/20170123012731236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n因为我们是在一个已有的项目上创建的仓库，所以配置完后需要为项目指定版本控制工具，也可以在最开始Create项目的时候直接指定仓库路径。\n\n## 提交代码\n起初，我们项目所有文件颜色，都是 [白色：正常文件的颜色]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012757502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n但是当我们为项目指定仓库路径后，所有文件颜色的颜色变了 [红色：指定仓库路径后，未Add的文件]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012811659?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n切换为Project视图，对项目右键，Add文件。（在创建仓库的时候.gitignore文件已默认生成，可以修改添加需要ignore的文件）\n ![这里写图片描述](http://img.blog.csdn.net/20170123012834488?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nAdd成功后，我们在看看文件的颜色为 [绿色：已Add，但未commit的文件]\n ![这里写图片描述](http://img.blog.csdn.net/20170123012855174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n也可查看Log日志\n ![这里写图片描述](http://img.blog.csdn.net/20170123012920552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nCommit文件可通过 项目右键--> Git --> Commit Directory...  也可点击 工具栏上的两个按钮。\n ![这里写图片描述](http://img.blog.csdn.net/20170123012947721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写提交信息，然后可先Commit 然后再 Push 或者直接选择 Commit And Push ...\n ![这里写图片描述](http://img.blog.csdn.net/20170123013016053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n当我们对某个类进行修改后，会发现文件颜色又变了 [墨蓝色：提交成功后修改过的文件]，到此就将项目上传至仓库了，可以通过Studio中的Version Control一目了然的查看提交Log。\n\n ![这里写图片描述](http://img.blog.csdn.net/20170123013030897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n关于如何下拉代码，我们可以点击工具栏上的“CVS↓”![这里写图片描述](http://img.blog.csdn.net/20170123013206754?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) 按钮，然后在在弹出框中选择 Merge 合并。\n \n![这里写图片描述](http://img.blog.csdn.net/20170123013226629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"android-studio配置git","published":1,"updated":"2019-05-05T09:43:38.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciee000iy8usymo1otdr","content":"<p>摘要:<br>    如今开发时代处于团队合作的时代，团队合作的工具是必不可少的，像git就是团队合作比较好的工具，这篇告诉大家如何在android studio中配置git版本控制工具，方便开发。<br><a id=\"more\"></a><br>正文：<br>部分教程来自<a href=\"http://blog.csdn.net/gao_chun/article/details/49817229/\" target=\"_blank\" rel=\"noopener\">全面介绍Android Studio中Git 的使用（一）</a></p>\n<p>当前文章目录：</p>\n<p>[TOC]</p>\n<h2 id=\"首先当然是先创建一个本地仓库\"><a href=\"#首先当然是先创建一个本地仓库\" class=\"headerlink\" title=\"首先当然是先创建一个本地仓库\"></a>首先当然是先创建一个本地仓库</h2><p>首先在一个目录准备作为仓库的目录下，右键“git bash here”</p>\n<p> <img src=\"http://img.blog.csdn.net/20170123012152124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123012239765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这样本地仓库创建完成了</p>\n<p>##配置远程仓库（提交的时候要注意，仓库至少要有一个文件，git不允许仓库为空）<br>首先要知道“commit”是提交到本地仓库，“push”是提交到远程仓库，所以光有本地仓库是不能团队合作的，我要将本地仓库和远程仓库进行关联<br>关联远程仓库，一个重要的条件就是本地git的“SSH”要和远程仓库的“SSH”相匹配。<br>我首先要配置创建一个SSH在本地（在C盘本地用户目录里面）</p>\n<h3 id=\"1、先配置git用户（不作截图）\"><a href=\"#1、先配置git用户（不作截图）\" class=\"headerlink\" title=\"1、先配置git用户（不作截图）\"></a>1、先配置git用户（不作截图）</h3><p>$ git config –global user.name “xuhaiyan”<br>$ git config –global user.email “haiyan.xu.vip@gmail.com”</p>\n<p>###2、创建SSH，创建目录在C盘当前用户下</p>\n<p>ssh-keygen -t rsa -C “zengmianhui”<br>双引号内为电脑登录时的用户名<br> <img src=\"http://img.blog.csdn.net/20170123012354325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123014626433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170123012425579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、-查看SSH代码，并将其设置到远程仓库（这里示例github）\"><a href=\"#3、-查看SSH代码，并将其设置到远程仓库（这里示例github）\" class=\"headerlink\" title=\"3、    查看SSH代码，并将其设置到远程仓库（这里示例github）\"></a>3、    查看SSH代码，并将其设置到远程仓库（这里示例github）</h3><p> <img src=\"http://img.blog.csdn.net/20170123012436748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123012528858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"4、-将本地仓库关联到远程仓库\"><a href=\"#4、-将本地仓库关联到远程仓库\" class=\"headerlink\" title=\"4、    将本地仓库关联到远程仓库\"></a>4、    将本地仓库关联到远程仓库</h3><p>git remote add origin [url]<br> <img src=\"http://img.blog.csdn.net/20170123012548454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在Settings中选择Version-Control-并配置Git，不多说，上个图\"><a href=\"#在Settings中选择Version-Control-并配置Git，不多说，上个图\" class=\"headerlink\" title=\"在Settings中选择Version Control 并配置Git，不多说，上个图\"></a>在Settings中选择Version Control 并配置Git，不多说，上个图</h2><p> <img src=\"http://img.blog.csdn.net/20170123012559015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>配置完后我们点下路径后的Test按钮，若出现该Success提示框则表明配置成功：<br> <img src=\"http://img.blog.csdn.net/20170123012634579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>配置好后我们点击Version Control的时候，在右侧会提示该项目所采用的版本控制工具<br> <img src=\"http://img.blog.csdn.net/20170123012659220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>若发现该路径为灰色，需要选中，点击”+”<br> <img src=\"http://img.blog.csdn.net/20170123012731236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>因为我们是在一个已有的项目上创建的仓库，所以配置完后需要为项目指定版本控制工具，也可以在最开始Create项目的时候直接指定仓库路径。</p>\n<h2 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h2><p>起初，我们项目所有文件颜色，都是 [白色：正常文件的颜色]<br> <img src=\"http://img.blog.csdn.net/20170123012757502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>但是当我们为项目指定仓库路径后，所有文件颜色的颜色变了 [红色：指定仓库路径后，未Add的文件]<br> <img src=\"http://img.blog.csdn.net/20170123012811659?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>切换为Project视图，对项目右键，Add文件。（在创建仓库的时候.gitignore文件已默认生成，可以修改添加需要ignore的文件）<br> <img src=\"http://img.blog.csdn.net/20170123012834488?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>Add成功后，我们在看看文件的颜色为 [绿色：已Add，但未commit的文件]<br> <img src=\"http://img.blog.csdn.net/20170123012855174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>也可查看Log日志<br> <img src=\"http://img.blog.csdn.net/20170123012920552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>Commit文件可通过 项目右键–&gt; Git –&gt; Commit Directory…  也可点击 工具栏上的两个按钮。<br> <img src=\"http://img.blog.csdn.net/20170123012947721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>填写提交信息，然后可先Commit 然后再 Push 或者直接选择 Commit And Push …<br> <img src=\"http://img.blog.csdn.net/20170123013016053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>当我们对某个类进行修改后，会发现文件颜色又变了 [墨蓝色：提交成功后修改过的文件]，到此就将项目上传至仓库了，可以通过Studio中的Version Control一目了然的查看提交Log。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170123013030897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>关于如何下拉代码，我们可以点击工具栏上的“CVS↓”<img src=\"http://img.blog.csdn.net/20170123013206754?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> 按钮，然后在在弹出框中选择 Merge 合并。</p>\n<p><img src=\"http://img.blog.csdn.net/20170123013226629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    如今开发时代处于团队合作的时代，团队合作的工具是必不可少的，像git就是团队合作比较好的工具，这篇告诉大家如何在android studio中配置git版本控制工具，方便开发。<br></p>","more":"<br>正文：<br>部分教程来自<a href=\"http://blog.csdn.net/gao_chun/article/details/49817229/\" target=\"_blank\" rel=\"noopener\">全面介绍Android Studio中Git 的使用（一）</a><p></p>\n<p>当前文章目录：</p>\n<p>[TOC]</p>\n<h2 id=\"首先当然是先创建一个本地仓库\"><a href=\"#首先当然是先创建一个本地仓库\" class=\"headerlink\" title=\"首先当然是先创建一个本地仓库\"></a>首先当然是先创建一个本地仓库</h2><p>首先在一个目录准备作为仓库的目录下，右键“git bash here”</p>\n<p> <img src=\"http://img.blog.csdn.net/20170123012152124?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123012239765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这样本地仓库创建完成了</p>\n<p>##配置远程仓库（提交的时候要注意，仓库至少要有一个文件，git不允许仓库为空）<br>首先要知道“commit”是提交到本地仓库，“push”是提交到远程仓库，所以光有本地仓库是不能团队合作的，我要将本地仓库和远程仓库进行关联<br>关联远程仓库，一个重要的条件就是本地git的“SSH”要和远程仓库的“SSH”相匹配。<br>我首先要配置创建一个SSH在本地（在C盘本地用户目录里面）</p>\n<h3 id=\"1、先配置git用户（不作截图）\"><a href=\"#1、先配置git用户（不作截图）\" class=\"headerlink\" title=\"1、先配置git用户（不作截图）\"></a>1、先配置git用户（不作截图）</h3><p>$ git config –global user.name “xuhaiyan”<br>$ git config –global user.email “haiyan.xu.vip@gmail.com”</p>\n<p>###2、创建SSH，创建目录在C盘当前用户下</p>\n<p>ssh-keygen -t rsa -C “zengmianhui”<br>双引号内为电脑登录时的用户名<br> <img src=\"http://img.blog.csdn.net/20170123012354325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123014626433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170123012425579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、-查看SSH代码，并将其设置到远程仓库（这里示例github）\"><a href=\"#3、-查看SSH代码，并将其设置到远程仓库（这里示例github）\" class=\"headerlink\" title=\"3、    查看SSH代码，并将其设置到远程仓库（这里示例github）\"></a>3、    查看SSH代码，并将其设置到远程仓库（这里示例github）</h3><p> <img src=\"http://img.blog.csdn.net/20170123012436748?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br> <img src=\"http://img.blog.csdn.net/20170123012528858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"4、-将本地仓库关联到远程仓库\"><a href=\"#4、-将本地仓库关联到远程仓库\" class=\"headerlink\" title=\"4、    将本地仓库关联到远程仓库\"></a>4、    将本地仓库关联到远程仓库</h3><p>git remote add origin [url]<br> <img src=\"http://img.blog.csdn.net/20170123012548454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在Settings中选择Version-Control-并配置Git，不多说，上个图\"><a href=\"#在Settings中选择Version-Control-并配置Git，不多说，上个图\" class=\"headerlink\" title=\"在Settings中选择Version Control 并配置Git，不多说，上个图\"></a>在Settings中选择Version Control 并配置Git，不多说，上个图</h2><p> <img src=\"http://img.blog.csdn.net/20170123012559015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>配置完后我们点下路径后的Test按钮，若出现该Success提示框则表明配置成功：<br> <img src=\"http://img.blog.csdn.net/20170123012634579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>配置好后我们点击Version Control的时候，在右侧会提示该项目所采用的版本控制工具<br> <img src=\"http://img.blog.csdn.net/20170123012659220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>若发现该路径为灰色，需要选中，点击”+”<br> <img src=\"http://img.blog.csdn.net/20170123012731236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>因为我们是在一个已有的项目上创建的仓库，所以配置完后需要为项目指定版本控制工具，也可以在最开始Create项目的时候直接指定仓库路径。</p>\n<h2 id=\"提交代码\"><a href=\"#提交代码\" class=\"headerlink\" title=\"提交代码\"></a>提交代码</h2><p>起初，我们项目所有文件颜色，都是 [白色：正常文件的颜色]<br> <img src=\"http://img.blog.csdn.net/20170123012757502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>但是当我们为项目指定仓库路径后，所有文件颜色的颜色变了 [红色：指定仓库路径后，未Add的文件]<br> <img src=\"http://img.blog.csdn.net/20170123012811659?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>切换为Project视图，对项目右键，Add文件。（在创建仓库的时候.gitignore文件已默认生成，可以修改添加需要ignore的文件）<br> <img src=\"http://img.blog.csdn.net/20170123012834488?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>Add成功后，我们在看看文件的颜色为 [绿色：已Add，但未commit的文件]<br> <img src=\"http://img.blog.csdn.net/20170123012855174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>也可查看Log日志<br> <img src=\"http://img.blog.csdn.net/20170123012920552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>Commit文件可通过 项目右键–&gt; Git –&gt; Commit Directory…  也可点击 工具栏上的两个按钮。<br> <img src=\"http://img.blog.csdn.net/20170123012947721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>填写提交信息，然后可先Commit 然后再 Push 或者直接选择 Commit And Push …<br> <img src=\"http://img.blog.csdn.net/20170123013016053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>当我们对某个类进行修改后，会发现文件颜色又变了 [墨蓝色：提交成功后修改过的文件]，到此就将项目上传至仓库了，可以通过Studio中的Version Control一目了然的查看提交Log。</p>\n<p> <img src=\"http://img.blog.csdn.net/20170123013030897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>关于如何下拉代码，我们可以点击工具栏上的“CVS↓”<img src=\"http://img.blog.csdn.net/20170123013206754?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> 按钮，然后在在弹出框中选择 Merge 合并。</p>\n<p><img src=\"http://img.blog.csdn.net/20170123013226629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"git之head detached from [xxx]","date":"2017-06-12T14:04:52.000Z","_content":"\n# 参考链接\n[《git detached from head》————夜空霓虹](http://blog.csdn.net/zhang_xiaomeng/article/details/52597076)  \n[《git checkout 命令详解》————胡涛儿](http://www.cnblogs.com/hutaoer/archive/2013/05/07/git_checkout.html?utm_source=tuicool&utm_medium=referral)  \n[《git问题记录--如何从从detached HEAD状态解救出来》————馒头MT](http://www.jianshu.com/p/ae4857d2f868)  \n[《git cherry-pick. 如何把已经提交的commit, 从一个分支放到另一个分支》————sg552](http://sg552.iteye.com/blog/1300713)\n# git之head detached from [xxx]\n## 头部从某提交分离？\n近期发现，android studio提交的时候提示`head detached from [xxx]`，不知道是什么意思，百度了之后大概了解了一下，就是不知道是不是之前操作什么，导致我的一次提交没提交到Head指向的分支，这是很危险，意味当前提交不属于任何分支。  \n<!-- more -->\n> `git checkout master`的时候，提示有5个提交没有链接任何一个分支，同时也给出了解决方式\n\n```\n$ git checkout master\nChecking out files: 100% (8624/8624), done.\nWarning: you are leaving 5 commits behind, not connected to\nany of your branches:\n\n  d232605 all\n  78c29d8 all\n  4eba374 DemoDataBindingLibrary-测试databinding框架\n  7c6d192 DemoDataBindingLibrary-测试databinding框架\n  15c2a61 EnglishApp-更换评价展示；修复成绩显示不正确的情况\n\nIf you want to keep them by creating a new branch, this may be a good time\nto do so with:\n\n git branch <new-branch-name> d232605\n\nSwitched to branch 'master'\nM       GeekNews\n\n```\n> `git log`查看当前分支历史提交记录，发现并没有那五个提交记录，显然脱离了master分支  \n\n![查看历史提交记录](git之head detached from [xxx]/2017-06-12_154037.png)\n\n## 通过合并分支来解决\n> 可以用以下方式来解决\n> 1. 创建一个临时分支，将detach出来的提交，合并到临时分支中\n> 2. 将临时分支merge到工作分支中。\n> 3. 删除临时分支\n\n### 创建临时分支\n> 注意此命令并未立即切换到临时分支\n```\ngit branch temp 15c2a61\n```\n![创建临时分支](git之head detached from [xxx]/2017-06-12_162203.png)  \n\n### 将其他detach的一起合并到temp\n```\ngit checkout temp #切换到temp分支\ngit cherry-pick [commitid]\n```\n> 所以合并期间可能会出现合并冲突（cherry-pick为优选的意思，意思是取一个最优的提交来合并，有时候懂英文理解得比较快）\n\n![cherry-pick合并冲突](git之head detached from [xxx]/2017-06-12_183817.png)  \n\n> 上面可以看到提示冲突后，会CHERRY-PICK模式，在这期间无法切换分支等其他操作。会提示某文件冲突，**我们可以打开对应文件，会发现会有以下符号\n```\n>>>>>>>> HEAD\n    HEAD指向的分支代码\n========\n    某提交的代码\n>>>>>>>> 某提交信息commit messages\n```\n> 箭头和等号是Git用来区别不同分支或者提交的不同内容，通常我们保留最新的分支修改就可以了。然后再通过以下代码完成合并\n\n```\ngit add 某文件路径\n\ngit commit -m \"提交信息\"\n\ngit cherry-pick [commitid] #再使用一次命令合并\n```\n\n> 多次使用`git cherry-pick [commitid]`将其他几个提交合并\n\n### 切换到master分支，将temp合并到master分支\n\n```\ngit checkout master\n\ngit merge temp #使用此命令可能也会有冲突\n```  \n\n![发生冲突](git之head detached from [xxx]/2017-06-12_181756.png)  \n\n> 发生冲突后，进入了MERGING模式，跟上面的方法一样进入对应文件修改,然后`git add ` 和`git commit`然后`git merge temp`，可以使用`git log`打印提交信息查看是否合并成功\n\n![修改文件内容，保存最新分支信息](git之head detached from [xxx]/2017-06-12_181946.png)  \n![两次提交我们的修改](git之head detached from [xxx]/2017-06-12_182814.png)  \n\n","source":"_posts/git之head-detached-from-xxx.md","raw":"---\ntitle: 'git之head detached from [xxx]'\ndate: 2017-06-12 22:04:52\ncategories:\n  - git\n  - git\ntags:\n  - git\n---\n\n# 参考链接\n[《git detached from head》————夜空霓虹](http://blog.csdn.net/zhang_xiaomeng/article/details/52597076)  \n[《git checkout 命令详解》————胡涛儿](http://www.cnblogs.com/hutaoer/archive/2013/05/07/git_checkout.html?utm_source=tuicool&utm_medium=referral)  \n[《git问题记录--如何从从detached HEAD状态解救出来》————馒头MT](http://www.jianshu.com/p/ae4857d2f868)  \n[《git cherry-pick. 如何把已经提交的commit, 从一个分支放到另一个分支》————sg552](http://sg552.iteye.com/blog/1300713)\n# git之head detached from [xxx]\n## 头部从某提交分离？\n近期发现，android studio提交的时候提示`head detached from [xxx]`，不知道是什么意思，百度了之后大概了解了一下，就是不知道是不是之前操作什么，导致我的一次提交没提交到Head指向的分支，这是很危险，意味当前提交不属于任何分支。  \n<!-- more -->\n> `git checkout master`的时候，提示有5个提交没有链接任何一个分支，同时也给出了解决方式\n\n```\n$ git checkout master\nChecking out files: 100% (8624/8624), done.\nWarning: you are leaving 5 commits behind, not connected to\nany of your branches:\n\n  d232605 all\n  78c29d8 all\n  4eba374 DemoDataBindingLibrary-测试databinding框架\n  7c6d192 DemoDataBindingLibrary-测试databinding框架\n  15c2a61 EnglishApp-更换评价展示；修复成绩显示不正确的情况\n\nIf you want to keep them by creating a new branch, this may be a good time\nto do so with:\n\n git branch <new-branch-name> d232605\n\nSwitched to branch 'master'\nM       GeekNews\n\n```\n> `git log`查看当前分支历史提交记录，发现并没有那五个提交记录，显然脱离了master分支  \n\n![查看历史提交记录](git之head detached from [xxx]/2017-06-12_154037.png)\n\n## 通过合并分支来解决\n> 可以用以下方式来解决\n> 1. 创建一个临时分支，将detach出来的提交，合并到临时分支中\n> 2. 将临时分支merge到工作分支中。\n> 3. 删除临时分支\n\n### 创建临时分支\n> 注意此命令并未立即切换到临时分支\n```\ngit branch temp 15c2a61\n```\n![创建临时分支](git之head detached from [xxx]/2017-06-12_162203.png)  \n\n### 将其他detach的一起合并到temp\n```\ngit checkout temp #切换到temp分支\ngit cherry-pick [commitid]\n```\n> 所以合并期间可能会出现合并冲突（cherry-pick为优选的意思，意思是取一个最优的提交来合并，有时候懂英文理解得比较快）\n\n![cherry-pick合并冲突](git之head detached from [xxx]/2017-06-12_183817.png)  \n\n> 上面可以看到提示冲突后，会CHERRY-PICK模式，在这期间无法切换分支等其他操作。会提示某文件冲突，**我们可以打开对应文件，会发现会有以下符号\n```\n>>>>>>>> HEAD\n    HEAD指向的分支代码\n========\n    某提交的代码\n>>>>>>>> 某提交信息commit messages\n```\n> 箭头和等号是Git用来区别不同分支或者提交的不同内容，通常我们保留最新的分支修改就可以了。然后再通过以下代码完成合并\n\n```\ngit add 某文件路径\n\ngit commit -m \"提交信息\"\n\ngit cherry-pick [commitid] #再使用一次命令合并\n```\n\n> 多次使用`git cherry-pick [commitid]`将其他几个提交合并\n\n### 切换到master分支，将temp合并到master分支\n\n```\ngit checkout master\n\ngit merge temp #使用此命令可能也会有冲突\n```  \n\n![发生冲突](git之head detached from [xxx]/2017-06-12_181756.png)  \n\n> 发生冲突后，进入了MERGING模式，跟上面的方法一样进入对应文件修改,然后`git add ` 和`git commit`然后`git merge temp`，可以使用`git log`打印提交信息查看是否合并成功\n\n![修改文件内容，保存最新分支信息](git之head detached from [xxx]/2017-06-12_181946.png)  \n![两次提交我们的修改](git之head detached from [xxx]/2017-06-12_182814.png)  \n\n","slug":"git之head-detached-from-xxx","published":1,"updated":"2019-05-05T09:43:38.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncief000jy8usyeeowbqd","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/zhang_xiaomeng/article/details/52597076\" target=\"_blank\" rel=\"noopener\">《git detached from head》————夜空霓虹</a><br><a href=\"http://www.cnblogs.com/hutaoer/archive/2013/05/07/git_checkout.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">《git checkout 命令详解》————胡涛儿</a><br><a href=\"http://www.jianshu.com/p/ae4857d2f868\" target=\"_blank\" rel=\"noopener\">《git问题记录–如何从从detached HEAD状态解救出来》————馒头MT</a><br><a href=\"http://sg552.iteye.com/blog/1300713\" target=\"_blank\" rel=\"noopener\">《git cherry-pick. 如何把已经提交的commit, 从一个分支放到另一个分支》————sg552</a></p>\n<h1 id=\"git之head-detached-from-xxx\"><a href=\"#git之head-detached-from-xxx\" class=\"headerlink\" title=\"git之head detached from [xxx]\"></a>git之head detached from [xxx]</h1><h2 id=\"头部从某提交分离？\"><a href=\"#头部从某提交分离？\" class=\"headerlink\" title=\"头部从某提交分离？\"></a>头部从某提交分离？</h2><p>近期发现，android studio提交的时候提示<code>head detached from [xxx]</code>，不知道是什么意思，百度了之后大概了解了一下，就是不知道是不是之前操作什么，导致我的一次提交没提交到Head指向的分支，这是很危险，意味当前提交不属于任何分支。<br><a id=\"more\"></a></p>\n<blockquote>\n<p><code>git checkout master</code>的时候，提示有5个提交没有链接任何一个分支，同时也给出了解决方式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Checking out files: 100% (8624&#x2F;8624), done.</span><br><span class=\"line\">Warning: you are leaving 5 commits behind, not connected to</span><br><span class=\"line\">any of your branches:</span><br><span class=\"line\"></span><br><span class=\"line\">  d232605 all</span><br><span class=\"line\">  78c29d8 all</span><br><span class=\"line\">  4eba374 DemoDataBindingLibrary-测试databinding框架</span><br><span class=\"line\">  7c6d192 DemoDataBindingLibrary-测试databinding框架</span><br><span class=\"line\">  15c2a61 EnglishApp-更换评价展示；修复成绩显示不正确的情况</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep them by creating a new branch, this may be a good time</span><br><span class=\"line\">to do so with:</span><br><span class=\"line\"></span><br><span class=\"line\"> git branch &lt;new-branch-name&gt; d232605</span><br><span class=\"line\"></span><br><span class=\"line\">Switched to branch &#39;master&#39;</span><br><span class=\"line\">M       GeekNews</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>git log</code>查看当前分支历史提交记录，发现并没有那五个提交记录，显然脱离了master分支  </p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_154037.png\" alt=\"查看历史提交记录\"></p>\n<h2 id=\"通过合并分支来解决\"><a href=\"#通过合并分支来解决\" class=\"headerlink\" title=\"通过合并分支来解决\"></a>通过合并分支来解决</h2><blockquote>\n<p>可以用以下方式来解决</p>\n<ol>\n<li>创建一个临时分支，将detach出来的提交，合并到临时分支中</li>\n<li>将临时分支merge到工作分支中。</li>\n<li>删除临时分支</li>\n</ol>\n</blockquote>\n<h3 id=\"创建临时分支\"><a href=\"#创建临时分支\" class=\"headerlink\" title=\"创建临时分支\"></a>创建临时分支</h3><blockquote>\n<p>注意此命令并未立即切换到临时分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch temp 15c2a61</span><br></pre></td></tr></table></figure><br><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_162203.png\" alt=\"创建临时分支\">  </p>\n</blockquote>\n<h3 id=\"将其他detach的一起合并到temp\"><a href=\"#将其他detach的一起合并到temp\" class=\"headerlink\" title=\"将其他detach的一起合并到temp\"></a>将其他detach的一起合并到temp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout temp #切换到temp分支</span><br><span class=\"line\">git cherry-pick [commitid]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>所以合并期间可能会出现合并冲突（cherry-pick为优选的意思，意思是取一个最优的提交来合并，有时候懂英文理解得比较快）</p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_183817.png\" alt=\"cherry-pick合并冲突\">  </p>\n<blockquote>\n<p>上面可以看到提示冲突后，会CHERRY-PICK模式，在这期间无法切换分支等其他操作。会提示某文件冲突，**我们可以打开对应文件，会发现会有以下符号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; HEAD</span><br><span class=\"line\">    HEAD指向的分支代码</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">    某提交的代码</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 某提交信息commit messages</span><br></pre></td></tr></table></figure><br>箭头和等号是Git用来区别不同分支或者提交的不同内容，通常我们保留最新的分支修改就可以了。然后再通过以下代码完成合并</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 某文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git cherry-pick [commitid] #再使用一次命令合并</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多次使用<code>git cherry-pick [commitid]</code>将其他几个提交合并</p>\n</blockquote>\n<h3 id=\"切换到master分支，将temp合并到master分支\"><a href=\"#切换到master分支，将temp合并到master分支\" class=\"headerlink\" title=\"切换到master分支，将temp合并到master分支\"></a>切换到master分支，将temp合并到master分支</h3><pre><code>git checkout master\n\ngit merge temp #使用此命令可能也会有冲突\n</code></pre><p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_181756.png\" alt=\"发生冲突\">  </p>\n<blockquote>\n<p>发生冲突后，进入了MERGING模式，跟上面的方法一样进入对应文件修改,然后<code>git add</code> 和<code>git commit</code>然后<code>git merge temp</code>，可以使用<code>git log</code>打印提交信息查看是否合并成功</p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_181946.png\" alt=\"修改文件内容，保存最新分支信息\"><br><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_182814.png\" alt=\"两次提交我们的修改\">  </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/zhang_xiaomeng/article/details/52597076\" target=\"_blank\" rel=\"noopener\">《git detached from head》————夜空霓虹</a><br><a href=\"http://www.cnblogs.com/hutaoer/archive/2013/05/07/git_checkout.html?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">《git checkout 命令详解》————胡涛儿</a><br><a href=\"http://www.jianshu.com/p/ae4857d2f868\" target=\"_blank\" rel=\"noopener\">《git问题记录–如何从从detached HEAD状态解救出来》————馒头MT</a><br><a href=\"http://sg552.iteye.com/blog/1300713\" target=\"_blank\" rel=\"noopener\">《git cherry-pick. 如何把已经提交的commit, 从一个分支放到另一个分支》————sg552</a></p>\n<h1 id=\"git之head-detached-from-xxx\"><a href=\"#git之head-detached-from-xxx\" class=\"headerlink\" title=\"git之head detached from [xxx]\"></a>git之head detached from [xxx]</h1><h2 id=\"头部从某提交分离？\"><a href=\"#头部从某提交分离？\" class=\"headerlink\" title=\"头部从某提交分离？\"></a>头部从某提交分离？</h2><p>近期发现，android studio提交的时候提示<code>head detached from [xxx]</code>，不知道是什么意思，百度了之后大概了解了一下，就是不知道是不是之前操作什么，导致我的一次提交没提交到Head指向的分支，这是很危险，意味当前提交不属于任何分支。<br></p>","more":"<p></p>\n<blockquote>\n<p><code>git checkout master</code>的时候，提示有5个提交没有链接任何一个分支，同时也给出了解决方式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Checking out files: 100% (8624&#x2F;8624), done.</span><br><span class=\"line\">Warning: you are leaving 5 commits behind, not connected to</span><br><span class=\"line\">any of your branches:</span><br><span class=\"line\"></span><br><span class=\"line\">  d232605 all</span><br><span class=\"line\">  78c29d8 all</span><br><span class=\"line\">  4eba374 DemoDataBindingLibrary-测试databinding框架</span><br><span class=\"line\">  7c6d192 DemoDataBindingLibrary-测试databinding框架</span><br><span class=\"line\">  15c2a61 EnglishApp-更换评价展示；修复成绩显示不正确的情况</span><br><span class=\"line\"></span><br><span class=\"line\">If you want to keep them by creating a new branch, this may be a good time</span><br><span class=\"line\">to do so with:</span><br><span class=\"line\"></span><br><span class=\"line\"> git branch &lt;new-branch-name&gt; d232605</span><br><span class=\"line\"></span><br><span class=\"line\">Switched to branch &#39;master&#39;</span><br><span class=\"line\">M       GeekNews</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>git log</code>查看当前分支历史提交记录，发现并没有那五个提交记录，显然脱离了master分支  </p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_154037.png\" alt=\"查看历史提交记录\"></p>\n<h2 id=\"通过合并分支来解决\"><a href=\"#通过合并分支来解决\" class=\"headerlink\" title=\"通过合并分支来解决\"></a>通过合并分支来解决</h2><blockquote>\n<p>可以用以下方式来解决</p>\n<ol>\n<li>创建一个临时分支，将detach出来的提交，合并到临时分支中</li>\n<li>将临时分支merge到工作分支中。</li>\n<li>删除临时分支</li>\n</ol>\n</blockquote>\n<h3 id=\"创建临时分支\"><a href=\"#创建临时分支\" class=\"headerlink\" title=\"创建临时分支\"></a>创建临时分支</h3><blockquote>\n<p>注意此命令并未立即切换到临时分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch temp 15c2a61</span><br></pre></td></tr></table></figure><br><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_162203.png\" alt=\"创建临时分支\">  </p>\n</blockquote>\n<h3 id=\"将其他detach的一起合并到temp\"><a href=\"#将其他detach的一起合并到temp\" class=\"headerlink\" title=\"将其他detach的一起合并到temp\"></a>将其他detach的一起合并到temp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout temp #切换到temp分支</span><br><span class=\"line\">git cherry-pick [commitid]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>所以合并期间可能会出现合并冲突（cherry-pick为优选的意思，意思是取一个最优的提交来合并，有时候懂英文理解得比较快）</p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_183817.png\" alt=\"cherry-pick合并冲突\">  </p>\n<blockquote>\n<p>上面可以看到提示冲突后，会CHERRY-PICK模式，在这期间无法切换分支等其他操作。会提示某文件冲突，**我们可以打开对应文件，会发现会有以下符号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; HEAD</span><br><span class=\"line\">    HEAD指向的分支代码</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">    某提交的代码</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 某提交信息commit messages</span><br></pre></td></tr></table></figure><br>箭头和等号是Git用来区别不同分支或者提交的不同内容，通常我们保留最新的分支修改就可以了。然后再通过以下代码完成合并</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 某文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git cherry-pick [commitid] #再使用一次命令合并</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多次使用<code>git cherry-pick [commitid]</code>将其他几个提交合并</p>\n</blockquote>\n<h3 id=\"切换到master分支，将temp合并到master分支\"><a href=\"#切换到master分支，将temp合并到master分支\" class=\"headerlink\" title=\"切换到master分支，将temp合并到master分支\"></a>切换到master分支，将temp合并到master分支</h3><pre><code>git checkout master\n\ngit merge temp #使用此命令可能也会有冲突\n</code></pre><p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_181756.png\" alt=\"发生冲突\">  </p>\n<blockquote>\n<p>发生冲突后，进入了MERGING模式，跟上面的方法一样进入对应文件修改,然后<code>git add</code> 和<code>git commit</code>然后<code>git merge temp</code>，可以使用<code>git log</code>打印提交信息查看是否合并成功</p>\n</blockquote>\n<p><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_181946.png\" alt=\"修改文件内容，保存最新分支信息\"><br><img src=\"/2017/06/12/git%E4%B9%8Bhead-detached-from-xxx/2017-06-12_182814.png\" alt=\"两次提交我们的修改\">  </p>"},{"title":"git经验之更改远程仓库地址","date":"2017-04-18T13:28:07.000Z","_content":"# 参考链接\n[git修改远程仓库地址——赖忠标](http://www.cnblogs.com/lazb/articles/5597878.html)  \n\n# git修改远程仓库地址的三种方法\n## 直接命令修改\n\n> git remote set-url origin  [url]\n\n<!--more-->\n## 命令，先删除后设新地址\n\n> git remote rm origin  \ngit remote add origin [url]\n\n## 直接修改配置文件\n文件位置：git/config  \n`config`\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[gui]\n\twmstate = normal\n\tgeometry = 841x483+225+101 189 218\n[remote \"origin\"]\n\turl = git@github.com:zengmianhui/android_project.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n\n```","source":"_posts/git经验之更改远程仓库地址.md","raw":"---\ntitle: git经验之更改远程仓库地址\ndate: 2017-04-18 21:28:07\ncategories:\n  - git\n  - git\ntags:\n  - git\n---\n# 参考链接\n[git修改远程仓库地址——赖忠标](http://www.cnblogs.com/lazb/articles/5597878.html)  \n\n# git修改远程仓库地址的三种方法\n## 直接命令修改\n\n> git remote set-url origin  [url]\n\n<!--more-->\n## 命令，先删除后设新地址\n\n> git remote rm origin  \ngit remote add origin [url]\n\n## 直接修改配置文件\n文件位置：git/config  \n`config`\n```\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[gui]\n\twmstate = normal\n\tgeometry = 841x483+225+101 189 218\n[remote \"origin\"]\n\turl = git@github.com:zengmianhui/android_project.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n\n```","slug":"git经验之更改远程仓库地址","published":1,"updated":"2019-05-05T09:43:38.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncieg000ky8uscvx6wl96","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/lazb/articles/5597878.html\" target=\"_blank\" rel=\"noopener\">git修改远程仓库地址——赖忠标</a>  </p>\n<h1 id=\"git修改远程仓库地址的三种方法\"><a href=\"#git修改远程仓库地址的三种方法\" class=\"headerlink\" title=\"git修改远程仓库地址的三种方法\"></a>git修改远程仓库地址的三种方法</h1><h2 id=\"直接命令修改\"><a href=\"#直接命令修改\" class=\"headerlink\" title=\"直接命令修改\"></a>直接命令修改</h2><blockquote>\n<p>git remote set-url origin  [url]</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"命令，先删除后设新地址\"><a href=\"#命令，先删除后设新地址\" class=\"headerlink\" title=\"命令，先删除后设新地址\"></a>命令，先删除后设新地址</h2><blockquote>\n<p>git remote rm origin<br>git remote add origin [url]</p>\n</blockquote>\n<h2 id=\"直接修改配置文件\"><a href=\"#直接修改配置文件\" class=\"headerlink\" title=\"直接修改配置文件\"></a>直接修改配置文件</h2><p>文件位置：git/config<br><code>config</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion &#x3D; 0</span><br><span class=\"line\">\tfilemode &#x3D; false</span><br><span class=\"line\">\tbare &#x3D; false</span><br><span class=\"line\">\tlogallrefupdates &#x3D; true</span><br><span class=\"line\">\tsymlinks &#x3D; false</span><br><span class=\"line\">\tignorecase &#x3D; true</span><br><span class=\"line\">[gui]</span><br><span class=\"line\">\twmstate &#x3D; normal</span><br><span class=\"line\">\tgeometry &#x3D; 841x483+225+101 189 218</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl &#x3D; git@github.com:zengmianhui&#x2F;android_project.git</span><br><span class=\"line\">\tfetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">\tremote &#x3D; origin</span><br><span class=\"line\">\tmerge &#x3D; refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/lazb/articles/5597878.html\" target=\"_blank\" rel=\"noopener\">git修改远程仓库地址——赖忠标</a>  </p>\n<h1 id=\"git修改远程仓库地址的三种方法\"><a href=\"#git修改远程仓库地址的三种方法\" class=\"headerlink\" title=\"git修改远程仓库地址的三种方法\"></a>git修改远程仓库地址的三种方法</h1><h2 id=\"直接命令修改\"><a href=\"#直接命令修改\" class=\"headerlink\" title=\"直接命令修改\"></a>直接命令修改</h2><blockquote>\n<p>git remote set-url origin  [url]</p>\n</blockquote>","more":"<h2 id=\"命令，先删除后设新地址\"><a href=\"#命令，先删除后设新地址\" class=\"headerlink\" title=\"命令，先删除后设新地址\"></a>命令，先删除后设新地址</h2><blockquote>\n<p>git remote rm origin<br>git remote add origin [url]</p>\n</blockquote>\n<h2 id=\"直接修改配置文件\"><a href=\"#直接修改配置文件\" class=\"headerlink\" title=\"直接修改配置文件\"></a>直接修改配置文件</h2><p>文件位置：git/config<br><code>config</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion &#x3D; 0</span><br><span class=\"line\">\tfilemode &#x3D; false</span><br><span class=\"line\">\tbare &#x3D; false</span><br><span class=\"line\">\tlogallrefupdates &#x3D; true</span><br><span class=\"line\">\tsymlinks &#x3D; false</span><br><span class=\"line\">\tignorecase &#x3D; true</span><br><span class=\"line\">[gui]</span><br><span class=\"line\">\twmstate &#x3D; normal</span><br><span class=\"line\">\tgeometry &#x3D; 841x483+225+101 189 218</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl &#x3D; git@github.com:zengmianhui&#x2F;android_project.git</span><br><span class=\"line\">\tfetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">\tremote &#x3D; origin</span><br><span class=\"line\">\tmerge &#x3D; refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure></p>"},{"title":"github博客没有category和tags？","date":"2017-01-27T17:37:23.000Z","_content":"摘要：\n\tgithub博客没有category和tags？\n<!--more-->\n# github博客没有category和tags？\n在完成了github博客之前后发现菜单栏没有category和tags？\n请按如下办法设置：\n\n```\n$ hexo new page \"categories\"\n$ hexo new page \"tages\"\n```\n![这里写图片描述](http://img.blog.csdn.net/20170128010203505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n分别打开对应文件夹里面的md文件，并编辑\n![这里写图片描述](http://img.blog.csdn.net/20170128010501819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170128010511304?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n最后要在主题中的_config.yml中修改menu\n![这里写图片描述](http://img.blog.csdn.net/20170128010757211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/github博客没有category和tags？.md","raw":"---\ntitle: github博客没有category和tags？\ndate: 2017-01-28 01:37:23\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n摘要：\n\tgithub博客没有category和tags？\n<!--more-->\n# github博客没有category和tags？\n在完成了github博客之前后发现菜单栏没有category和tags？\n请按如下办法设置：\n\n```\n$ hexo new page \"categories\"\n$ hexo new page \"tages\"\n```\n![这里写图片描述](http://img.blog.csdn.net/20170128010203505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n分别打开对应文件夹里面的md文件，并编辑\n![这里写图片描述](http://img.blog.csdn.net/20170128010501819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170128010511304?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n最后要在主题中的_config.yml中修改menu\n![这里写图片描述](http://img.blog.csdn.net/20170128010757211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"github博客没有category和tags？","published":1,"updated":"2019-05-05T09:43:38.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncieh000ly8us8uwy4yzh","content":"<p>摘要：<br>    github博客没有category和tags？<br><a id=\"more\"></a></p>\n<h1 id=\"github博客没有category和tags？\"><a href=\"#github博客没有category和tags？\" class=\"headerlink\" title=\"github博客没有category和tags？\"></a>github博客没有category和tags？</h1><p>在完成了github博客之前后发现菜单栏没有category和tags？<br>请按如下办法设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page &quot;categories&quot;</span><br><span class=\"line\">$ hexo new page &quot;tages&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170128010203505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>分别打开对应文件夹里面的md文件，并编辑<br><img src=\"http://img.blog.csdn.net/20170128010501819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170128010511304?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>最后要在主题中的_config.yml中修改menu<br><img src=\"http://img.blog.csdn.net/20170128010757211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>摘要：<br>    github博客没有category和tags？<br></p>","more":"<p></p>\n<h1 id=\"github博客没有category和tags？\"><a href=\"#github博客没有category和tags？\" class=\"headerlink\" title=\"github博客没有category和tags？\"></a>github博客没有category和tags？</h1><p>在完成了github博客之前后发现菜单栏没有category和tags？<br>请按如下办法设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page &quot;categories&quot;</span><br><span class=\"line\">$ hexo new page &quot;tages&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170128010203505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>分别打开对应文件夹里面的md文件，并编辑<br><img src=\"http://img.blog.csdn.net/20170128010501819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170128010511304?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>最后要在主题中的_config.yml中修改menu<br><img src=\"http://img.blog.csdn.net/20170128010757211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"hexo个人博客-如何在markdown上引用本地图片的地址？","date":"2017-03-01T12:16:42.000Z","_content":"## 文章来自\n[在 hexo 中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n# hexo个人博客-如何在markdown上引用本地图片的地址？\n## 相关的问题\n由于markdown的相关特性，图片只能来自于网络，但是使用markdown写博客之前，就得先将图片上传到网络，非常地不方便，所以我采用插件的方式来消除这种麻烦，代码还是markdown语法，虽然编辑markdown的时候，看不到图片，但是上发布到github上时，就是正常的\n## 插件地址\n<!--more-->\n[hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n## 解决方案\n### _config.yml\n> 在配置文件中_config.yml 查看是否存在 post_asset_folder:true 。\n### 安装插件\n> npm install https://github.com/CodeFalling/hexo-asset-image --save\n\n![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？/1.png)\n\n\n### 创建目录\n```\nhexo个人博客-如何在markdown上引用本地图片的地址？\n└── 1.png\nhexo个人博客-如何在markdown上引用本地图片的地址？.md\n\n```\n在博客的同级目录下创建一个与markdown文件名一样的文件夹\n### 在markdown使用正常语法\n然后使用正常的语法\n```\n![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？/1.png)\n```\n然后会生成相应public结构\n\n```\npublic/2017/03/01/hexo个人博客-如何在markdown上引用本地图片的地址？\n└── 1.png\n```\n同时生成的html是\n\n```\n<img src=\"/2017/03/01/hexo个人博客-如何在markdown上引用本地图片的地址？\" alt=\"1.png\">\n```\n\n\n\n\n\n\n","source":"_posts/hexo个人博客-如何在markdown上引用本地图片的地址？.md","raw":"---\ntitle: hexo个人博客-如何在markdown上引用本地图片的地址？\ndate: 2017-03-01 20:16:42\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n## 文章来自\n[在 hexo 中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n# hexo个人博客-如何在markdown上引用本地图片的地址？\n## 相关的问题\n由于markdown的相关特性，图片只能来自于网络，但是使用markdown写博客之前，就得先将图片上传到网络，非常地不方便，所以我采用插件的方式来消除这种麻烦，代码还是markdown语法，虽然编辑markdown的时候，看不到图片，但是上发布到github上时，就是正常的\n## 插件地址\n<!--more-->\n[hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n## 解决方案\n### _config.yml\n> 在配置文件中_config.yml 查看是否存在 post_asset_folder:true 。\n### 安装插件\n> npm install https://github.com/CodeFalling/hexo-asset-image --save\n\n![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？/1.png)\n\n\n### 创建目录\n```\nhexo个人博客-如何在markdown上引用本地图片的地址？\n└── 1.png\nhexo个人博客-如何在markdown上引用本地图片的地址？.md\n\n```\n在博客的同级目录下创建一个与markdown文件名一样的文件夹\n### 在markdown使用正常语法\n然后使用正常的语法\n```\n![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？/1.png)\n```\n然后会生成相应public结构\n\n```\npublic/2017/03/01/hexo个人博客-如何在markdown上引用本地图片的地址？\n└── 1.png\n```\n同时生成的html是\n\n```\n<img src=\"/2017/03/01/hexo个人博客-如何在markdown上引用本地图片的地址？\" alt=\"1.png\">\n```\n\n\n\n\n\n\n","slug":"hexo个人博客-如何在markdown上引用本地图片的地址？","published":1,"updated":"2019-05-05T09:43:39.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciei000my8us5xj0o6cq","content":"<h2 id=\"文章来自\"><a href=\"#文章来自\" class=\"headerlink\" title=\"文章来自\"></a>文章来自</h2><p><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"noopener\">在 hexo 中无痛使用本地图片</a></p>\n<h1 id=\"hexo个人博客-如何在markdown上引用本地图片的地址？\"><a href=\"#hexo个人博客-如何在markdown上引用本地图片的地址？\" class=\"headerlink\" title=\"hexo个人博客-如何在markdown上引用本地图片的地址？\"></a>hexo个人博客-如何在markdown上引用本地图片的地址？</h1><h2 id=\"相关的问题\"><a href=\"#相关的问题\" class=\"headerlink\" title=\"相关的问题\"></a>相关的问题</h2><p>由于markdown的相关特性，图片只能来自于网络，但是使用markdown写博客之前，就得先将图片上传到网络，非常地不方便，所以我采用插件的方式来消除这种麻烦，代码还是markdown语法，虽然编辑markdown的时候，看不到图片，但是上发布到github上时，就是正常的</p>\n<h2 id=\"插件地址\"><a href=\"#插件地址\" class=\"headerlink\" title=\"插件地址\"></a>插件地址</h2><a id=\"more\"></a>\n<p><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">hexo-asset-image</a></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><blockquote>\n<p>在配置文件中_config.yml 查看是否存在 post_asset_folder:true 。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n</blockquote>\n<p><img src=\"/2017/03/01/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%8A%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%9F/1.png\" alt=\"1.png\"></p>\n<h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo个人博客-如何在markdown上引用本地图片的地址？</span><br><span class=\"line\">└── 1.png</span><br><span class=\"line\">hexo个人博客-如何在markdown上引用本地图片的地址？.md</span><br></pre></td></tr></table></figure>\n<p>在博客的同级目录下创建一个与markdown文件名一样的文件夹</p>\n<h3 id=\"在markdown使用正常语法\"><a href=\"#在markdown使用正常语法\" class=\"headerlink\" title=\"在markdown使用正常语法\"></a>在markdown使用正常语法</h3><p>然后使用正常的语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？&#x2F;1.png)</span><br></pre></td></tr></table></figure><br>然后会生成相应public结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public&#x2F;2017&#x2F;03&#x2F;01&#x2F;hexo个人博客-如何在markdown上引用本地图片的地址？</span><br><span class=\"line\">└── 1.png</span><br></pre></td></tr></table></figure>\n<p>同时生成的html是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&quot;&#x2F;2017&#x2F;03&#x2F;01&#x2F;hexo个人博客-如何在markdown上引用本地图片的地址？&quot; alt&#x3D;&quot;1.png&quot;&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"文章来自\"><a href=\"#文章来自\" class=\"headerlink\" title=\"文章来自\"></a>文章来自</h2><p><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"noopener\">在 hexo 中无痛使用本地图片</a></p>\n<h1 id=\"hexo个人博客-如何在markdown上引用本地图片的地址？\"><a href=\"#hexo个人博客-如何在markdown上引用本地图片的地址？\" class=\"headerlink\" title=\"hexo个人博客-如何在markdown上引用本地图片的地址？\"></a>hexo个人博客-如何在markdown上引用本地图片的地址？</h1><h2 id=\"相关的问题\"><a href=\"#相关的问题\" class=\"headerlink\" title=\"相关的问题\"></a>相关的问题</h2><p>由于markdown的相关特性，图片只能来自于网络，但是使用markdown写博客之前，就得先将图片上传到网络，非常地不方便，所以我采用插件的方式来消除这种麻烦，代码还是markdown语法，虽然编辑markdown的时候，看不到图片，但是上发布到github上时，就是正常的</p>\n<h2 id=\"插件地址\"><a href=\"#插件地址\" class=\"headerlink\" title=\"插件地址\"></a>插件地址</h2>","more":"<p><a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">hexo-asset-image</a></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><blockquote>\n<p>在配置文件中_config.yml 查看是否存在 post_asset_folder:true 。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"noopener\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n</blockquote>\n<p><img src=\"/2017/03/01/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E4%B8%8A%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%9F/1.png\" alt=\"1.png\"></p>\n<h3 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo个人博客-如何在markdown上引用本地图片的地址？</span><br><span class=\"line\">└── 1.png</span><br><span class=\"line\">hexo个人博客-如何在markdown上引用本地图片的地址？.md</span><br></pre></td></tr></table></figure>\n<p>在博客的同级目录下创建一个与markdown文件名一样的文件夹</p>\n<h3 id=\"在markdown使用正常语法\"><a href=\"#在markdown使用正常语法\" class=\"headerlink\" title=\"在markdown使用正常语法\"></a>在markdown使用正常语法</h3><p>然后使用正常的语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![1.png](hexo个人博客-如何在markdown上引用本地图片的地址？&#x2F;1.png)</span><br></pre></td></tr></table></figure><br>然后会生成相应public结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public&#x2F;2017&#x2F;03&#x2F;01&#x2F;hexo个人博客-如何在markdown上引用本地图片的地址？</span><br><span class=\"line\">└── 1.png</span><br></pre></td></tr></table></figure>\n<p>同时生成的html是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&quot;&#x2F;2017&#x2F;03&#x2F;01&#x2F;hexo个人博客-如何在markdown上引用本地图片的地址？&quot; alt&#x3D;&quot;1.png&quot;&gt;</span><br></pre></td></tr></table></figure>"},{"title":"hexo之如何强制访问https","date":"2018-11-03T15:53:19.000Z","_content":"\n之前一直不知道为什么部署到github的主页点分类或者链接会无法访问，原来hexo部署生成的html访问的都是`http`协议的，github关闭了http的访问\n\n<!--more-->\n\n只需要将以下代码加入主题文件`_layout.swig`文件中底部即可,位置是`E:\\blog\\themes\\next\\layout`，`E:\\blog\\`是我hexo的位置\n\n```\n  <!-- 强制使用https访问 -->\n  <script type=\"text/javascript\">\n    (function() {\n\t\t//这里是你的域名，发布后记得清一下缓存F12看一下有没有代码有没有加上去\n    var host = \"iszengmh.github.io\";\n    if ((host == window.location.host) && (window.location.protocol != \"https:\"))\n        window.location.protocol = \"https\";\n    })(); \n</script>\n```\n![1.png](hexo之如何强制访问https/1.png)\n![1.png](hexo之如何强制访问https/2.png)\n\n","source":"_posts/hexo之如何强制访问https.md","raw":"---\ntitle: hexo之如何强制访问https\ndate: 2018-11-03 23:53:19\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n\n之前一直不知道为什么部署到github的主页点分类或者链接会无法访问，原来hexo部署生成的html访问的都是`http`协议的，github关闭了http的访问\n\n<!--more-->\n\n只需要将以下代码加入主题文件`_layout.swig`文件中底部即可,位置是`E:\\blog\\themes\\next\\layout`，`E:\\blog\\`是我hexo的位置\n\n```\n  <!-- 强制使用https访问 -->\n  <script type=\"text/javascript\">\n    (function() {\n\t\t//这里是你的域名，发布后记得清一下缓存F12看一下有没有代码有没有加上去\n    var host = \"iszengmh.github.io\";\n    if ((host == window.location.host) && (window.location.protocol != \"https:\"))\n        window.location.protocol = \"https\";\n    })(); \n</script>\n```\n![1.png](hexo之如何强制访问https/1.png)\n![1.png](hexo之如何强制访问https/2.png)\n\n","slug":"hexo之如何强制访问https","published":1,"updated":"2019-05-05T09:43:39.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciej000ny8uskwtfhbb2","content":"<p>之前一直不知道为什么部署到github的主页点分类或者链接会无法访问，原来hexo部署生成的html访问的都是<code>http</code>协议的，github关闭了http的访问</p>\n<a id=\"more\"></a>\n<p>只需要将以下代码加入主题文件<code>_layout.swig</code>文件中底部即可,位置是<code>E:\\blog\\themes\\next\\layout</code>，<code>E:\\blog\\</code>是我hexo的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- 强制使用https访问 --&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    (function() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;这里是你的域名，发布后记得清一下缓存F12看一下有没有代码有没有加上去</span><br><span class=\"line\">    var host &#x3D; &quot;iszengmh.github.io&quot;;</span><br><span class=\"line\">    if ((host &#x3D;&#x3D; window.location.host) &amp;&amp; (window.location.protocol !&#x3D; &quot;https:&quot;))</span><br><span class=\"line\">        window.location.protocol &#x3D; &quot;https&quot;;</span><br><span class=\"line\">    &#125;)(); </span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"hexo之如何强制访问https/1.png\" alt=\"1.png\"><br><img src=\"hexo之如何强制访问https/2.png\" alt=\"1.png\"></p>\n","site":{"data":{}},"excerpt":"<p>之前一直不知道为什么部署到github的主页点分类或者链接会无法访问，原来hexo部署生成的html访问的都是<code>http</code>协议的，github关闭了http的访问</p>","more":"<p>只需要将以下代码加入主题文件<code>_layout.swig</code>文件中底部即可,位置是<code>E:\\blog\\themes\\next\\layout</code>，<code>E:\\blog\\</code>是我hexo的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- 强制使用https访问 --&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    (function() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;这里是你的域名，发布后记得清一下缓存F12看一下有没有代码有没有加上去</span><br><span class=\"line\">    var host &#x3D; &quot;iszengmh.github.io&quot;;</span><br><span class=\"line\">    if ((host &#x3D;&#x3D; window.location.host) &amp;&amp; (window.location.protocol !&#x3D; &quot;https:&quot;))</span><br><span class=\"line\">        window.location.protocol &#x3D; &quot;https&quot;;</span><br><span class=\"line\">    &#125;)(); </span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"hexo之如何强制访问https/1.png\" alt=\"1.png\"><br><img src=\"hexo之如何强制访问https/2.png\" alt=\"1.png\"></p>"},{"title":"hexo如何为github博客设置一个域名？","date":"2017-01-29T04:09:00.000Z","_content":"摘要：\n\t为我们的github博客设置一个个人域名\n<!--more-->\n正文：\n\t我的域名是在腾讯去注册的，那就应该去腾讯云解析域名。\n操作步骤：\n## 第一步\n管理中心-域名管理-点击解析-点击添加记录\n![这里写图片描述](http://img.blog.csdn.net/20170129115704677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170129115714974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写github上个人博客的地址\n![这里写图片描述](http://img.blog.csdn.net/20170129115722943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 第二步\n![这里写图片描述](http://img.blog.csdn.net/20170129115904271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 第三步\n在站点的source目录下创建CNAME并添加域名不包含Http://\n![这里写图片描述](http://img.blog.csdn.net/20170129120048006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n发布博客即可\n\n```\n$ hexo d -g\n```\n\n","source":"_posts/hexo如何为github博客设置一个域名？.md","raw":"---\ntitle: hexo如何为github博客设置一个域名？\ndate: 2017-01-29 12:09:00\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n摘要：\n\t为我们的github博客设置一个个人域名\n<!--more-->\n正文：\n\t我的域名是在腾讯去注册的，那就应该去腾讯云解析域名。\n操作步骤：\n## 第一步\n管理中心-域名管理-点击解析-点击添加记录\n![这里写图片描述](http://img.blog.csdn.net/20170129115704677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170129115714974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写github上个人博客的地址\n![这里写图片描述](http://img.blog.csdn.net/20170129115722943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 第二步\n![这里写图片描述](http://img.blog.csdn.net/20170129115904271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 第三步\n在站点的source目录下创建CNAME并添加域名不包含Http://\n![这里写图片描述](http://img.blog.csdn.net/20170129120048006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n发布博客即可\n\n```\n$ hexo d -g\n```\n\n","slug":"hexo如何为github博客设置一个域名？","published":1,"updated":"2019-05-05T09:43:39.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciek000oy8us88o8hdmz","content":"<p>摘要：<br>    为我们的github博客设置一个个人域名<br><a id=\"more\"></a><br>正文：<br>    我的域名是在腾讯去注册的，那就应该去腾讯云解析域名。<br>操作步骤：</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>管理中心-域名管理-点击解析-点击添加记录<br><img src=\"http://img.blog.csdn.net/20170129115704677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170129115714974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>填写github上个人博客的地址<br><img src=\"http://img.blog.csdn.net/20170129115722943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p><img src=\"http://img.blog.csdn.net/20170129115904271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>在站点的source目录下创建CNAME并添加域名不包含Http://<br><img src=\"http://img.blog.csdn.net/20170129120048006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>发布博客即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>摘要：<br>    为我们的github博客设置一个个人域名<br></p>","more":"<br>正文：<br>    我的域名是在腾讯去注册的，那就应该去腾讯云解析域名。<br>操作步骤：<p></p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>管理中心-域名管理-点击解析-点击添加记录<br><img src=\"http://img.blog.csdn.net/20170129115704677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170129115714974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>填写github上个人博客的地址<br><img src=\"http://img.blog.csdn.net/20170129115722943?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p><img src=\"http://img.blog.csdn.net/20170129115904271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>在站点的source目录下创建CNAME并添加域名不包含Http://<br><img src=\"http://img.blog.csdn.net/20170129120048006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>发布博客即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>"},{"title":"hexo从多说评论转为韩国来必力评论","date":"2017-05-02T06:57:58.000Z","_content":"\n# 参考链接\n[《hexo+next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景》——sunshine940326](http://blog.csdn.net/sunshine940326/article/details/69933696)\n\n# hexo从多说评论转为韩国来必力评论\n&emsp;&emsp;对于多说评论，可能很多人也知道了，就是6月1号后就不支持，公司没资金支持了吧。  \n&emsp;&emsp;本来我是要用友言，集成后发现，它居然不支持https；本来也想用比较有人气的网易云跟贴的，但是注册站点的时候，它居然只支持未注册的域名，因为我不想维护我之前的域名，所以我一直直接用github提供的，github.io已经是注册的了，所以没有办法。\n## 重点：关于为什么这篇文章之前评论没有了\n> 发现看的人多了起来，我觉得域名有可能泄漏我的真实姓名， 所以更换了域名,本来是想，反正改了域名，还是有一些网站会爬取我的数据，我也不担心别人找不到文章了，但是突然发现之前的评论没有了，咨询来必力的客服后发现，他们的数据可能是直接关联url的，如果需要更换域名，需要代码中设定refer值，也就是每个页面都需要设定新的域名，如果javaweb可能一次性可以搞定，但是像我这种静态网站的，没得救了，**如果你需要使用来必力，请慎重选择**，如果你已经使用了来必力，对此表示歉意  \n> 没有了评论感觉到文章等少了一些互动，有些没意思了的样子。\n\n## 简介\n来必力也是一个社会化评论系统，虽然是韩国的，访问速度上可能也会慢一点，不过总比没有的好啊（想想以后我的主页热门起来了，也会有很多人来评论哒，哈哈）\n<!--more-->\n## 注册来必力\n直接到来必来注册一个账号就可以了，这个就不多说啦。\n## 获取代码\n有人可能会不知道怎么进入后台，我也是找了一会，才找到的。\n> 就是首页拉到下面你会看到一个“去看介绍”的按钮\n\n![点击去看介绍](hexo从多说评论转为韩国来必力评论/2017-05-02_130204.jpg)  \n\n> 再拉下来点击“安装来必力”就可以进入后台了\n\n![点击安装来必力](hexo从多说评论转为韩国来必力评论/2017-05-02_130529.jpg)\n\n> 当然是选择“city免费版”的咯\n\n![选择“city免费版”](hexo从多说评论转为韩国来必力评论/2017-05-02_130706.jpg)\n\n> 填相关站点信息（我的已经点写完了，所以没办法演示）\n\n![填相关站点信息](hexo从多说评论转为韩国来必力评论/2017-05-02_130841.jpg)\n\n> 进入后台可能会点慢，耐心点，然后选择“代码管理”，我们只要“一般网站”就可以了\n\n![选择“代码管理”](hexo从多说评论转为韩国来必力评论/2017-05-02_131022.jpg)\n\n## 主题里面配置来必力\n### 先来个文件夹简介\n\n![先来文件夹简介](hexo从多说评论转为韩国来必力评论/2017-05-02_131313.jpg)\n\n### 我们需要修改或者增加的文件\n#### 创建文件laibili.swig\n`\\themes\\next\\layout\\_scripts\\third-party\\comments\\laibili.swig`，你也可以在文件夹下复制一个，然后修改。  以下为文件内容\n`if page.comments `和倒数第二个`endif`之间为必力的javascript代码\n```\n {% if not (theme.duoshuo and theme.duoshuo.shortname)\n    and not theme.duoshuo_shortname\n    and not theme.disqus_shortname\n    and not theme.hypercomments_id\n    and not theme.gentie_productKey %}\n\n    {% if theme.laibili_uid %}\n      {% set uid = theme.laibili_uid %}\n    {% endif %}\n\n   {% if page.comments %}\n        <!-- UY BEGIN -->\n        <script type=\"text/javascript\">\n           (function(d, s) {\n               var j, e = d.getElementsByTagName(s)[0];\n\n               if (typeof LivereTower === 'function') { return; }\n\n               j = d.createElement(s);\n               j.src = 'https://cdn-city.livere.com/js/embed.dist.js';\n               j.async = true;\n\n               e.parentNode.insertBefore(j, e);\n           })(document, 'script');\n        </script>\n        <noscript>为正常使用来必力评论功能请激活JavaScript</noscript>\n        <!-- UY END -->\n    {% endif %}\n  {% endif %}\n```\n#### 修改文件third-party\\comments.swig\n`\\themes\\next\\layout\\_scripts\\third-party\\comments.swig`\n增加一行代码  \n![增加一行代码](hexo从多说评论转为韩国来必力评论\\2017-05-02_150715.png)\n\n#### 修改文件_partials\\comments.swig  \n`\\themes\\next\\layout\\_partials\\comments.swig`增加div代码  \n本来是想直接使用`data-uid=\"{{theme.laibili_uid}}\"`，来引入主题配置文件中uid的，但是死活加载不出来，所以就直接写入uid了。  \n![增加div代码](hexo从多说评论转为韩国来必力评论\\2017-05-02_132947.jpg)\n```\n{% elseif theme.laibili_uid %}\n  <div id=\"lv-container\" data-id=\"city\" data-uid=\"直接写入你的UID\">\n  </div>\n{% endif %}\n```\n#### 修改主题配置文件\n`E:\\blog\\themes\\next\\_config.yml`，增加下这一行代码，由于我没有动态获取配置文件里面的uid，所以，这里的作用，也只能是判断是有配置这个代码，来决定是否嵌入评论，修改文件_partials\\comments.swig里面的代码的时候，你们应该也可以看懂一点代码。\n```\nlaibili_uid: 直接写你的uid\n```\n## 最后\n提交hexo就可以了\n```\n> hexo clean\n> hexo d -g\n\n```\n## 效果\n![效果](hexo从多说评论转为韩国来必力评论/2017-05-02_134259.jpg)\n\n","source":"_posts/hexo从多说评论转为韩国来必力评论.md","raw":"---\ntitle: hexo从多说评论转为韩国来必力评论\ndate: 2017-05-02 14:57:58\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n\n# 参考链接\n[《hexo+next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景》——sunshine940326](http://blog.csdn.net/sunshine940326/article/details/69933696)\n\n# hexo从多说评论转为韩国来必力评论\n&emsp;&emsp;对于多说评论，可能很多人也知道了，就是6月1号后就不支持，公司没资金支持了吧。  \n&emsp;&emsp;本来我是要用友言，集成后发现，它居然不支持https；本来也想用比较有人气的网易云跟贴的，但是注册站点的时候，它居然只支持未注册的域名，因为我不想维护我之前的域名，所以我一直直接用github提供的，github.io已经是注册的了，所以没有办法。\n## 重点：关于为什么这篇文章之前评论没有了\n> 发现看的人多了起来，我觉得域名有可能泄漏我的真实姓名， 所以更换了域名,本来是想，反正改了域名，还是有一些网站会爬取我的数据，我也不担心别人找不到文章了，但是突然发现之前的评论没有了，咨询来必力的客服后发现，他们的数据可能是直接关联url的，如果需要更换域名，需要代码中设定refer值，也就是每个页面都需要设定新的域名，如果javaweb可能一次性可以搞定，但是像我这种静态网站的，没得救了，**如果你需要使用来必力，请慎重选择**，如果你已经使用了来必力，对此表示歉意  \n> 没有了评论感觉到文章等少了一些互动，有些没意思了的样子。\n\n## 简介\n来必力也是一个社会化评论系统，虽然是韩国的，访问速度上可能也会慢一点，不过总比没有的好啊（想想以后我的主页热门起来了，也会有很多人来评论哒，哈哈）\n<!--more-->\n## 注册来必力\n直接到来必来注册一个账号就可以了，这个就不多说啦。\n## 获取代码\n有人可能会不知道怎么进入后台，我也是找了一会，才找到的。\n> 就是首页拉到下面你会看到一个“去看介绍”的按钮\n\n![点击去看介绍](hexo从多说评论转为韩国来必力评论/2017-05-02_130204.jpg)  \n\n> 再拉下来点击“安装来必力”就可以进入后台了\n\n![点击安装来必力](hexo从多说评论转为韩国来必力评论/2017-05-02_130529.jpg)\n\n> 当然是选择“city免费版”的咯\n\n![选择“city免费版”](hexo从多说评论转为韩国来必力评论/2017-05-02_130706.jpg)\n\n> 填相关站点信息（我的已经点写完了，所以没办法演示）\n\n![填相关站点信息](hexo从多说评论转为韩国来必力评论/2017-05-02_130841.jpg)\n\n> 进入后台可能会点慢，耐心点，然后选择“代码管理”，我们只要“一般网站”就可以了\n\n![选择“代码管理”](hexo从多说评论转为韩国来必力评论/2017-05-02_131022.jpg)\n\n## 主题里面配置来必力\n### 先来个文件夹简介\n\n![先来文件夹简介](hexo从多说评论转为韩国来必力评论/2017-05-02_131313.jpg)\n\n### 我们需要修改或者增加的文件\n#### 创建文件laibili.swig\n`\\themes\\next\\layout\\_scripts\\third-party\\comments\\laibili.swig`，你也可以在文件夹下复制一个，然后修改。  以下为文件内容\n`if page.comments `和倒数第二个`endif`之间为必力的javascript代码\n```\n {% if not (theme.duoshuo and theme.duoshuo.shortname)\n    and not theme.duoshuo_shortname\n    and not theme.disqus_shortname\n    and not theme.hypercomments_id\n    and not theme.gentie_productKey %}\n\n    {% if theme.laibili_uid %}\n      {% set uid = theme.laibili_uid %}\n    {% endif %}\n\n   {% if page.comments %}\n        <!-- UY BEGIN -->\n        <script type=\"text/javascript\">\n           (function(d, s) {\n               var j, e = d.getElementsByTagName(s)[0];\n\n               if (typeof LivereTower === 'function') { return; }\n\n               j = d.createElement(s);\n               j.src = 'https://cdn-city.livere.com/js/embed.dist.js';\n               j.async = true;\n\n               e.parentNode.insertBefore(j, e);\n           })(document, 'script');\n        </script>\n        <noscript>为正常使用来必力评论功能请激活JavaScript</noscript>\n        <!-- UY END -->\n    {% endif %}\n  {% endif %}\n```\n#### 修改文件third-party\\comments.swig\n`\\themes\\next\\layout\\_scripts\\third-party\\comments.swig`\n增加一行代码  \n![增加一行代码](hexo从多说评论转为韩国来必力评论\\2017-05-02_150715.png)\n\n#### 修改文件_partials\\comments.swig  \n`\\themes\\next\\layout\\_partials\\comments.swig`增加div代码  \n本来是想直接使用`data-uid=\"{{theme.laibili_uid}}\"`，来引入主题配置文件中uid的，但是死活加载不出来，所以就直接写入uid了。  \n![增加div代码](hexo从多说评论转为韩国来必力评论\\2017-05-02_132947.jpg)\n```\n{% elseif theme.laibili_uid %}\n  <div id=\"lv-container\" data-id=\"city\" data-uid=\"直接写入你的UID\">\n  </div>\n{% endif %}\n```\n#### 修改主题配置文件\n`E:\\blog\\themes\\next\\_config.yml`，增加下这一行代码，由于我没有动态获取配置文件里面的uid，所以，这里的作用，也只能是判断是有配置这个代码，来决定是否嵌入评论，修改文件_partials\\comments.swig里面的代码的时候，你们应该也可以看懂一点代码。\n```\nlaibili_uid: 直接写你的uid\n```\n## 最后\n提交hexo就可以了\n```\n> hexo clean\n> hexo d -g\n\n```\n## 效果\n![效果](hexo从多说评论转为韩国来必力评论/2017-05-02_134259.jpg)\n\n","slug":"hexo从多说评论转为韩国来必力评论","published":1,"updated":"2019-05-05T09:43:39.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciel000py8us3kt3jl1t","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/sunshine940326/article/details/69933696\" target=\"_blank\" rel=\"noopener\">《hexo+next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景》——sunshine940326</a></p>\n<h1 id=\"hexo从多说评论转为韩国来必力评论\"><a href=\"#hexo从多说评论转为韩国来必力评论\" class=\"headerlink\" title=\"hexo从多说评论转为韩国来必力评论\"></a>hexo从多说评论转为韩国来必力评论</h1><p>&emsp;&emsp;对于多说评论，可能很多人也知道了，就是6月1号后就不支持，公司没资金支持了吧。<br>&emsp;&emsp;本来我是要用友言，集成后发现，它居然不支持https；本来也想用比较有人气的网易云跟贴的，但是注册站点的时候，它居然只支持未注册的域名，因为我不想维护我之前的域名，所以我一直直接用github提供的，github.io已经是注册的了，所以没有办法。</p>\n<h2 id=\"重点：关于为什么这篇文章之前评论没有了\"><a href=\"#重点：关于为什么这篇文章之前评论没有了\" class=\"headerlink\" title=\"重点：关于为什么这篇文章之前评论没有了\"></a>重点：关于为什么这篇文章之前评论没有了</h2><blockquote>\n<p>发现看的人多了起来，我觉得域名有可能泄漏我的真实姓名， 所以更换了域名,本来是想，反正改了域名，还是有一些网站会爬取我的数据，我也不担心别人找不到文章了，但是突然发现之前的评论没有了，咨询来必力的客服后发现，他们的数据可能是直接关联url的，如果需要更换域名，需要代码中设定refer值，也就是每个页面都需要设定新的域名，如果javaweb可能一次性可以搞定，但是像我这种静态网站的，没得救了，<strong>如果你需要使用来必力，请慎重选择</strong>，如果你已经使用了来必力，对此表示歉意<br>没有了评论感觉到文章等少了一些互动，有些没意思了的样子。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>来必力也是一个社会化评论系统，虽然是韩国的，访问速度上可能也会慢一点，不过总比没有的好啊（想想以后我的主页热门起来了，也会有很多人来评论哒，哈哈）<br><a id=\"more\"></a></p>\n<h2 id=\"注册来必力\"><a href=\"#注册来必力\" class=\"headerlink\" title=\"注册来必力\"></a>注册来必力</h2><p>直接到来必来注册一个账号就可以了，这个就不多说啦。</p>\n<h2 id=\"获取代码\"><a href=\"#获取代码\" class=\"headerlink\" title=\"获取代码\"></a>获取代码</h2><p>有人可能会不知道怎么进入后台，我也是找了一会，才找到的。</p>\n<blockquote>\n<p>就是首页拉到下面你会看到一个“去看介绍”的按钮</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130204.jpg\" alt=\"点击去看介绍\">  </p>\n<blockquote>\n<p>再拉下来点击“安装来必力”就可以进入后台了</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130529.jpg\" alt=\"点击安装来必力\"></p>\n<blockquote>\n<p>当然是选择“city免费版”的咯</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130706.jpg\" alt=\"选择“city免费版”\"></p>\n<blockquote>\n<p>填相关站点信息（我的已经点写完了，所以没办法演示）</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130841.jpg\" alt=\"填相关站点信息\"></p>\n<blockquote>\n<p>进入后台可能会点慢，耐心点，然后选择“代码管理”，我们只要“一般网站”就可以了</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_131022.jpg\" alt=\"选择“代码管理”\"></p>\n<h2 id=\"主题里面配置来必力\"><a href=\"#主题里面配置来必力\" class=\"headerlink\" title=\"主题里面配置来必力\"></a>主题里面配置来必力</h2><h3 id=\"先来个文件夹简介\"><a href=\"#先来个文件夹简介\" class=\"headerlink\" title=\"先来个文件夹简介\"></a>先来个文件夹简介</h3><p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_131313.jpg\" alt=\"先来文件夹简介\"></p>\n<h3 id=\"我们需要修改或者增加的文件\"><a href=\"#我们需要修改或者增加的文件\" class=\"headerlink\" title=\"我们需要修改或者增加的文件\"></a>我们需要修改或者增加的文件</h3><h4 id=\"创建文件laibili-swig\"><a href=\"#创建文件laibili-swig\" class=\"headerlink\" title=\"创建文件laibili.swig\"></a>创建文件laibili.swig</h4><p><code>\\themes\\next\\layout\\_scripts\\third-party\\comments\\laibili.swig</code>，你也可以在文件夹下复制一个，然后修改。  以下为文件内容<br><code>if page.comments</code>和倒数第二个<code>endif</code>之间为必力的javascript代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname)</span><br><span class=\"line\">   and not theme.duoshuo_shortname</span><br><span class=\"line\">   and not theme.disqus_shortname</span><br><span class=\"line\">   and not theme.hypercomments_id</span><br><span class=\"line\">   and not theme.gentie_productKey %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#123;% if theme.laibili_uid %&#125;</span><br><span class=\"line\">     &#123;% set uid &#x3D; theme.laibili_uid %&#125;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% if page.comments %&#125;</span><br><span class=\"line\">       &lt;!-- UY BEGIN --&gt;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">          (function(d, s) &#123;</span><br><span class=\"line\">              var j, e &#x3D; d.getElementsByTagName(s)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">              if (typeof LivereTower &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123; return; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              j &#x3D; d.createElement(s);</span><br><span class=\"line\">              j.src &#x3D; &#39;https:&#x2F;&#x2F;cdn-city.livere.com&#x2F;js&#x2F;embed.dist.js&#39;;</span><br><span class=\"line\">              j.async &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">              e.parentNode.insertBefore(j, e);</span><br><span class=\"line\">          &#125;)(document, &#39;script&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">       &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;&#x2F;noscript&gt;</span><br><span class=\"line\">       &lt;!-- UY END --&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改文件third-party-comments-swig\"><a href=\"#修改文件third-party-comments-swig\" class=\"headerlink\" title=\"修改文件third-party\\comments.swig\"></a>修改文件third-party\\comments.swig</h4><p><code>\\themes\\next\\layout\\_scripts\\third-party\\comments.swig</code><br>增加一行代码<br><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_150715.png\" alt=\"增加一行代码\"></p>\n<h4 id=\"修改文件-partials-comments-swig\"><a href=\"#修改文件-partials-comments-swig\" class=\"headerlink\" title=\"修改文件_partials\\comments.swig\"></a>修改文件_partials\\comments.swig</h4><p><code>\\themes\\next\\layout\\_partials\\comments.swig</code>增加div代码<br>本来是想直接使用<code>data-uid=&quot;&quot;</code>，来引入主题配置文件中uid的，但是死活加载不出来，所以就直接写入uid了。<br><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_132947.jpg\" alt=\"增加div代码\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.laibili_uid %&#125;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;lv-container&quot; data-id&#x3D;&quot;city&quot; data-uid&#x3D;&quot;直接写入你的UID&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改主题配置文件\"><a href=\"#修改主题配置文件\" class=\"headerlink\" title=\"修改主题配置文件\"></a>修改主题配置文件</h4><p><code>E:\\blog\\themes\\next\\_config.yml</code>，增加下这一行代码，由于我没有动态获取配置文件里面的uid，所以，这里的作用，也只能是判断是有配置这个代码，来决定是否嵌入评论，修改文件_partials\\comments.swig里面的代码的时候，你们应该也可以看懂一点代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">laibili_uid: 直接写你的uid</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>提交hexo就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo d -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_134259.jpg\" alt=\"效果\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://blog.csdn.net/sunshine940326/article/details/69933696\" target=\"_blank\" rel=\"noopener\">《hexo+next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景》——sunshine940326</a></p>\n<h1 id=\"hexo从多说评论转为韩国来必力评论\"><a href=\"#hexo从多说评论转为韩国来必力评论\" class=\"headerlink\" title=\"hexo从多说评论转为韩国来必力评论\"></a>hexo从多说评论转为韩国来必力评论</h1><p>&emsp;&emsp;对于多说评论，可能很多人也知道了，就是6月1号后就不支持，公司没资金支持了吧。<br>&emsp;&emsp;本来我是要用友言，集成后发现，它居然不支持https；本来也想用比较有人气的网易云跟贴的，但是注册站点的时候，它居然只支持未注册的域名，因为我不想维护我之前的域名，所以我一直直接用github提供的，github.io已经是注册的了，所以没有办法。</p>\n<h2 id=\"重点：关于为什么这篇文章之前评论没有了\"><a href=\"#重点：关于为什么这篇文章之前评论没有了\" class=\"headerlink\" title=\"重点：关于为什么这篇文章之前评论没有了\"></a>重点：关于为什么这篇文章之前评论没有了</h2><blockquote>\n<p>发现看的人多了起来，我觉得域名有可能泄漏我的真实姓名， 所以更换了域名,本来是想，反正改了域名，还是有一些网站会爬取我的数据，我也不担心别人找不到文章了，但是突然发现之前的评论没有了，咨询来必力的客服后发现，他们的数据可能是直接关联url的，如果需要更换域名，需要代码中设定refer值，也就是每个页面都需要设定新的域名，如果javaweb可能一次性可以搞定，但是像我这种静态网站的，没得救了，<strong>如果你需要使用来必力，请慎重选择</strong>，如果你已经使用了来必力，对此表示歉意<br>没有了评论感觉到文章等少了一些互动，有些没意思了的样子。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>来必力也是一个社会化评论系统，虽然是韩国的，访问速度上可能也会慢一点，不过总比没有的好啊（想想以后我的主页热门起来了，也会有很多人来评论哒，哈哈）<br></p>","more":"<p></p>\n<h2 id=\"注册来必力\"><a href=\"#注册来必力\" class=\"headerlink\" title=\"注册来必力\"></a>注册来必力</h2><p>直接到来必来注册一个账号就可以了，这个就不多说啦。</p>\n<h2 id=\"获取代码\"><a href=\"#获取代码\" class=\"headerlink\" title=\"获取代码\"></a>获取代码</h2><p>有人可能会不知道怎么进入后台，我也是找了一会，才找到的。</p>\n<blockquote>\n<p>就是首页拉到下面你会看到一个“去看介绍”的按钮</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130204.jpg\" alt=\"点击去看介绍\">  </p>\n<blockquote>\n<p>再拉下来点击“安装来必力”就可以进入后台了</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130529.jpg\" alt=\"点击安装来必力\"></p>\n<blockquote>\n<p>当然是选择“city免费版”的咯</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130706.jpg\" alt=\"选择“city免费版”\"></p>\n<blockquote>\n<p>填相关站点信息（我的已经点写完了，所以没办法演示）</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_130841.jpg\" alt=\"填相关站点信息\"></p>\n<blockquote>\n<p>进入后台可能会点慢，耐心点，然后选择“代码管理”，我们只要“一般网站”就可以了</p>\n</blockquote>\n<p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_131022.jpg\" alt=\"选择“代码管理”\"></p>\n<h2 id=\"主题里面配置来必力\"><a href=\"#主题里面配置来必力\" class=\"headerlink\" title=\"主题里面配置来必力\"></a>主题里面配置来必力</h2><h3 id=\"先来个文件夹简介\"><a href=\"#先来个文件夹简介\" class=\"headerlink\" title=\"先来个文件夹简介\"></a>先来个文件夹简介</h3><p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_131313.jpg\" alt=\"先来文件夹简介\"></p>\n<h3 id=\"我们需要修改或者增加的文件\"><a href=\"#我们需要修改或者增加的文件\" class=\"headerlink\" title=\"我们需要修改或者增加的文件\"></a>我们需要修改或者增加的文件</h3><h4 id=\"创建文件laibili-swig\"><a href=\"#创建文件laibili-swig\" class=\"headerlink\" title=\"创建文件laibili.swig\"></a>创建文件laibili.swig</h4><p><code>\\themes\\next\\layout\\_scripts\\third-party\\comments\\laibili.swig</code>，你也可以在文件夹下复制一个，然后修改。  以下为文件内容<br><code>if page.comments</code>和倒数第二个<code>endif</code>之间为必力的javascript代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname)</span><br><span class=\"line\">   and not theme.duoshuo_shortname</span><br><span class=\"line\">   and not theme.disqus_shortname</span><br><span class=\"line\">   and not theme.hypercomments_id</span><br><span class=\"line\">   and not theme.gentie_productKey %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#123;% if theme.laibili_uid %&#125;</span><br><span class=\"line\">     &#123;% set uid &#x3D; theme.laibili_uid %&#125;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% if page.comments %&#125;</span><br><span class=\"line\">       &lt;!-- UY BEGIN --&gt;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">          (function(d, s) &#123;</span><br><span class=\"line\">              var j, e &#x3D; d.getElementsByTagName(s)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">              if (typeof LivereTower &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123; return; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              j &#x3D; d.createElement(s);</span><br><span class=\"line\">              j.src &#x3D; &#39;https:&#x2F;&#x2F;cdn-city.livere.com&#x2F;js&#x2F;embed.dist.js&#39;;</span><br><span class=\"line\">              j.async &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">              e.parentNode.insertBefore(j, e);</span><br><span class=\"line\">          &#125;)(document, &#39;script&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">       &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;&#x2F;noscript&gt;</span><br><span class=\"line\">       &lt;!-- UY END --&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改文件third-party-comments-swig\"><a href=\"#修改文件third-party-comments-swig\" class=\"headerlink\" title=\"修改文件third-party\\comments.swig\"></a>修改文件third-party\\comments.swig</h4><p><code>\\themes\\next\\layout\\_scripts\\third-party\\comments.swig</code><br>增加一行代码<br><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_150715.png\" alt=\"增加一行代码\"></p>\n<h4 id=\"修改文件-partials-comments-swig\"><a href=\"#修改文件-partials-comments-swig\" class=\"headerlink\" title=\"修改文件_partials\\comments.swig\"></a>修改文件_partials\\comments.swig</h4><p><code>\\themes\\next\\layout\\_partials\\comments.swig</code>增加div代码<br>本来是想直接使用<code>data-uid=&quot;&quot;</code>，来引入主题配置文件中uid的，但是死活加载不出来，所以就直接写入uid了。<br><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_132947.jpg\" alt=\"增加div代码\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.laibili_uid %&#125;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;lv-container&quot; data-id&#x3D;&quot;city&quot; data-uid&#x3D;&quot;直接写入你的UID&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改主题配置文件\"><a href=\"#修改主题配置文件\" class=\"headerlink\" title=\"修改主题配置文件\"></a>修改主题配置文件</h4><p><code>E:\\blog\\themes\\next\\_config.yml</code>，增加下这一行代码，由于我没有动态获取配置文件里面的uid，所以，这里的作用，也只能是判断是有配置这个代码，来决定是否嵌入评论，修改文件_partials\\comments.swig里面的代码的时候，你们应该也可以看懂一点代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">laibili_uid: 直接写你的uid</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>提交hexo就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hexo clean</span><br><span class=\"line\">&gt; hexo d -g</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/2017-05-02_134259.jpg\" alt=\"效果\"></p>"},{"title":"hexo如何更换github博客主题","date":"2017-01-27T17:33:40.000Z","_content":"\n摘要：\n\thexo如何更换github博客主题\n<!--more-->\n正文：\n\t[TOC]\n# hexo更换github博客主题\n\n[next主题官网](http://theme-next.iissnan.com/getting-started.html)\n首先当然是下载主题，可以直接使用命令的形式，用git clone下来，也可以直接下载压缩包，然后解压在站点目录下的theme目录下。\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n编辑站点文件_config.yml\n\n```\ntheme: next\n```\n这样子就可以了,启动hexo站点，直接验证主题\n```\nhexo s --debug\n```\n\n","source":"_posts/hexo如何更换github博客主题.md","raw":"---\ntitle: hexo如何更换github博客主题\ndate: 2017-01-28 01:33:40\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n\n摘要：\n\thexo如何更换github博客主题\n<!--more-->\n正文：\n\t[TOC]\n# hexo更换github博客主题\n\n[next主题官网](http://theme-next.iissnan.com/getting-started.html)\n首先当然是下载主题，可以直接使用命令的形式，用git clone下来，也可以直接下载压缩包，然后解压在站点目录下的theme目录下。\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n编辑站点文件_config.yml\n\n```\ntheme: next\n```\n这样子就可以了,启动hexo站点，直接验证主题\n```\nhexo s --debug\n```\n\n","slug":"hexo如何更换github博客主题","published":1,"updated":"2019-05-05T09:43:39.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciem000qy8usibzjeccj","content":"<p>摘要：<br>    hexo如何更换github博客主题<br><a id=\"more\"></a><br>正文：<br>    [TOC]</p>\n<h1 id=\"hexo更换github博客主题\"><a href=\"#hexo更换github博客主题\" class=\"headerlink\" title=\"hexo更换github博客主题\"></a>hexo更换github博客主题</h1><p><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next主题官网</a><br>首先当然是下载主题，可以直接使用命令的形式，用git clone下来，也可以直接下载压缩包，然后解压在站点目录下的theme目录下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n<p>编辑站点文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>这样子就可以了,启动hexo站点，直接验证主题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>摘要：<br>    hexo如何更换github博客主题<br></p>","more":"<br>正文：<br>    [TOC]<p></p>\n<h1 id=\"hexo更换github博客主题\"><a href=\"#hexo更换github博客主题\" class=\"headerlink\" title=\"hexo更换github博客主题\"></a>hexo更换github博客主题</h1><p><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next主题官网</a><br>首先当然是下载主题，可以直接使用命令的形式，用git clone下来，也可以直接下载压缩包，然后解压在站点目录下的theme目录下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n<p>编辑站点文件_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>这样子就可以了,启动hexo站点，直接验证主题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure></p>"},{"title":"javascript之闭包(closure)","date":"2017-05-05T15:22:24.000Z","_content":"\n\n# 参考链接\n[javascript深入理解js闭包](http://www.jb51.net/article/24101.htm)\n\n# javascript之闭包(closure)\n## 说明\n&emsp;&emsp;闭包就是拥有许多变量和绑定这些变量环境的表达式，因此这些变量也是该表达式的一部分。  \n&emsp;&emsp;这个解释估计会有许多人懵了不懂，我们暂且理解为，闭包是一个函数表达式，表达式绑定了一些变量的环境，然后看下面的代码。\n```\nfunction f1(){\n    var n=999;\n    function f2(){\n        console.log(n);\n    }\n    return f2;//返回内部函数供外部调用。\n}\nvar result=f1();//创建函数表达式，result引用了f2函数，绑定变量n的环境。\nresult();//输出999\n```\n<!--more-->\n## 变量的作用域\n&emsp;&emsp;javascript的变量分为两种，全局变量和局部变量，全局变量无法直接引用局部变量，局部变量可以直接引用全局变量，这就是作用域。闭包就是为了解决全局变量无法引用局部变量的问题。\n\n\n```\n/**\n*直接引用全局变量\n*/\nvar n=999;\nfunction f1(){\n　alert(n);//引用全局变量\n}\nf1(); // 999\n/**\n*无法直接引用局部变量\n*/\nfunction f2(){\n　var abc=111;\n}\n　alert(abc); // error\n```\n\n> 闭包获取局部变量\n\n```\nfunction f1(){\n    var n=999;\n    function f2(){\n        console.log(n);\n    }\n    return f2;//返回内部函数供外部调用。\n}\nvar result=f1();\nresult();//输出999\n```\n## 闭包需要注意的问题\n&emsp;&emsp;闭包会将局部变量长期驻留在内存中，很可能会造成内存泄漏。这和java的内存引用很相似，长生命周期的变量引用短生命周期的变量时，会促使垃圾回收器无法回收短生命周期的变量。\n```\nfunction f1(){\n　var n=999;\n　nAdd=function(){n+=1}//没有使用var修饰，实为申明全局变量。\n　function f2(){\n　　　alert(n);\n　}\n　return f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000，再次调用也可以获取到增后n的值，所以n没有被回收\n```\n\n## 我们可以这么玩\n```\nfunction f1(){\n    var n=0;\n    function f2(){\n        n++;\n        function f3(){\n            n++;\n            function f4(){\n                n++;\n                console.log(n);\n            }\n            return f4;\n        }\n        return f3;\n    }\n    return f2;\n}\n//第一种调用方式\nf1()()()();// 输出 3\n//第二种调用方式\nvar result=f1()()();\nresult();//输出 3\n```\n\n> 多连括号方式调用，即为将父函数返回的子函数立即调用。\n\n```\n(function(){\n    var n=0;\n    console.log(n);\n})();//输出 0\n//也可以带有函数名\n(function f1(){\n    var n=0;\n    console.log(n);\n})();//输出 0\n```\n> 这个叫做 申明函数并立即执行。","source":"_posts/javascript之闭包-closure.md","raw":"---\ntitle: javascript之闭包(closure)\ndate: 2017-05-05 23:22:24\ncategories:\n  - javascript\ntags:\n  - javascript闭包\n---\n\n\n# 参考链接\n[javascript深入理解js闭包](http://www.jb51.net/article/24101.htm)\n\n# javascript之闭包(closure)\n## 说明\n&emsp;&emsp;闭包就是拥有许多变量和绑定这些变量环境的表达式，因此这些变量也是该表达式的一部分。  \n&emsp;&emsp;这个解释估计会有许多人懵了不懂，我们暂且理解为，闭包是一个函数表达式，表达式绑定了一些变量的环境，然后看下面的代码。\n```\nfunction f1(){\n    var n=999;\n    function f2(){\n        console.log(n);\n    }\n    return f2;//返回内部函数供外部调用。\n}\nvar result=f1();//创建函数表达式，result引用了f2函数，绑定变量n的环境。\nresult();//输出999\n```\n<!--more-->\n## 变量的作用域\n&emsp;&emsp;javascript的变量分为两种，全局变量和局部变量，全局变量无法直接引用局部变量，局部变量可以直接引用全局变量，这就是作用域。闭包就是为了解决全局变量无法引用局部变量的问题。\n\n\n```\n/**\n*直接引用全局变量\n*/\nvar n=999;\nfunction f1(){\n　alert(n);//引用全局变量\n}\nf1(); // 999\n/**\n*无法直接引用局部变量\n*/\nfunction f2(){\n　var abc=111;\n}\n　alert(abc); // error\n```\n\n> 闭包获取局部变量\n\n```\nfunction f1(){\n    var n=999;\n    function f2(){\n        console.log(n);\n    }\n    return f2;//返回内部函数供外部调用。\n}\nvar result=f1();\nresult();//输出999\n```\n## 闭包需要注意的问题\n&emsp;&emsp;闭包会将局部变量长期驻留在内存中，很可能会造成内存泄漏。这和java的内存引用很相似，长生命周期的变量引用短生命周期的变量时，会促使垃圾回收器无法回收短生命周期的变量。\n```\nfunction f1(){\n　var n=999;\n　nAdd=function(){n+=1}//没有使用var修饰，实为申明全局变量。\n　function f2(){\n　　　alert(n);\n　}\n　return f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000，再次调用也可以获取到增后n的值，所以n没有被回收\n```\n\n## 我们可以这么玩\n```\nfunction f1(){\n    var n=0;\n    function f2(){\n        n++;\n        function f3(){\n            n++;\n            function f4(){\n                n++;\n                console.log(n);\n            }\n            return f4;\n        }\n        return f3;\n    }\n    return f2;\n}\n//第一种调用方式\nf1()()()();// 输出 3\n//第二种调用方式\nvar result=f1()()();\nresult();//输出 3\n```\n\n> 多连括号方式调用，即为将父函数返回的子函数立即调用。\n\n```\n(function(){\n    var n=0;\n    console.log(n);\n})();//输出 0\n//也可以带有函数名\n(function f1(){\n    var n=0;\n    console.log(n);\n})();//输出 0\n```\n> 这个叫做 申明函数并立即执行。","slug":"javascript之闭包-closure","published":1,"updated":"2019-05-05T09:43:39.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncien000ry8us88gn6n58","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jb51.net/article/24101.htm\" target=\"_blank\" rel=\"noopener\">javascript深入理解js闭包</a></p>\n<h1 id=\"javascript之闭包-closure\"><a href=\"#javascript之闭包-closure\" class=\"headerlink\" title=\"javascript之闭包(closure)\"></a>javascript之闭包(closure)</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;闭包就是拥有许多变量和绑定这些变量环境的表达式，因此这些变量也是该表达式的一部分。<br>&emsp;&emsp;这个解释估计会有许多人懵了不懂，我们暂且理解为，闭包是一个函数表达式，表达式绑定了一些变量的环境，然后看下面的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;999;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        console.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;&#x2F;&#x2F;返回内部函数供外部调用。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();&#x2F;&#x2F;创建函数表达式，result引用了f2函数，绑定变量n的环境。</span><br><span class=\"line\">result();&#x2F;&#x2F;输出999</span><br></pre></td></tr></table></figure><br><a id=\"more\"></a></p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><p>&emsp;&emsp;javascript的变量分为两种，全局变量和局部变量，全局变量无法直接引用局部变量，局部变量可以直接引用全局变量，这就是作用域。闭包就是为了解决全局变量无法引用局部变量的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*直接引用全局变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">var n&#x3D;999;</span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　alert(n);&#x2F;&#x2F;引用全局变量</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1(); &#x2F;&#x2F; 999</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*无法直接引用局部变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">　var abc&#x3D;111;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">　alert(abc); &#x2F;&#x2F; error</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>闭包获取局部变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;999;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        console.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;&#x2F;&#x2F;返回内部函数供外部调用。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();</span><br><span class=\"line\">result();&#x2F;&#x2F;输出999</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包需要注意的问题\"><a href=\"#闭包需要注意的问题\" class=\"headerlink\" title=\"闭包需要注意的问题\"></a>闭包需要注意的问题</h2><p>&emsp;&emsp;闭包会将局部变量长期驻留在内存中，很可能会造成内存泄漏。这和java的内存引用很相似，长生命周期的变量引用短生命周期的变量时，会促使垃圾回收器无法回收短生命周期的变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　var n&#x3D;999;</span><br><span class=\"line\">　nAdd&#x3D;function()&#123;n+&#x3D;1&#125;&#x2F;&#x2F;没有使用var修饰，实为申明全局变量。</span><br><span class=\"line\">　function f2()&#123;</span><br><span class=\"line\">　　　alert(n);</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();</span><br><span class=\"line\">result(); &#x2F;&#x2F; 999</span><br><span class=\"line\">nAdd();</span><br><span class=\"line\">result(); &#x2F;&#x2F; 1000，再次调用也可以获取到增后n的值，所以n没有被回收</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"我们可以这么玩\"><a href=\"#我们可以这么玩\" class=\"headerlink\" title=\"我们可以这么玩\"></a>我们可以这么玩</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        function f3()&#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            function f4()&#123;</span><br><span class=\"line\">                n++;</span><br><span class=\"line\">                console.log(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return f4;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return f3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;第一种调用方式</span><br><span class=\"line\">f1()()()();&#x2F;&#x2F; 输出 3</span><br><span class=\"line\">&#x2F;&#x2F;第二种调用方式</span><br><span class=\"line\">var result&#x3D;f1()()();</span><br><span class=\"line\">result();&#x2F;&#x2F;输出 3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多连括号方式调用，即为将父函数返回的子函数立即调用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">&#125;)();&#x2F;&#x2F;输出 0</span><br><span class=\"line\">&#x2F;&#x2F;也可以带有函数名</span><br><span class=\"line\">(function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">&#125;)();&#x2F;&#x2F;输出 0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个叫做 申明函数并立即执行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.jb51.net/article/24101.htm\" target=\"_blank\" rel=\"noopener\">javascript深入理解js闭包</a></p>\n<h1 id=\"javascript之闭包-closure\"><a href=\"#javascript之闭包-closure\" class=\"headerlink\" title=\"javascript之闭包(closure)\"></a>javascript之闭包(closure)</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;闭包就是拥有许多变量和绑定这些变量环境的表达式，因此这些变量也是该表达式的一部分。<br>&emsp;&emsp;这个解释估计会有许多人懵了不懂，我们暂且理解为，闭包是一个函数表达式，表达式绑定了一些变量的环境，然后看下面的代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;999;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        console.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;&#x2F;&#x2F;返回内部函数供外部调用。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();&#x2F;&#x2F;创建函数表达式，result引用了f2函数，绑定变量n的环境。</span><br><span class=\"line\">result();&#x2F;&#x2F;输出999</span><br></pre></td></tr></table></figure><br></p>","more":"<p></p>\n<h2 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h2><p>&emsp;&emsp;javascript的变量分为两种，全局变量和局部变量，全局变量无法直接引用局部变量，局部变量可以直接引用全局变量，这就是作用域。闭包就是为了解决全局变量无法引用局部变量的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*直接引用全局变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">var n&#x3D;999;</span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　alert(n);&#x2F;&#x2F;引用全局变量</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1(); &#x2F;&#x2F; 999</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">*无法直接引用局部变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">　var abc&#x3D;111;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">　alert(abc); &#x2F;&#x2F; error</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>闭包获取局部变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;999;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        console.log(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;&#x2F;&#x2F;返回内部函数供外部调用。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();</span><br><span class=\"line\">result();&#x2F;&#x2F;输出999</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包需要注意的问题\"><a href=\"#闭包需要注意的问题\" class=\"headerlink\" title=\"闭包需要注意的问题\"></a>闭包需要注意的问题</h2><p>&emsp;&emsp;闭包会将局部变量长期驻留在内存中，很可能会造成内存泄漏。这和java的内存引用很相似，长生命周期的变量引用短生命周期的变量时，会促使垃圾回收器无法回收短生命周期的变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">　var n&#x3D;999;</span><br><span class=\"line\">　nAdd&#x3D;function()&#123;n+&#x3D;1&#125;&#x2F;&#x2F;没有使用var修饰，实为申明全局变量。</span><br><span class=\"line\">　function f2()&#123;</span><br><span class=\"line\">　　　alert(n);</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var result&#x3D;f1();</span><br><span class=\"line\">result(); &#x2F;&#x2F; 999</span><br><span class=\"line\">nAdd();</span><br><span class=\"line\">result(); &#x2F;&#x2F; 1000，再次调用也可以获取到增后n的值，所以n没有被回收</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"我们可以这么玩\"><a href=\"#我们可以这么玩\" class=\"headerlink\" title=\"我们可以这么玩\"></a>我们可以这么玩</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    function f2()&#123;</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        function f3()&#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            function f4()&#123;</span><br><span class=\"line\">                n++;</span><br><span class=\"line\">                console.log(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return f4;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return f3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;第一种调用方式</span><br><span class=\"line\">f1()()()();&#x2F;&#x2F; 输出 3</span><br><span class=\"line\">&#x2F;&#x2F;第二种调用方式</span><br><span class=\"line\">var result&#x3D;f1()()();</span><br><span class=\"line\">result();&#x2F;&#x2F;输出 3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多连括号方式调用，即为将父函数返回的子函数立即调用。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">&#125;)();&#x2F;&#x2F;输出 0</span><br><span class=\"line\">&#x2F;&#x2F;也可以带有函数名</span><br><span class=\"line\">(function f1()&#123;</span><br><span class=\"line\">    var n&#x3D;0;</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">&#125;)();&#x2F;&#x2F;输出 0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个叫做 申明函数并立即执行。</p>\n</blockquote>"},{"title":"javatoexe之exe4j和innosetup打包jar","date":"2018-01-23T15:09:20.000Z","_content":"\n# 下面对几个重要配置进行说明\n## exe4j\n### APP名和输出路径配置\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-5fc0f33e35c8c0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 选择需要打包的jar\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-3a6bff67ad2a0ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!--more-->\n\n### 打包jre运行环境\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-e76be763e240f538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 其他配置不作解释，基本够用\n## innosetup\n\n>  前面的exe4j就像是生成了一个exe文件 ，然后为了exe配置了一些文件的路径位置，那么innosetup就是打包所有文件方便拷贝\n\n### 打包成安装包\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-a61506845f32147b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-7bf3f427aec191c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### innosetup配置文件\n> 图形界面配置完后会生成配置文件，点击comlipe就可以了，配置文件也可随心编写配置\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-9adfdab16511fe71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","source":"_posts/javatoexe之exe4j和innosetup打包jar.md","raw":"---\ntitle: javatoexe之exe4j和innosetup打包jar\ndate: 2018-01-23 23:09:20\ncategories:\n  - java\n  - javatoexe\ntags:\n  - javatoexe\n---\n\n# 下面对几个重要配置进行说明\n## exe4j\n### APP名和输出路径配置\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-5fc0f33e35c8c0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 选择需要打包的jar\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-3a6bff67ad2a0ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n<!--more-->\n\n### 打包jre运行环境\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-e76be763e240f538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 其他配置不作解释，基本够用\n## innosetup\n\n>  前面的exe4j就像是生成了一个exe文件 ，然后为了exe配置了一些文件的路径位置，那么innosetup就是打包所有文件方便拷贝\n\n### 打包成安装包\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-a61506845f32147b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-7bf3f427aec191c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### innosetup配置文件\n> 图形界面配置完后会生成配置文件，点击comlipe就可以了，配置文件也可随心编写配置\n![image.png](http://upload-images.jianshu.io/upload_images/2641470-9adfdab16511fe71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n","slug":"javatoexe之exe4j和innosetup打包jar","published":1,"updated":"2019-05-05T09:43:39.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncieo000sy8usnn8kilaa","content":"<h1 id=\"下面对几个重要配置进行说明\"><a href=\"#下面对几个重要配置进行说明\" class=\"headerlink\" title=\"下面对几个重要配置进行说明\"></a>下面对几个重要配置进行说明</h1><h2 id=\"exe4j\"><a href=\"#exe4j\" class=\"headerlink\" title=\"exe4j\"></a>exe4j</h2><h3 id=\"APP名和输出路径配置\"><a href=\"#APP名和输出路径配置\" class=\"headerlink\" title=\"APP名和输出路径配置\"></a>APP名和输出路径配置</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-5fc0f33e35c8c0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"选择需要打包的jar\"><a href=\"#选择需要打包的jar\" class=\"headerlink\" title=\"选择需要打包的jar\"></a>选择需要打包的jar</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-3a6bff67ad2a0ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<h3 id=\"打包jre运行环境\"><a href=\"#打包jre运行环境\" class=\"headerlink\" title=\"打包jre运行环境\"></a>打包jre运行环境</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-e76be763e240f538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"其他配置不作解释，基本够用\"><a href=\"#其他配置不作解释，基本够用\" class=\"headerlink\" title=\"其他配置不作解释，基本够用\"></a>其他配置不作解释，基本够用</h3><h2 id=\"innosetup\"><a href=\"#innosetup\" class=\"headerlink\" title=\"innosetup\"></a>innosetup</h2><blockquote>\n<p> 前面的exe4j就像是生成了一个exe文件 ，然后为了exe配置了一些文件的路径位置，那么innosetup就是打包所有文件方便拷贝</p>\n</blockquote>\n<h3 id=\"打包成安装包\"><a href=\"#打包成安装包\" class=\"headerlink\" title=\"打包成安装包\"></a>打包成安装包</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-a61506845f32147b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2641470-7bf3f427aec191c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"innosetup配置文件\"><a href=\"#innosetup配置文件\" class=\"headerlink\" title=\"innosetup配置文件\"></a>innosetup配置文件</h3><blockquote>\n<p>图形界面配置完后会生成配置文件，点击comlipe就可以了，配置文件也可随心编写配置<br><img src=\"http://upload-images.jianshu.io/upload_images/2641470-9adfdab16511fe71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"下面对几个重要配置进行说明\"><a href=\"#下面对几个重要配置进行说明\" class=\"headerlink\" title=\"下面对几个重要配置进行说明\"></a>下面对几个重要配置进行说明</h1><h2 id=\"exe4j\"><a href=\"#exe4j\" class=\"headerlink\" title=\"exe4j\"></a>exe4j</h2><h3 id=\"APP名和输出路径配置\"><a href=\"#APP名和输出路径配置\" class=\"headerlink\" title=\"APP名和输出路径配置\"></a>APP名和输出路径配置</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-5fc0f33e35c8c0f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"选择需要打包的jar\"><a href=\"#选择需要打包的jar\" class=\"headerlink\" title=\"选择需要打包的jar\"></a>选择需要打包的jar</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-3a6bff67ad2a0ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>","more":"<h3 id=\"打包jre运行环境\"><a href=\"#打包jre运行环境\" class=\"headerlink\" title=\"打包jre运行环境\"></a>打包jre运行环境</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-e76be763e240f538.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"其他配置不作解释，基本够用\"><a href=\"#其他配置不作解释，基本够用\" class=\"headerlink\" title=\"其他配置不作解释，基本够用\"></a>其他配置不作解释，基本够用</h3><h2 id=\"innosetup\"><a href=\"#innosetup\" class=\"headerlink\" title=\"innosetup\"></a>innosetup</h2><blockquote>\n<p> 前面的exe4j就像是生成了一个exe文件 ，然后为了exe配置了一些文件的路径位置，那么innosetup就是打包所有文件方便拷贝</p>\n</blockquote>\n<h3 id=\"打包成安装包\"><a href=\"#打包成安装包\" class=\"headerlink\" title=\"打包成安装包\"></a>打包成安装包</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/2641470-a61506845f32147b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2641470-7bf3f427aec191c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"innosetup配置文件\"><a href=\"#innosetup配置文件\" class=\"headerlink\" title=\"innosetup配置文件\"></a>innosetup配置文件</h3><blockquote>\n<p>图形界面配置完后会生成配置文件，点击comlipe就可以了，配置文件也可随心编写配置<br><img src=\"http://upload-images.jianshu.io/upload_images/2641470-9adfdab16511fe71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</blockquote>"},{"title":"tomcat之如何让tomcat运行在指定JDK环境上","date":"2018-05-21T22:51:25.000Z","_content":"# 参考链接\n[tomcat下指定jdk——百度经验](https://jingyan.baidu.com/article/066074d62d371cc3c21cb0ec.html)\n# 正文\n## 概述\n我与参考链接中的不太一样，我是嫌麻烦的，直接在环境变量中新建了一个。\n## 设置环境变量\n\n1. 变量名可以自定义的，因为我的是tomcat6，所以我准备使用JDK6。  \n\n![设置环境变量](https://upload-images.jianshu.io/upload_images/2641470-7d05d047beb0981d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  \n\n<!-- more -->\n\n2.  编辑`PATH` 变量，`%JAVA6_HOME%\\bin;%JAVA6_HOME%\\jre\\bin;`\n\n![编辑`PATH` 变量](https://upload-images.jianshu.io/upload_images/2641470-aa6096ff424aadc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 编辑tomcat的catalina.bat文件\n\n将`echo Using JAVA_HOME:       \"%JAVA_HOME%\"`修改为`echo Using JAVA_HOME:       \"%JAVA6_HOME%\"`\n\n## 编辑setclasspath.bat\n\n```\n# 这个是原代码\nif not \"%JAVA_HOME%\" == \"\" goto gotJdkHome\n# 忽略大部分代码……………………………………………………………………\n:gotJdkHome\nif not exist \"%JAVA_HOME%\\bin\\java.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\javaw.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\jdb.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\javac.exe\" goto noJavaHome\nif not \"%JRE_HOME%\" == \"\" goto okJavaHome\nset \"JRE_HOME=%JAVA_HOME%\"\n# 忽略大部分代码……………………………………………………………………\nset _RUNJDB=\"%JAVA_HOME%\\bin\\jdb.exe\"\n```\n\n```\n# 这个是修改后的代码\nif not \"%JAVA6_HOME%\" == \"\" goto gotJdkHome\n# 忽略大部分代码……………………………………………………………………\n:gotJdkHome\nif not exist \"%JAVA6_HOME%\\bin\\java.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\javaw.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\jdb.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\javac.exe\" goto noJavaHome # 需要修改的地方\nif not \"%JRE_HOME%\" == \"\" goto okJavaHome\nset \"JRE_HOME=%JAVA6_HOME%\" # 需要修改的地方\n# 忽略大部分代码……………………………………………………………………\nset _RUNJDB=\"%JAVA6_HOME%\\bin\\jdb.exe\"# 需要修改的地方\n```\n","source":"_posts/tomcat之如何让tomcat运行在指定JDK环境上.md","raw":"---\ntitle: tomcat之如何让tomcat运行在指定JDK环境上\ndate: 2018-05-22 06:51:25\ncategories:\n  - server\n  - tomcat\ntags:\n  - tomcat\n---\n# 参考链接\n[tomcat下指定jdk——百度经验](https://jingyan.baidu.com/article/066074d62d371cc3c21cb0ec.html)\n# 正文\n## 概述\n我与参考链接中的不太一样，我是嫌麻烦的，直接在环境变量中新建了一个。\n## 设置环境变量\n\n1. 变量名可以自定义的，因为我的是tomcat6，所以我准备使用JDK6。  \n\n![设置环境变量](https://upload-images.jianshu.io/upload_images/2641470-7d05d047beb0981d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)  \n\n<!-- more -->\n\n2.  编辑`PATH` 变量，`%JAVA6_HOME%\\bin;%JAVA6_HOME%\\jre\\bin;`\n\n![编辑`PATH` 变量](https://upload-images.jianshu.io/upload_images/2641470-aa6096ff424aadc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 编辑tomcat的catalina.bat文件\n\n将`echo Using JAVA_HOME:       \"%JAVA_HOME%\"`修改为`echo Using JAVA_HOME:       \"%JAVA6_HOME%\"`\n\n## 编辑setclasspath.bat\n\n```\n# 这个是原代码\nif not \"%JAVA_HOME%\" == \"\" goto gotJdkHome\n# 忽略大部分代码……………………………………………………………………\n:gotJdkHome\nif not exist \"%JAVA_HOME%\\bin\\java.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\javaw.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\jdb.exe\" goto noJavaHome\nif not exist \"%JAVA_HOME%\\bin\\javac.exe\" goto noJavaHome\nif not \"%JRE_HOME%\" == \"\" goto okJavaHome\nset \"JRE_HOME=%JAVA_HOME%\"\n# 忽略大部分代码……………………………………………………………………\nset _RUNJDB=\"%JAVA_HOME%\\bin\\jdb.exe\"\n```\n\n```\n# 这个是修改后的代码\nif not \"%JAVA6_HOME%\" == \"\" goto gotJdkHome\n# 忽略大部分代码……………………………………………………………………\n:gotJdkHome\nif not exist \"%JAVA6_HOME%\\bin\\java.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\javaw.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\jdb.exe\" goto noJavaHome # 需要修改的地方\nif not exist \"%JAVA6_HOME%\\bin\\javac.exe\" goto noJavaHome # 需要修改的地方\nif not \"%JRE_HOME%\" == \"\" goto okJavaHome\nset \"JRE_HOME=%JAVA6_HOME%\" # 需要修改的地方\n# 忽略大部分代码……………………………………………………………………\nset _RUNJDB=\"%JAVA6_HOME%\\bin\\jdb.exe\"# 需要修改的地方\n```\n","slug":"tomcat之如何让tomcat运行在指定JDK环境上","published":1,"updated":"2019-05-05T09:43:39.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciep000ty8us6o09sf8a","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://jingyan.baidu.com/article/066074d62d371cc3c21cb0ec.html\" target=\"_blank\" rel=\"noopener\">tomcat下指定jdk——百度经验</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我与参考链接中的不太一样，我是嫌麻烦的，直接在环境变量中新建了一个。</p>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><ol>\n<li>变量名可以自定义的，因为我的是tomcat6，所以我准备使用JDK6。  </li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2641470-7d05d047beb0981d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置环境变量\">  </p>\n<a id=\"more\"></a>\n<ol>\n<li>编辑<code>PATH</code> 变量，<code>%JAVA6_HOME%\\bin;%JAVA6_HOME%\\jre\\bin;</code></li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2641470-aa6096ff424aadc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编辑`PATH` 变量\"></p>\n<h2 id=\"编辑tomcat的catalina-bat文件\"><a href=\"#编辑tomcat的catalina-bat文件\" class=\"headerlink\" title=\"编辑tomcat的catalina.bat文件\"></a>编辑tomcat的catalina.bat文件</h2><p>将<code>echo Using JAVA_HOME:       &quot;%JAVA_HOME%&quot;</code>修改为<code>echo Using JAVA_HOME:       &quot;%JAVA6_HOME%&quot;</code></p>\n<h2 id=\"编辑setclasspath-bat\"><a href=\"#编辑setclasspath-bat\" class=\"headerlink\" title=\"编辑setclasspath.bat\"></a>编辑setclasspath.bat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个是原代码</span><br><span class=\"line\">if not &quot;%JAVA_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto gotJdkHome</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">:gotJdkHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\java.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\javaw.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\jdb.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\javac.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not &quot;%JRE_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto okJavaHome</span><br><span class=\"line\">set &quot;JRE_HOME&#x3D;%JAVA_HOME%&quot;</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">set _RUNJDB&#x3D;&quot;%JAVA_HOME%\\bin\\jdb.exe&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个是修改后的代码</span><br><span class=\"line\">if not &quot;%JAVA6_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto gotJdkHome</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">:gotJdkHome</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\java.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\javaw.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\jdb.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\javac.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not &quot;%JRE_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto okJavaHome</span><br><span class=\"line\">set &quot;JRE_HOME&#x3D;%JAVA6_HOME%&quot; # 需要修改的地方</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">set _RUNJDB&#x3D;&quot;%JAVA6_HOME%\\bin\\jdb.exe&quot;# 需要修改的地方</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://jingyan.baidu.com/article/066074d62d371cc3c21cb0ec.html\" target=\"_blank\" rel=\"noopener\">tomcat下指定jdk——百度经验</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我与参考链接中的不太一样，我是嫌麻烦的，直接在环境变量中新建了一个。</p>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><ol>\n<li>变量名可以自定义的，因为我的是tomcat6，所以我准备使用JDK6。  </li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2641470-7d05d047beb0981d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置环境变量\">  </p>","more":"<ol>\n<li>编辑<code>PATH</code> 变量，<code>%JAVA6_HOME%\\bin;%JAVA6_HOME%\\jre\\bin;</code></li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2641470-aa6096ff424aadc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"编辑`PATH` 变量\"></p>\n<h2 id=\"编辑tomcat的catalina-bat文件\"><a href=\"#编辑tomcat的catalina-bat文件\" class=\"headerlink\" title=\"编辑tomcat的catalina.bat文件\"></a>编辑tomcat的catalina.bat文件</h2><p>将<code>echo Using JAVA_HOME:       &quot;%JAVA_HOME%&quot;</code>修改为<code>echo Using JAVA_HOME:       &quot;%JAVA6_HOME%&quot;</code></p>\n<h2 id=\"编辑setclasspath-bat\"><a href=\"#编辑setclasspath-bat\" class=\"headerlink\" title=\"编辑setclasspath.bat\"></a>编辑setclasspath.bat</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个是原代码</span><br><span class=\"line\">if not &quot;%JAVA_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto gotJdkHome</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">:gotJdkHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\java.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\javaw.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\jdb.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not exist &quot;%JAVA_HOME%\\bin\\javac.exe&quot; goto noJavaHome</span><br><span class=\"line\">if not &quot;%JRE_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto okJavaHome</span><br><span class=\"line\">set &quot;JRE_HOME&#x3D;%JAVA_HOME%&quot;</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">set _RUNJDB&#x3D;&quot;%JAVA_HOME%\\bin\\jdb.exe&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这个是修改后的代码</span><br><span class=\"line\">if not &quot;%JAVA6_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto gotJdkHome</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">:gotJdkHome</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\java.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\javaw.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\jdb.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not exist &quot;%JAVA6_HOME%\\bin\\javac.exe&quot; goto noJavaHome # 需要修改的地方</span><br><span class=\"line\">if not &quot;%JRE_HOME%&quot; &#x3D;&#x3D; &quot;&quot; goto okJavaHome</span><br><span class=\"line\">set &quot;JRE_HOME&#x3D;%JAVA6_HOME%&quot; # 需要修改的地方</span><br><span class=\"line\"># 忽略大部分代码……………………………………………………………………</span><br><span class=\"line\">set _RUNJDB&#x3D;&quot;%JAVA6_HOME%\\bin\\jdb.exe&quot;# 需要修改的地方</span><br></pre></td></tr></table></figure>"},{"title":"javascript之模块化","date":"2017-05-10T03:54:22.000Z","_content":"# 参考链接\n[《Javascript模块化编程（一）：模块的写法》—— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n# javascript之模块化\n## 说明\n&emsp;&emsp;所谓的模块化，是换功能去划分模块，现在的网页越来越像桌面应用程序，随着团队协作、进度管理、单元测试等等开发模式，网页开发变得越来越复杂，引入的javascript文件越来越多。  \n&emsp;&emsp;模块化是软件工程的方法，开发者只需开发自己的核心模块，其他模块只需通过引入的方式即可（jquery、vue.js也是module）\n<!-- more -->\n## 原始模块写法\n\n```\nvar v1;\nfunction f1(){\n    \n}\nfunction f2(){\n    \n}\n```\n&emsp;&emsp;上面的简单放在一起就是一个module了，需要调用直接f1()和f2()调用就可以了。  \n&emsp;&emsp;但是这样的写法会污染全局变量，而且\n变量名也有可能与其他模块冲突，而且模块之间看不出直接的关系。\n\n## 对象写法\n```\nvar module=new Object{\n    _count:0,\n    f1:function(){\n        \n    },\n    f2:function(){\n        \n    }\n}\n```\n&emsp;&emsp;像上面的写法，只需module.f1()即可调用函数，但是缺点是可以直接访问，对象内的私有变量，内部状态可以被外部直接编写。\n```\nmodule._count=5;\n```\n\n##  立即执行函数写法(javascript模块化的基本写法)\n> 这样的写法，外部无法直接获取内部变量\n\n```\nvar module=(function(){\n    var _count=0;\n    var f1=function(){\n        return _count;\n    };\n    var f2=function(){\n        _count++;\n    };\n    return {f1:f1,f2:f2};\n})();\n//外部无法直接获取内部变量\n　console.info(module1._count); //undefined\n```\n## 放大模式(augmentation)\n如果一个模块很大，需要分成几个小模块，或者需要一个模块继承另一个模块\n```\nvar module=(function(mod){\n    mod.m3=function(){\n        \n    }\n    \n})(module);\n```\nmodule新增一个m3，并返回给新的module。\n## 宽放大模式（Loose augmentation）\n&emsp;&emsp;在开发中，大部分模块可能是直接网上获取的，所以我们无法保证哪一个预先加载完，也就是有可能会加载到一个module空对象，所以需要使用宽放大模式。\n```\nvar module=(function(mod){\n    mod.m3=function(){\n        \n    }\n    \n})(window.module||{});\n```\n&emsp;&emsp;与\"放大模式\"相比，＂宽放大模式＂就是\"立即执行函数\"的参数可以是空对象。\n\n## 模块内输入全局变量\n&emsp;&emsp;模块内部最好不要直接引用全局变量\n```\n　var module1 = (function ($, YAHOO) {\n　　　　//...\n　})(jQuery, YAHOO);\n```\n&emsp;&emsp;上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。","source":"_posts/javascript之模块化.md","raw":"---\ntitle: javascript之模块化\ndate: 2017-05-10 11:54:22\ncategories:\n  - javascript\n  - 模块化\ntags:\n  - javascript模块化\n---\n# 参考链接\n[《Javascript模块化编程（一）：模块的写法》—— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n# javascript之模块化\n## 说明\n&emsp;&emsp;所谓的模块化，是换功能去划分模块，现在的网页越来越像桌面应用程序，随着团队协作、进度管理、单元测试等等开发模式，网页开发变得越来越复杂，引入的javascript文件越来越多。  \n&emsp;&emsp;模块化是软件工程的方法，开发者只需开发自己的核心模块，其他模块只需通过引入的方式即可（jquery、vue.js也是module）\n<!-- more -->\n## 原始模块写法\n\n```\nvar v1;\nfunction f1(){\n    \n}\nfunction f2(){\n    \n}\n```\n&emsp;&emsp;上面的简单放在一起就是一个module了，需要调用直接f1()和f2()调用就可以了。  \n&emsp;&emsp;但是这样的写法会污染全局变量，而且\n变量名也有可能与其他模块冲突，而且模块之间看不出直接的关系。\n\n## 对象写法\n```\nvar module=new Object{\n    _count:0,\n    f1:function(){\n        \n    },\n    f2:function(){\n        \n    }\n}\n```\n&emsp;&emsp;像上面的写法，只需module.f1()即可调用函数，但是缺点是可以直接访问，对象内的私有变量，内部状态可以被外部直接编写。\n```\nmodule._count=5;\n```\n\n##  立即执行函数写法(javascript模块化的基本写法)\n> 这样的写法，外部无法直接获取内部变量\n\n```\nvar module=(function(){\n    var _count=0;\n    var f1=function(){\n        return _count;\n    };\n    var f2=function(){\n        _count++;\n    };\n    return {f1:f1,f2:f2};\n})();\n//外部无法直接获取内部变量\n　console.info(module1._count); //undefined\n```\n## 放大模式(augmentation)\n如果一个模块很大，需要分成几个小模块，或者需要一个模块继承另一个模块\n```\nvar module=(function(mod){\n    mod.m3=function(){\n        \n    }\n    \n})(module);\n```\nmodule新增一个m3，并返回给新的module。\n## 宽放大模式（Loose augmentation）\n&emsp;&emsp;在开发中，大部分模块可能是直接网上获取的，所以我们无法保证哪一个预先加载完，也就是有可能会加载到一个module空对象，所以需要使用宽放大模式。\n```\nvar module=(function(mod){\n    mod.m3=function(){\n        \n    }\n    \n})(window.module||{});\n```\n&emsp;&emsp;与\"放大模式\"相比，＂宽放大模式＂就是\"立即执行函数\"的参数可以是空对象。\n\n## 模块内输入全局变量\n&emsp;&emsp;模块内部最好不要直接引用全局变量\n```\n　var module1 = (function ($, YAHOO) {\n　　　　//...\n　})(jQuery, YAHOO);\n```\n&emsp;&emsp;上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。","slug":"javascript之模块化","published":1,"updated":"2019-05-05T09:43:39.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncieq000uy8ustybkwskw","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">《Javascript模块化编程（一）：模块的写法》—— 阮一峰</a></p>\n<h1 id=\"javascript之模块化\"><a href=\"#javascript之模块化\" class=\"headerlink\" title=\"javascript之模块化\"></a>javascript之模块化</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;所谓的模块化，是换功能去划分模块，现在的网页越来越像桌面应用程序，随着团队协作、进度管理、单元测试等等开发模式，网页开发变得越来越复杂，引入的javascript文件越来越多。<br>&emsp;&emsp;模块化是软件工程的方法，开发者只需开发自己的核心模块，其他模块只需通过引入的方式即可（jquery、vue.js也是module）<br><a id=\"more\"></a></p>\n<h2 id=\"原始模块写法\"><a href=\"#原始模块写法\" class=\"headerlink\" title=\"原始模块写法\"></a>原始模块写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v1;</span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面的简单放在一起就是一个module了，需要调用直接f1()和f2()调用就可以了。<br>&emsp;&emsp;但是这样的写法会污染全局变量，而且<br>变量名也有可能与其他模块冲突，而且模块之间看不出直接的关系。</p>\n<h2 id=\"对象写法\"><a href=\"#对象写法\" class=\"headerlink\" title=\"对象写法\"></a>对象写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;new Object&#123;</span><br><span class=\"line\">    _count:0,</span><br><span class=\"line\">    f1:function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    f2:function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;像上面的写法，只需module.f1()即可调用函数，但是缺点是可以直接访问，对象内的私有变量，内部状态可以被外部直接编写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module._count&#x3D;5;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"立即执行函数写法-javascript模块化的基本写法\"><a href=\"#立即执行函数写法-javascript模块化的基本写法\" class=\"headerlink\" title=\"立即执行函数写法(javascript模块化的基本写法)\"></a>立即执行函数写法(javascript模块化的基本写法)</h2><blockquote>\n<p>这样的写法，外部无法直接获取内部变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function()&#123;</span><br><span class=\"line\">    var _count&#x3D;0;</span><br><span class=\"line\">    var f1&#x3D;function()&#123;</span><br><span class=\"line\">        return _count;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    var f2&#x3D;function()&#123;</span><br><span class=\"line\">        _count++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return &#123;f1:f1,f2:f2&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&#x2F;&#x2F;外部无法直接获取内部变量</span><br><span class=\"line\">　console.info(module1._count); &#x2F;&#x2F;undefined</span><br></pre></td></tr></table></figure>\n<h2 id=\"放大模式-augmentation\"><a href=\"#放大模式-augmentation\" class=\"headerlink\" title=\"放大模式(augmentation)\"></a>放大模式(augmentation)</h2><p>如果一个模块很大，需要分成几个小模块，或者需要一个模块继承另一个模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function(mod)&#123;</span><br><span class=\"line\">    mod.m3&#x3D;function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)(module);</span><br></pre></td></tr></table></figure><br>module新增一个m3，并返回给新的module。</p>\n<h2 id=\"宽放大模式（Loose-augmentation）\"><a href=\"#宽放大模式（Loose-augmentation）\" class=\"headerlink\" title=\"宽放大模式（Loose augmentation）\"></a>宽放大模式（Loose augmentation）</h2><p>&emsp;&emsp;在开发中，大部分模块可能是直接网上获取的，所以我们无法保证哪一个预先加载完，也就是有可能会加载到一个module空对象，所以需要使用宽放大模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function(mod)&#123;</span><br><span class=\"line\">    mod.m3&#x3D;function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)(window.module||&#123;&#125;);</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p>\n<h2 id=\"模块内输入全局变量\"><a href=\"#模块内输入全局变量\" class=\"headerlink\" title=\"模块内输入全局变量\"></a>模块内输入全局变量</h2><p>&emsp;&emsp;模块内部最好不要直接引用全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　var module1 &#x3D; (function ($, YAHOO) &#123;</span><br><span class=\"line\">　　　　&#x2F;&#x2F;...</span><br><span class=\"line\">　&#125;)(jQuery, YAHOO);</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">《Javascript模块化编程（一）：模块的写法》—— 阮一峰</a></p>\n<h1 id=\"javascript之模块化\"><a href=\"#javascript之模块化\" class=\"headerlink\" title=\"javascript之模块化\"></a>javascript之模块化</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>&emsp;&emsp;所谓的模块化，是换功能去划分模块，现在的网页越来越像桌面应用程序，随着团队协作、进度管理、单元测试等等开发模式，网页开发变得越来越复杂，引入的javascript文件越来越多。<br>&emsp;&emsp;模块化是软件工程的方法，开发者只需开发自己的核心模块，其他模块只需通过引入的方式即可（jquery、vue.js也是module）<br></p>","more":"<p></p>\n<h2 id=\"原始模块写法\"><a href=\"#原始模块写法\" class=\"headerlink\" title=\"原始模块写法\"></a>原始模块写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v1;</span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;上面的简单放在一起就是一个module了，需要调用直接f1()和f2()调用就可以了。<br>&emsp;&emsp;但是这样的写法会污染全局变量，而且<br>变量名也有可能与其他模块冲突，而且模块之间看不出直接的关系。</p>\n<h2 id=\"对象写法\"><a href=\"#对象写法\" class=\"headerlink\" title=\"对象写法\"></a>对象写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;new Object&#123;</span><br><span class=\"line\">    _count:0,</span><br><span class=\"line\">    f1:function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    f2:function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;像上面的写法，只需module.f1()即可调用函数，但是缺点是可以直接访问，对象内的私有变量，内部状态可以被外部直接编写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module._count&#x3D;5;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"立即执行函数写法-javascript模块化的基本写法\"><a href=\"#立即执行函数写法-javascript模块化的基本写法\" class=\"headerlink\" title=\"立即执行函数写法(javascript模块化的基本写法)\"></a>立即执行函数写法(javascript模块化的基本写法)</h2><blockquote>\n<p>这样的写法，外部无法直接获取内部变量</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function()&#123;</span><br><span class=\"line\">    var _count&#x3D;0;</span><br><span class=\"line\">    var f1&#x3D;function()&#123;</span><br><span class=\"line\">        return _count;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    var f2&#x3D;function()&#123;</span><br><span class=\"line\">        _count++;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return &#123;f1:f1,f2:f2&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&#x2F;&#x2F;外部无法直接获取内部变量</span><br><span class=\"line\">　console.info(module1._count); &#x2F;&#x2F;undefined</span><br></pre></td></tr></table></figure>\n<h2 id=\"放大模式-augmentation\"><a href=\"#放大模式-augmentation\" class=\"headerlink\" title=\"放大模式(augmentation)\"></a>放大模式(augmentation)</h2><p>如果一个模块很大，需要分成几个小模块，或者需要一个模块继承另一个模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function(mod)&#123;</span><br><span class=\"line\">    mod.m3&#x3D;function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)(module);</span><br></pre></td></tr></table></figure><br>module新增一个m3，并返回给新的module。</p>\n<h2 id=\"宽放大模式（Loose-augmentation）\"><a href=\"#宽放大模式（Loose-augmentation）\" class=\"headerlink\" title=\"宽放大模式（Loose augmentation）\"></a>宽放大模式（Loose augmentation）</h2><p>&emsp;&emsp;在开发中，大部分模块可能是直接网上获取的，所以我们无法保证哪一个预先加载完，也就是有可能会加载到一个module空对象，所以需要使用宽放大模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module&#x3D;(function(mod)&#123;</span><br><span class=\"line\">    mod.m3&#x3D;function()&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)(window.module||&#123;&#125;);</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p>\n<h2 id=\"模块内输入全局变量\"><a href=\"#模块内输入全局变量\" class=\"headerlink\" title=\"模块内输入全局变量\"></a>模块内输入全局变量</h2><p>&emsp;&emsp;模块内部最好不要直接引用全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　var module1 &#x3D; (function ($, YAHOO) &#123;</span><br><span class=\"line\">　　　　&#x2F;&#x2F;...</span><br><span class=\"line\">　&#125;)(jQuery, YAHOO);</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;上面的module1模块需要使用jQuery库和YUI库，就把这两个库（其实是两个模块）当作参数输入module1。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。</p>"},{"title":"oracle之partition by与group by的区别","date":"2018-01-10T14:58:39.000Z","_content":"# 正文\n## 前言\n> 先来看两个表\n\n* 主表(webcheck——存储网站记录)\n\n|  webcheckid   | website       | \n| :-------------:|:-------------:| \n| 1 | www.baidu.com   | \n| 2 | www.google.com |\n| 3 | www.soso.com |\n\n* 副表(webrecord——访问网站记录表)\n\n| webrecordid   |webcheckid | access_state  | access_date|\n| :-------------:|:-------------:|:-------------:| :-------------:| \n| 1         | 1  |  成功  | 2018-01-10 18:03:49  |\n| 2         | 1| 成功  | 2018-01-09 18:03:49  |\n| 3         | 2| 失败 | 2018-01-11 18:03:49  |\n> 我想要关联副表，**查询每个网站最新访问记录**，即使**网站没有访问记录，也要能查询出来**\n> \n<!--more-->\n\n* 预计实现效果为\n\n| webcheckid|website|webrecordid| access_state| access_date|\n| :-----:|:----------:|:---------:| :---------:|  :---------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  |\n| 2     | www.google.com | 3| 失败  | 2018-01-11 18:03:49  |\n| 3     | www.soso.com | |  |  |\n```\n--以下是错误的sql，唯一难住我的是就是关联查询最新记录了，之前想当然地用group by来分组获取最新记录，但是会报错，group by的字段必须与查询的字段相对应，除非是聚合函数包裹着\nselect a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID=b.WEBCHECKID \ngroup by b.WEBCHECKID,b.access_date having b.access_state=max(b.access_state) \n--报错不是group by 的表达式      \n```\n> 改为使用以下语句\n```\nrow_number() over(partition by b.webcheckid order by b.access_date desc) \n\n--partition by 按字段分组\n--order by 分组，按组内排序，desc即最新在第一条\n--row_number() 按分组内的行个数，生成行号；1,2,3，……\n```\n> 推出新的sql\n\n```\n--行号作为新字段,并用一个新select包裹，获取第一行数据，即为新记录\nselect * from ( \n         select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date,  \n         \n         row_number() over(partition by b.webcheckid order by b.access_date desc) as ran\n          from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID=b.WEBCHECKID \n        ) where recordid is  null or ran=1\n```\n\n> -- `recordid is  null `是为了防止当前webrecord表里面没有数据，行号数据为混乱，行号此时就无法作为判断条件\n\n* 例如当soso和google在webrecord没有访问记录时，错误实现效果为，soso这一数据没有显示出来\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 2     | www.google.com | |   |  |  1 |\n\n* 去外部条件，我们来看看效果，可以看到soso的行号为2，明显不正常，故需要增加 `recordid is  null `，并需要`or`条件\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 1     | www.baidu.com | 1  |  成功  | 2018-01-09 18:03:49  | 2  |\n| 2     | www.google.com | |   |  |  1 |\n| 1     | www.soso.com |   |    |   | 2  |\n\n\n# 成功实现效果为\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 2     | www.google.com | 3|  失败 | 2018-01-11 18:03:49 |  1 |\n| 3 | www.soso.com |   |    |   | 2 |\n","source":"_posts/oracle之partition-by与group-by的区别.md","raw":"---\ntitle: oracle之partition by与group by的区别\ndate: 2018-01-10 22:58:39\ncategories:\n  - oralce\n  - sql\ntags:\n  - oralce\n  - sql\n---\n# 正文\n## 前言\n> 先来看两个表\n\n* 主表(webcheck——存储网站记录)\n\n|  webcheckid   | website       | \n| :-------------:|:-------------:| \n| 1 | www.baidu.com   | \n| 2 | www.google.com |\n| 3 | www.soso.com |\n\n* 副表(webrecord——访问网站记录表)\n\n| webrecordid   |webcheckid | access_state  | access_date|\n| :-------------:|:-------------:|:-------------:| :-------------:| \n| 1         | 1  |  成功  | 2018-01-10 18:03:49  |\n| 2         | 1| 成功  | 2018-01-09 18:03:49  |\n| 3         | 2| 失败 | 2018-01-11 18:03:49  |\n> 我想要关联副表，**查询每个网站最新访问记录**，即使**网站没有访问记录，也要能查询出来**\n> \n<!--more-->\n\n* 预计实现效果为\n\n| webcheckid|website|webrecordid| access_state| access_date|\n| :-----:|:----------:|:---------:| :---------:|  :---------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  |\n| 2     | www.google.com | 3| 失败  | 2018-01-11 18:03:49  |\n| 3     | www.soso.com | |  |  |\n```\n--以下是错误的sql，唯一难住我的是就是关联查询最新记录了，之前想当然地用group by来分组获取最新记录，但是会报错，group by的字段必须与查询的字段相对应，除非是聚合函数包裹着\nselect a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID=b.WEBCHECKID \ngroup by b.WEBCHECKID,b.access_date having b.access_state=max(b.access_state) \n--报错不是group by 的表达式      \n```\n> 改为使用以下语句\n```\nrow_number() over(partition by b.webcheckid order by b.access_date desc) \n\n--partition by 按字段分组\n--order by 分组，按组内排序，desc即最新在第一条\n--row_number() 按分组内的行个数，生成行号；1,2,3，……\n```\n> 推出新的sql\n\n```\n--行号作为新字段,并用一个新select包裹，获取第一行数据，即为新记录\nselect * from ( \n         select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date,  \n         \n         row_number() over(partition by b.webcheckid order by b.access_date desc) as ran\n          from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID=b.WEBCHECKID \n        ) where recordid is  null or ran=1\n```\n\n> -- `recordid is  null `是为了防止当前webrecord表里面没有数据，行号数据为混乱，行号此时就无法作为判断条件\n\n* 例如当soso和google在webrecord没有访问记录时，错误实现效果为，soso这一数据没有显示出来\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 2     | www.google.com | |   |  |  1 |\n\n* 去外部条件，我们来看看效果，可以看到soso的行号为2，明显不正常，故需要增加 `recordid is  null `，并需要`or`条件\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 1     | www.baidu.com | 1  |  成功  | 2018-01-09 18:03:49  | 2  |\n| 2     | www.google.com | |   |  |  1 |\n| 1     | www.soso.com |   |    |   | 2  |\n\n\n# 成功实现效果为\n\n| webcheckid|website|webrecordid| access_state| access_date|ran|\n| :---:|:---:|:----:| :----:|  :------:| :-------:| \n| 1     | www.baidu.com | 1  |  成功  | 2018-01-10 18:03:49  | 1  |\n| 2     | www.google.com | 3|  失败 | 2018-01-11 18:03:49 |  1 |\n| 3 | www.soso.com |   |    |   | 2 |\n","slug":"oracle之partition-by与group-by的区别","published":1,"updated":"2019-05-05T09:43:39.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncies000vy8usmh9d23f8","content":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>先来看两个表</p>\n</blockquote>\n<ul>\n<li>主表(webcheck——存储网站记录)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>副表(webrecord——访问网站记录表)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-09 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>我想要关联副表，<strong>查询每个网站最新访问记录</strong>，即使<strong>网站没有访问记录，也要能查询出来</strong></p>\n<a id=\"more\"></a>\n</blockquote>\n<ul>\n<li>预计实现效果为</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--以下是错误的sql，唯一难住我的是就是关联查询最新记录了，之前想当然地用group by来分组获取最新记录，但是会报错，group by的字段必须与查询的字段相对应，除非是聚合函数包裹着</span><br><span class=\"line\">select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID&#x3D;b.WEBCHECKID </span><br><span class=\"line\">group by b.WEBCHECKID,b.access_date having b.access_state&#x3D;max(b.access_state) </span><br><span class=\"line\">--报错不是group by 的表达式</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>改为使用以下语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row_number() over(partition by b.webcheckid order by b.access_date desc) </span><br><span class=\"line\"></span><br><span class=\"line\">--partition by 按字段分组</span><br><span class=\"line\">--order by 分组，按组内排序，desc即最新在第一条</span><br><span class=\"line\">--row_number() 按分组内的行个数，生成行号；1,2,3，……</span><br></pre></td></tr></table></figure><br>推出新的sql</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--行号作为新字段,并用一个新select包裹，获取第一行数据，即为新记录</span><br><span class=\"line\">select * from ( </span><br><span class=\"line\">         select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date,  </span><br><span class=\"line\">         </span><br><span class=\"line\">         row_number() over(partition by b.webcheckid order by b.access_date desc) as ran</span><br><span class=\"line\">          from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID&#x3D;b.WEBCHECKID </span><br><span class=\"line\">        ) where recordid is  null or ran&#x3D;1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>– <code>recordid is  null</code>是为了防止当前webrecord表里面没有数据，行号数据为混乱，行号此时就无法作为判断条件</p>\n</blockquote>\n<ul>\n<li>例如当soso和google在webrecord没有访问记录时，错误实现效果为，soso这一数据没有显示出来</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>去外部条件，我们来看看效果，可以看到soso的行号为2，明显不正常，故需要增加 <code>recordid is  null</code>，并需要<code>or</code>条件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-09 18:03:49</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"成功实现效果为\"><a href=\"#成功实现效果为\" class=\"headerlink\" title=\"成功实现效果为\"></a>成功实现效果为</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>先来看两个表</p>\n</blockquote>\n<ul>\n<li>主表(webcheck——存储网站记录)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>副表(webrecord——访问网站记录表)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-09 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>我想要关联副表，<strong>查询每个网站最新访问记录</strong>，即使<strong>网站没有访问记录，也要能查询出来</strong></p></blockquote>","more":"\n<ul>\n<li>预计实现效果为</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--以下是错误的sql，唯一难住我的是就是关联查询最新记录了，之前想当然地用group by来分组获取最新记录，但是会报错，group by的字段必须与查询的字段相对应，除非是聚合函数包裹着</span><br><span class=\"line\">select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID&#x3D;b.WEBCHECKID </span><br><span class=\"line\">group by b.WEBCHECKID,b.access_date having b.access_state&#x3D;max(b.access_state) </span><br><span class=\"line\">--报错不是group by 的表达式</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>改为使用以下语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row_number() over(partition by b.webcheckid order by b.access_date desc) </span><br><span class=\"line\"></span><br><span class=\"line\">--partition by 按字段分组</span><br><span class=\"line\">--order by 分组，按组内排序，desc即最新在第一条</span><br><span class=\"line\">--row_number() 按分组内的行个数，生成行号；1,2,3，……</span><br></pre></td></tr></table></figure><br>推出新的sql</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--行号作为新字段,并用一个新select包裹，获取第一行数据，即为新记录</span><br><span class=\"line\">select * from ( </span><br><span class=\"line\">         select a.WEBCHECKID,a.WEBSITE,b.RECORDID,b.access_state,b.access_date,  </span><br><span class=\"line\">         </span><br><span class=\"line\">         row_number() over(partition by b.webcheckid order by b.access_date desc) as ran</span><br><span class=\"line\">          from TFSWXTS_WEBCHECK a left join TFSWXTS_WEBRECORD b on a.WEBCHECKID&#x3D;b.WEBCHECKID </span><br><span class=\"line\">        ) where recordid is  null or ran&#x3D;1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>– <code>recordid is  null</code>是为了防止当前webrecord表里面没有数据，行号数据为混乱，行号此时就无法作为判断条件</p>\n</blockquote>\n<ul>\n<li>例如当soso和google在webrecord没有访问记录时，错误实现效果为，soso这一数据没有显示出来</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>去外部条件，我们来看看效果，可以看到soso的行号为2，明显不正常，故需要增加 <code>recordid is  null</code>，并需要<code>or</code>条件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-09 18:03:49</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"成功实现效果为\"><a href=\"#成功实现效果为\" class=\"headerlink\" title=\"成功实现效果为\"></a>成功实现效果为</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">webcheckid</th>\n<th style=\"text-align:center\">website</th>\n<th style=\"text-align:center\">webrecordid</th>\n<th style=\"text-align:center\">access_state</th>\n<th style=\"text-align:center\">access_date</th>\n<th style=\"text-align:center\">ran</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">www.baidu.com</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">成功</td>\n<td style=\"text-align:center\">2018-01-10 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">www.google.com</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">失败</td>\n<td style=\"text-align:center\">2018-01-11 18:03:49</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">www.soso.com</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>"},{"title":"javascript之模拟ajax","date":"2017-06-10T15:09:22.000Z","_content":"\n# javascript之模拟ajax\n## 原javascript的异步请求方法\n很多人可能一直用jquery封装好的ajax异步请求，可能不知道原生javascript是怎么异步请求的，javascript是用`XMLHttpRequest`来创建异步对象的，以下是简单的请求方法。\n```\n    var ajax = new XMLHttpRequest();\n    ajax.open('post','http://www.baidu.com');\n    //因为是post请求所以必须加上setRequestHeader(get请求可以忽略)\n    ajax.setRequestHeader('Content-type','text/plain;charset=UTF-8');\n    //请求所带的参数\n    ajax.send(\"username=123456\");\n    //绑定onreadystatechange事件\n    ajax.onreadystatechange=function(){\n    //判断如果请求的状态是否成功\n    \tif (ajax.readyState==4&&ajax.status==200) {\n    \t\t    console.log(\"请求的结果是\"+ajax.responseText);\n\t\t}\n    };\n```\n<!--more-->\n## 简单封装，便于理解\n当然是我没有看到jquery是如何写的ajax，只是在自己理解范围写了这个ajax。\n\n> ajax.js\n\n```\n//requestParameter为一个JSON对象\nvar ajax=function(requestParameter){\n\tvar requestObj = new XMLHttpRequest();\n\tvar requestMethod=requestParameter.type.toLowerCase();\n\t\tswitch(requestMethod){\n\t\t\tcase \"get\":\n\t\t\t\tbreak;\n\t\t\tcase \"post\":\n\t\t\t\tbreak;\n\t\t\tcase \"options\":\n\t\t\t\tbreak;\n\t\t\tcase \"head\":\n\t\t\t\tbreak;\n\t\t\tcase \"put\":\n\t\t\t\tbreak;\n\t\t\tcase \"detele\":\n\t\t\t\tbreak;\n\t\t\tcase \"trace\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow(\"ajax:type don't null\");\n\t\t\t\tbreak;\n\n\t\t}\n\t//\t请求地址及请求方法设置\n\tif (requestParameter.url) {\n\t\trequestObj.open(requestMethod,requestParameter.url);\t\n\t}else{\n\t\tthrow(\"ajax:url don't null\");\n\t}\n\t//请求头\n\tif (requestParameter.head) {\n\t\trequestObj.setRequestHeader('Content-type',requestParameter.head);\n\t}\n\t//请求参数，data为一个JSON对象并发送\n\tif (requestParameter.data) {\n\t\tvar dataParameter=\"\";\n\t\tfor(var o in requestParameter.data){\n\t\t\tdataParameter+=o+\"=\"+requestParameter.data[o]+\"&\"\n\t\t}\n\t\tdataParameter=dataParameter.substring(0,dataParameter.length-1)\n\t\trequestObj.send(dataParameter);\n\t}\n\t//结果返回\n\trequestObj.onreadystatechange=function(){\n\t\tvar result={\n\t\t\tstatus:requestObj.status,\n\t\t\tresult:requestObj.responseText\n\t\t};\n\t\tif (requestObj.readyState==4&&requestObj.status==200&&requestParameter.success) {\n\t\t\t requestParameter.success(result);\n\t\t}else if (requestObj.readyState==4&&requestParameter.error) {\n\t\t\trequestParameter.error(result);\n\t\t}\n\t\t\n\t}\n\t\n\treturn requestObj;\n\t\n};\n```\n## 简单调用\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>测试</title>\t\n\t<script src=\"ajax.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <!-- login('abc','123456') -->\n    <input type=\"submit\" value=\"登录\" onclick=\"testLogin()\"/><br>\n</body>\n<script type=\"text/javascript\">\n//登录\nfunction testLogin(username,pass){\n    ajax({\n    \turl:\"http://www.server.com\",\n    \ttype:\"post\",\n    \tdata:{\n    \t\tusername:username,\n    \t\tpass:pass\n    \t},\n    \tsuccess:function(obj){\n    \t\tconsole.log(\"index: 成功了，状态代码是\"+obj.status+\"返回结果\"+obj.result);\n    \t},\n    \terror:function(obj){\n    \t\tconsole.log(\"index: 失败了，状态代码是\"+obj.status+\"返回结果\"+obj.result);\n    \t}\n    });\n}\n</script>\n</html>\n```\n\n> 如果有觉得写不好，请在下方评论一起讨论","source":"_posts/javascript之模拟ajax.md","raw":"---\ntitle: javascript之模拟ajax\ndate: 2017-06-10 23:09:22\ncategories:\n  - javascript\n  - ajax\ntags:\n  - javascript ajax\n---\n\n# javascript之模拟ajax\n## 原javascript的异步请求方法\n很多人可能一直用jquery封装好的ajax异步请求，可能不知道原生javascript是怎么异步请求的，javascript是用`XMLHttpRequest`来创建异步对象的，以下是简单的请求方法。\n```\n    var ajax = new XMLHttpRequest();\n    ajax.open('post','http://www.baidu.com');\n    //因为是post请求所以必须加上setRequestHeader(get请求可以忽略)\n    ajax.setRequestHeader('Content-type','text/plain;charset=UTF-8');\n    //请求所带的参数\n    ajax.send(\"username=123456\");\n    //绑定onreadystatechange事件\n    ajax.onreadystatechange=function(){\n    //判断如果请求的状态是否成功\n    \tif (ajax.readyState==4&&ajax.status==200) {\n    \t\t    console.log(\"请求的结果是\"+ajax.responseText);\n\t\t}\n    };\n```\n<!--more-->\n## 简单封装，便于理解\n当然是我没有看到jquery是如何写的ajax，只是在自己理解范围写了这个ajax。\n\n> ajax.js\n\n```\n//requestParameter为一个JSON对象\nvar ajax=function(requestParameter){\n\tvar requestObj = new XMLHttpRequest();\n\tvar requestMethod=requestParameter.type.toLowerCase();\n\t\tswitch(requestMethod){\n\t\t\tcase \"get\":\n\t\t\t\tbreak;\n\t\t\tcase \"post\":\n\t\t\t\tbreak;\n\t\t\tcase \"options\":\n\t\t\t\tbreak;\n\t\t\tcase \"head\":\n\t\t\t\tbreak;\n\t\t\tcase \"put\":\n\t\t\t\tbreak;\n\t\t\tcase \"detele\":\n\t\t\t\tbreak;\n\t\t\tcase \"trace\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow(\"ajax:type don't null\");\n\t\t\t\tbreak;\n\n\t\t}\n\t//\t请求地址及请求方法设置\n\tif (requestParameter.url) {\n\t\trequestObj.open(requestMethod,requestParameter.url);\t\n\t}else{\n\t\tthrow(\"ajax:url don't null\");\n\t}\n\t//请求头\n\tif (requestParameter.head) {\n\t\trequestObj.setRequestHeader('Content-type',requestParameter.head);\n\t}\n\t//请求参数，data为一个JSON对象并发送\n\tif (requestParameter.data) {\n\t\tvar dataParameter=\"\";\n\t\tfor(var o in requestParameter.data){\n\t\t\tdataParameter+=o+\"=\"+requestParameter.data[o]+\"&\"\n\t\t}\n\t\tdataParameter=dataParameter.substring(0,dataParameter.length-1)\n\t\trequestObj.send(dataParameter);\n\t}\n\t//结果返回\n\trequestObj.onreadystatechange=function(){\n\t\tvar result={\n\t\t\tstatus:requestObj.status,\n\t\t\tresult:requestObj.responseText\n\t\t};\n\t\tif (requestObj.readyState==4&&requestObj.status==200&&requestParameter.success) {\n\t\t\t requestParameter.success(result);\n\t\t}else if (requestObj.readyState==4&&requestParameter.error) {\n\t\t\trequestParameter.error(result);\n\t\t}\n\t\t\n\t}\n\t\n\treturn requestObj;\n\t\n};\n```\n## 简单调用\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>测试</title>\t\n\t<script src=\"ajax.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <!-- login('abc','123456') -->\n    <input type=\"submit\" value=\"登录\" onclick=\"testLogin()\"/><br>\n</body>\n<script type=\"text/javascript\">\n//登录\nfunction testLogin(username,pass){\n    ajax({\n    \turl:\"http://www.server.com\",\n    \ttype:\"post\",\n    \tdata:{\n    \t\tusername:username,\n    \t\tpass:pass\n    \t},\n    \tsuccess:function(obj){\n    \t\tconsole.log(\"index: 成功了，状态代码是\"+obj.status+\"返回结果\"+obj.result);\n    \t},\n    \terror:function(obj){\n    \t\tconsole.log(\"index: 失败了，状态代码是\"+obj.status+\"返回结果\"+obj.result);\n    \t}\n    });\n}\n</script>\n</html>\n```\n\n> 如果有觉得写不好，请在下方评论一起讨论","slug":"javascript之模拟ajax","published":1,"updated":"2019-05-05T09:43:39.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciet000wy8us55bbw9co","content":"<h1 id=\"javascript之模拟ajax\"><a href=\"#javascript之模拟ajax\" class=\"headerlink\" title=\"javascript之模拟ajax\"></a>javascript之模拟ajax</h1><h2 id=\"原javascript的异步请求方法\"><a href=\"#原javascript的异步请求方法\" class=\"headerlink\" title=\"原javascript的异步请求方法\"></a>原javascript的异步请求方法</h2><p>很多人可能一直用jquery封装好的ajax异步请求，可能不知道原生javascript是怎么异步请求的，javascript是用<code>XMLHttpRequest</code>来创建异步对象的，以下是简单的请求方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var ajax &#x3D; new XMLHttpRequest();</span><br><span class=\"line\">  ajax.open(&#39;post&#39;,&#39;http:&#x2F;&#x2F;www.baidu.com&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;因为是post请求所以必须加上setRequestHeader(get请求可以忽略)</span><br><span class=\"line\">  ajax.setRequestHeader(&#39;Content-type&#39;,&#39;text&#x2F;plain;charset&#x3D;UTF-8&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;请求所带的参数</span><br><span class=\"line\">  ajax.send(&quot;username&#x3D;123456&quot;);</span><br><span class=\"line\">  &#x2F;&#x2F;绑定onreadystatechange事件</span><br><span class=\"line\">  ajax.onreadystatechange&#x3D;function()&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;判断如果请求的状态是否成功</span><br><span class=\"line\">  \tif (ajax.readyState&#x3D;&#x3D;4&amp;&amp;ajax.status&#x3D;&#x3D;200) &#123;</span><br><span class=\"line\">  \t\t    console.log(&quot;请求的结果是&quot;+ajax.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure><br><a id=\"more\"></a></p>\n<h2 id=\"简单封装，便于理解\"><a href=\"#简单封装，便于理解\" class=\"headerlink\" title=\"简单封装，便于理解\"></a>简单封装，便于理解</h2><p>当然是我没有看到jquery是如何写的ajax，只是在自己理解范围写了这个ajax。</p>\n<blockquote>\n<p>ajax.js</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;requestParameter为一个JSON对象</span><br><span class=\"line\">var ajax&#x3D;function(requestParameter)&#123;</span><br><span class=\"line\">\tvar requestObj &#x3D; new XMLHttpRequest();</span><br><span class=\"line\">\tvar requestMethod&#x3D;requestParameter.type.toLowerCase();</span><br><span class=\"line\">\t\tswitch(requestMethod)&#123;</span><br><span class=\"line\">\t\t\tcase &quot;get&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;post&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;options&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;head&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;put&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;detele&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;trace&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tdefault:</span><br><span class=\"line\">\t\t\t\tthrow(&quot;ajax:type don&#39;t null&quot;);</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;\t请求地址及请求方法设置</span><br><span class=\"line\">\tif (requestParameter.url) &#123;</span><br><span class=\"line\">\t\trequestObj.open(requestMethod,requestParameter.url);\t</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tthrow(&quot;ajax:url don&#39;t null&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;请求头</span><br><span class=\"line\">\tif (requestParameter.head) &#123;</span><br><span class=\"line\">\t\trequestObj.setRequestHeader(&#39;Content-type&#39;,requestParameter.head);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;请求参数，data为一个JSON对象并发送</span><br><span class=\"line\">\tif (requestParameter.data) &#123;</span><br><span class=\"line\">\t\tvar dataParameter&#x3D;&quot;&quot;;</span><br><span class=\"line\">\t\tfor(var o in requestParameter.data)&#123;</span><br><span class=\"line\">\t\t\tdataParameter+&#x3D;o+&quot;&#x3D;&quot;+requestParameter.data[o]+&quot;&amp;&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdataParameter&#x3D;dataParameter.substring(0,dataParameter.length-1)</span><br><span class=\"line\">\t\trequestObj.send(dataParameter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;结果返回</span><br><span class=\"line\">\trequestObj.onreadystatechange&#x3D;function()&#123;</span><br><span class=\"line\">\t\tvar result&#x3D;&#123;</span><br><span class=\"line\">\t\t\tstatus:requestObj.status,</span><br><span class=\"line\">\t\t\tresult:requestObj.responseText</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tif (requestObj.readyState&#x3D;&#x3D;4&amp;&amp;requestObj.status&#x3D;&#x3D;200&amp;&amp;requestParameter.success) &#123;</span><br><span class=\"line\">\t\t\t requestParameter.success(result);</span><br><span class=\"line\">\t\t&#125;else if (requestObj.readyState&#x3D;&#x3D;4&amp;&amp;requestParameter.error) &#123;</span><br><span class=\"line\">\t\t\trequestParameter.error(result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn requestObj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;测试&lt;&#x2F;title&gt;\t</span><br><span class=\"line\">\t&lt;script src&#x3D;&quot;ajax.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- login(&#39;abc&#39;,&#39;123456&#39;) --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot; onclick&#x3D;&quot;testLogin()&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">&#x2F;&#x2F;登录</span><br><span class=\"line\">function testLogin(username,pass)&#123;</span><br><span class=\"line\">    ajax(&#123;</span><br><span class=\"line\">    \turl:&quot;http:&#x2F;&#x2F;www.server.com&quot;,</span><br><span class=\"line\">    \ttype:&quot;post&quot;,</span><br><span class=\"line\">    \tdata:&#123;</span><br><span class=\"line\">    \t\tusername:username,</span><br><span class=\"line\">    \t\tpass:pass</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \tsuccess:function(obj)&#123;</span><br><span class=\"line\">    \t\tconsole.log(&quot;index: 成功了，状态代码是&quot;+obj.status+&quot;返回结果&quot;+obj.result);</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \terror:function(obj)&#123;</span><br><span class=\"line\">    \t\tconsole.log(&quot;index: 失败了，状态代码是&quot;+obj.status+&quot;返回结果&quot;+obj.result);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果有觉得写不好，请在下方评论一起讨论</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"javascript之模拟ajax\"><a href=\"#javascript之模拟ajax\" class=\"headerlink\" title=\"javascript之模拟ajax\"></a>javascript之模拟ajax</h1><h2 id=\"原javascript的异步请求方法\"><a href=\"#原javascript的异步请求方法\" class=\"headerlink\" title=\"原javascript的异步请求方法\"></a>原javascript的异步请求方法</h2><p>很多人可能一直用jquery封装好的ajax异步请求，可能不知道原生javascript是怎么异步请求的，javascript是用<code>XMLHttpRequest</code>来创建异步对象的，以下是简单的请求方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  var ajax &#x3D; new XMLHttpRequest();</span><br><span class=\"line\">  ajax.open(&#39;post&#39;,&#39;http:&#x2F;&#x2F;www.baidu.com&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;因为是post请求所以必须加上setRequestHeader(get请求可以忽略)</span><br><span class=\"line\">  ajax.setRequestHeader(&#39;Content-type&#39;,&#39;text&#x2F;plain;charset&#x3D;UTF-8&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;请求所带的参数</span><br><span class=\"line\">  ajax.send(&quot;username&#x3D;123456&quot;);</span><br><span class=\"line\">  &#x2F;&#x2F;绑定onreadystatechange事件</span><br><span class=\"line\">  ajax.onreadystatechange&#x3D;function()&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;判断如果请求的状态是否成功</span><br><span class=\"line\">  \tif (ajax.readyState&#x3D;&#x3D;4&amp;&amp;ajax.status&#x3D;&#x3D;200) &#123;</span><br><span class=\"line\">  \t\t    console.log(&quot;请求的结果是&quot;+ajax.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure><br></p>","more":"<p></p>\n<h2 id=\"简单封装，便于理解\"><a href=\"#简单封装，便于理解\" class=\"headerlink\" title=\"简单封装，便于理解\"></a>简单封装，便于理解</h2><p>当然是我没有看到jquery是如何写的ajax，只是在自己理解范围写了这个ajax。</p>\n<blockquote>\n<p>ajax.js</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;requestParameter为一个JSON对象</span><br><span class=\"line\">var ajax&#x3D;function(requestParameter)&#123;</span><br><span class=\"line\">\tvar requestObj &#x3D; new XMLHttpRequest();</span><br><span class=\"line\">\tvar requestMethod&#x3D;requestParameter.type.toLowerCase();</span><br><span class=\"line\">\t\tswitch(requestMethod)&#123;</span><br><span class=\"line\">\t\t\tcase &quot;get&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;post&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;options&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;head&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;put&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;detele&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tcase &quot;trace&quot;:</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\tdefault:</span><br><span class=\"line\">\t\t\t\tthrow(&quot;ajax:type don&#39;t null&quot;);</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;\t请求地址及请求方法设置</span><br><span class=\"line\">\tif (requestParameter.url) &#123;</span><br><span class=\"line\">\t\trequestObj.open(requestMethod,requestParameter.url);\t</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tthrow(&quot;ajax:url don&#39;t null&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;请求头</span><br><span class=\"line\">\tif (requestParameter.head) &#123;</span><br><span class=\"line\">\t\trequestObj.setRequestHeader(&#39;Content-type&#39;,requestParameter.head);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;请求参数，data为一个JSON对象并发送</span><br><span class=\"line\">\tif (requestParameter.data) &#123;</span><br><span class=\"line\">\t\tvar dataParameter&#x3D;&quot;&quot;;</span><br><span class=\"line\">\t\tfor(var o in requestParameter.data)&#123;</span><br><span class=\"line\">\t\t\tdataParameter+&#x3D;o+&quot;&#x3D;&quot;+requestParameter.data[o]+&quot;&amp;&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdataParameter&#x3D;dataParameter.substring(0,dataParameter.length-1)</span><br><span class=\"line\">\t\trequestObj.send(dataParameter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F;结果返回</span><br><span class=\"line\">\trequestObj.onreadystatechange&#x3D;function()&#123;</span><br><span class=\"line\">\t\tvar result&#x3D;&#123;</span><br><span class=\"line\">\t\t\tstatus:requestObj.status,</span><br><span class=\"line\">\t\t\tresult:requestObj.responseText</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tif (requestObj.readyState&#x3D;&#x3D;4&amp;&amp;requestObj.status&#x3D;&#x3D;200&amp;&amp;requestParameter.success) &#123;</span><br><span class=\"line\">\t\t\t requestParameter.success(result);</span><br><span class=\"line\">\t\t&#125;else if (requestObj.readyState&#x3D;&#x3D;4&amp;&amp;requestParameter.error) &#123;</span><br><span class=\"line\">\t\t\trequestParameter.error(result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn requestObj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;测试&lt;&#x2F;title&gt;\t</span><br><span class=\"line\">\t&lt;script src&#x3D;&quot;ajax.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- login(&#39;abc&#39;,&#39;123456&#39;) --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot; onclick&#x3D;&quot;testLogin()&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">&#x2F;&#x2F;登录</span><br><span class=\"line\">function testLogin(username,pass)&#123;</span><br><span class=\"line\">    ajax(&#123;</span><br><span class=\"line\">    \turl:&quot;http:&#x2F;&#x2F;www.server.com&quot;,</span><br><span class=\"line\">    \ttype:&quot;post&quot;,</span><br><span class=\"line\">    \tdata:&#123;</span><br><span class=\"line\">    \t\tusername:username,</span><br><span class=\"line\">    \t\tpass:pass</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \tsuccess:function(obj)&#123;</span><br><span class=\"line\">    \t\tconsole.log(&quot;index: 成功了，状态代码是&quot;+obj.status+&quot;返回结果&quot;+obj.result);</span><br><span class=\"line\">    \t&#125;,</span><br><span class=\"line\">    \terror:function(obj)&#123;</span><br><span class=\"line\">    \t\tconsole.log(&quot;index: 失败了，状态代码是&quot;+obj.status+&quot;返回结果&quot;+obj.result);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果有觉得写不好，请在下方评论一起讨论</p>\n</blockquote>"},{"title":"vmware之ubuntu如何在仅主机模式下联网","date":"2017-07-29T15:44:42.000Z","_content":"# 参考链接\n[《仅主机模式上网》——邓戈麟](http://www.cnblogs.com/denggelin/p/6135582.html)  \n[《ubuntu修改网络配置》——百度经验](https://jingyan.baidu.com/article/76a7e409daca52fc3b6e15e5.html)   \n# vmware之ubuntu如何在仅主机模式下联网\n## 仅主机模式\n![仅主机模式1](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234335.png)  \n![仅主机模式2](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234739.png)\n<!-- more -->\n## 共享我的网络到虚拟网络适配器\n> 右键“以太网”或者“无线网络适配器”-->“属性”-->勾选“允许其他用户通过此计算机的internet连接来连接”-->选择你要使用的适配器。\n\n![共享我的网络](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_000208.png)\n\n## 查看虚拟网络IP值\n> 点击“编辑--->虚拟网络编辑”，可以看到IP自动变成了某一IP值，这是共享网络自动配置的。\n\n![虚拟网络编辑](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_235311.png)  \n我的是192.168.0.0\n## 在ubuntu系统中修改网络配置。\n> 先查看自己的网卡适配器叫什么名字\n```\n$ ifconfig\n```\n![查看自己的网卡适配器](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001401.png)  \n> 修改网卡的配置文件可以永久保存。\n注意不是/etc/resolv.conf，可能由于ubuntu和其他linux系统不一样，配置文件应该是/etc/network/interfaces文件。\n\n```\n# 输入以下命令，进入修改网络配置\n$sudo nano /etc/network/interfaces\n```\n![配置IP](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001931.png)  \nCtrl+x保存退出\n> 配置 DNS\n```\n# 输入以下命令，进入配置DNS\n$sudo nano /etc/resolvconf/resolv.conf.d/base\n```  \n![输入以下命令](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002457.png)\n## 测试是否能够连接网络\n> 真机测试是否能访问虚拟机\n![真机测试是否能访问虚拟机](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png)\n> 虚拟机测试是否能访问网络\n![image](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png)\n\n\n## 问题总结\n### 必须编辑虚拟机网段\n我就是没注意到虚拟机网段规定了起始网IP为“192.168.0.174”，终止IP为“192.168.0.281”，我设置的IP是“192.168.0.5”，明显不在这个范围了，虽然在真机上“ping 192.168.0.5”是有数据返回的（虽然我也不知道为什么），但是在虚拟机上ping真机是失败的，也不能ping上外网\n## 申明\n有必要申明一下，这个教程是成功，我想截一些图，但是发现虚拟机突然不能上网，一直解决不了，实在抱歉","source":"_posts/vmware之ubuntu如何在仅主机模式下联网.md","raw":"---\ntitle: vmware之ubuntu如何在仅主机模式下联网\ndate: 2017-07-29 23:44:42\ncategories:\n  - vmware\ntags:\n  - vmware\n---\n# 参考链接\n[《仅主机模式上网》——邓戈麟](http://www.cnblogs.com/denggelin/p/6135582.html)  \n[《ubuntu修改网络配置》——百度经验](https://jingyan.baidu.com/article/76a7e409daca52fc3b6e15e5.html)   \n# vmware之ubuntu如何在仅主机模式下联网\n## 仅主机模式\n![仅主机模式1](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234335.png)  \n![仅主机模式2](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234739.png)\n<!-- more -->\n## 共享我的网络到虚拟网络适配器\n> 右键“以太网”或者“无线网络适配器”-->“属性”-->勾选“允许其他用户通过此计算机的internet连接来连接”-->选择你要使用的适配器。\n\n![共享我的网络](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_000208.png)\n\n## 查看虚拟网络IP值\n> 点击“编辑--->虚拟网络编辑”，可以看到IP自动变成了某一IP值，这是共享网络自动配置的。\n\n![虚拟网络编辑](vmware之ubuntu如何在仅主机模式下联网/2017-07-29_235311.png)  \n我的是192.168.0.0\n## 在ubuntu系统中修改网络配置。\n> 先查看自己的网卡适配器叫什么名字\n```\n$ ifconfig\n```\n![查看自己的网卡适配器](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001401.png)  \n> 修改网卡的配置文件可以永久保存。\n注意不是/etc/resolv.conf，可能由于ubuntu和其他linux系统不一样，配置文件应该是/etc/network/interfaces文件。\n\n```\n# 输入以下命令，进入修改网络配置\n$sudo nano /etc/network/interfaces\n```\n![配置IP](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001931.png)  \nCtrl+x保存退出\n> 配置 DNS\n```\n# 输入以下命令，进入配置DNS\n$sudo nano /etc/resolvconf/resolv.conf.d/base\n```  \n![输入以下命令](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002457.png)\n## 测试是否能够连接网络\n> 真机测试是否能访问虚拟机\n![真机测试是否能访问虚拟机](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png)\n> 虚拟机测试是否能访问网络\n![image](vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png)\n\n\n## 问题总结\n### 必须编辑虚拟机网段\n我就是没注意到虚拟机网段规定了起始网IP为“192.168.0.174”，终止IP为“192.168.0.281”，我设置的IP是“192.168.0.5”，明显不在这个范围了，虽然在真机上“ping 192.168.0.5”是有数据返回的（虽然我也不知道为什么），但是在虚拟机上ping真机是失败的，也不能ping上外网\n## 申明\n有必要申明一下，这个教程是成功，我想截一些图，但是发现虚拟机突然不能上网，一直解决不了，实在抱歉","slug":"vmware之ubuntu如何在仅主机模式下联网","published":1,"updated":"2019-05-05T09:43:39.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciew000xy8usw934p1a0","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/denggelin/p/6135582.html\" target=\"_blank\" rel=\"noopener\">《仅主机模式上网》——邓戈麟</a><br><a href=\"https://jingyan.baidu.com/article/76a7e409daca52fc3b6e15e5.html\" target=\"_blank\" rel=\"noopener\">《ubuntu修改网络配置》——百度经验</a>   </p>\n<h1 id=\"vmware之ubuntu如何在仅主机模式下联网\"><a href=\"#vmware之ubuntu如何在仅主机模式下联网\" class=\"headerlink\" title=\"vmware之ubuntu如何在仅主机模式下联网\"></a>vmware之ubuntu如何在仅主机模式下联网</h1><h2 id=\"仅主机模式\"><a href=\"#仅主机模式\" class=\"headerlink\" title=\"仅主机模式\"></a>仅主机模式</h2><p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_234335.png\" alt=\"仅主机模式1\"><br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_234739.png\" alt=\"仅主机模式2\"><br><a id=\"more\"></a></p>\n<h2 id=\"共享我的网络到虚拟网络适配器\"><a href=\"#共享我的网络到虚拟网络适配器\" class=\"headerlink\" title=\"共享我的网络到虚拟网络适配器\"></a>共享我的网络到虚拟网络适配器</h2><blockquote>\n<p>右键“以太网”或者“无线网络适配器”–&gt;“属性”–&gt;勾选“允许其他用户通过此计算机的internet连接来连接”–&gt;选择你要使用的适配器。</p>\n</blockquote>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_000208.png\" alt=\"共享我的网络\"></p>\n<h2 id=\"查看虚拟网络IP值\"><a href=\"#查看虚拟网络IP值\" class=\"headerlink\" title=\"查看虚拟网络IP值\"></a>查看虚拟网络IP值</h2><blockquote>\n<p>点击“编辑—&gt;虚拟网络编辑”，可以看到IP自动变成了某一IP值，这是共享网络自动配置的。</p>\n</blockquote>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_235311.png\" alt=\"虚拟网络编辑\"><br>我的是192.168.0.0</p>\n<h2 id=\"在ubuntu系统中修改网络配置。\"><a href=\"#在ubuntu系统中修改网络配置。\" class=\"headerlink\" title=\"在ubuntu系统中修改网络配置。\"></a>在ubuntu系统中修改网络配置。</h2><blockquote>\n<p>先查看自己的网卡适配器叫什么名字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ifconfig</span><br></pre></td></tr></table></figure><br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_001401.png\" alt=\"查看自己的网卡适配器\"><br>修改网卡的配置文件可以永久保存。<br>注意不是/etc/resolv.conf，可能由于ubuntu和其他linux系统不一样，配置文件应该是/etc/network/interfaces文件。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入以下命令，进入修改网络配置</span><br><span class=\"line\">$sudo nano &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_001931.png\" alt=\"配置IP\"><br>Ctrl+x保存退出</p>\n<blockquote>\n<p>配置 DNS</p>\n<pre><code># 输入以下命令，进入配置DNS\n$sudo nano /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002457.png\" alt=\"输入以下命令\"></p>\n<h2 id=\"测试是否能够连接网络\"><a href=\"#测试是否能够连接网络\" class=\"headerlink\" title=\"测试是否能够连接网络\"></a>测试是否能够连接网络</h2><p>真机测试是否能访问虚拟机<br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002750.png\" alt=\"真机测试是否能访问虚拟机\"><br>虚拟机测试是否能访问网络<br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002750.png\" alt=\"image\"></p>\n</blockquote>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><h3 id=\"必须编辑虚拟机网段\"><a href=\"#必须编辑虚拟机网段\" class=\"headerlink\" title=\"必须编辑虚拟机网段\"></a>必须编辑虚拟机网段</h3><p>我就是没注意到虚拟机网段规定了起始网IP为“192.168.0.174”，终止IP为“192.168.0.281”，我设置的IP是“192.168.0.5”，明显不在这个范围了，虽然在真机上“ping 192.168.0.5”是有数据返回的（虽然我也不知道为什么），但是在虚拟机上ping真机是失败的，也不能ping上外网</p>\n<h2 id=\"申明\"><a href=\"#申明\" class=\"headerlink\" title=\"申明\"></a>申明</h2><p>有必要申明一下，这个教程是成功，我想截一些图，但是发现虚拟机突然不能上网，一直解决不了，实在抱歉</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/denggelin/p/6135582.html\" target=\"_blank\" rel=\"noopener\">《仅主机模式上网》——邓戈麟</a><br><a href=\"https://jingyan.baidu.com/article/76a7e409daca52fc3b6e15e5.html\" target=\"_blank\" rel=\"noopener\">《ubuntu修改网络配置》——百度经验</a>   </p>\n<h1 id=\"vmware之ubuntu如何在仅主机模式下联网\"><a href=\"#vmware之ubuntu如何在仅主机模式下联网\" class=\"headerlink\" title=\"vmware之ubuntu如何在仅主机模式下联网\"></a>vmware之ubuntu如何在仅主机模式下联网</h1><h2 id=\"仅主机模式\"><a href=\"#仅主机模式\" class=\"headerlink\" title=\"仅主机模式\"></a>仅主机模式</h2><p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_234335.png\" alt=\"仅主机模式1\"><br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_234739.png\" alt=\"仅主机模式2\"><br></p>","more":"<p></p>\n<h2 id=\"共享我的网络到虚拟网络适配器\"><a href=\"#共享我的网络到虚拟网络适配器\" class=\"headerlink\" title=\"共享我的网络到虚拟网络适配器\"></a>共享我的网络到虚拟网络适配器</h2><blockquote>\n<p>右键“以太网”或者“无线网络适配器”–&gt;“属性”–&gt;勾选“允许其他用户通过此计算机的internet连接来连接”–&gt;选择你要使用的适配器。</p>\n</blockquote>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_000208.png\" alt=\"共享我的网络\"></p>\n<h2 id=\"查看虚拟网络IP值\"><a href=\"#查看虚拟网络IP值\" class=\"headerlink\" title=\"查看虚拟网络IP值\"></a>查看虚拟网络IP值</h2><blockquote>\n<p>点击“编辑—&gt;虚拟网络编辑”，可以看到IP自动变成了某一IP值，这是共享网络自动配置的。</p>\n</blockquote>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-29_235311.png\" alt=\"虚拟网络编辑\"><br>我的是192.168.0.0</p>\n<h2 id=\"在ubuntu系统中修改网络配置。\"><a href=\"#在ubuntu系统中修改网络配置。\" class=\"headerlink\" title=\"在ubuntu系统中修改网络配置。\"></a>在ubuntu系统中修改网络配置。</h2><blockquote>\n<p>先查看自己的网卡适配器叫什么名字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ifconfig</span><br></pre></td></tr></table></figure><br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_001401.png\" alt=\"查看自己的网卡适配器\"><br>修改网卡的配置文件可以永久保存。<br>注意不是/etc/resolv.conf，可能由于ubuntu和其他linux系统不一样，配置文件应该是/etc/network/interfaces文件。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入以下命令，进入修改网络配置</span><br><span class=\"line\">$sudo nano &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_001931.png\" alt=\"配置IP\"><br>Ctrl+x保存退出</p>\n<blockquote>\n<p>配置 DNS</p>\n<pre><code># 输入以下命令，进入配置DNS\n$sudo nano /etc/resolvconf/resolv.conf.d/base\n</code></pre><p><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002457.png\" alt=\"输入以下命令\"></p>\n<h2 id=\"测试是否能够连接网络\"><a href=\"#测试是否能够连接网络\" class=\"headerlink\" title=\"测试是否能够连接网络\"></a>测试是否能够连接网络</h2><p>真机测试是否能访问虚拟机<br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002750.png\" alt=\"真机测试是否能访问虚拟机\"><br>虚拟机测试是否能访问网络<br><img src=\"/2017/07/29/vmware%E4%B9%8Bubuntu%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%81%94%E7%BD%91/2017-07-30_002750.png\" alt=\"image\"></p>\n</blockquote>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><h3 id=\"必须编辑虚拟机网段\"><a href=\"#必须编辑虚拟机网段\" class=\"headerlink\" title=\"必须编辑虚拟机网段\"></a>必须编辑虚拟机网段</h3><p>我就是没注意到虚拟机网段规定了起始网IP为“192.168.0.174”，终止IP为“192.168.0.281”，我设置的IP是“192.168.0.5”，明显不在这个范围了，虽然在真机上“ping 192.168.0.5”是有数据返回的（虽然我也不知道为什么），但是在虚拟机上ping真机是失败的，也不能ping上外网</p>\n<h2 id=\"申明\"><a href=\"#申明\" class=\"headerlink\" title=\"申明\"></a>申明</h2><p>有必要申明一下，这个教程是成功，我想截一些图，但是发现虚拟机突然不能上网，一直解决不了，实在抱歉</p>"},{"title":"我的第一篇博客","date":"2017-01-26T15:55:51.000Z","_content":"\n摘要:\n\t第一篇\n<!--more-->\n正文:\n\t# Hellow World!\n\t# 这是我第一篇github博客\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2017-01-26 23:55:51\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n\n摘要:\n\t第一篇\n<!--more-->\n正文:\n\t# Hellow World!\n\t# 这是我第一篇github博客\n","slug":"我的第一篇博客","published":1,"updated":"2019-05-05T09:43:39.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciey000yy8ust6g8fuk8","content":"<p>摘要:<br>    第一篇<br><a id=\"more\"></a><br>正文:</p>\n<pre><code># Hellow World!\n# 这是我第一篇github博客\n</code></pre>","site":{"data":{}},"excerpt":"<p>摘要:<br>    第一篇<br></p>","more":"<br>正文:<p></p>\n<pre><code># Hellow World!\n# 这是我第一篇github博客\n</code></pre>"},{"title":"正则表达式之环视(lookaround)","date":"2017-04-21T07:06:48.000Z","_content":"# 参考链接\n[正则基础之——环视(Lookaround)](http://www.cnblogs.com/kernel0815/p/3375249.html)  \n\n<!--more-->\n\n# 环视(lookaround)\n## 说明\n环视是由《精通正则表达式》命名的，其他资料也有不同的叫法。  \n环视，大体分为顺序和逆序环视，以下是一个表格，表示了环视四种组合。\n\n环视四种表示|  哪一侧的表达式| 是否匹配| 环视分类\n---|---|---|---\n?<=|左侧 | 是|逆序\n?<!|左侧 | 否|逆序\n?=|右侧 | 是|顺序\n?!|右侧| 否|顺序\n\n## 示例\n```\n//?=右侧匹配\nString str=\"abbb\";\nPattern p = Pattern.compile(\"a(?=bbb)\");//a后面紧跟bbb\nMatcher matcher = p.matcher(str);\nSystem.out.println(matcher.find());//返回true\n//?!右侧不匹配\nPattern p1 = Pattern.compile(\"a(?!bbb)\");//a后面不紧跟bbb\nMatcher matcher1 = p1.matcher(str);\nSystem.out.println(matcher1.find());//返回false\n```","source":"_posts/正则表达式之环视-lookaround.md","raw":"---\ntitle: 正则表达式之环视(lookaround)\ndate: 2017-04-21 15:06:48\ncategories:\n  - regex\ntags:\n  - regex\n---\n# 参考链接\n[正则基础之——环视(Lookaround)](http://www.cnblogs.com/kernel0815/p/3375249.html)  \n\n<!--more-->\n\n# 环视(lookaround)\n## 说明\n环视是由《精通正则表达式》命名的，其他资料也有不同的叫法。  \n环视，大体分为顺序和逆序环视，以下是一个表格，表示了环视四种组合。\n\n环视四种表示|  哪一侧的表达式| 是否匹配| 环视分类\n---|---|---|---\n?<=|左侧 | 是|逆序\n?<!|左侧 | 否|逆序\n?=|右侧 | 是|顺序\n?!|右侧| 否|顺序\n\n## 示例\n```\n//?=右侧匹配\nString str=\"abbb\";\nPattern p = Pattern.compile(\"a(?=bbb)\");//a后面紧跟bbb\nMatcher matcher = p.matcher(str);\nSystem.out.println(matcher.find());//返回true\n//?!右侧不匹配\nPattern p1 = Pattern.compile(\"a(?!bbb)\");//a后面不紧跟bbb\nMatcher matcher1 = p1.matcher(str);\nSystem.out.println(matcher1.find());//返回false\n```","slug":"正则表达式之环视-lookaround","published":1,"updated":"2019-05-05T09:43:39.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciez000zy8us8di5lj7y","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/kernel0815/p/3375249.html\" target=\"_blank\" rel=\"noopener\">正则基础之——环视(Lookaround)</a>  </p>\n<a id=\"more\"></a>\n<h1 id=\"环视-lookaround\"><a href=\"#环视-lookaround\" class=\"headerlink\" title=\"环视(lookaround)\"></a>环视(lookaround)</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>环视是由《精通正则表达式》命名的，其他资料也有不同的叫法。<br>环视，大体分为顺序和逆序环视，以下是一个表格，表示了环视四种组合。</p>\n<table>\n<thead>\n<tr>\n<th>环视四种表示</th>\n<th>哪一侧的表达式</th>\n<th>是否匹配</th>\n<th>环视分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?&lt;=</td>\n<td>左侧</td>\n<td>是</td>\n<td>逆序</td>\n</tr>\n<tr>\n<td>?&lt;!</td>\n<td>左侧</td>\n<td>否</td>\n<td>逆序</td>\n</tr>\n<tr>\n<td>?=</td>\n<td>右侧</td>\n<td>是</td>\n<td>顺序</td>\n</tr>\n<tr>\n<td>?!</td>\n<td>右侧</td>\n<td>否</td>\n<td>顺序</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;?&#x3D;右侧匹配</span><br><span class=\"line\">String str&#x3D;&quot;abbb&quot;;</span><br><span class=\"line\">Pattern p &#x3D; Pattern.compile(&quot;a(?&#x3D;bbb)&quot;);&#x2F;&#x2F;a后面紧跟bbb</span><br><span class=\"line\">Matcher matcher &#x3D; p.matcher(str);</span><br><span class=\"line\">System.out.println(matcher.find());&#x2F;&#x2F;返回true</span><br><span class=\"line\">&#x2F;&#x2F;?!右侧不匹配</span><br><span class=\"line\">Pattern p1 &#x3D; Pattern.compile(&quot;a(?!bbb)&quot;);&#x2F;&#x2F;a后面不紧跟bbb</span><br><span class=\"line\">Matcher matcher1 &#x3D; p1.matcher(str);</span><br><span class=\"line\">System.out.println(matcher1.find());&#x2F;&#x2F;返回false</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://www.cnblogs.com/kernel0815/p/3375249.html\" target=\"_blank\" rel=\"noopener\">正则基础之——环视(Lookaround)</a>  </p>","more":"<h1 id=\"环视-lookaround\"><a href=\"#环视-lookaround\" class=\"headerlink\" title=\"环视(lookaround)\"></a>环视(lookaround)</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>环视是由《精通正则表达式》命名的，其他资料也有不同的叫法。<br>环视，大体分为顺序和逆序环视，以下是一个表格，表示了环视四种组合。</p>\n<table>\n<thead>\n<tr>\n<th>环视四种表示</th>\n<th>哪一侧的表达式</th>\n<th>是否匹配</th>\n<th>环视分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?&lt;=</td>\n<td>左侧</td>\n<td>是</td>\n<td>逆序</td>\n</tr>\n<tr>\n<td>?&lt;!</td>\n<td>左侧</td>\n<td>否</td>\n<td>逆序</td>\n</tr>\n<tr>\n<td>?=</td>\n<td>右侧</td>\n<td>是</td>\n<td>顺序</td>\n</tr>\n<tr>\n<td>?!</td>\n<td>右侧</td>\n<td>否</td>\n<td>顺序</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;?&#x3D;右侧匹配</span><br><span class=\"line\">String str&#x3D;&quot;abbb&quot;;</span><br><span class=\"line\">Pattern p &#x3D; Pattern.compile(&quot;a(?&#x3D;bbb)&quot;);&#x2F;&#x2F;a后面紧跟bbb</span><br><span class=\"line\">Matcher matcher &#x3D; p.matcher(str);</span><br><span class=\"line\">System.out.println(matcher.find());&#x2F;&#x2F;返回true</span><br><span class=\"line\">&#x2F;&#x2F;?!右侧不匹配</span><br><span class=\"line\">Pattern p1 &#x3D; Pattern.compile(&quot;a(?!bbb)&quot;);&#x2F;&#x2F;a后面不紧跟bbb</span><br><span class=\"line\">Matcher matcher1 &#x3D; p1.matcher(str);</span><br><span class=\"line\">System.out.println(matcher1.find());&#x2F;&#x2F;返回false</span><br></pre></td></tr></table></figure>"},{"title":"算法：冒泡排序","date":"2018-05-16T14:40:52.000Z","_content":"# 参考文章\n[坐在马桶上看算法（2）：邻居好说话，冒泡排序](https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&mid=2650559785&idx=1&sn=911b5c0c64338eeee7ff700ad6384ce4&mpshare=1&scene=1&srcid=0516Jp0bF32fatbH2JXkGGL4#rd)\n## 公众号推荐\n* 算法爱好者\n![算法爱好者](https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzI1MTIzMzI2MA==&mid=2650559785&idx=1&sn=911b5c0c64338eeee7ff700ad6384ce4&send_time=)\n<!-- more -->\n# 正文\n> 算法看似好像平常的工作用不到一样，实际就像我们平常吃饭，每天吃得好像没有什么时候感觉，实际上却很重要，我们就从最基础的算法上复习，从回顾基础算法上慢慢过渡到学习新算法\n\n## 概述\n> 冒泡算法，故名思义，就比如像水里的气泡一样，数字小的越来越往上飘。\n\n* 引用“算法爱好者”公众号的图片，这个图片只示例了一个数排序，可能需要按元素的多少，来循环多次（实际可能不需要，可以优化循环次数）\n![图片来自“算法爱好者”](算法：冒泡排序/来自算法爱好者.png)\n## 算法解析\n\n\n## 源码示例\n> 建议初学，手敲代码，细细品味\n\n```\npublic static void main(String[] args) {\n        int score[] = {12,35,99,18,76};\n        bubble(score);\n        for (int i = 0; i < score.length; i++) {\n            System.out.print(score[i]+\" \");\n        }\n    }\n\n    public static void bubble(int[] score) {\n//循环上减去1，是为了防止索引越界，因为我们每次都会跟“后一个数字”比大小，索引每次都会+1\n        for (int i = 0; i < score.length-1; i++) {\n//每i次可能就有i个数字排序完成，所以我们长度减去i可以使算法得到优化    \n            for (int j = 0; j < score.length-1-i; j++) {            \n                if(score[j]>score[j+1]){\n                    int temp=score[j];\n                    score[j]=score[j+1];\n                    score[j+1]=temp;\n                }\n            }\n        }\n    }\n//控制台输出\n//33 67 69 75 88 107 \n```\n","source":"_posts/算法：冒泡排序.md","raw":"---\ntitle: 算法：冒泡排序\ndate: 2018-05-16 22:40:52\ncategories:\n  - 算法\n  - 冒泡排序\ntags:\n  - 冒泡排序\n---\n# 参考文章\n[坐在马桶上看算法（2）：邻居好说话，冒泡排序](https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&mid=2650559785&idx=1&sn=911b5c0c64338eeee7ff700ad6384ce4&mpshare=1&scene=1&srcid=0516Jp0bF32fatbH2JXkGGL4#rd)\n## 公众号推荐\n* 算法爱好者\n![算法爱好者](https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzI1MTIzMzI2MA==&mid=2650559785&idx=1&sn=911b5c0c64338eeee7ff700ad6384ce4&send_time=)\n<!-- more -->\n# 正文\n> 算法看似好像平常的工作用不到一样，实际就像我们平常吃饭，每天吃得好像没有什么时候感觉，实际上却很重要，我们就从最基础的算法上复习，从回顾基础算法上慢慢过渡到学习新算法\n\n## 概述\n> 冒泡算法，故名思义，就比如像水里的气泡一样，数字小的越来越往上飘。\n\n* 引用“算法爱好者”公众号的图片，这个图片只示例了一个数排序，可能需要按元素的多少，来循环多次（实际可能不需要，可以优化循环次数）\n![图片来自“算法爱好者”](算法：冒泡排序/来自算法爱好者.png)\n## 算法解析\n\n\n## 源码示例\n> 建议初学，手敲代码，细细品味\n\n```\npublic static void main(String[] args) {\n        int score[] = {12,35,99,18,76};\n        bubble(score);\n        for (int i = 0; i < score.length; i++) {\n            System.out.print(score[i]+\" \");\n        }\n    }\n\n    public static void bubble(int[] score) {\n//循环上减去1，是为了防止索引越界，因为我们每次都会跟“后一个数字”比大小，索引每次都会+1\n        for (int i = 0; i < score.length-1; i++) {\n//每i次可能就有i个数字排序完成，所以我们长度减去i可以使算法得到优化    \n            for (int j = 0; j < score.length-1-i; j++) {            \n                if(score[j]>score[j+1]){\n                    int temp=score[j];\n                    score[j]=score[j+1];\n                    score[j+1]=temp;\n                }\n            }\n        }\n    }\n//控制台输出\n//33 67 69 75 88 107 \n```\n","slug":"算法：冒泡排序","published":1,"updated":"2019-05-05T09:43:39.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncif10010y8us5ess6qr1","content":"<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&amp;mid=2650559785&amp;idx=1&amp;sn=911b5c0c64338eeee7ff700ad6384ce4&amp;mpshare=1&amp;scene=1&amp;srcid=0516Jp0bF32fatbH2JXkGGL4#rd\" target=\"_blank\" rel=\"noopener\">坐在马桶上看算法（2）：邻居好说话，冒泡排序</a></p>\n<h2 id=\"公众号推荐\"><a href=\"#公众号推荐\" class=\"headerlink\" title=\"公众号推荐\"></a>公众号推荐</h2><ul>\n<li>算法爱好者<br><img src=\"https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;size=102&amp;__biz=MzI1MTIzMzI2MA==&amp;mid=2650559785&amp;idx=1&amp;sn=911b5c0c64338eeee7ff700ad6384ce4&amp;send_time=\" alt=\"算法爱好者\"><a id=\"more\"></a>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><blockquote>\n<p>算法看似好像平常的工作用不到一样，实际就像我们平常吃饭，每天吃得好像没有什么时候感觉，实际上却很重要，我们就从最基础的算法上复习，从回顾基础算法上慢慢过渡到学习新算法</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>冒泡算法，故名思义，就比如像水里的气泡一样，数字小的越来越往上飘。</p>\n</blockquote>\n<ul>\n<li>引用“算法爱好者”公众号的图片，这个图片只示例了一个数排序，可能需要按元素的多少，来循环多次（实际可能不需要，可以优化循环次数）<br><img src=\"/2018/05/16/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/来自算法爱好者.png\" alt=\"图片来自“算法爱好者”\"><h2 id=\"算法解析\"><a href=\"#算法解析\" class=\"headerlink\" title=\"算法解析\"></a>算法解析</h2></li>\n</ul>\n<h2 id=\"源码示例\"><a href=\"#源码示例\" class=\"headerlink\" title=\"源码示例\"></a>源码示例</h2><blockquote>\n<p>建议初学，手敲代码，细细品味</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        int score[] &#x3D; &#123;12,35,99,18,76&#125;;</span><br><span class=\"line\">        bubble(score);</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; score.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(score[i]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void bubble(int[] score) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;循环上减去1，是为了防止索引越界，因为我们每次都会跟“后一个数字”比大小，索引每次都会+1</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; score.length-1; i++) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;每i次可能就有i个数字排序完成，所以我们长度减去i可以使算法得到优化    </span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; score.length-1-i; j++) &#123;            </span><br><span class=\"line\">                if(score[j]&gt;score[j+1])&#123;</span><br><span class=\"line\">                    int temp&#x3D;score[j];</span><br><span class=\"line\">                    score[j]&#x3D;score[j+1];</span><br><span class=\"line\">                    score[j+1]&#x3D;temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#x2F;&#x2F;控制台输出</span><br><span class=\"line\">&#x2F;&#x2F;33 67 69 75 88 107</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&amp;mid=2650559785&amp;idx=1&amp;sn=911b5c0c64338eeee7ff700ad6384ce4&amp;mpshare=1&amp;scene=1&amp;srcid=0516Jp0bF32fatbH2JXkGGL4#rd\" target=\"_blank\" rel=\"noopener\">坐在马桶上看算法（2）：邻居好说话，冒泡排序</a></p>\n<h2 id=\"公众号推荐\"><a href=\"#公众号推荐\" class=\"headerlink\" title=\"公众号推荐\"></a>公众号推荐</h2><ul>\n<li>算法爱好者<br><img src=\"https://mp.weixin.qq.com/mp/qrcode?scene=10000004&amp;size=102&amp;__biz=MzI1MTIzMzI2MA==&amp;mid=2650559785&amp;idx=1&amp;sn=911b5c0c64338eeee7ff700ad6384ce4&amp;send_time=\" alt=\"算法爱好者\"></li></ul>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><blockquote>\n<p>算法看似好像平常的工作用不到一样，实际就像我们平常吃饭，每天吃得好像没有什么时候感觉，实际上却很重要，我们就从最基础的算法上复习，从回顾基础算法上慢慢过渡到学习新算法</p>\n</blockquote>\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>冒泡算法，故名思义，就比如像水里的气泡一样，数字小的越来越往上飘。</p>\n</blockquote>\n<ul>\n<li>引用“算法爱好者”公众号的图片，这个图片只示例了一个数排序，可能需要按元素的多少，来循环多次（实际可能不需要，可以优化循环次数）<br><img src=\"/2018/05/16/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/来自算法爱好者.png\" alt=\"图片来自“算法爱好者”\"><h2 id=\"算法解析\"><a href=\"#算法解析\" class=\"headerlink\" title=\"算法解析\"></a>算法解析</h2></li>\n</ul>\n<h2 id=\"源码示例\"><a href=\"#源码示例\" class=\"headerlink\" title=\"源码示例\"></a>源码示例</h2><blockquote>\n<p>建议初学，手敲代码，细细品味</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        int score[] &#x3D; &#123;12,35,99,18,76&#125;;</span><br><span class=\"line\">        bubble(score);</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; score.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(score[i]+&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void bubble(int[] score) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;循环上减去1，是为了防止索引越界，因为我们每次都会跟“后一个数字”比大小，索引每次都会+1</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; score.length-1; i++) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;每i次可能就有i个数字排序完成，所以我们长度减去i可以使算法得到优化    </span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; score.length-1-i; j++) &#123;            </span><br><span class=\"line\">                if(score[j]&gt;score[j+1])&#123;</span><br><span class=\"line\">                    int temp&#x3D;score[j];</span><br><span class=\"line\">                    score[j]&#x3D;score[j+1];</span><br><span class=\"line\">                    score[j+1]&#x3D;temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#x2F;&#x2F;控制台输出</span><br><span class=\"line\">&#x2F;&#x2F;33 67 69 75 88 107</span><br></pre></td></tr></table></figure>"},{"title":"理解Android Activity运行模式（understand Android Activity's launch mode）","date":"2017-03-22T15:26:54.000Z","_content":"## 文章参考自\n[Understand Android Activity's LaunchMode:standard,singleTop,singleTask,and singleInstance](https://inthecheesefactory.com/blog/understand-android-activity-launchmode/en)\n\n[Activity启动模式及Intent Flags与栈的关联分析](http://blog.csdn.net/vipzjyno1/article/details/25463457)\n\n# 理解Android Activity运行模式（understand Android Activity's launch mode）\n## Activity's LaunchMode\nactivity的启动模式，设置了不同的启动模式activity会不同的启动方式，一般使用Intent中的Flag常量来标示如何启动一个Activity\n<!--more-->\n## understand Tasks and Back Stack(任务队列和回退栈)\n### Task\n一个Task是由多个Activity组成，一个应用程序可以有多个任务队列，在Android7.0的新特性——多窗口模式，每一个窗口都会创建一个Task\n\n### Back Stack\nTask中的多个Activity被安排在Back Stack中\n### 可以通过Activity在app中的状态来理解Task和Stack\n1、 在Task中，当Activity A启动Activity B时，当前A会调用onPause()-onStop()，A不在栈顶，没有显示在最前，但是A会保存一些基本的状态（例如滚动的位置或者text），Task状态为A-B，如果用户点击navigation back button时,Activity B会调用onPause()-onStop()-onDestroy()对栈顶进行pop（移出并销毁）,此时Activity A回到栈顶，调用onRestart()-onStart()-onResume()，恢复原来的状态\n\n2、当用点击Home Screen时，栈顶Activity会执行onPause()-onStop()，其他Activity之前置于栈下面时，就已经调用了onPause()-onStop(),所以所有activity都看不见了，这个过程，Task进入了后台运行\n4、Activity可以在不同时间、不同Task中实例化多次\n## type of LaunchMode\n### standard\n这个模式是默认的Activity的启动模式，每次启动Activity都会创建一个新实例，不会考虑之前实例了多少个这样的Activity\n\n![standard的activity启动时，task的状态](理解Android Activity运行模式（understand Android Activity's launch mode）/diagram_backstack.png)\n### singleTop\n这个模式下当前activity如果在栈顶，也就是正在前景，如果调用startActivity，启动当前activity，则会取出栈顶的activity。\n### SingleTask\n这个模式下，如果当需要打一个activity A，这个A已经在当前Task存在了，此模式会pop在A之上的所有Activity，使A处栈顶，处于前景，系统会调用onNewIntent(),而不创建新实例。\n\n如果当前Task为A-B-C-D，则从D-B，B不会被重新创建，而是直接恢复引用，置于foreground\n以下是activity B的生命周期打印结果，可见，B是不会被重新创建的\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onRestart: 调用了onRestart\n>\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n>\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n\n![singleTask](理解Android Activity运行模式（understand Android Activity's launch mode）/2017-03-23_105452.png)\n\n![singleTask](理解Android Activity运行模式（understand Android Activity's launch mode）/singleTask.gif)\n### SingleInstance\nTask1中A-B-C，当C启动D时，运用此模式下，会将D压入一个新Task中，Task2中D,此时D显示在屏幕上，当D启动C时，模式为standard时，那么会回Task1中，并创建一个新实例C，此时Task1中的结构为A-B-C-C，点击navigation back不会回到D\n\n![singleInstance](理解Android Activity运行模式（understand Android Activity's launch mode）/singleInstance.png)\n### launchMode and Flag\n\nManifest.xml中定义 | 同等于Intent.FLAG_ACTIVITY_*常量\n---|---\nstandard | 默认\nsingleTop | FLAG_ACTIVITY_SINGLE_TOP\nsingleTask|singleTop结合FLAG_ACTIVITY_CLEAR_TOP\nsingleInstance|FLAG_ACTIVITY_NEW_TASK\n### 详细解释Intent.FLAG\n#### FLAG_ACTIVITY_NEW_TASK\n这个flag必须与taskAffinity结合才能使用\n\n#### FLAG_ACTIVITY_CLEAR_TOP\n请注意和singleTask的区别，与singleTask的区别，FLAG_ACTIVITY_CLEAR_TOP会销毁启动的目标activity，再重新创建一个实例\n如果当前Task为A-B-C-D，则从D-B，B会被销毁重新创建\n\n以下为打印的结果，可以得知，B被重新创建\n>03-23 13:23:01.858 19000-19000/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onCreate: 调用onCreate，获取当前Task的id6\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n\n此标志可以与singleTop结合，实现与singleTask一样的效果，但是一般不使用，因为还不如直接使用singleTask\n#### FLAG_ACTIVITY_BROUGHT_TO_FRONT\n>This flag is not normally set by application code, but set for you by the system as described in the launchMode documentation for the singleTask mode.\n这个flag通常不是由我们来定义的，但是设置了singleTask mode系统会自动为我们设置这个标志\n\n#### FLAG_ACTIVITY_CLEAR_TASK\n>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.\n>\n>如果设置了这个flag，将会导致已在的task与之关联的activity被清除，这个flag只能与FLAG_ACTIVITY_NEW_TASK结合使用","source":"_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）.md","raw":"---\ntitle: 理解Android Activity运行模式（understand Android Activity's launch mode）\ndate: 2017-03-22 23:26:54\ncategories:\n  - android\n  - 四大组件\n  - activity\ntags:\n  - android\n  - activity launchMode\n---\n## 文章参考自\n[Understand Android Activity's LaunchMode:standard,singleTop,singleTask,and singleInstance](https://inthecheesefactory.com/blog/understand-android-activity-launchmode/en)\n\n[Activity启动模式及Intent Flags与栈的关联分析](http://blog.csdn.net/vipzjyno1/article/details/25463457)\n\n# 理解Android Activity运行模式（understand Android Activity's launch mode）\n## Activity's LaunchMode\nactivity的启动模式，设置了不同的启动模式activity会不同的启动方式，一般使用Intent中的Flag常量来标示如何启动一个Activity\n<!--more-->\n## understand Tasks and Back Stack(任务队列和回退栈)\n### Task\n一个Task是由多个Activity组成，一个应用程序可以有多个任务队列，在Android7.0的新特性——多窗口模式，每一个窗口都会创建一个Task\n\n### Back Stack\nTask中的多个Activity被安排在Back Stack中\n### 可以通过Activity在app中的状态来理解Task和Stack\n1、 在Task中，当Activity A启动Activity B时，当前A会调用onPause()-onStop()，A不在栈顶，没有显示在最前，但是A会保存一些基本的状态（例如滚动的位置或者text），Task状态为A-B，如果用户点击navigation back button时,Activity B会调用onPause()-onStop()-onDestroy()对栈顶进行pop（移出并销毁）,此时Activity A回到栈顶，调用onRestart()-onStart()-onResume()，恢复原来的状态\n\n2、当用点击Home Screen时，栈顶Activity会执行onPause()-onStop()，其他Activity之前置于栈下面时，就已经调用了onPause()-onStop(),所以所有activity都看不见了，这个过程，Task进入了后台运行\n4、Activity可以在不同时间、不同Task中实例化多次\n## type of LaunchMode\n### standard\n这个模式是默认的Activity的启动模式，每次启动Activity都会创建一个新实例，不会考虑之前实例了多少个这样的Activity\n\n![standard的activity启动时，task的状态](理解Android Activity运行模式（understand Android Activity's launch mode）/diagram_backstack.png)\n### singleTop\n这个模式下当前activity如果在栈顶，也就是正在前景，如果调用startActivity，启动当前activity，则会取出栈顶的activity。\n### SingleTask\n这个模式下，如果当需要打一个activity A，这个A已经在当前Task存在了，此模式会pop在A之上的所有Activity，使A处栈顶，处于前景，系统会调用onNewIntent(),而不创建新实例。\n\n如果当前Task为A-B-C-D，则从D-B，B不会被重新创建，而是直接恢复引用，置于foreground\n以下是activity B的生命周期打印结果，可见，B是不会被重新创建的\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onRestart: 调用了onRestart\n>\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n>\n>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n\n![singleTask](理解Android Activity运行模式（understand Android Activity's launch mode）/2017-03-23_105452.png)\n\n![singleTask](理解Android Activity运行模式（understand Android Activity's launch mode）/singleTask.gif)\n### SingleInstance\nTask1中A-B-C，当C启动D时，运用此模式下，会将D压入一个新Task中，Task2中D,此时D显示在屏幕上，当D启动C时，模式为standard时，那么会回Task1中，并创建一个新实例C，此时Task1中的结构为A-B-C-C，点击navigation back不会回到D\n\n![singleInstance](理解Android Activity运行模式（understand Android Activity's launch mode）/singleInstance.png)\n### launchMode and Flag\n\nManifest.xml中定义 | 同等于Intent.FLAG_ACTIVITY_*常量\n---|---\nstandard | 默认\nsingleTop | FLAG_ACTIVITY_SINGLE_TOP\nsingleTask|singleTop结合FLAG_ACTIVITY_CLEAR_TOP\nsingleInstance|FLAG_ACTIVITY_NEW_TASK\n### 详细解释Intent.FLAG\n#### FLAG_ACTIVITY_NEW_TASK\n这个flag必须与taskAffinity结合才能使用\n\n#### FLAG_ACTIVITY_CLEAR_TOP\n请注意和singleTask的区别，与singleTask的区别，FLAG_ACTIVITY_CLEAR_TOP会销毁启动的目标activity，再重新创建一个实例\n如果当前Task为A-B-C-D，则从D-B，B会被销毁重新创建\n\n以下为打印的结果，可以得知，B被重新创建\n>03-23 13:23:01.858 19000-19000/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onCreate: 调用onCreate，获取当前Task的id6\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n\n>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n\n此标志可以与singleTop结合，实现与singleTask一样的效果，但是一般不使用，因为还不如直接使用singleTask\n#### FLAG_ACTIVITY_BROUGHT_TO_FRONT\n>This flag is not normally set by application code, but set for you by the system as described in the launchMode documentation for the singleTask mode.\n这个flag通常不是由我们来定义的，但是设置了singleTask mode系统会自动为我们设置这个标志\n\n#### FLAG_ACTIVITY_CLEAR_TASK\n>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.\n>\n>如果设置了这个flag，将会导致已在的task与之关联的activity被清除，这个flag只能与FLAG_ACTIVITY_NEW_TASK结合使用","slug":"理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）","published":1,"updated":"2019-05-05T09:43:39.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncif30011y8usk4rl6b1q","content":"<h2 id=\"文章参考自\"><a href=\"#文章参考自\" class=\"headerlink\" title=\"文章参考自\"></a>文章参考自</h2><p><a href=\"https://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\" target=\"_blank\" rel=\"noopener\">Understand Android Activity’s LaunchMode:standard,singleTop,singleTask,and singleInstance</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/25463457\" target=\"_blank\" rel=\"noopener\">Activity启动模式及Intent Flags与栈的关联分析</a></p>\n<h1 id=\"理解Android-Activity运行模式（understand-Android-Activity’s-launch-mode）\"><a href=\"#理解Android-Activity运行模式（understand-Android-Activity’s-launch-mode）\" class=\"headerlink\" title=\"理解Android Activity运行模式（understand Android Activity’s launch mode）\"></a>理解Android Activity运行模式（understand Android Activity’s launch mode）</h1><h2 id=\"Activity’s-LaunchMode\"><a href=\"#Activity’s-LaunchMode\" class=\"headerlink\" title=\"Activity’s LaunchMode\"></a>Activity’s LaunchMode</h2><p>activity的启动模式，设置了不同的启动模式activity会不同的启动方式，一般使用Intent中的Flag常量来标示如何启动一个Activity<br><a id=\"more\"></a></p>\n<h2 id=\"understand-Tasks-and-Back-Stack-任务队列和回退栈\"><a href=\"#understand-Tasks-and-Back-Stack-任务队列和回退栈\" class=\"headerlink\" title=\"understand Tasks and Back Stack(任务队列和回退栈)\"></a>understand Tasks and Back Stack(任务队列和回退栈)</h2><h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><p>一个Task是由多个Activity组成，一个应用程序可以有多个任务队列，在Android7.0的新特性——多窗口模式，每一个窗口都会创建一个Task</p>\n<h3 id=\"Back-Stack\"><a href=\"#Back-Stack\" class=\"headerlink\" title=\"Back Stack\"></a>Back Stack</h3><p>Task中的多个Activity被安排在Back Stack中</p>\n<h3 id=\"可以通过Activity在app中的状态来理解Task和Stack\"><a href=\"#可以通过Activity在app中的状态来理解Task和Stack\" class=\"headerlink\" title=\"可以通过Activity在app中的状态来理解Task和Stack\"></a>可以通过Activity在app中的状态来理解Task和Stack</h3><p>1、 在Task中，当Activity A启动Activity B时，当前A会调用onPause()-onStop()，A不在栈顶，没有显示在最前，但是A会保存一些基本的状态（例如滚动的位置或者text），Task状态为A-B，如果用户点击navigation back button时,Activity B会调用onPause()-onStop()-onDestroy()对栈顶进行pop（移出并销毁）,此时Activity A回到栈顶，调用onRestart()-onStart()-onResume()，恢复原来的状态</p>\n<p>2、当用点击Home Screen时，栈顶Activity会执行onPause()-onStop()，其他Activity之前置于栈下面时，就已经调用了onPause()-onStop(),所以所有activity都看不见了，这个过程，Task进入了后台运行<br>4、Activity可以在不同时间、不同Task中实例化多次</p>\n<h2 id=\"type-of-LaunchMode\"><a href=\"#type-of-LaunchMode\" class=\"headerlink\" title=\"type of LaunchMode\"></a>type of LaunchMode</h2><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><p>这个模式是默认的Activity的启动模式，每次启动Activity都会创建一个新实例，不会考虑之前实例了多少个这样的Activity</p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/diagram_backstack.png\" alt=\"standard的activity启动时，task的状态\"></p>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><p>这个模式下当前activity如果在栈顶，也就是正在前景，如果调用startActivity，启动当前activity，则会取出栈顶的activity。</p>\n<h3 id=\"SingleTask\"><a href=\"#SingleTask\" class=\"headerlink\" title=\"SingleTask\"></a>SingleTask</h3><p>这个模式下，如果当需要打一个activity A，这个A已经在当前Task存在了，此模式会pop在A之上的所有Activity，使A处栈顶，处于前景，系统会调用onNewIntent(),而不创建新实例。</p>\n<p>如果当前Task为A-B-C-D，则从D-B，B不会被重新创建，而是直接恢复引用，置于foreground<br>以下是activity B的生命周期打印结果，可见，B是不会被重新创建的</p>\n<blockquote>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onRestart: 调用了onRestart</p>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onStart: 调用onstart()</p>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onResume: 调用了onResume</p>\n</blockquote>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/2017-03-23_105452.png\" alt=\"singleTask\"></p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/singleTask.gif\" alt=\"singleTask\"></p>\n<h3 id=\"SingleInstance\"><a href=\"#SingleInstance\" class=\"headerlink\" title=\"SingleInstance\"></a>SingleInstance</h3><p>Task1中A-B-C，当C启动D时，运用此模式下，会将D压入一个新Task中，Task2中D,此时D显示在屏幕上，当D启动C时，模式为standard时，那么会回Task1中，并创建一个新实例C，此时Task1中的结构为A-B-C-C，点击navigation back不会回到D</p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/singleInstance.png\" alt=\"singleInstance\"></p>\n<h3 id=\"launchMode-and-Flag\"><a href=\"#launchMode-and-Flag\" class=\"headerlink\" title=\"launchMode and Flag\"></a>launchMode and Flag</h3><table>\n<thead>\n<tr>\n<th>Manifest.xml中定义</th>\n<th>同等于Intent.FLAG<em>ACTIVITY</em>*常量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>standard</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>singleTop</td>\n<td>FLAG_ACTIVITY_SINGLE_TOP</td>\n</tr>\n<tr>\n<td>singleTask</td>\n<td>singleTop结合FLAG_ACTIVITY_CLEAR_TOP</td>\n</tr>\n<tr>\n<td>singleInstance</td>\n<td>FLAG_ACTIVITY_NEW_TASK</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"详细解释Intent-FLAG\"><a href=\"#详细解释Intent-FLAG\" class=\"headerlink\" title=\"详细解释Intent.FLAG\"></a>详细解释Intent.FLAG</h3><h4 id=\"FLAG-ACTIVITY-NEW-TASK\"><a href=\"#FLAG-ACTIVITY-NEW-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_NEW_TASK\"></a>FLAG_ACTIVITY_NEW_TASK</h4><p>这个flag必须与taskAffinity结合才能使用</p>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TOP\"><a href=\"#FLAG-ACTIVITY-CLEAR-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TOP\"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>请注意和singleTask的区别，与singleTask的区别，FLAG_ACTIVITY_CLEAR_TOP会销毁启动的目标activity，再重新创建一个实例<br>如果当前Task为A-B-C-D，则从D-B，B会被销毁重新创建</p>\n<p>以下为打印的结果，可以得知，B被重新创建</p>\n<blockquote>\n<p>03-23 13:23:01.858 19000-19000/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onCreate: 调用onCreate，获取当前Task的id6</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onStart: 调用onstart()</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onResume: 调用了onResume</p>\n</blockquote>\n<p>此标志可以与singleTop结合，实现与singleTask一样的效果，但是一般不使用，因为还不如直接使用singleTask</p>\n<h4 id=\"FLAG-ACTIVITY-BROUGHT-TO-FRONT\"><a href=\"#FLAG-ACTIVITY-BROUGHT-TO-FRONT\" class=\"headerlink\" title=\"FLAG_ACTIVITY_BROUGHT_TO_FRONT\"></a>FLAG_ACTIVITY_BROUGHT_TO_FRONT</h4><blockquote>\n<p>This flag is not normally set by application code, but set for you by the system as described in the launchMode documentation for the singleTask mode.<br>这个flag通常不是由我们来定义的，但是设置了singleTask mode系统会自动为我们设置这个标志</p>\n</blockquote>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TASK\"><a href=\"#FLAG-ACTIVITY-CLEAR-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TASK\"></a>FLAG_ACTIVITY_CLEAR_TASK</h4><blockquote>\n<p>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.</p>\n<p>如果设置了这个flag，将会导致已在的task与之关联的activity被清除，这个flag只能与FLAG_ACTIVITY_NEW_TASK结合使用</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"文章参考自\"><a href=\"#文章参考自\" class=\"headerlink\" title=\"文章参考自\"></a>文章参考自</h2><p><a href=\"https://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\" target=\"_blank\" rel=\"noopener\">Understand Android Activity’s LaunchMode:standard,singleTop,singleTask,and singleInstance</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/25463457\" target=\"_blank\" rel=\"noopener\">Activity启动模式及Intent Flags与栈的关联分析</a></p>\n<h1 id=\"理解Android-Activity运行模式（understand-Android-Activity’s-launch-mode）\"><a href=\"#理解Android-Activity运行模式（understand-Android-Activity’s-launch-mode）\" class=\"headerlink\" title=\"理解Android Activity运行模式（understand Android Activity’s launch mode）\"></a>理解Android Activity运行模式（understand Android Activity’s launch mode）</h1><h2 id=\"Activity’s-LaunchMode\"><a href=\"#Activity’s-LaunchMode\" class=\"headerlink\" title=\"Activity’s LaunchMode\"></a>Activity’s LaunchMode</h2><p>activity的启动模式，设置了不同的启动模式activity会不同的启动方式，一般使用Intent中的Flag常量来标示如何启动一个Activity<br></p>","more":"<p></p>\n<h2 id=\"understand-Tasks-and-Back-Stack-任务队列和回退栈\"><a href=\"#understand-Tasks-and-Back-Stack-任务队列和回退栈\" class=\"headerlink\" title=\"understand Tasks and Back Stack(任务队列和回退栈)\"></a>understand Tasks and Back Stack(任务队列和回退栈)</h2><h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><p>一个Task是由多个Activity组成，一个应用程序可以有多个任务队列，在Android7.0的新特性——多窗口模式，每一个窗口都会创建一个Task</p>\n<h3 id=\"Back-Stack\"><a href=\"#Back-Stack\" class=\"headerlink\" title=\"Back Stack\"></a>Back Stack</h3><p>Task中的多个Activity被安排在Back Stack中</p>\n<h3 id=\"可以通过Activity在app中的状态来理解Task和Stack\"><a href=\"#可以通过Activity在app中的状态来理解Task和Stack\" class=\"headerlink\" title=\"可以通过Activity在app中的状态来理解Task和Stack\"></a>可以通过Activity在app中的状态来理解Task和Stack</h3><p>1、 在Task中，当Activity A启动Activity B时，当前A会调用onPause()-onStop()，A不在栈顶，没有显示在最前，但是A会保存一些基本的状态（例如滚动的位置或者text），Task状态为A-B，如果用户点击navigation back button时,Activity B会调用onPause()-onStop()-onDestroy()对栈顶进行pop（移出并销毁）,此时Activity A回到栈顶，调用onRestart()-onStart()-onResume()，恢复原来的状态</p>\n<p>2、当用点击Home Screen时，栈顶Activity会执行onPause()-onStop()，其他Activity之前置于栈下面时，就已经调用了onPause()-onStop(),所以所有activity都看不见了，这个过程，Task进入了后台运行<br>4、Activity可以在不同时间、不同Task中实例化多次</p>\n<h2 id=\"type-of-LaunchMode\"><a href=\"#type-of-LaunchMode\" class=\"headerlink\" title=\"type of LaunchMode\"></a>type of LaunchMode</h2><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><p>这个模式是默认的Activity的启动模式，每次启动Activity都会创建一个新实例，不会考虑之前实例了多少个这样的Activity</p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/diagram_backstack.png\" alt=\"standard的activity启动时，task的状态\"></p>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><p>这个模式下当前activity如果在栈顶，也就是正在前景，如果调用startActivity，启动当前activity，则会取出栈顶的activity。</p>\n<h3 id=\"SingleTask\"><a href=\"#SingleTask\" class=\"headerlink\" title=\"SingleTask\"></a>SingleTask</h3><p>这个模式下，如果当需要打一个activity A，这个A已经在当前Task存在了，此模式会pop在A之上的所有Activity，使A处栈顶，处于前景，系统会调用onNewIntent(),而不创建新实例。</p>\n<p>如果当前Task为A-B-C-D，则从D-B，B不会被重新创建，而是直接恢复引用，置于foreground<br>以下是activity B的生命周期打印结果，可见，B是不会被重新创建的</p>\n<blockquote>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onRestart: 调用了onRestart</p>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onStart: 调用onstart()</p>\n<p>03-23 13:37:45.258 304-304/com.app.androidbasic I/ActivityB: onResume: 调用了onResume</p>\n</blockquote>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/2017-03-23_105452.png\" alt=\"singleTask\"></p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/singleTask.gif\" alt=\"singleTask\"></p>\n<h3 id=\"SingleInstance\"><a href=\"#SingleInstance\" class=\"headerlink\" title=\"SingleInstance\"></a>SingleInstance</h3><p>Task1中A-B-C，当C启动D时，运用此模式下，会将D压入一个新Task中，Task2中D,此时D显示在屏幕上，当D启动C时，模式为standard时，那么会回Task1中，并创建一个新实例C，此时Task1中的结构为A-B-C-C，点击navigation back不会回到D</p>\n<p><img src=\"/2017/03/22/%E7%90%86%E8%A7%A3Android-Activity%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%EF%BC%88understand-Android-Activity-s-launch-mode%EF%BC%89/singleInstance.png\" alt=\"singleInstance\"></p>\n<h3 id=\"launchMode-and-Flag\"><a href=\"#launchMode-and-Flag\" class=\"headerlink\" title=\"launchMode and Flag\"></a>launchMode and Flag</h3><table>\n<thead>\n<tr>\n<th>Manifest.xml中定义</th>\n<th>同等于Intent.FLAG<em>ACTIVITY</em>*常量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>standard</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>singleTop</td>\n<td>FLAG_ACTIVITY_SINGLE_TOP</td>\n</tr>\n<tr>\n<td>singleTask</td>\n<td>singleTop结合FLAG_ACTIVITY_CLEAR_TOP</td>\n</tr>\n<tr>\n<td>singleInstance</td>\n<td>FLAG_ACTIVITY_NEW_TASK</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"详细解释Intent-FLAG\"><a href=\"#详细解释Intent-FLAG\" class=\"headerlink\" title=\"详细解释Intent.FLAG\"></a>详细解释Intent.FLAG</h3><h4 id=\"FLAG-ACTIVITY-NEW-TASK\"><a href=\"#FLAG-ACTIVITY-NEW-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_NEW_TASK\"></a>FLAG_ACTIVITY_NEW_TASK</h4><p>这个flag必须与taskAffinity结合才能使用</p>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TOP\"><a href=\"#FLAG-ACTIVITY-CLEAR-TOP\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TOP\"></a>FLAG_ACTIVITY_CLEAR_TOP</h4><p>请注意和singleTask的区别，与singleTask的区别，FLAG_ACTIVITY_CLEAR_TOP会销毁启动的目标activity，再重新创建一个实例<br>如果当前Task为A-B-C-D，则从D-B，B会被销毁重新创建</p>\n<p>以下为打印的结果，可以得知，B被重新创建</p>\n<blockquote>\n<p>03-23 13:23:01.858 19000-19000/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onCreate: 调用onCreate，获取当前Task的id6</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onStart: 调用onstart()</p>\n<p>03-23 13:23:01.888 19000-19000/com.app.androidbasic I/ActivityB: onResume: 调用了onResume</p>\n</blockquote>\n<p>此标志可以与singleTop结合，实现与singleTask一样的效果，但是一般不使用，因为还不如直接使用singleTask</p>\n<h4 id=\"FLAG-ACTIVITY-BROUGHT-TO-FRONT\"><a href=\"#FLAG-ACTIVITY-BROUGHT-TO-FRONT\" class=\"headerlink\" title=\"FLAG_ACTIVITY_BROUGHT_TO_FRONT\"></a>FLAG_ACTIVITY_BROUGHT_TO_FRONT</h4><blockquote>\n<p>This flag is not normally set by application code, but set for you by the system as described in the launchMode documentation for the singleTask mode.<br>这个flag通常不是由我们来定义的，但是设置了singleTask mode系统会自动为我们设置这个标志</p>\n</blockquote>\n<h4 id=\"FLAG-ACTIVITY-CLEAR-TASK\"><a href=\"#FLAG-ACTIVITY-CLEAR-TASK\" class=\"headerlink\" title=\"FLAG_ACTIVITY_CLEAR_TASK\"></a>FLAG_ACTIVITY_CLEAR_TASK</h4><blockquote>\n<p>If set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would be associated with the activity to be cleared before the activity is started. That is, the activity becomes the new root of an otherwise empty task, and any old activities are finished. This can only be used in conjunction with FLAG_ACTIVITY_NEW_TASK.</p>\n<p>如果设置了这个flag，将会导致已在的task与之关联的activity被清除，这个flag只能与FLAG_ACTIVITY_NEW_TASK结合使用</p>\n</blockquote>"},{"title":"设计模式：适配器模式","date":"2018-05-16T14:41:03.000Z","_content":"# 参考文章\n[java-design-patterns](http://java-design-patterns.com/patterns/adapter/)  \n[三大软件设计原则](https://blog.csdn.net/zj_show/article/details/8078447)  \n[你必须理解的三大软件原则3_YAGNI](https://blog.csdn.net/zj_show/article/details/8078447)  \n[设计模式之适配器模式——掘金](blueskykong.com)\n# 正文\n> 开始学习之前，最好知道“三大软件设计原则”\n<!-- more -->\n## 三大软件设计原则\n\n* KISS（Keep it Simple Stupid保持简单而不复杂）\n> 用最少的代码实现最好的功能  \n简单就是最终的复杂  \n不实现过度的封装\n* YAGNI（You Ain’t Gonna Need It你不需要它）\n> 如果概念上没有提到，那代码中也不能出现。举个例子来讲，将数据库访问抽象在一层是惯例，他们处理不同驱动间的差异，像MySQL, PostgreSQL and Oracle。如果你正工作于一个发布在共享主机的企业网站上，那他们改变数据库的几率有多大呢？请记住概念是用预算记下来的。\n* Don't Repeat Yourself(不做重复的事)\n> &emsp;&emsp;在系统中，每一项知识都必须具有单一的，明确的，权威的表述。    \n&emsp;&emsp;程序中的每个重要功能都应该在源代码中的一个地方实现。在通过不同的代码段执行类似的功能的情况下，通过提取不同的部分将它们合并成一个通常是有益的。   \n为什么需要减少重复的工作：  \n&emsp;&emsp;复制（无意或有目的的重复）可能导致维护噩梦，糟糕的保理和逻辑矛盾。  \n&emsp;&emsp;对系统的任何单个元素的修改不需要改变其他逻辑上不相关的元素。  \n&emsp;&emsp;此外，逻辑上相关的元素全部可预测并一致地变化，并因此保持同步。\n\n## 概述\n> 适配器模式，1.它可以使用两个不同的类协同工作，或者使两个不同的接口实现协同工作2.它可以使用两个类的协同工作，并且可以实现多种协同工作方式,比如，我们的笔记本要必须要跟插座协同工作，那就需要电源适配器，如果电源适配器坏了，可以再买一个新。\n\n## 结构\n* 目标角色（Target）：— 定义Client使用的与特定领域相关的接口。\n* 客户角色（Client）：与符合Target接口的对象协同。\n* 被适配角色（Adaptee)：定义一个已经存在并已经使用的接口，这个接口需要适配。\n* 适配器角色（Adapte) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配.\n## 图例\n![图片来自http://blueskykong.com/2017/01/29/design-adapter/](https://user-gold-cdn.xitu.io/2018/5/14/1635a3e33fa3c524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 示例\n\n> 现在以船长滑船为例，船长和船本是不相干的，我们现在需要适配器\n\n### 船长的滑动技能\n\n```\n/**\n * 扬帆的技能\n * @author zmh\n *\n */\npublic interface RowingBoat {\n    /**\n     * 扬\n     */\n    void row();\n}\n```\n\n### 船长\n\n> 现在我们使用船长实现扬帆技能，这也有可能是你系统的原本设计，只提供船长，不提供船\n\n```\n/**\n * 船长，\n * @author zmh\n *\n */\npublic class Captain implements RowingBoat {\n    private RowingBoat rowingBoat;\n    \n    public Captain(RowingBoat rowingBoat) {\n        this.rowingBoat =rowingBoat;\n    }\n\n    @Override\n    public void row() {\n        System.out.print(\"船长扬-\");\n        rowingBoat.row();\n    }\n    \n}\n\n```\n### 船\n\n> 现在有一只船，这可能是你后来使用或者设计， \n\n```\n/**\n * 船\n * @author zmh\n *\n */\npublic class FishingBoat {\n    public void sail(){\n        System.out.println(\"帆\");\n    }\n}\n```\n### 适配器\n\n> 现在应该想怎么使用船长和船协同工作呢，我们需要创建适配器来协同\n\n```\n/**\n * 创建适配器，使船长能够扬帆\n * @author zmh\n *\n */\npublic class RowingBoatAdpater implements RowingBoat{\n    private FishingBoat boat;\n    public RowingBoatAdpater() {\n        boat=new FishingBoat();\n    }\n    @Override\n    public void row() {\n        boat.sail();\n    }\n}\n```\n### 船长使用适配器\n```\npublic static void main(String[] args) {\n        Captain c=new Captain(new RowingBoatAdpater());\n        c.row();\n    }\n```\n### 以下都是使用适配器模式的实例\n*   `Arrays.asList(arg0)`\n\n*   `java.util.Collections.list()`\n\n* 　`java.util.Collections.enumeration()`\n\n* 　`javax.xml.bind.annotation.adapters.XMLAdapter`\n","source":"_posts/设计模式：适配器模式.md","raw":"---\ntitle: 设计模式：适配器模式\ndate: 2018-05-16 22:41:03\ncategories:\n  - 设计模式\n  - 适配器模式\ntags:\n  - 适配器模式\n---\n# 参考文章\n[java-design-patterns](http://java-design-patterns.com/patterns/adapter/)  \n[三大软件设计原则](https://blog.csdn.net/zj_show/article/details/8078447)  \n[你必须理解的三大软件原则3_YAGNI](https://blog.csdn.net/zj_show/article/details/8078447)  \n[设计模式之适配器模式——掘金](blueskykong.com)\n# 正文\n> 开始学习之前，最好知道“三大软件设计原则”\n<!-- more -->\n## 三大软件设计原则\n\n* KISS（Keep it Simple Stupid保持简单而不复杂）\n> 用最少的代码实现最好的功能  \n简单就是最终的复杂  \n不实现过度的封装\n* YAGNI（You Ain’t Gonna Need It你不需要它）\n> 如果概念上没有提到，那代码中也不能出现。举个例子来讲，将数据库访问抽象在一层是惯例，他们处理不同驱动间的差异，像MySQL, PostgreSQL and Oracle。如果你正工作于一个发布在共享主机的企业网站上，那他们改变数据库的几率有多大呢？请记住概念是用预算记下来的。\n* Don't Repeat Yourself(不做重复的事)\n> &emsp;&emsp;在系统中，每一项知识都必须具有单一的，明确的，权威的表述。    \n&emsp;&emsp;程序中的每个重要功能都应该在源代码中的一个地方实现。在通过不同的代码段执行类似的功能的情况下，通过提取不同的部分将它们合并成一个通常是有益的。   \n为什么需要减少重复的工作：  \n&emsp;&emsp;复制（无意或有目的的重复）可能导致维护噩梦，糟糕的保理和逻辑矛盾。  \n&emsp;&emsp;对系统的任何单个元素的修改不需要改变其他逻辑上不相关的元素。  \n&emsp;&emsp;此外，逻辑上相关的元素全部可预测并一致地变化，并因此保持同步。\n\n## 概述\n> 适配器模式，1.它可以使用两个不同的类协同工作，或者使两个不同的接口实现协同工作2.它可以使用两个类的协同工作，并且可以实现多种协同工作方式,比如，我们的笔记本要必须要跟插座协同工作，那就需要电源适配器，如果电源适配器坏了，可以再买一个新。\n\n## 结构\n* 目标角色（Target）：— 定义Client使用的与特定领域相关的接口。\n* 客户角色（Client）：与符合Target接口的对象协同。\n* 被适配角色（Adaptee)：定义一个已经存在并已经使用的接口，这个接口需要适配。\n* 适配器角色（Adapte) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配.\n## 图例\n![图片来自http://blueskykong.com/2017/01/29/design-adapter/](https://user-gold-cdn.xitu.io/2018/5/14/1635a3e33fa3c524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 示例\n\n> 现在以船长滑船为例，船长和船本是不相干的，我们现在需要适配器\n\n### 船长的滑动技能\n\n```\n/**\n * 扬帆的技能\n * @author zmh\n *\n */\npublic interface RowingBoat {\n    /**\n     * 扬\n     */\n    void row();\n}\n```\n\n### 船长\n\n> 现在我们使用船长实现扬帆技能，这也有可能是你系统的原本设计，只提供船长，不提供船\n\n```\n/**\n * 船长，\n * @author zmh\n *\n */\npublic class Captain implements RowingBoat {\n    private RowingBoat rowingBoat;\n    \n    public Captain(RowingBoat rowingBoat) {\n        this.rowingBoat =rowingBoat;\n    }\n\n    @Override\n    public void row() {\n        System.out.print(\"船长扬-\");\n        rowingBoat.row();\n    }\n    \n}\n\n```\n### 船\n\n> 现在有一只船，这可能是你后来使用或者设计， \n\n```\n/**\n * 船\n * @author zmh\n *\n */\npublic class FishingBoat {\n    public void sail(){\n        System.out.println(\"帆\");\n    }\n}\n```\n### 适配器\n\n> 现在应该想怎么使用船长和船协同工作呢，我们需要创建适配器来协同\n\n```\n/**\n * 创建适配器，使船长能够扬帆\n * @author zmh\n *\n */\npublic class RowingBoatAdpater implements RowingBoat{\n    private FishingBoat boat;\n    public RowingBoatAdpater() {\n        boat=new FishingBoat();\n    }\n    @Override\n    public void row() {\n        boat.sail();\n    }\n}\n```\n### 船长使用适配器\n```\npublic static void main(String[] args) {\n        Captain c=new Captain(new RowingBoatAdpater());\n        c.row();\n    }\n```\n### 以下都是使用适配器模式的实例\n*   `Arrays.asList(arg0)`\n\n*   `java.util.Collections.list()`\n\n* 　`java.util.Collections.enumeration()`\n\n* 　`javax.xml.bind.annotation.adapters.XMLAdapter`\n","slug":"设计模式：适配器模式","published":1,"updated":"2019-05-05T09:43:39.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncif40012y8usprnixtkj","content":"<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"http://java-design-patterns.com/patterns/adapter/\" target=\"_blank\" rel=\"noopener\">java-design-patterns</a><br><a href=\"https://blog.csdn.net/zj_show/article/details/8078447\" target=\"_blank\" rel=\"noopener\">三大软件设计原则</a><br><a href=\"https://blog.csdn.net/zj_show/article/details/8078447\" target=\"_blank\" rel=\"noopener\">你必须理解的三大软件原则3_YAGNI</a><br><a href=\"blueskykong.com\">设计模式之适配器模式——掘金</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><blockquote>\n<p>开始学习之前，最好知道“三大软件设计原则”<br><a id=\"more\"></a></p>\n<h2 id=\"三大软件设计原则\"><a href=\"#三大软件设计原则\" class=\"headerlink\" title=\"三大软件设计原则\"></a>三大软件设计原则</h2></blockquote>\n<ul>\n<li>KISS（Keep it Simple Stupid保持简单而不复杂）<blockquote>\n<p>用最少的代码实现最好的功能<br>简单就是最终的复杂<br>不实现过度的封装</p>\n</blockquote>\n</li>\n<li>YAGNI（You Ain’t Gonna Need It你不需要它）<blockquote>\n<p>如果概念上没有提到，那代码中也不能出现。举个例子来讲，将数据库访问抽象在一层是惯例，他们处理不同驱动间的差异，像MySQL, PostgreSQL and Oracle。如果你正工作于一个发布在共享主机的企业网站上，那他们改变数据库的几率有多大呢？请记住概念是用预算记下来的。</p>\n</blockquote>\n</li>\n<li>Don’t Repeat Yourself(不做重复的事)<blockquote>\n<p>&emsp;&emsp;在系统中，每一项知识都必须具有单一的，明确的，权威的表述。<br>&emsp;&emsp;程序中的每个重要功能都应该在源代码中的一个地方实现。在通过不同的代码段执行类似的功能的情况下，通过提取不同的部分将它们合并成一个通常是有益的。<br>为什么需要减少重复的工作：<br>&emsp;&emsp;复制（无意或有目的的重复）可能导致维护噩梦，糟糕的保理和逻辑矛盾。<br>&emsp;&emsp;对系统的任何单个元素的修改不需要改变其他逻辑上不相关的元素。<br>&emsp;&emsp;此外，逻辑上相关的元素全部可预测并一致地变化，并因此保持同步。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>适配器模式，1.它可以使用两个不同的类协同工作，或者使两个不同的接口实现协同工作2.它可以使用两个类的协同工作，并且可以实现多种协同工作方式,比如，我们的笔记本要必须要跟插座协同工作，那就需要电源适配器，如果电源适配器坏了，可以再买一个新。</p>\n</blockquote>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>目标角色（Target）：— 定义Client使用的与特定领域相关的接口。</li>\n<li>客户角色（Client）：与符合Target接口的对象协同。</li>\n<li>被适配角色（Adaptee)：定义一个已经存在并已经使用的接口，这个接口需要适配。</li>\n<li>适配器角色（Adapte) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配.<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635a3e33fa3c524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"图片来自http://blueskykong.com/2017/01/29/design-adapter/\"></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>现在以船长滑船为例，船长和船本是不相干的，我们现在需要适配器</p>\n</blockquote>\n<h3 id=\"船长的滑动技能\"><a href=\"#船长的滑动技能\" class=\"headerlink\" title=\"船长的滑动技能\"></a>船长的滑动技能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 扬帆的技能</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface RowingBoat &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 扬</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    void row();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船长\"><a href=\"#船长\" class=\"headerlink\" title=\"船长\"></a>船长</h3><blockquote>\n<p>现在我们使用船长实现扬帆技能，这也有可能是你系统的原本设计，只提供船长，不提供船</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 船长，</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Captain implements RowingBoat &#123;</span><br><span class=\"line\">    private RowingBoat rowingBoat;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Captain(RowingBoat rowingBoat) &#123;</span><br><span class=\"line\">        this.rowingBoat &#x3D;rowingBoat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void row() &#123;</span><br><span class=\"line\">        System.out.print(&quot;船长扬-&quot;);</span><br><span class=\"line\">        rowingBoat.row();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船\"><a href=\"#船\" class=\"headerlink\" title=\"船\"></a>船</h3><blockquote>\n<p>现在有一只船，这可能是你后来使用或者设计， </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 船</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class FishingBoat &#123;</span><br><span class=\"line\">    public void sail()&#123;</span><br><span class=\"line\">        System.out.println(&quot;帆&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"适配器\"><a href=\"#适配器\" class=\"headerlink\" title=\"适配器\"></a>适配器</h3><blockquote>\n<p>现在应该想怎么使用船长和船协同工作呢，我们需要创建适配器来协同</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 创建适配器，使船长能够扬帆</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class RowingBoatAdpater implements RowingBoat&#123;</span><br><span class=\"line\">    private FishingBoat boat;</span><br><span class=\"line\">    public RowingBoatAdpater() &#123;</span><br><span class=\"line\">        boat&#x3D;new FishingBoat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void row() &#123;</span><br><span class=\"line\">        boat.sail();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船长使用适配器\"><a href=\"#船长使用适配器\" class=\"headerlink\" title=\"船长使用适配器\"></a>船长使用适配器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Captain c&#x3D;new Captain(new RowingBoatAdpater());</span><br><span class=\"line\">        c.row();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"以下都是使用适配器模式的实例\"><a href=\"#以下都是使用适配器模式的实例\" class=\"headerlink\" title=\"以下都是使用适配器模式的实例\"></a>以下都是使用适配器模式的实例</h3><ul>\n<li><p><code>Arrays.asList(arg0)</code></p>\n</li>\n<li><p><code>java.util.Collections.list()</code></p>\n</li>\n<li><p>　<code>java.util.Collections.enumeration()</code></p>\n</li>\n<li><p>　<code>javax.xml.bind.annotation.adapters.XMLAdapter</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"http://java-design-patterns.com/patterns/adapter/\" target=\"_blank\" rel=\"noopener\">java-design-patterns</a><br><a href=\"https://blog.csdn.net/zj_show/article/details/8078447\" target=\"_blank\" rel=\"noopener\">三大软件设计原则</a><br><a href=\"https://blog.csdn.net/zj_show/article/details/8078447\" target=\"_blank\" rel=\"noopener\">你必须理解的三大软件原则3_YAGNI</a><br><a href=\"blueskykong.com\">设计模式之适配器模式——掘金</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><blockquote>\n<p>开始学习之前，最好知道“三大软件设计原则”<br></p></blockquote>","more":"<p></p>\n<h2 id=\"三大软件设计原则\"><a href=\"#三大软件设计原则\" class=\"headerlink\" title=\"三大软件设计原则\"></a>三大软件设计原则</h2>\n<ul>\n<li>KISS（Keep it Simple Stupid保持简单而不复杂）<blockquote>\n<p>用最少的代码实现最好的功能<br>简单就是最终的复杂<br>不实现过度的封装</p>\n</blockquote>\n</li>\n<li>YAGNI（You Ain’t Gonna Need It你不需要它）<blockquote>\n<p>如果概念上没有提到，那代码中也不能出现。举个例子来讲，将数据库访问抽象在一层是惯例，他们处理不同驱动间的差异，像MySQL, PostgreSQL and Oracle。如果你正工作于一个发布在共享主机的企业网站上，那他们改变数据库的几率有多大呢？请记住概念是用预算记下来的。</p>\n</blockquote>\n</li>\n<li>Don’t Repeat Yourself(不做重复的事)<blockquote>\n<p>&emsp;&emsp;在系统中，每一项知识都必须具有单一的，明确的，权威的表述。<br>&emsp;&emsp;程序中的每个重要功能都应该在源代码中的一个地方实现。在通过不同的代码段执行类似的功能的情况下，通过提取不同的部分将它们合并成一个通常是有益的。<br>为什么需要减少重复的工作：<br>&emsp;&emsp;复制（无意或有目的的重复）可能导致维护噩梦，糟糕的保理和逻辑矛盾。<br>&emsp;&emsp;对系统的任何单个元素的修改不需要改变其他逻辑上不相关的元素。<br>&emsp;&emsp;此外，逻辑上相关的元素全部可预测并一致地变化，并因此保持同步。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>适配器模式，1.它可以使用两个不同的类协同工作，或者使两个不同的接口实现协同工作2.它可以使用两个类的协同工作，并且可以实现多种协同工作方式,比如，我们的笔记本要必须要跟插座协同工作，那就需要电源适配器，如果电源适配器坏了，可以再买一个新。</p>\n</blockquote>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>目标角色（Target）：— 定义Client使用的与特定领域相关的接口。</li>\n<li>客户角色（Client）：与符合Target接口的对象协同。</li>\n<li>被适配角色（Adaptee)：定义一个已经存在并已经使用的接口，这个接口需要适配。</li>\n<li>适配器角色（Adapte) ：适配器模式的核心。它将对被适配Adaptee角色已有的接口转换为目标角色Target匹配的接口。对Adaptee的接口与Target接口进行适配.<h2 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h2><img src=\"https://user-gold-cdn.xitu.io/2018/5/14/1635a3e33fa3c524?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"图片来自http://blueskykong.com/2017/01/29/design-adapter/\"></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>现在以船长滑船为例，船长和船本是不相干的，我们现在需要适配器</p>\n</blockquote>\n<h3 id=\"船长的滑动技能\"><a href=\"#船长的滑动技能\" class=\"headerlink\" title=\"船长的滑动技能\"></a>船长的滑动技能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 扬帆的技能</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface RowingBoat &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 扬</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    void row();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船长\"><a href=\"#船长\" class=\"headerlink\" title=\"船长\"></a>船长</h3><blockquote>\n<p>现在我们使用船长实现扬帆技能，这也有可能是你系统的原本设计，只提供船长，不提供船</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 船长，</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Captain implements RowingBoat &#123;</span><br><span class=\"line\">    private RowingBoat rowingBoat;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Captain(RowingBoat rowingBoat) &#123;</span><br><span class=\"line\">        this.rowingBoat &#x3D;rowingBoat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void row() &#123;</span><br><span class=\"line\">        System.out.print(&quot;船长扬-&quot;);</span><br><span class=\"line\">        rowingBoat.row();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船\"><a href=\"#船\" class=\"headerlink\" title=\"船\"></a>船</h3><blockquote>\n<p>现在有一只船，这可能是你后来使用或者设计， </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 船</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class FishingBoat &#123;</span><br><span class=\"line\">    public void sail()&#123;</span><br><span class=\"line\">        System.out.println(&quot;帆&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"适配器\"><a href=\"#适配器\" class=\"headerlink\" title=\"适配器\"></a>适配器</h3><blockquote>\n<p>现在应该想怎么使用船长和船协同工作呢，我们需要创建适配器来协同</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 创建适配器，使船长能够扬帆</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class RowingBoatAdpater implements RowingBoat&#123;</span><br><span class=\"line\">    private FishingBoat boat;</span><br><span class=\"line\">    public RowingBoatAdpater() &#123;</span><br><span class=\"line\">        boat&#x3D;new FishingBoat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void row() &#123;</span><br><span class=\"line\">        boat.sail();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"船长使用适配器\"><a href=\"#船长使用适配器\" class=\"headerlink\" title=\"船长使用适配器\"></a>船长使用适配器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        Captain c&#x3D;new Captain(new RowingBoatAdpater());</span><br><span class=\"line\">        c.row();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"以下都是使用适配器模式的实例\"><a href=\"#以下都是使用适配器模式的实例\" class=\"headerlink\" title=\"以下都是使用适配器模式的实例\"></a>以下都是使用适配器模式的实例</h3><ul>\n<li><p><code>Arrays.asList(arg0)</code></p>\n</li>\n<li><p><code>java.util.Collections.list()</code></p>\n</li>\n<li><p>　<code>java.util.Collections.enumeration()</code></p>\n</li>\n<li><p>　<code>javax.xml.bind.annotation.adapters.XMLAdapter</code></p>\n</li>\n</ul>"},{"title":"算法：二分查找法","date":"2018-05-21T23:14:15.000Z","_content":"# 参考链接(如有侵权立即删除)\n[二分查找有几种写法？它们的区别是什么？——知乎](https://www.zhihu.com/question/36132386)  \n[二分查找算法（左闭右开区间）](https://blog.csdn.net/wingWC/article/details/78229684)  \n[二分查找法——百度百科](https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin&fromid=8283141&fromtitle=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95)\n# 正文\n## 概述\n\n> 二分查找法，也叫折半查找法，提供一个升序的需要查找数组，再一分为二分别使用左右指针循环匹配，不断测算需要查找的区间，不断进行将数组折半。二分查找法的效率非常高，但是很少人能写出稳定的二分查找法（本来想写很少人能写出没有bug的二分查找法，但是想想欠妥，哪有没有bug的程序）\n\n<!-- more -->\n\n## 实现原理\n> 注：现在是需要查找的数组中只有非负整数\n\n### 先有一个升序了的数组\n\n首先需要一个已经升序排序过的数组，假设现在有数组，`int[] score={67,69,75,88,99,103}`,假设我们需要查找`int key=67`吧，\n\n0 | 1|2| 3|4| 5|\n---|---|---|---|---|---|\n67 | 69|75 | 88|99| 103\n\n### 测算中间位置，开始一分为二\n\n 测算中间值，我们通过开始下标和结束下标来算中间位置，`int mid=(start+end)/2;`，由于申明的是`int`,`5/2`取得`double`值只会取整数部分，由此可知，中间值为`75`，`int left=0,right=score.length-1`，`left`和`right`，是用来控制范围，每次我们都会缩小范围查找。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n67 | 69|==75== | 88|99| 103\n↑L | | | || ↑R\n\n### 缩小左右区间\n\n我们将需要查找的值`67` 与`mid`，对比，发现`67`比`mid`大，那么由于数组已经是升序的，我们大概推算出，`67`应该是在0到2的下标之间，将范围缩小，`right=mid-1`，将范围缩小到0-1。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n67 | 69|==75==| 88|99| 103\n↑L | ↑R| | || \n\n### 循环折半查找\n\n现在我们要重新测试中间值，以继续进行折半查找,`int mid=(start+end)/2;`，由此可知中间值67，判断`if(mid==key)`，查找结束，找到下标为0。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n==67== | 69|75| 88|99| 103\n↑L | ↑R| | || \n\n## 源码\n```\npublic static int binarySearch(int key,int[] array) {\n        int start,end,mid = 0;\n        start=0;\n        end=array.length-1;\n        while (start<=end) {\n            mid=(start+end)/2;//测算中间位置\n            if(array[mid]==key){\n                return mid;\n            }else if(array[mid]>key){//测算该值在数组的左边还是右边\n                end=mid-1;\n            }else{\n                start=mid+1;\n            }\n        }\n        return -1;\n}\n```","source":"_posts/算法：二分查找法.md","raw":"---\ntitle: 算法：二分查找法\ndate: 2018-05-22 07:14:15\ncategories:\n  - 算法\n  - 二分查找法\ntags:\n  - 二分查找法\n---\n# 参考链接(如有侵权立即删除)\n[二分查找有几种写法？它们的区别是什么？——知乎](https://www.zhihu.com/question/36132386)  \n[二分查找算法（左闭右开区间）](https://blog.csdn.net/wingWC/article/details/78229684)  \n[二分查找法——百度百科](https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin&fromid=8283141&fromtitle=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95)\n# 正文\n## 概述\n\n> 二分查找法，也叫折半查找法，提供一个升序的需要查找数组，再一分为二分别使用左右指针循环匹配，不断测算需要查找的区间，不断进行将数组折半。二分查找法的效率非常高，但是很少人能写出稳定的二分查找法（本来想写很少人能写出没有bug的二分查找法，但是想想欠妥，哪有没有bug的程序）\n\n<!-- more -->\n\n## 实现原理\n> 注：现在是需要查找的数组中只有非负整数\n\n### 先有一个升序了的数组\n\n首先需要一个已经升序排序过的数组，假设现在有数组，`int[] score={67,69,75,88,99,103}`,假设我们需要查找`int key=67`吧，\n\n0 | 1|2| 3|4| 5|\n---|---|---|---|---|---|\n67 | 69|75 | 88|99| 103\n\n### 测算中间位置，开始一分为二\n\n 测算中间值，我们通过开始下标和结束下标来算中间位置，`int mid=(start+end)/2;`，由于申明的是`int`,`5/2`取得`double`值只会取整数部分，由此可知，中间值为`75`，`int left=0,right=score.length-1`，`left`和`right`，是用来控制范围，每次我们都会缩小范围查找。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n67 | 69|==75== | 88|99| 103\n↑L | | | || ↑R\n\n### 缩小左右区间\n\n我们将需要查找的值`67` 与`mid`，对比，发现`67`比`mid`大，那么由于数组已经是升序的，我们大概推算出，`67`应该是在0到2的下标之间，将范围缩小，`right=mid-1`，将范围缩小到0-1。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n67 | 69|==75==| 88|99| 103\n↑L | ↑R| | || \n\n### 循环折半查找\n\n现在我们要重新测试中间值，以继续进行折半查找,`int mid=(start+end)/2;`，由此可知中间值67，判断`if(mid==key)`，查找结束，找到下标为0。\n\n0 | 1|2| 3|4| 5|\n:---:|---|---|---|---|:---:|\n==67== | 69|75| 88|99| 103\n↑L | ↑R| | || \n\n## 源码\n```\npublic static int binarySearch(int key,int[] array) {\n        int start,end,mid = 0;\n        start=0;\n        end=array.length-1;\n        while (start<=end) {\n            mid=(start+end)/2;//测算中间位置\n            if(array[mid]==key){\n                return mid;\n            }else if(array[mid]>key){//测算该值在数组的左边还是右边\n                end=mid-1;\n            }else{\n                start=mid+1;\n            }\n        }\n        return -1;\n}\n```","slug":"算法：二分查找法","published":1,"updated":"2019-05-05T09:43:39.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncif60013y8usmbm3q74d","content":"<h1 id=\"参考链接-如有侵权立即删除\"><a href=\"#参考链接-如有侵权立即删除\" class=\"headerlink\" title=\"参考链接(如有侵权立即删除)\"></a>参考链接(如有侵权立即删除)</h1><p><a href=\"https://www.zhihu.com/question/36132386\" target=\"_blank\" rel=\"noopener\">二分查找有几种写法？它们的区别是什么？——知乎</a><br><a href=\"https://blog.csdn.net/wingWC/article/details/78229684\" target=\"_blank\" rel=\"noopener\">二分查找算法（左闭右开区间）</a><br><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin&amp;fromid=8283141&amp;fromtitle=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95\" target=\"_blank\" rel=\"noopener\">二分查找法——百度百科</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>二分查找法，也叫折半查找法，提供一个升序的需要查找数组，再一分为二分别使用左右指针循环匹配，不断测算需要查找的区间，不断进行将数组折半。二分查找法的效率非常高，但是很少人能写出稳定的二分查找法（本来想写很少人能写出没有bug的二分查找法，但是想想欠妥，哪有没有bug的程序）</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><blockquote>\n<p>注：现在是需要查找的数组中只有非负整数</p>\n</blockquote>\n<h3 id=\"先有一个升序了的数组\"><a href=\"#先有一个升序了的数组\" class=\"headerlink\" title=\"先有一个升序了的数组\"></a>先有一个升序了的数组</h3><p>首先需要一个已经升序排序过的数组，假设现在有数组，<code>int[] score={67,69,75,88,99,103}</code>,假设我们需要查找<code>int key=67</code>吧，</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>67</td>\n<td>69</td>\n<td>75</td>\n<td>88</td>\n<td>99</td>\n<td>103</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测算中间位置，开始一分为二\"><a href=\"#测算中间位置，开始一分为二\" class=\"headerlink\" title=\"测算中间位置，开始一分为二\"></a>测算中间位置，开始一分为二</h3><p> 测算中间值，我们通过开始下标和结束下标来算中间位置，<code>int mid=(start+end)/2;</code>，由于申明的是<code>int</code>,<code>5/2</code>取得<code>double</code>值只会取整数部分，由此可知，中间值为<code>75</code>，<code>int left=0,right=score.length-1</code>，<code>left</code>和<code>right</code>，是用来控制范围，每次我们都会缩小范围查找。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td>69</td>\n<td>==75==</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">↑R</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"缩小左右区间\"><a href=\"#缩小左右区间\" class=\"headerlink\" title=\"缩小左右区间\"></a>缩小左右区间</h3><p>我们将需要查找的值<code>67</code> 与<code>mid</code>，对比，发现<code>67</code>比<code>mid</code>大，那么由于数组已经是升序的，我们大概推算出，<code>67</code>应该是在0到2的下标之间，将范围缩小，<code>right=mid-1</code>，将范围缩小到0-1。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td>69</td>\n<td>==75==</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td>↑R</td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"循环折半查找\"><a href=\"#循环折半查找\" class=\"headerlink\" title=\"循环折半查找\"></a>循环折半查找</h3><p>现在我们要重新测试中间值，以继续进行折半查找,<code>int mid=(start+end)/2;</code>，由此可知中间值67，判断<code>if(mid==key)</code>，查找结束，找到下标为0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==67==</td>\n<td>69</td>\n<td>75</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td>↑R</td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int binarySearch(int key,int[] array) &#123;</span><br><span class=\"line\">        int start,end,mid &#x3D; 0;</span><br><span class=\"line\">        start&#x3D;0;</span><br><span class=\"line\">        end&#x3D;array.length-1;</span><br><span class=\"line\">        while (start&lt;&#x3D;end) &#123;</span><br><span class=\"line\">            mid&#x3D;(start+end)&#x2F;2;&#x2F;&#x2F;测算中间位置</span><br><span class=\"line\">            if(array[mid]&#x3D;&#x3D;key)&#123;</span><br><span class=\"line\">                return mid;</span><br><span class=\"line\">            &#125;else if(array[mid]&gt;key)&#123;&#x2F;&#x2F;测算该值在数组的左边还是右边</span><br><span class=\"line\">                end&#x3D;mid-1;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                start&#x3D;mid+1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"参考链接-如有侵权立即删除\"><a href=\"#参考链接-如有侵权立即删除\" class=\"headerlink\" title=\"参考链接(如有侵权立即删除)\"></a>参考链接(如有侵权立即删除)</h1><p><a href=\"https://www.zhihu.com/question/36132386\" target=\"_blank\" rel=\"noopener\">二分查找有几种写法？它们的区别是什么？——知乎</a><br><a href=\"https://blog.csdn.net/wingWC/article/details/78229684\" target=\"_blank\" rel=\"noopener\">二分查找算法（左闭右开区间）</a><br><a href=\"https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin&amp;fromid=8283141&amp;fromtitle=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95\" target=\"_blank\" rel=\"noopener\">二分查找法——百度百科</a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>二分查找法，也叫折半查找法，提供一个升序的需要查找数组，再一分为二分别使用左右指针循环匹配，不断测算需要查找的区间，不断进行将数组折半。二分查找法的效率非常高，但是很少人能写出稳定的二分查找法（本来想写很少人能写出没有bug的二分查找法，但是想想欠妥，哪有没有bug的程序）</p>\n</blockquote>","more":"<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><blockquote>\n<p>注：现在是需要查找的数组中只有非负整数</p>\n</blockquote>\n<h3 id=\"先有一个升序了的数组\"><a href=\"#先有一个升序了的数组\" class=\"headerlink\" title=\"先有一个升序了的数组\"></a>先有一个升序了的数组</h3><p>首先需要一个已经升序排序过的数组，假设现在有数组，<code>int[] score={67,69,75,88,99,103}</code>,假设我们需要查找<code>int key=67</code>吧，</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>67</td>\n<td>69</td>\n<td>75</td>\n<td>88</td>\n<td>99</td>\n<td>103</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测算中间位置，开始一分为二\"><a href=\"#测算中间位置，开始一分为二\" class=\"headerlink\" title=\"测算中间位置，开始一分为二\"></a>测算中间位置，开始一分为二</h3><p> 测算中间值，我们通过开始下标和结束下标来算中间位置，<code>int mid=(start+end)/2;</code>，由于申明的是<code>int</code>,<code>5/2</code>取得<code>double</code>值只会取整数部分，由此可知，中间值为<code>75</code>，<code>int left=0,right=score.length-1</code>，<code>left</code>和<code>right</code>，是用来控制范围，每次我们都会缩小范围查找。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td>69</td>\n<td>==75==</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">↑R</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"缩小左右区间\"><a href=\"#缩小左右区间\" class=\"headerlink\" title=\"缩小左右区间\"></a>缩小左右区间</h3><p>我们将需要查找的值<code>67</code> 与<code>mid</code>，对比，发现<code>67</code>比<code>mid</code>大，那么由于数组已经是升序的，我们大概推算出，<code>67</code>应该是在0到2的下标之间，将范围缩小，<code>right=mid-1</code>，将范围缩小到0-1。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td>69</td>\n<td>==75==</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td>↑R</td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"循环折半查找\"><a href=\"#循环折半查找\" class=\"headerlink\" title=\"循环折半查找\"></a>循环折半查找</h3><p>现在我们要重新测试中间值，以继续进行折半查找,<code>int mid=(start+end)/2;</code>，由此可知中间值67，判断<code>if(mid==key)</code>，查找结束，找到下标为0。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==67==</td>\n<td>69</td>\n<td>75</td>\n<td>88</td>\n<td>99</td>\n<td style=\"text-align:center\">103</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑L</td>\n<td>↑R</td>\n<td></td>\n<td></td>\n<td></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int binarySearch(int key,int[] array) &#123;</span><br><span class=\"line\">        int start,end,mid &#x3D; 0;</span><br><span class=\"line\">        start&#x3D;0;</span><br><span class=\"line\">        end&#x3D;array.length-1;</span><br><span class=\"line\">        while (start&lt;&#x3D;end) &#123;</span><br><span class=\"line\">            mid&#x3D;(start+end)&#x2F;2;&#x2F;&#x2F;测算中间位置</span><br><span class=\"line\">            if(array[mid]&#x3D;&#x3D;key)&#123;</span><br><span class=\"line\">                return mid;</span><br><span class=\"line\">            &#125;else if(array[mid]&gt;key)&#123;&#x2F;&#x2F;测算该值在数组的左边还是右边</span><br><span class=\"line\">                end&#x3D;mid-1;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                start&#x3D;mid+1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"运行我的第一个python程序","date":"2017-02-05T16:31:20.000Z","_content":"\n# 运行我的第一个python程序\n## python简介（python是一门跨平台的编程语言）\n创始人Guido van Rossum\n创始人是Guido van Rossum荷兰人，google工程师，1989年圣诞节，龟叔为了打发无聊的圣诞节所开发的python语言。\n<!--more-->\n### python适合的领域\n1、web网站和各种网络服务。\n2、系统工具和脚本。\n3、作为“胶水”语言把其他语言开发模块包装起来方便使用\n### python不适合的领域\n1、\t贴近硬件的代码（首选C）【由于python是一门高级语言，所以不适合贴近硬件开发】\n2、\t移动开发（IOS/Android有各自的开发语言（objC,Swift/java））\n3、\t游戏开发（C/C++）【由于游戏开发需要有高速度的渲染，python运行速度缓慢，所以不适合游戏开发】\n### python的实际应用\n国外：Youtube\n国内：豆瓣、搜狐邮箱\n开源云计算平台\n### python与其他语言的对比\n ![这里写图片描述](http://img.blog.csdn.net/20170206002619216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\npython的优点是代码量少，代码简单，但是缺点是运行速度缓慢，针对网络和硬盘都很缓慢。\npython的代码无法加密，虽然无法加密，但是由于现代是属于互联网时代，只要源代码不被查看到，就不会泄漏，就像豆瓣是不会被看到它实际的程序程序代码。\n\n## python的安装与运行\n### python的版本\npython有两个版本，为什么要介绍版本呢，因为，python两个版本的程序两者无法兼容。\npython2.7版本的程序无法在3.3版本上运行，同样3.3的程序也无法在2.7的平台上运行\n### python的安装\n1、从官网下载安装包\n ![这里写图片描述](http://img.blog.csdn.net/20170206002638669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2、安装非常简单，直接打开安装包安装就可以了，所以不附图\n3、增加环境变量\n增加一个环境变量，就可以直接使用CMD编写python程序了\n ![这里写图片描述](http://img.blog.csdn.net/20170206002649841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n直接使用命令提示符\n![这里写图片描述](http://img.blog.csdn.net/20170206002707080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n### 第一个python程序（Hello World!）\n直接使用cmd编写程序有一个缺点，就是下次还得再输入一次程序，才可以。\n所以我们将python程序用“.py”的后缀名文件保存下来\n ![这里写图片描述](http://img.blog.csdn.net/20170206002720826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n使用cmd进入py文件的目录下，使用代码“python demo.py”运行python程序 \n![这里写图片描述](http://img.blog.csdn.net/20170206002727534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/运行我的第一个python程序.md","raw":"---\ntitle: 运行我的第一个python程序\ndate: 2017-02-06 00:31:20\ncategories:\n  - python\ntags:\n  - python\n---\n\n# 运行我的第一个python程序\n## python简介（python是一门跨平台的编程语言）\n创始人Guido van Rossum\n创始人是Guido van Rossum荷兰人，google工程师，1989年圣诞节，龟叔为了打发无聊的圣诞节所开发的python语言。\n<!--more-->\n### python适合的领域\n1、web网站和各种网络服务。\n2、系统工具和脚本。\n3、作为“胶水”语言把其他语言开发模块包装起来方便使用\n### python不适合的领域\n1、\t贴近硬件的代码（首选C）【由于python是一门高级语言，所以不适合贴近硬件开发】\n2、\t移动开发（IOS/Android有各自的开发语言（objC,Swift/java））\n3、\t游戏开发（C/C++）【由于游戏开发需要有高速度的渲染，python运行速度缓慢，所以不适合游戏开发】\n### python的实际应用\n国外：Youtube\n国内：豆瓣、搜狐邮箱\n开源云计算平台\n### python与其他语言的对比\n ![这里写图片描述](http://img.blog.csdn.net/20170206002619216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\npython的优点是代码量少，代码简单，但是缺点是运行速度缓慢，针对网络和硬盘都很缓慢。\npython的代码无法加密，虽然无法加密，但是由于现代是属于互联网时代，只要源代码不被查看到，就不会泄漏，就像豆瓣是不会被看到它实际的程序程序代码。\n\n## python的安装与运行\n### python的版本\npython有两个版本，为什么要介绍版本呢，因为，python两个版本的程序两者无法兼容。\npython2.7版本的程序无法在3.3版本上运行，同样3.3的程序也无法在2.7的平台上运行\n### python的安装\n1、从官网下载安装包\n ![这里写图片描述](http://img.blog.csdn.net/20170206002638669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2、安装非常简单，直接打开安装包安装就可以了，所以不附图\n3、增加环境变量\n增加一个环境变量，就可以直接使用CMD编写python程序了\n ![这里写图片描述](http://img.blog.csdn.net/20170206002649841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n直接使用命令提示符\n![这里写图片描述](http://img.blog.csdn.net/20170206002707080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n### 第一个python程序（Hello World!）\n直接使用cmd编写程序有一个缺点，就是下次还得再输入一次程序，才可以。\n所以我们将python程序用“.py”的后缀名文件保存下来\n ![这里写图片描述](http://img.blog.csdn.net/20170206002720826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n使用cmd进入py文件的目录下，使用代码“python demo.py”运行python程序 \n![这里写图片描述](http://img.blog.csdn.net/20170206002727534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"运行我的第一个python程序","published":1,"updated":"2019-05-05T09:43:39.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncif80014y8ustgbunpof","content":"<h1 id=\"运行我的第一个python程序\"><a href=\"#运行我的第一个python程序\" class=\"headerlink\" title=\"运行我的第一个python程序\"></a>运行我的第一个python程序</h1><h2 id=\"python简介（python是一门跨平台的编程语言）\"><a href=\"#python简介（python是一门跨平台的编程语言）\" class=\"headerlink\" title=\"python简介（python是一门跨平台的编程语言）\"></a>python简介（python是一门跨平台的编程语言）</h2><p>创始人Guido van Rossum<br>创始人是Guido van Rossum荷兰人，google工程师，1989年圣诞节，龟叔为了打发无聊的圣诞节所开发的python语言。<br><a id=\"more\"></a></p>\n<h3 id=\"python适合的领域\"><a href=\"#python适合的领域\" class=\"headerlink\" title=\"python适合的领域\"></a>python适合的领域</h3><p>1、web网站和各种网络服务。<br>2、系统工具和脚本。<br>3、作为“胶水”语言把其他语言开发模块包装起来方便使用</p>\n<h3 id=\"python不适合的领域\"><a href=\"#python不适合的领域\" class=\"headerlink\" title=\"python不适合的领域\"></a>python不适合的领域</h3><p>1、    贴近硬件的代码（首选C）【由于python是一门高级语言，所以不适合贴近硬件开发】<br>2、    移动开发（IOS/Android有各自的开发语言（objC,Swift/java））<br>3、    游戏开发（C/C++）【由于游戏开发需要有高速度的渲染，python运行速度缓慢，所以不适合游戏开发】</p>\n<h3 id=\"python的实际应用\"><a href=\"#python的实际应用\" class=\"headerlink\" title=\"python的实际应用\"></a>python的实际应用</h3><p>国外：Youtube<br>国内：豆瓣、搜狐邮箱<br>开源云计算平台</p>\n<h3 id=\"python与其他语言的对比\"><a href=\"#python与其他语言的对比\" class=\"headerlink\" title=\"python与其他语言的对比\"></a>python与其他语言的对比</h3><p> <img src=\"http://img.blog.csdn.net/20170206002619216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>python的优点是代码量少，代码简单，但是缺点是运行速度缓慢，针对网络和硬盘都很缓慢。<br>python的代码无法加密，虽然无法加密，但是由于现代是属于互联网时代，只要源代码不被查看到，就不会泄漏，就像豆瓣是不会被看到它实际的程序程序代码。</p>\n<h2 id=\"python的安装与运行\"><a href=\"#python的安装与运行\" class=\"headerlink\" title=\"python的安装与运行\"></a>python的安装与运行</h2><h3 id=\"python的版本\"><a href=\"#python的版本\" class=\"headerlink\" title=\"python的版本\"></a>python的版本</h3><p>python有两个版本，为什么要介绍版本呢，因为，python两个版本的程序两者无法兼容。<br>python2.7版本的程序无法在3.3版本上运行，同样3.3的程序也无法在2.7的平台上运行</p>\n<h3 id=\"python的安装\"><a href=\"#python的安装\" class=\"headerlink\" title=\"python的安装\"></a>python的安装</h3><p>1、从官网下载安装包<br> <img src=\"http://img.blog.csdn.net/20170206002638669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>2、安装非常简单，直接打开安装包安装就可以了，所以不附图<br>3、增加环境变量<br>增加一个环境变量，就可以直接使用CMD编写python程序了<br> <img src=\"http://img.blog.csdn.net/20170206002649841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>直接使用命令提示符<br><img src=\"http://img.blog.csdn.net/20170206002707080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"第一个python程序（Hello-World-）\"><a href=\"#第一个python程序（Hello-World-）\" class=\"headerlink\" title=\"第一个python程序（Hello World!）\"></a>第一个python程序（Hello World!）</h3><p>直接使用cmd编写程序有一个缺点，就是下次还得再输入一次程序，才可以。<br>所以我们将python程序用“.py”的后缀名文件保存下来<br> <img src=\"http://img.blog.csdn.net/20170206002720826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>使用cmd进入py文件的目录下，使用代码“python demo.py”运行python程序<br><img src=\"http://img.blog.csdn.net/20170206002727534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"运行我的第一个python程序\"><a href=\"#运行我的第一个python程序\" class=\"headerlink\" title=\"运行我的第一个python程序\"></a>运行我的第一个python程序</h1><h2 id=\"python简介（python是一门跨平台的编程语言）\"><a href=\"#python简介（python是一门跨平台的编程语言）\" class=\"headerlink\" title=\"python简介（python是一门跨平台的编程语言）\"></a>python简介（python是一门跨平台的编程语言）</h2><p>创始人Guido van Rossum<br>创始人是Guido van Rossum荷兰人，google工程师，1989年圣诞节，龟叔为了打发无聊的圣诞节所开发的python语言。<br></p>","more":"<p></p>\n<h3 id=\"python适合的领域\"><a href=\"#python适合的领域\" class=\"headerlink\" title=\"python适合的领域\"></a>python适合的领域</h3><p>1、web网站和各种网络服务。<br>2、系统工具和脚本。<br>3、作为“胶水”语言把其他语言开发模块包装起来方便使用</p>\n<h3 id=\"python不适合的领域\"><a href=\"#python不适合的领域\" class=\"headerlink\" title=\"python不适合的领域\"></a>python不适合的领域</h3><p>1、    贴近硬件的代码（首选C）【由于python是一门高级语言，所以不适合贴近硬件开发】<br>2、    移动开发（IOS/Android有各自的开发语言（objC,Swift/java））<br>3、    游戏开发（C/C++）【由于游戏开发需要有高速度的渲染，python运行速度缓慢，所以不适合游戏开发】</p>\n<h3 id=\"python的实际应用\"><a href=\"#python的实际应用\" class=\"headerlink\" title=\"python的实际应用\"></a>python的实际应用</h3><p>国外：Youtube<br>国内：豆瓣、搜狐邮箱<br>开源云计算平台</p>\n<h3 id=\"python与其他语言的对比\"><a href=\"#python与其他语言的对比\" class=\"headerlink\" title=\"python与其他语言的对比\"></a>python与其他语言的对比</h3><p> <img src=\"http://img.blog.csdn.net/20170206002619216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>python的优点是代码量少，代码简单，但是缺点是运行速度缓慢，针对网络和硬盘都很缓慢。<br>python的代码无法加密，虽然无法加密，但是由于现代是属于互联网时代，只要源代码不被查看到，就不会泄漏，就像豆瓣是不会被看到它实际的程序程序代码。</p>\n<h2 id=\"python的安装与运行\"><a href=\"#python的安装与运行\" class=\"headerlink\" title=\"python的安装与运行\"></a>python的安装与运行</h2><h3 id=\"python的版本\"><a href=\"#python的版本\" class=\"headerlink\" title=\"python的版本\"></a>python的版本</h3><p>python有两个版本，为什么要介绍版本呢，因为，python两个版本的程序两者无法兼容。<br>python2.7版本的程序无法在3.3版本上运行，同样3.3的程序也无法在2.7的平台上运行</p>\n<h3 id=\"python的安装\"><a href=\"#python的安装\" class=\"headerlink\" title=\"python的安装\"></a>python的安装</h3><p>1、从官网下载安装包<br> <img src=\"http://img.blog.csdn.net/20170206002638669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>2、安装非常简单，直接打开安装包安装就可以了，所以不附图<br>3、增加环境变量<br>增加一个环境变量，就可以直接使用CMD编写python程序了<br> <img src=\"http://img.blog.csdn.net/20170206002649841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>直接使用命令提示符<br><img src=\"http://img.blog.csdn.net/20170206002707080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"第一个python程序（Hello-World-）\"><a href=\"#第一个python程序（Hello-World-）\" class=\"headerlink\" title=\"第一个python程序（Hello World!）\"></a>第一个python程序（Hello World!）</h3><p>直接使用cmd编写程序有一个缺点，就是下次还得再输入一次程序，才可以。<br>所以我们将python程序用“.py”的后缀名文件保存下来<br> <img src=\"http://img.blog.csdn.net/20170206002720826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>使用cmd进入py文件的目录下，使用代码“python demo.py”运行python程序<br><img src=\"http://img.blog.csdn.net/20170206002727534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"运行我的第一个php程序","date":"2017-02-04T18:11:21.000Z","_content":"## php的简介\n### 什么是php？\nphp是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。\n<!--more-->\n## php的简介\n### 什么是php？\nphp是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。\n### 什么是php文件\n1.\tPHP 文件能够包含文本、HTML、CSS 以及 PHP 代码\n2.\tPHP 代码在服务器上执行，而结果以纯文本返回浏览器\n3.\tPHP 文件的后缀是 \".php\"\n### php能够做什么？\n1.\tPHP 能够生成动态页面内容\n2.\tPHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件\n3.\tPHP 能够接收表单数据\n4.\tPHP 能够发送并取回 cookies\n5.\tPHP 能够添加、删除、修改数据库中的数据\n6.\tPHP 能够限制用户访问网站中的某些页面\n7.\tPHP 能够对数据进行加密\n### 为什么使用php？\n1.\tPHP 运行于各种平台（Windows, Linux, Unix, Mac OS X 等等）\n2.\tPHP 兼容几乎所有服务器（Apache, IIS 等等）\n3.\tPHP 支持多种数据库\n4.\tPHP 是免费的。请从官方 PHP 资源下载：www.php.net\n5.\tPHP 易于学习，并可高效地运行在服务器端\n## 搭建开发环境（第一个程序）\n\n使用PHPstudy作为php的服务器作调试运行\n此安装程序集成了php所需的所有开发工具，\nApache+Nginx+LightTPD+PHP+MySQL+phpMyAdmin+Zend Optimizer+Zend Loader\n直接下载phpstudy的压缩包进行解压安装即可，运行phpstudy\n![这里写图片描述](http://img.blog.csdn.net/20170205015043138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 运行一个php程序\n<?php\n\techo \"Hello World!This is  my first php program!\"\n?>\n使用.php后缀的文件保存在“phpstudy—WWW”目录下，“WWW”目录是phpstudy服务运行的目标目录\n![这里写图片描述](http://img.blog.csdn.net/20170205015056653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/运行我的第一个php程序.md","raw":"---\ntitle: 运行我的第一个php程序\ndate: 2017-02-05 02:11:21\ncategories:\n  - php\ntags:\n  - php\n---\n## php的简介\n### 什么是php？\nphp是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。\n<!--more-->\n## php的简介\n### 什么是php？\nphp是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。\n### 什么是php文件\n1.\tPHP 文件能够包含文本、HTML、CSS 以及 PHP 代码\n2.\tPHP 代码在服务器上执行，而结果以纯文本返回浏览器\n3.\tPHP 文件的后缀是 \".php\"\n### php能够做什么？\n1.\tPHP 能够生成动态页面内容\n2.\tPHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件\n3.\tPHP 能够接收表单数据\n4.\tPHP 能够发送并取回 cookies\n5.\tPHP 能够添加、删除、修改数据库中的数据\n6.\tPHP 能够限制用户访问网站中的某些页面\n7.\tPHP 能够对数据进行加密\n### 为什么使用php？\n1.\tPHP 运行于各种平台（Windows, Linux, Unix, Mac OS X 等等）\n2.\tPHP 兼容几乎所有服务器（Apache, IIS 等等）\n3.\tPHP 支持多种数据库\n4.\tPHP 是免费的。请从官方 PHP 资源下载：www.php.net\n5.\tPHP 易于学习，并可高效地运行在服务器端\n## 搭建开发环境（第一个程序）\n\n使用PHPstudy作为php的服务器作调试运行\n此安装程序集成了php所需的所有开发工具，\nApache+Nginx+LightTPD+PHP+MySQL+phpMyAdmin+Zend Optimizer+Zend Loader\n直接下载phpstudy的压缩包进行解压安装即可，运行phpstudy\n![这里写图片描述](http://img.blog.csdn.net/20170205015043138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 运行一个php程序\n<?php\n\techo \"Hello World!This is  my first php program!\"\n?>\n使用.php后缀的文件保存在“phpstudy—WWW”目录下，“WWW”目录是phpstudy服务运行的目标目录\n![这里写图片描述](http://img.blog.csdn.net/20170205015056653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"运行我的第一个php程序","published":1,"updated":"2019-05-05T09:43:39.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncifc0015y8usblyyymwz","content":"<h2 id=\"php的简介\"><a href=\"#php的简介\" class=\"headerlink\" title=\"php的简介\"></a>php的简介</h2><h3 id=\"什么是php？\"><a href=\"#什么是php？\" class=\"headerlink\" title=\"什么是php？\"></a>什么是php？</h3><p>php是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。<br><a id=\"more\"></a></p>\n<h2 id=\"php的简介-1\"><a href=\"#php的简介-1\" class=\"headerlink\" title=\"php的简介\"></a>php的简介</h2><h3 id=\"什么是php？-1\"><a href=\"#什么是php？-1\" class=\"headerlink\" title=\"什么是php？\"></a>什么是php？</h3><p>php是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。</p>\n<h3 id=\"什么是php文件\"><a href=\"#什么是php文件\" class=\"headerlink\" title=\"什么是php文件\"></a>什么是php文件</h3><ol>\n<li>PHP 文件能够包含文本、HTML、CSS 以及 PHP 代码</li>\n<li>PHP 代码在服务器上执行，而结果以纯文本返回浏览器</li>\n<li>PHP 文件的后缀是 “.php”<h3 id=\"php能够做什么？\"><a href=\"#php能够做什么？\" class=\"headerlink\" title=\"php能够做什么？\"></a>php能够做什么？</h3></li>\n<li>PHP 能够生成动态页面内容</li>\n<li>PHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件</li>\n<li>PHP 能够接收表单数据</li>\n<li>PHP 能够发送并取回 cookies</li>\n<li>PHP 能够添加、删除、修改数据库中的数据</li>\n<li>PHP 能够限制用户访问网站中的某些页面</li>\n<li>PHP 能够对数据进行加密<h3 id=\"为什么使用php？\"><a href=\"#为什么使用php？\" class=\"headerlink\" title=\"为什么使用php？\"></a>为什么使用php？</h3></li>\n<li>PHP 运行于各种平台（Windows, Linux, Unix, Mac OS X 等等）</li>\n<li>PHP 兼容几乎所有服务器（Apache, IIS 等等）</li>\n<li>PHP 支持多种数据库</li>\n<li>PHP 是免费的。请从官方 PHP 资源下载：www.php.net</li>\n<li>PHP 易于学习，并可高效地运行在服务器端<h2 id=\"搭建开发环境（第一个程序）\"><a href=\"#搭建开发环境（第一个程序）\" class=\"headerlink\" title=\"搭建开发环境（第一个程序）\"></a>搭建开发环境（第一个程序）</h2></li>\n</ol>\n<p>使用PHPstudy作为php的服务器作调试运行<br>此安装程序集成了php所需的所有开发工具，<br>Apache+Nginx+LightTPD+PHP+MySQL+phpMyAdmin+Zend Optimizer+Zend Loader<br>直接下载phpstudy的压缩包进行解压安装即可，运行phpstudy<br><img src=\"http://img.blog.csdn.net/20170205015043138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"运行一个php程序\"><a href=\"#运行一个php程序\" class=\"headerlink\" title=\"运行一个php程序\"></a>运行一个php程序</h2><p>&lt;?php<br>    echo “Hello World!This is  my first php program!”<br>?&gt;<br>使用.php后缀的文件保存在“phpstudy—WWW”目录下，“WWW”目录是phpstudy服务运行的目标目录<br><img src=\"http://img.blog.csdn.net/20170205015056653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"php的简介\"><a href=\"#php的简介\" class=\"headerlink\" title=\"php的简介\"></a>php的简介</h2><h3 id=\"什么是php？\"><a href=\"#什么是php？\" class=\"headerlink\" title=\"什么是php？\"></a>什么是php？</h3><p>php是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。<br></p>","more":"<p></p>\n<h2 id=\"php的简介-1\"><a href=\"#php的简介-1\" class=\"headerlink\" title=\"php的简介\"></a>php的简介</h2><h3 id=\"什么是php？-1\"><a href=\"#什么是php？-1\" class=\"headerlink\" title=\"什么是php？\"></a>什么是php？</h3><p>php是一种超文本的标记语言，或者叫做开源脚本言。它是一种运行在服务器上的程序语言，语法简单，开发速度快，像WordPress博客、facebook社交平台都采用了php的技术。</p>\n<h3 id=\"什么是php文件\"><a href=\"#什么是php文件\" class=\"headerlink\" title=\"什么是php文件\"></a>什么是php文件</h3><ol>\n<li>PHP 文件能够包含文本、HTML、CSS 以及 PHP 代码</li>\n<li>PHP 代码在服务器上执行，而结果以纯文本返回浏览器</li>\n<li>PHP 文件的后缀是 “.php”<h3 id=\"php能够做什么？\"><a href=\"#php能够做什么？\" class=\"headerlink\" title=\"php能够做什么？\"></a>php能够做什么？</h3></li>\n<li>PHP 能够生成动态页面内容</li>\n<li>PHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件</li>\n<li>PHP 能够接收表单数据</li>\n<li>PHP 能够发送并取回 cookies</li>\n<li>PHP 能够添加、删除、修改数据库中的数据</li>\n<li>PHP 能够限制用户访问网站中的某些页面</li>\n<li>PHP 能够对数据进行加密<h3 id=\"为什么使用php？\"><a href=\"#为什么使用php？\" class=\"headerlink\" title=\"为什么使用php？\"></a>为什么使用php？</h3></li>\n<li>PHP 运行于各种平台（Windows, Linux, Unix, Mac OS X 等等）</li>\n<li>PHP 兼容几乎所有服务器（Apache, IIS 等等）</li>\n<li>PHP 支持多种数据库</li>\n<li>PHP 是免费的。请从官方 PHP 资源下载：www.php.net</li>\n<li>PHP 易于学习，并可高效地运行在服务器端<h2 id=\"搭建开发环境（第一个程序）\"><a href=\"#搭建开发环境（第一个程序）\" class=\"headerlink\" title=\"搭建开发环境（第一个程序）\"></a>搭建开发环境（第一个程序）</h2></li>\n</ol>\n<p>使用PHPstudy作为php的服务器作调试运行<br>此安装程序集成了php所需的所有开发工具，<br>Apache+Nginx+LightTPD+PHP+MySQL+phpMyAdmin+Zend Optimizer+Zend Loader<br>直接下载phpstudy的压缩包进行解压安装即可，运行phpstudy<br><img src=\"http://img.blog.csdn.net/20170205015043138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"运行一个php程序\"><a href=\"#运行一个php程序\" class=\"headerlink\" title=\"运行一个php程序\"></a>运行一个php程序</h2><p>&lt;?php<br>    echo “Hello World!This is  my first php program!”<br>?&gt;<br>使用.php后缀的文件保存在“phpstudy—WWW”目录下，“WWW”目录是phpstudy服务运行的目标目录<br><img src=\"http://img.blog.csdn.net/20170205015056653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"Android Service总结","date":"2017-04-16T08:49:13.000Z","_content":"# 参考链接\n[Service知识总结——某学姐](http://mouxuejie.com/blog/2016-04-16/service-intentservice-analysis/)\n# Service\n\n## service生命周期\nservice有两个生命周期，为什么会有两个生命周期呢，这是根据service的启动方式来进行区分的。\n* `Context.startService()`     \n    通过该方法启动service，访问者与service之间没有关联，即使访问者退出了，service也仍然运行。以下是打印结果\n\n```\ncom.app.demoservice I/MyService: onCreate: 开始创建Service\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\n```\n\n* `Context.bindService(Intent service,ServiceConnection conn,int flags)`  \n    使用该方法启动的service,访问者与service绑定在一起，访问者退出，service也就终止了。  \n![Android Service的两种生命周期](Android Service总结/1.jpg)  \n\n<!--more-->\n\n## service的主要回调方法\n* `IBinder onBind(Intent intent)`  \n该方法是Service子类必须实现的方法，该方法返回一个IBinder对象，应用程序可通过该对象与Service组件通信。\n\n* `void onCreate()`  \n在该Service第一次被创建后会立即回调该方法  \n\n* `void onDestroy`  \n在该Service被关闭之前会回调该方法  \n\n* `void onStartCommand(Intent intent,  int flags, int startId)`  \n该方法的早期版本是`onStart(Intent intent,int startId)`,每次客户端调用`startService(Intent)`方法启动Service，都会回调该方法  \n多次调用startService()，会多次调用onStartCommand()\n```\ncom.app.demoservice I/MyService: onCreate: 开始创建Service\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\n```\n* `void onUnBind(Intent intent)`  \n当Service与之绑定的客户端都断开连接时，会回调这个方法\n\n## 绑定本地Service并与之通信\n使用startService()启动的service，基本不会与访问者有太多的数据交互,所以访问者与service的数据交互最好是，用bindService()去启动这个service。\n* `Context.bindService(Intent service,ServiceConnection conn,int flags)`  \n    * `Intent service`  \n    启动的意图  \n    \n    * `ServiceConnection conn`  \n    ServiceConnection一个接口，该对象用于监听访问者与Service之间的状态，当访问者与Service建立连接时，会回调`onServiceConnected(ComponentName name, IBinder service)`，当Service发生异常或者其他原因中止时，会回调`onServiceDisconnected(ComponentName name)`，但是访问者主动调用unBindService()方法时并回调onServiceDisconnected();\n\n    * `int flag`  \n        此参考代表是否自动创建Service\n        * `0`  \n        指定为0时，不自动创建 \n        * `Context.BIND_AUTO_CREATE`  \n        指定为这个常量时，表示自动创建Service\n### 示例\n* MyService.java\n```\npublic class MyService extends Service {\n    private static final String TAG = MyService.class.getSimpleName();\n    private MyBinder myBinder=new MyBinder();\n    //模拟数据\n    private int serviceData =0;\n    //是否停止对数据处理\n    private boolean isStop=false;\n    public MyService() {\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        Log.i(TAG, \"onBind: 开始绑定IBinder\");\n        return myBinder;\n    }\n    class MyBinder extends Binder {\n        public int  getDataState(){\n            return serviceData;\n        }\n        public void stop(boolean stop){\n            isStop=stop;\n        }\n    }\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"onCreate: 开始创建Service\");\n\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (!isStop){\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    if (serviceData>30){\n\n                    }\n                    serviceData++;\n                }\n                stopSelf();\n            }\n        }).start();\n    }\n\n    /**\n     * onStart()方法是Service的早期方法，onStartCommand()是新的推荐方法\n     * @param intent\n     * @param flags\n     * @param startId\n     * @return\n     */\n    @Override\n    public int onStartCommand(Intent intent,  int flags, int startId) {\n        Log.i(TAG, \"onStartCommand: 每次调用startService()或者 bindService()方法时，都会回调这个方法\");\n            return super.onStartCommand(intent, flags, startId);\n}\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(TAG, \"onDestroy: Service开始销毁之前会回调这个方法\");\n    }\n\n    @Override\n    public boolean onUnbind(Intent intent) {\n        Log.i(TAG, \"onUnbind: 当Service与之绑定的客户端都断开连接时，会回调这个方法\");\n        return super.onUnbind(intent);\n    }\n}\n```\n\n* MainActivity.java\n```\n//绑定并启动service\nfindViewById(bindService).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        startService(i);\n        bindService(i,MainActivity.this, BIND_AUTO_CREATE);\n    }\n});\nfindViewById(R.id.getServiceData).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        int dataState = myBinder.getDataState();\n        Toast.makeText(MainActivity.this,\"Service中数据为-->\"+dataState, Toast.LENGTH_SHORT).show();\n    }\n});\n```\n## IntentService\nIntentService是继承于Service的，跟Service一样也可以执行耗时任务，IntentService封装了线程和消息循环，IntentService中使用HandlerThread来处理，HandlerThread继承了Thread,内部实现使用了Looper和MessageQueue，用法也很简单。 \n\n* HandlerThread\n\n```\nHandlerThread myHandlerThread=new HandlerThread(\"myHandlerThread\");\nmyHandlerThread.start();\n//由于获取了HandlerThread中的Loooper，也就是handleMessage会HandlerThread的线程中执行。\nHandler myHandler=new Handler(myHandlerThread.getLooper()){\n    @Override\n    public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n    }\n};\n```\n### IntentService的源码解析\nIntentService封装了HandlerThread，做一个简单分析就可以。\n\n> 这是IntentService中的一个内部，主要负责异步处理，`onHandleIntent((Intent)msg.obj);`是IntentService是抽象方法，也就是提供给我们实现异步处理的方法，onHandleIntent执行完成后会自动停止Service。\n\n```\nprivate final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\n\n> 以下代码可以注意HandlerThread的实例化并start，这是service第一次创建时会立即启动一个线程。\n\n```\n@Override\npublic void onCreate() {\n    // TODO: It would be nice to have an option to hold a partial wakelock\n    // during processing, and to have a static startService(Context, Intent)\n    // method that would launch the service & hand off a wakelock.\n\n    super.onCreate();\n    HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n    thread.start();\n\n    mServiceLooper = thread.getLooper();\n    mServiceHandler = new ServiceHandler(mServiceLooper);\n}\n```\n\n> IntentService的排队处理  \n> 我们可以看每次启动Service都会发送一个消息，`mServiceHandler.sendMessage(msg);`，熟悉消息机制的我们知道，多余消息会处于等待状态。\n\n```\n//重点这个方法上\n@Override\npublic void onStart(@Nullable Intent intent, int startId) {\n    Message msg = mServiceHandler.obtainMessage();\n    msg.arg1 = startId;\n    msg.obj = intent;\n    mServiceHandler.sendMessage(msg);\n}\n\n/**\n * You should not override this method for your IntentService. Instead,\n * override {@link #onHandleIntent}, which the system calls when the IntentService\n * receives a start request.\n * @see android.app.Service#onStartCommand\n */\n@Override\npublic int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n    onStart(intent, startId);\n    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n}\n```\n\n## 需要注意的地方\n* android5.0以上不允许使用隐式意图的方式启动Service \n\n* Service是在UI线程中的，所以Service也是不能执行耗时操作的，那么为什么不使用直接在Activity创建线程处理呢？因为如果在Activity退出的情况下，线程执行还未结束，此时所在的进程就变成空进程，系统可能需要内存会优先终止该进程，宿主进程被的终止的话，所在的子线程也会被中止。  ","source":"_posts/Android-Service总结.md","raw":"---\ntitle: Android Service总结\ndate: 2017-04-16 16:49:13\ncategories:\n  - android\n  - 四大组件\n  - service\ntags:\n  - android\n  - android service\n---\n# 参考链接\n[Service知识总结——某学姐](http://mouxuejie.com/blog/2016-04-16/service-intentservice-analysis/)\n# Service\n\n## service生命周期\nservice有两个生命周期，为什么会有两个生命周期呢，这是根据service的启动方式来进行区分的。\n* `Context.startService()`     \n    通过该方法启动service，访问者与service之间没有关联，即使访问者退出了，service也仍然运行。以下是打印结果\n\n```\ncom.app.demoservice I/MyService: onCreate: 开始创建Service\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\n```\n\n* `Context.bindService(Intent service,ServiceConnection conn,int flags)`  \n    使用该方法启动的service,访问者与service绑定在一起，访问者退出，service也就终止了。  \n![Android Service的两种生命周期](Android Service总结/1.jpg)  \n\n<!--more-->\n\n## service的主要回调方法\n* `IBinder onBind(Intent intent)`  \n该方法是Service子类必须实现的方法，该方法返回一个IBinder对象，应用程序可通过该对象与Service组件通信。\n\n* `void onCreate()`  \n在该Service第一次被创建后会立即回调该方法  \n\n* `void onDestroy`  \n在该Service被关闭之前会回调该方法  \n\n* `void onStartCommand(Intent intent,  int flags, int startId)`  \n该方法的早期版本是`onStart(Intent intent,int startId)`,每次客户端调用`startService(Intent)`方法启动Service，都会回调该方法  \n多次调用startService()，会多次调用onStartCommand()\n```\ncom.app.demoservice I/MyService: onCreate: 开始创建Service\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\ncom.app.demoservice I/MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法\n```\n* `void onUnBind(Intent intent)`  \n当Service与之绑定的客户端都断开连接时，会回调这个方法\n\n## 绑定本地Service并与之通信\n使用startService()启动的service，基本不会与访问者有太多的数据交互,所以访问者与service的数据交互最好是，用bindService()去启动这个service。\n* `Context.bindService(Intent service,ServiceConnection conn,int flags)`  \n    * `Intent service`  \n    启动的意图  \n    \n    * `ServiceConnection conn`  \n    ServiceConnection一个接口，该对象用于监听访问者与Service之间的状态，当访问者与Service建立连接时，会回调`onServiceConnected(ComponentName name, IBinder service)`，当Service发生异常或者其他原因中止时，会回调`onServiceDisconnected(ComponentName name)`，但是访问者主动调用unBindService()方法时并回调onServiceDisconnected();\n\n    * `int flag`  \n        此参考代表是否自动创建Service\n        * `0`  \n        指定为0时，不自动创建 \n        * `Context.BIND_AUTO_CREATE`  \n        指定为这个常量时，表示自动创建Service\n### 示例\n* MyService.java\n```\npublic class MyService extends Service {\n    private static final String TAG = MyService.class.getSimpleName();\n    private MyBinder myBinder=new MyBinder();\n    //模拟数据\n    private int serviceData =0;\n    //是否停止对数据处理\n    private boolean isStop=false;\n    public MyService() {\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        Log.i(TAG, \"onBind: 开始绑定IBinder\");\n        return myBinder;\n    }\n    class MyBinder extends Binder {\n        public int  getDataState(){\n            return serviceData;\n        }\n        public void stop(boolean stop){\n            isStop=stop;\n        }\n    }\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"onCreate: 开始创建Service\");\n\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (!isStop){\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    if (serviceData>30){\n\n                    }\n                    serviceData++;\n                }\n                stopSelf();\n            }\n        }).start();\n    }\n\n    /**\n     * onStart()方法是Service的早期方法，onStartCommand()是新的推荐方法\n     * @param intent\n     * @param flags\n     * @param startId\n     * @return\n     */\n    @Override\n    public int onStartCommand(Intent intent,  int flags, int startId) {\n        Log.i(TAG, \"onStartCommand: 每次调用startService()或者 bindService()方法时，都会回调这个方法\");\n            return super.onStartCommand(intent, flags, startId);\n}\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.i(TAG, \"onDestroy: Service开始销毁之前会回调这个方法\");\n    }\n\n    @Override\n    public boolean onUnbind(Intent intent) {\n        Log.i(TAG, \"onUnbind: 当Service与之绑定的客户端都断开连接时，会回调这个方法\");\n        return super.onUnbind(intent);\n    }\n}\n```\n\n* MainActivity.java\n```\n//绑定并启动service\nfindViewById(bindService).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        startService(i);\n        bindService(i,MainActivity.this, BIND_AUTO_CREATE);\n    }\n});\nfindViewById(R.id.getServiceData).setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        int dataState = myBinder.getDataState();\n        Toast.makeText(MainActivity.this,\"Service中数据为-->\"+dataState, Toast.LENGTH_SHORT).show();\n    }\n});\n```\n## IntentService\nIntentService是继承于Service的，跟Service一样也可以执行耗时任务，IntentService封装了线程和消息循环，IntentService中使用HandlerThread来处理，HandlerThread继承了Thread,内部实现使用了Looper和MessageQueue，用法也很简单。 \n\n* HandlerThread\n\n```\nHandlerThread myHandlerThread=new HandlerThread(\"myHandlerThread\");\nmyHandlerThread.start();\n//由于获取了HandlerThread中的Loooper，也就是handleMessage会HandlerThread的线程中执行。\nHandler myHandler=new Handler(myHandlerThread.getLooper()){\n    @Override\n    public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n    }\n};\n```\n### IntentService的源码解析\nIntentService封装了HandlerThread，做一个简单分析就可以。\n\n> 这是IntentService中的一个内部，主要负责异步处理，`onHandleIntent((Intent)msg.obj);`是IntentService是抽象方法，也就是提供给我们实现异步处理的方法，onHandleIntent执行完成后会自动停止Service。\n\n```\nprivate final class ServiceHandler extends Handler {\n        public ServiceHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            onHandleIntent((Intent)msg.obj);\n            stopSelf(msg.arg1);\n        }\n    }\n```\n\n\n> 以下代码可以注意HandlerThread的实例化并start，这是service第一次创建时会立即启动一个线程。\n\n```\n@Override\npublic void onCreate() {\n    // TODO: It would be nice to have an option to hold a partial wakelock\n    // during processing, and to have a static startService(Context, Intent)\n    // method that would launch the service & hand off a wakelock.\n\n    super.onCreate();\n    HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n    thread.start();\n\n    mServiceLooper = thread.getLooper();\n    mServiceHandler = new ServiceHandler(mServiceLooper);\n}\n```\n\n> IntentService的排队处理  \n> 我们可以看每次启动Service都会发送一个消息，`mServiceHandler.sendMessage(msg);`，熟悉消息机制的我们知道，多余消息会处于等待状态。\n\n```\n//重点这个方法上\n@Override\npublic void onStart(@Nullable Intent intent, int startId) {\n    Message msg = mServiceHandler.obtainMessage();\n    msg.arg1 = startId;\n    msg.obj = intent;\n    mServiceHandler.sendMessage(msg);\n}\n\n/**\n * You should not override this method for your IntentService. Instead,\n * override {@link #onHandleIntent}, which the system calls when the IntentService\n * receives a start request.\n * @see android.app.Service#onStartCommand\n */\n@Override\npublic int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n    onStart(intent, startId);\n    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n}\n```\n\n## 需要注意的地方\n* android5.0以上不允许使用隐式意图的方式启动Service \n\n* Service是在UI线程中的，所以Service也是不能执行耗时操作的，那么为什么不使用直接在Activity创建线程处理呢？因为如果在Activity退出的情况下，线程执行还未结束，此时所在的进程就变成空进程，系统可能需要内存会优先终止该进程，宿主进程被的终止的话，所在的子线程也会被中止。  ","slug":"Android-Service总结","published":1,"updated":"2019-05-05T09:43:38.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncigi0016y8us2ckt24uv","content":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://mouxuejie.com/blog/2016-04-16/service-intentservice-analysis/\" target=\"_blank\" rel=\"noopener\">Service知识总结——某学姐</a></p>\n<h1 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h1><h2 id=\"service生命周期\"><a href=\"#service生命周期\" class=\"headerlink\" title=\"service生命周期\"></a>service生命周期</h2><p>service有两个生命周期，为什么会有两个生命周期呢，这是根据service的启动方式来进行区分的。</p>\n<ul>\n<li><code>Context.startService()</code><br>  通过该方法启动service，访问者与service之间没有关联，即使访问者退出了，service也仍然运行。以下是打印结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.app.demoservice I&#x2F;MyService: onCreate: 开始创建Service</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Context.bindService(Intent service,ServiceConnection conn,int flags)</code><br>  使用该方法启动的service,访问者与service绑定在一起，访问者退出，service也就终止了。<br><img src=\"/2017/04/16/Android-Service%E6%80%BB%E7%BB%93/1.jpg\" alt=\"Android Service的两种生命周期\">  </li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"service的主要回调方法\"><a href=\"#service的主要回调方法\" class=\"headerlink\" title=\"service的主要回调方法\"></a>service的主要回调方法</h2><ul>\n<li><p><code>IBinder onBind(Intent intent)</code><br>该方法是Service子类必须实现的方法，该方法返回一个IBinder对象，应用程序可通过该对象与Service组件通信。</p>\n</li>\n<li><p><code>void onCreate()</code><br>在该Service第一次被创建后会立即回调该方法  </p>\n</li>\n<li><p><code>void onDestroy</code><br>在该Service被关闭之前会回调该方法  </p>\n</li>\n<li><p><code>void onStartCommand(Intent intent,  int flags, int startId)</code><br>该方法的早期版本是<code>onStart(Intent intent,int startId)</code>,每次客户端调用<code>startService(Intent)</code>方法启动Service，都会回调该方法<br>多次调用startService()，会多次调用onStartCommand()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.app.demoservice I&#x2F;MyService: onCreate: 开始创建Service</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br></pre></td></tr></table></figure></li>\n<li><code>void onUnBind(Intent intent)</code><br>当Service与之绑定的客户端都断开连接时，会回调这个方法</li>\n</ul>\n<h2 id=\"绑定本地Service并与之通信\"><a href=\"#绑定本地Service并与之通信\" class=\"headerlink\" title=\"绑定本地Service并与之通信\"></a>绑定本地Service并与之通信</h2><p>使用startService()启动的service，基本不会与访问者有太多的数据交互,所以访问者与service的数据交互最好是，用bindService()去启动这个service。</p>\n<ul>\n<li><p><code>Context.bindService(Intent service,ServiceConnection conn,int flags)</code>  </p>\n<ul>\n<li><p><code>Intent service</code><br>启动的意图  </p>\n</li>\n<li><p><code>ServiceConnection conn</code><br>ServiceConnection一个接口，该对象用于监听访问者与Service之间的状态，当访问者与Service建立连接时，会回调<code>onServiceConnected(ComponentName name, IBinder service)</code>，当Service发生异常或者其他原因中止时，会回调<code>onServiceDisconnected(ComponentName name)</code>，但是访问者主动调用unBindService()方法时并回调onServiceDisconnected();</p>\n</li>\n<li><p><code>int flag</code><br>  此参考代表是否自动创建Service</p>\n<ul>\n<li><code>0</code><br>指定为0时，不自动创建 </li>\n<li><code>Context.BIND_AUTO_CREATE</code><br>指定为这个常量时，表示自动创建Service<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>MyService.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyService extends Service &#123;</span><br><span class=\"line\">    private static final String TAG &#x3D; MyService.class.getSimpleName();</span><br><span class=\"line\">    private MyBinder myBinder&#x3D;new MyBinder();</span><br><span class=\"line\">    &#x2F;&#x2F;模拟数据</span><br><span class=\"line\">    private int serviceData &#x3D;0;</span><br><span class=\"line\">    &#x2F;&#x2F;是否停止对数据处理</span><br><span class=\"line\">    private boolean isStop&#x3D;false;</span><br><span class=\"line\">    public MyService() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onBind: 开始绑定IBinder&quot;);</span><br><span class=\"line\">        return myBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class MyBinder extends Binder &#123;</span><br><span class=\"line\">        public int  getDataState()&#123;</span><br><span class=\"line\">            return serviceData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void stop(boolean stop)&#123;</span><br><span class=\"line\">            isStop&#x3D;stop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        super.onCreate();</span><br><span class=\"line\">        Log.i(TAG, &quot;onCreate: 开始创建Service&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                while (!isStop)&#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(1000);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (serviceData&gt;30)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    serviceData++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stopSelf();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * onStart()方法是Service的早期方法，onStartCommand()是新的推荐方法</span><br><span class=\"line\">     * @param intent</span><br><span class=\"line\">     * @param flags</span><br><span class=\"line\">     * @param startId</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int onStartCommand(Intent intent,  int flags, int startId) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onStartCommand: 每次调用startService()或者 bindService()方法时，都会回调这个方法&quot;);</span><br><span class=\"line\">            return super.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onDestroy() &#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.i(TAG, &quot;onDestroy: Service开始销毁之前会回调这个方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onUnbind(Intent intent) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onUnbind: 当Service与之绑定的客户端都断开连接时，会回调这个方法&quot;);</span><br><span class=\"line\">        return super.onUnbind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MainActivity.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;绑定并启动service</span><br><span class=\"line\">findViewById(bindService).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View v) &#123;</span><br><span class=\"line\">        startService(i);</span><br><span class=\"line\">        bindService(i,MainActivity.this, BIND_AUTO_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">findViewById(R.id.getServiceData).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View v) &#123;</span><br><span class=\"line\">        int dataState &#x3D; myBinder.getDataState();</span><br><span class=\"line\">        Toast.makeText(MainActivity.this,&quot;Service中数据为--&gt;&quot;+dataState, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService是继承于Service的，跟Service一样也可以执行耗时任务，IntentService封装了线程和消息循环，IntentService中使用HandlerThread来处理，HandlerThread继承了Thread,内部实现使用了Looper和MessageQueue，用法也很简单。 </p>\n</li>\n<li><p>HandlerThread</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerThread myHandlerThread&#x3D;new HandlerThread(&quot;myHandlerThread&quot;);</span><br><span class=\"line\">myHandlerThread.start();</span><br><span class=\"line\">&#x2F;&#x2F;由于获取了HandlerThread中的Loooper，也就是handleMessage会HandlerThread的线程中执行。</span><br><span class=\"line\">Handler myHandler&#x3D;new Handler(myHandlerThread.getLooper())&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">        super.handleMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IntentService的源码解析\"><a href=\"#IntentService的源码解析\" class=\"headerlink\" title=\"IntentService的源码解析\"></a>IntentService的源码解析</h3><p>IntentService封装了HandlerThread，做一个简单分析就可以。</p>\n<blockquote>\n<p>这是IntentService中的一个内部，主要负责异步处理，<code>onHandleIntent((Intent)msg.obj);</code>是IntentService是抽象方法，也就是提供给我们实现异步处理的方法，onHandleIntent执行完成后会自动停止Service。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class ServiceHandler extends Handler &#123;</span><br><span class=\"line\">        public ServiceHandler(Looper looper) &#123;</span><br><span class=\"line\">            super(looper);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">            onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">            stopSelf(msg.arg1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码可以注意HandlerThread的实例化并start，这是service第一次创建时会立即启动一个线程。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onCreate() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; TODO: It would be nice to have an option to hold a partial wakelock</span><br><span class=\"line\">    &#x2F;&#x2F; during processing, and to have a static startService(Context, Intent)</span><br><span class=\"line\">    &#x2F;&#x2F; method that would launch the service &amp; hand off a wakelock.</span><br><span class=\"line\"></span><br><span class=\"line\">    super.onCreate();</span><br><span class=\"line\">    HandlerThread thread &#x3D; new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    mServiceLooper &#x3D; thread.getLooper();</span><br><span class=\"line\">    mServiceHandler &#x3D; new ServiceHandler(mServiceLooper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IntentService的排队处理<br>我们可以看每次启动Service都会发送一个消息，<code>mServiceHandler.sendMessage(msg);</code>，熟悉消息机制的我们知道，多余消息会处于等待状态。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;重点这个方法上</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onStart(@Nullable Intent intent, int startId) &#123;</span><br><span class=\"line\">    Message msg &#x3D; mServiceHandler.obtainMessage();</span><br><span class=\"line\">    msg.arg1 &#x3D; startId;</span><br><span class=\"line\">    msg.obj &#x3D; intent;</span><br><span class=\"line\">    mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * You should not override this method for your IntentService. Instead,</span><br><span class=\"line\"> * override &#123;@link #onHandleIntent&#125;, which the system calls when the IntentService</span><br><span class=\"line\"> * receives a start request.</span><br><span class=\"line\"> * @see android.app.Service#onStartCommand</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</span><br><span class=\"line\">    onStart(intent, startId);</span><br><span class=\"line\">    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><ul>\n<li><p>android5.0以上不允许使用隐式意图的方式启动Service </p>\n</li>\n<li><p>Service是在UI线程中的，所以Service也是不能执行耗时操作的，那么为什么不使用直接在Activity创建线程处理呢？因为如果在Activity退出的情况下，线程执行还未结束，此时所在的进程就变成空进程，系统可能需要内存会优先终止该进程，宿主进程被的终止的话，所在的子线程也会被中止。  </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"http://mouxuejie.com/blog/2016-04-16/service-intentservice-analysis/\" target=\"_blank\" rel=\"noopener\">Service知识总结——某学姐</a></p>\n<h1 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h1><h2 id=\"service生命周期\"><a href=\"#service生命周期\" class=\"headerlink\" title=\"service生命周期\"></a>service生命周期</h2><p>service有两个生命周期，为什么会有两个生命周期呢，这是根据service的启动方式来进行区分的。</p>\n<ul>\n<li><code>Context.startService()</code><br>  通过该方法启动service，访问者与service之间没有关联，即使访问者退出了，service也仍然运行。以下是打印结果</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.app.demoservice I&#x2F;MyService: onCreate: 开始创建Service</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Context.bindService(Intent service,ServiceConnection conn,int flags)</code><br>  使用该方法启动的service,访问者与service绑定在一起，访问者退出，service也就终止了。<br><img src=\"/2017/04/16/Android-Service%E6%80%BB%E7%BB%93/1.jpg\" alt=\"Android Service的两种生命周期\">  </li>\n</ul>","more":"<h2 id=\"service的主要回调方法\"><a href=\"#service的主要回调方法\" class=\"headerlink\" title=\"service的主要回调方法\"></a>service的主要回调方法</h2><ul>\n<li><p><code>IBinder onBind(Intent intent)</code><br>该方法是Service子类必须实现的方法，该方法返回一个IBinder对象，应用程序可通过该对象与Service组件通信。</p>\n</li>\n<li><p><code>void onCreate()</code><br>在该Service第一次被创建后会立即回调该方法  </p>\n</li>\n<li><p><code>void onDestroy</code><br>在该Service被关闭之前会回调该方法  </p>\n</li>\n<li><p><code>void onStartCommand(Intent intent,  int flags, int startId)</code><br>该方法的早期版本是<code>onStart(Intent intent,int startId)</code>,每次客户端调用<code>startService(Intent)</code>方法启动Service，都会回调该方法<br>多次调用startService()，会多次调用onStartCommand()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.app.demoservice I&#x2F;MyService: onCreate: 开始创建Service</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br><span class=\"line\">com.app.demoservice I&#x2F;MyService: onStartCommand: 每次调用startService()方法时，都会回调这个方法</span><br></pre></td></tr></table></figure></li>\n<li><code>void onUnBind(Intent intent)</code><br>当Service与之绑定的客户端都断开连接时，会回调这个方法</li>\n</ul>\n<h2 id=\"绑定本地Service并与之通信\"><a href=\"#绑定本地Service并与之通信\" class=\"headerlink\" title=\"绑定本地Service并与之通信\"></a>绑定本地Service并与之通信</h2><p>使用startService()启动的service，基本不会与访问者有太多的数据交互,所以访问者与service的数据交互最好是，用bindService()去启动这个service。</p>\n<ul>\n<li><p><code>Context.bindService(Intent service,ServiceConnection conn,int flags)</code>  </p>\n<ul>\n<li><p><code>Intent service</code><br>启动的意图  </p>\n</li>\n<li><p><code>ServiceConnection conn</code><br>ServiceConnection一个接口，该对象用于监听访问者与Service之间的状态，当访问者与Service建立连接时，会回调<code>onServiceConnected(ComponentName name, IBinder service)</code>，当Service发生异常或者其他原因中止时，会回调<code>onServiceDisconnected(ComponentName name)</code>，但是访问者主动调用unBindService()方法时并回调onServiceDisconnected();</p>\n</li>\n<li><p><code>int flag</code><br>  此参考代表是否自动创建Service</p>\n<ul>\n<li><code>0</code><br>指定为0时，不自动创建 </li>\n<li><code>Context.BIND_AUTO_CREATE</code><br>指定为这个常量时，表示自动创建Service<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>MyService.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyService extends Service &#123;</span><br><span class=\"line\">    private static final String TAG &#x3D; MyService.class.getSimpleName();</span><br><span class=\"line\">    private MyBinder myBinder&#x3D;new MyBinder();</span><br><span class=\"line\">    &#x2F;&#x2F;模拟数据</span><br><span class=\"line\">    private int serviceData &#x3D;0;</span><br><span class=\"line\">    &#x2F;&#x2F;是否停止对数据处理</span><br><span class=\"line\">    private boolean isStop&#x3D;false;</span><br><span class=\"line\">    public MyService() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onBind: 开始绑定IBinder&quot;);</span><br><span class=\"line\">        return myBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class MyBinder extends Binder &#123;</span><br><span class=\"line\">        public int  getDataState()&#123;</span><br><span class=\"line\">            return serviceData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void stop(boolean stop)&#123;</span><br><span class=\"line\">            isStop&#x3D;stop;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        super.onCreate();</span><br><span class=\"line\">        Log.i(TAG, &quot;onCreate: 开始创建Service&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                while (!isStop)&#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        Thread.sleep(1000);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (serviceData&gt;30)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    serviceData++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stopSelf();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * onStart()方法是Service的早期方法，onStartCommand()是新的推荐方法</span><br><span class=\"line\">     * @param intent</span><br><span class=\"line\">     * @param flags</span><br><span class=\"line\">     * @param startId</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int onStartCommand(Intent intent,  int flags, int startId) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onStartCommand: 每次调用startService()或者 bindService()方法时，都会回调这个方法&quot;);</span><br><span class=\"line\">            return super.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onDestroy() &#123;</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">        Log.i(TAG, &quot;onDestroy: Service开始销毁之前会回调这个方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onUnbind(Intent intent) &#123;</span><br><span class=\"line\">        Log.i(TAG, &quot;onUnbind: 当Service与之绑定的客户端都断开连接时，会回调这个方法&quot;);</span><br><span class=\"line\">        return super.onUnbind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MainActivity.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;绑定并启动service</span><br><span class=\"line\">findViewById(bindService).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View v) &#123;</span><br><span class=\"line\">        startService(i);</span><br><span class=\"line\">        bindService(i,MainActivity.this, BIND_AUTO_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">findViewById(R.id.getServiceData).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View v) &#123;</span><br><span class=\"line\">        int dataState &#x3D; myBinder.getDataState();</span><br><span class=\"line\">        Toast.makeText(MainActivity.this,&quot;Service中数据为--&gt;&quot;+dataState, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService是继承于Service的，跟Service一样也可以执行耗时任务，IntentService封装了线程和消息循环，IntentService中使用HandlerThread来处理，HandlerThread继承了Thread,内部实现使用了Looper和MessageQueue，用法也很简单。 </p>\n</li>\n<li><p>HandlerThread</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerThread myHandlerThread&#x3D;new HandlerThread(&quot;myHandlerThread&quot;);</span><br><span class=\"line\">myHandlerThread.start();</span><br><span class=\"line\">&#x2F;&#x2F;由于获取了HandlerThread中的Loooper，也就是handleMessage会HandlerThread的线程中执行。</span><br><span class=\"line\">Handler myHandler&#x3D;new Handler(myHandlerThread.getLooper())&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">        super.handleMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IntentService的源码解析\"><a href=\"#IntentService的源码解析\" class=\"headerlink\" title=\"IntentService的源码解析\"></a>IntentService的源码解析</h3><p>IntentService封装了HandlerThread，做一个简单分析就可以。</p>\n<blockquote>\n<p>这是IntentService中的一个内部，主要负责异步处理，<code>onHandleIntent((Intent)msg.obj);</code>是IntentService是抽象方法，也就是提供给我们实现异步处理的方法，onHandleIntent执行完成后会自动停止Service。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class ServiceHandler extends Handler &#123;</span><br><span class=\"line\">        public ServiceHandler(Looper looper) &#123;</span><br><span class=\"line\">            super(looper);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">            onHandleIntent((Intent)msg.obj);</span><br><span class=\"line\">            stopSelf(msg.arg1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码可以注意HandlerThread的实例化并start，这是service第一次创建时会立即启动一个线程。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onCreate() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; TODO: It would be nice to have an option to hold a partial wakelock</span><br><span class=\"line\">    &#x2F;&#x2F; during processing, and to have a static startService(Context, Intent)</span><br><span class=\"line\">    &#x2F;&#x2F; method that would launch the service &amp; hand off a wakelock.</span><br><span class=\"line\"></span><br><span class=\"line\">    super.onCreate();</span><br><span class=\"line\">    HandlerThread thread &#x3D; new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    mServiceLooper &#x3D; thread.getLooper();</span><br><span class=\"line\">    mServiceHandler &#x3D; new ServiceHandler(mServiceLooper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IntentService的排队处理<br>我们可以看每次启动Service都会发送一个消息，<code>mServiceHandler.sendMessage(msg);</code>，熟悉消息机制的我们知道，多余消息会处于等待状态。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;重点这个方法上</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onStart(@Nullable Intent intent, int startId) &#123;</span><br><span class=\"line\">    Message msg &#x3D; mServiceHandler.obtainMessage();</span><br><span class=\"line\">    msg.arg1 &#x3D; startId;</span><br><span class=\"line\">    msg.obj &#x3D; intent;</span><br><span class=\"line\">    mServiceHandler.sendMessage(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * You should not override this method for your IntentService. Instead,</span><br><span class=\"line\"> * override &#123;@link #onHandleIntent&#125;, which the system calls when the IntentService</span><br><span class=\"line\"> * receives a start request.</span><br><span class=\"line\"> * @see android.app.Service#onStartCommand</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public int onStartCommand(@Nullable Intent intent, int flags, int startId) &#123;</span><br><span class=\"line\">    onStart(intent, startId);</span><br><span class=\"line\">    return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><ul>\n<li><p>android5.0以上不允许使用隐式意图的方式启动Service </p>\n</li>\n<li><p>Service是在UI线程中的，所以Service也是不能执行耗时操作的，那么为什么不使用直接在Activity创建线程处理呢？因为如果在Activity退出的情况下，线程执行还未结束，此时所在的进程就变成空进程，系统可能需要内存会优先终止该进程，宿主进程被的终止的话，所在的子线程也会被中止。  </p>\n</li>\n</ul>"},{"title":"viewpager在最后一页滑动之后，跳转到主页面","date":"2018-05-26T14:52:01.000Z","_content":"\n# viewpager在最后一页滑动之后，跳转到主页面\n\n## 思路\n\n主要有是两个监听，\n一是addOnPageChangeListener();二是setOnTouchListener()；\n\naddOnPageChangeListener()主要是为了获取position(滑动到了第几页)\n\nsetOnTouchListener()主要是判断在最后一页中是否向左滑动了，然后进入主页\n\n<!-- more -->\n\n## 主要功能代码\n### addOnPageChangeListener();\n\n```\nviewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n                currentItem = position;//获取位置，即第几页\n                Log.i(\"Guide\",\"监听改变\"+position);\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n\n            }\n        });\n```\n### setOnTouchListener()；\n\n```\nviewPager.setOnTouchListener(new View.OnTouchListener() {\n            float startX;\n            float startY;//没有用到\n            float endX;\n            float endY;//没有用到\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()){\n                    case MotionEvent.ACTION_DOWN:\n                        startX=event.getX();\n                        startY=event.getY();\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        endX=event.getX();\n                        endY=event.getY();\n                     WindowManager windowManager= (WindowManager)                                   getApplicationContext().getSystemService(Context.WINDOW_SERVICE);\n       \n                        //获取屏幕的宽度\n                 Point size = new Point();\n                 windowManager.getDefaultDisplay().getSize(size);\n                        int width=size.x;\n                        \n //首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）\nif(currentItem==(imageViews.size()-1)&&startX-endX>=(width/4)){\n       Log.i(LOG,\"进入了触摸\");\n       goToMainActivity();//进入主页\n                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);//这部分代码是切换Activity时的动画，看起来就不会很生硬\n                        }\n                        break;\n                }\n                return false;\n            }\n        });\n```\n## 以下是全部代码\n### GuideActivity\n\n```\npackage com.tc.mobileshop;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Point;\nimport android.support.v4.view.PagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Display;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.WindowManager;\nimport android.widget.ImageView;\n\nimport com.tc.mobileshop.utils.DisplayUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GuideActivity extends AppCompatActivity {\n    private static final String LOG = \"GuideActivity\";\n    int touchCount;\n    int currentItem;\n    List<Integer> imageIDList;\n    List<ImageView> imageViews;\n    ViewPager viewPager;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_guide);\n        //初始化引导数据\n        initGuideData();\n        //初始化引导页\n        initGuideView();\n        //初始化分页控件\n        iniView();\n    }\n\n\n    /**\n     * 初始化引导页数据\n     */\n    private void initGuideData() {\n        imageIDList = new ArrayList();\n        imageIDList.add(R.mipmap.apk_img1);\n        imageIDList.add(R.mipmap.apk_img2);\n        imageIDList.add(R.mipmap.apk_img3);\n    }\n\n    /**\n     * 初始化引导页\n     */\n    private void initGuideView() {\n        imageViews = new ArrayList<>();\n        for (int i = 0; i < imageIDList.size(); i++) {\n            imageViews.add(new ImageView(this));\n        }\n    }\n\n    /**\n     * 初始化分页控件\n     */\n    private void iniView() {\n        viewPager = (ViewPager) findViewById(R.id.guide_pager);\n        viewPager.setAdapter(new GuideAdapter());\n        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n                currentItem = position;\n                Log.i(\"Guide\",\"监听改变\"+position);\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n\n            }\n        });\n        viewPager.setOnTouchListener(new View.OnTouchListener() {\n            float startX;\n            float startY;\n            float endX;\n            float endY;\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()){\n                    case MotionEvent.ACTION_DOWN:\n                        startX=event.getX();\n                        startY=event.getY();\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        endX=event.getX();\n                        endY=event.getY();\n                        WindowManager windowManager= (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);\n                        //获取屏幕的宽度\n                        Point size = new Point();\n                        windowManager.getDefaultDisplay().getSize(size);\n                        int width=size.x;\n                        //首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）\n                        if(currentItem==(imageViews.size()-1)&&startX-endX>0&&startX-endX>=(width/4)){\n                            Log.i(LOG,\"进入了触摸\");\n                            goToMainActivity();\n                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);\n                        }\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    private void goToMainActivity() {\n        Intent intent=new Intent(this,MainActivity.class);\n        startActivity(intent);\n        finish();\n    }\n\n    /**\n     * Viewpager适配器\n     */\n    private class GuideAdapter extends PagerAdapter {\n\n        @Override\n        public int getCount() {\n            return imageViews.size();\n        }\n\n        /**\n         * 判断当前分页是不是view\n         * 由于ViewPager里面的分页可以填入Fragment\n         *\n         * @param view\n         * @param object\n         * @return\n         */\n        @Override\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n\n        /**\n         * 清理内存\n         * 从第一页滑动到第二页，此时第一页的内存应该释放\n         *\n         * @param container\n         * @param position\n         * @param object\n         */\n        @Override\n        public void destroyItem(ViewGroup container, int position, Object object) {\n           container.removeView(imageViews.get(position));//释放滑动过后的前一页\n        }\n\n        /**\n         * 得到---->暂时是没有用的\n         *\n         * @param object\n         * @return\n         */\n        @Override\n        public int getItemPosition(Object object) {\n            return super.getItemPosition(object);\n        }\n\n        /**\n         * 初始化分页\n         *\n         * @param container\n         * @param position\n         * @return\n         */\n        @Override\n        public Object instantiateItem(ViewGroup container, int position) {\n            ImageView imageView = imageViews.get(position);\n            imageView.setImageResource(imageIDList.get(position));\n            ViewGroup.LayoutParams viewLayoutParams = new ViewGroup.LayoutParams\n                    (\n                            DisplayUtils.dip2px(GuideActivity.this, 170),\n                            DisplayUtils.dip2px(GuideActivity.this, 200)\n                    );\n            container.addView(imageView,viewLayoutParams);//设置图片的宽高\n\n            return imageView;\n        }\n    }\n}\n\n```\n### 以下为动画资源代码\n#### slide_in_left.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1000\"\n        android:fromXDelta=\"0%p\"\n        android:toXDelta=\"-100%\"\n        />\n\n</set>\n```\n####slide_in_right.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1000\"\n        android:fromXDelta=\"100%p\"\n        android:toXDelta=\"0\"\n        />\n\n</set>\n```\n#### 以下是动画效果\n![这里写图片描述](viewpager在最后一页滑动之后，跳转到主页面/20160731130745293.gif)","source":"_posts/viewpager在最后一页滑动之后，跳转到主页面.md","raw":"---\ntitle: viewpager在最后一页滑动之后，跳转到主页面\ndate: 2018-05-26 22:52:01\ncategories:\n  - android\n  - widget\ntags:\n  - android\n  - widget\n---\n\n# viewpager在最后一页滑动之后，跳转到主页面\n\n## 思路\n\n主要有是两个监听，\n一是addOnPageChangeListener();二是setOnTouchListener()；\n\naddOnPageChangeListener()主要是为了获取position(滑动到了第几页)\n\nsetOnTouchListener()主要是判断在最后一页中是否向左滑动了，然后进入主页\n\n<!-- more -->\n\n## 主要功能代码\n### addOnPageChangeListener();\n\n```\nviewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n                currentItem = position;//获取位置，即第几页\n                Log.i(\"Guide\",\"监听改变\"+position);\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n\n            }\n        });\n```\n### setOnTouchListener()；\n\n```\nviewPager.setOnTouchListener(new View.OnTouchListener() {\n            float startX;\n            float startY;//没有用到\n            float endX;\n            float endY;//没有用到\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()){\n                    case MotionEvent.ACTION_DOWN:\n                        startX=event.getX();\n                        startY=event.getY();\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        endX=event.getX();\n                        endY=event.getY();\n                     WindowManager windowManager= (WindowManager)                                   getApplicationContext().getSystemService(Context.WINDOW_SERVICE);\n       \n                        //获取屏幕的宽度\n                 Point size = new Point();\n                 windowManager.getDefaultDisplay().getSize(size);\n                        int width=size.x;\n                        \n //首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）\nif(currentItem==(imageViews.size()-1)&&startX-endX>=(width/4)){\n       Log.i(LOG,\"进入了触摸\");\n       goToMainActivity();//进入主页\n                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);//这部分代码是切换Activity时的动画，看起来就不会很生硬\n                        }\n                        break;\n                }\n                return false;\n            }\n        });\n```\n## 以下是全部代码\n### GuideActivity\n\n```\npackage com.tc.mobileshop;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Point;\nimport android.support.v4.view.PagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Display;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.WindowManager;\nimport android.widget.ImageView;\n\nimport com.tc.mobileshop.utils.DisplayUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GuideActivity extends AppCompatActivity {\n    private static final String LOG = \"GuideActivity\";\n    int touchCount;\n    int currentItem;\n    List<Integer> imageIDList;\n    List<ImageView> imageViews;\n    ViewPager viewPager;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_guide);\n        //初始化引导数据\n        initGuideData();\n        //初始化引导页\n        initGuideView();\n        //初始化分页控件\n        iniView();\n    }\n\n\n    /**\n     * 初始化引导页数据\n     */\n    private void initGuideData() {\n        imageIDList = new ArrayList();\n        imageIDList.add(R.mipmap.apk_img1);\n        imageIDList.add(R.mipmap.apk_img2);\n        imageIDList.add(R.mipmap.apk_img3);\n    }\n\n    /**\n     * 初始化引导页\n     */\n    private void initGuideView() {\n        imageViews = new ArrayList<>();\n        for (int i = 0; i < imageIDList.size(); i++) {\n            imageViews.add(new ImageView(this));\n        }\n    }\n\n    /**\n     * 初始化分页控件\n     */\n    private void iniView() {\n        viewPager = (ViewPager) findViewById(R.id.guide_pager);\n        viewPager.setAdapter(new GuideAdapter());\n        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n            @Override\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\n            }\n\n            @Override\n            public void onPageSelected(int position) {\n                currentItem = position;\n                Log.i(\"Guide\",\"监听改变\"+position);\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int state) {\n\n            }\n        });\n        viewPager.setOnTouchListener(new View.OnTouchListener() {\n            float startX;\n            float startY;\n            float endX;\n            float endY;\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()){\n                    case MotionEvent.ACTION_DOWN:\n                        startX=event.getX();\n                        startY=event.getY();\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        endX=event.getX();\n                        endY=event.getY();\n                        WindowManager windowManager= (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);\n                        //获取屏幕的宽度\n                        Point size = new Point();\n                        windowManager.getDefaultDisplay().getSize(size);\n                        int width=size.x;\n                        //首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）\n                        if(currentItem==(imageViews.size()-1)&&startX-endX>0&&startX-endX>=(width/4)){\n                            Log.i(LOG,\"进入了触摸\");\n                            goToMainActivity();\n                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);\n                        }\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n\n    private void goToMainActivity() {\n        Intent intent=new Intent(this,MainActivity.class);\n        startActivity(intent);\n        finish();\n    }\n\n    /**\n     * Viewpager适配器\n     */\n    private class GuideAdapter extends PagerAdapter {\n\n        @Override\n        public int getCount() {\n            return imageViews.size();\n        }\n\n        /**\n         * 判断当前分页是不是view\n         * 由于ViewPager里面的分页可以填入Fragment\n         *\n         * @param view\n         * @param object\n         * @return\n         */\n        @Override\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n\n        /**\n         * 清理内存\n         * 从第一页滑动到第二页，此时第一页的内存应该释放\n         *\n         * @param container\n         * @param position\n         * @param object\n         */\n        @Override\n        public void destroyItem(ViewGroup container, int position, Object object) {\n           container.removeView(imageViews.get(position));//释放滑动过后的前一页\n        }\n\n        /**\n         * 得到---->暂时是没有用的\n         *\n         * @param object\n         * @return\n         */\n        @Override\n        public int getItemPosition(Object object) {\n            return super.getItemPosition(object);\n        }\n\n        /**\n         * 初始化分页\n         *\n         * @param container\n         * @param position\n         * @return\n         */\n        @Override\n        public Object instantiateItem(ViewGroup container, int position) {\n            ImageView imageView = imageViews.get(position);\n            imageView.setImageResource(imageIDList.get(position));\n            ViewGroup.LayoutParams viewLayoutParams = new ViewGroup.LayoutParams\n                    (\n                            DisplayUtils.dip2px(GuideActivity.this, 170),\n                            DisplayUtils.dip2px(GuideActivity.this, 200)\n                    );\n            container.addView(imageView,viewLayoutParams);//设置图片的宽高\n\n            return imageView;\n        }\n    }\n}\n\n```\n### 以下为动画资源代码\n#### slide_in_left.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1000\"\n        android:fromXDelta=\"0%p\"\n        android:toXDelta=\"-100%\"\n        />\n\n</set>\n```\n####slide_in_right.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <translate\n        android:duration=\"1000\"\n        android:fromXDelta=\"100%p\"\n        android:toXDelta=\"0\"\n        />\n\n</set>\n```\n#### 以下是动画效果\n![这里写图片描述](viewpager在最后一页滑动之后，跳转到主页面/20160731130745293.gif)","slug":"viewpager在最后一页滑动之后，跳转到主页面","published":1,"updated":"2019-05-05T09:43:39.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncijf0037y8us8tv2f8ip","content":"<h1 id=\"viewpager在最后一页滑动之后，跳转到主页面\"><a href=\"#viewpager在最后一页滑动之后，跳转到主页面\" class=\"headerlink\" title=\"viewpager在最后一页滑动之后，跳转到主页面\"></a>viewpager在最后一页滑动之后，跳转到主页面</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>主要有是两个监听，<br>一是addOnPageChangeListener();二是setOnTouchListener()；</p>\n<p>addOnPageChangeListener()主要是为了获取position(滑动到了第几页)</p>\n<p>setOnTouchListener()主要是判断在最后一页中是否向左滑动了，然后进入主页</p>\n<a id=\"more\"></a>\n<h2 id=\"主要功能代码\"><a href=\"#主要功能代码\" class=\"headerlink\" title=\"主要功能代码\"></a>主要功能代码</h2><h3 id=\"addOnPageChangeListener\"><a href=\"#addOnPageChangeListener\" class=\"headerlink\" title=\"addOnPageChangeListener();\"></a>addOnPageChangeListener();</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageSelected(int position) &#123;</span><br><span class=\"line\">                currentItem &#x3D; position;&#x2F;&#x2F;获取位置，即第几页</span><br><span class=\"line\">                Log.i(&quot;Guide&quot;,&quot;监听改变&quot;+position);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrollStateChanged(int state) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"setOnTouchListener-；\"><a href=\"#setOnTouchListener-；\" class=\"headerlink\" title=\"setOnTouchListener()；\"></a>setOnTouchListener()；</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewPager.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class=\"line\">            float startX;</span><br><span class=\"line\">            float startY;&#x2F;&#x2F;没有用到</span><br><span class=\"line\">            float endX;</span><br><span class=\"line\">            float endY;&#x2F;&#x2F;没有用到</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class=\"line\">                switch (event.getAction())&#123;</span><br><span class=\"line\">                    case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                        startX&#x3D;event.getX();</span><br><span class=\"line\">                        startY&#x3D;event.getY();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                        endX&#x3D;event.getX();</span><br><span class=\"line\">                        endY&#x3D;event.getY();</span><br><span class=\"line\">                     WindowManager windowManager&#x3D; (WindowManager)                                   getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">       </span><br><span class=\"line\">                        &#x2F;&#x2F;获取屏幕的宽度</span><br><span class=\"line\">                 Point size &#x3D; new Point();</span><br><span class=\"line\">                 windowManager.getDefaultDisplay().getSize(size);</span><br><span class=\"line\">                        int width&#x3D;size.x;</span><br><span class=\"line\">                        </span><br><span class=\"line\"> &#x2F;&#x2F;首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）</span><br><span class=\"line\">if(currentItem&#x3D;&#x3D;(imageViews.size()-1)&amp;&amp;startX-endX&gt;&#x3D;(width&#x2F;4))&#123;</span><br><span class=\"line\">       Log.i(LOG,&quot;进入了触摸&quot;);</span><br><span class=\"line\">       goToMainActivity();&#x2F;&#x2F;进入主页</span><br><span class=\"line\">                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);&#x2F;&#x2F;这部分代码是切换Activity时的动画，看起来就不会很生硬</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下是全部代码\"><a href=\"#以下是全部代码\" class=\"headerlink\" title=\"以下是全部代码\"></a>以下是全部代码</h2><h3 id=\"GuideActivity\"><a href=\"#GuideActivity\" class=\"headerlink\" title=\"GuideActivity\"></a>GuideActivity</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.tc.mobileshop;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.graphics.Point;</span><br><span class=\"line\">import android.support.v4.view.PagerAdapter;</span><br><span class=\"line\">import android.support.v4.view.ViewPager;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.Display;</span><br><span class=\"line\">import android.view.MotionEvent;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.view.ViewGroup;</span><br><span class=\"line\">import android.view.WindowManager;</span><br><span class=\"line\">import android.widget.ImageView;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.tc.mobileshop.utils.DisplayUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class GuideActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    private static final String LOG &#x3D; &quot;GuideActivity&quot;;</span><br><span class=\"line\">    int touchCount;</span><br><span class=\"line\">    int currentItem;</span><br><span class=\"line\">    List&lt;Integer&gt; imageIDList;</span><br><span class=\"line\">    List&lt;ImageView&gt; imageViews;</span><br><span class=\"line\">    ViewPager viewPager;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_guide);</span><br><span class=\"line\">        &#x2F;&#x2F;初始化引导数据</span><br><span class=\"line\">        initGuideData();</span><br><span class=\"line\">        &#x2F;&#x2F;初始化引导页</span><br><span class=\"line\">        initGuideView();</span><br><span class=\"line\">        &#x2F;&#x2F;初始化分页控件</span><br><span class=\"line\">        iniView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化引导页数据</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void initGuideData() &#123;</span><br><span class=\"line\">        imageIDList &#x3D; new ArrayList();</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img1);</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img2);</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化引导页</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void initGuideView() &#123;</span><br><span class=\"line\">        imageViews &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; imageIDList.size(); i++) &#123;</span><br><span class=\"line\">            imageViews.add(new ImageView(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化分页控件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void iniView() &#123;</span><br><span class=\"line\">        viewPager &#x3D; (ViewPager) findViewById(R.id.guide_pager);</span><br><span class=\"line\">        viewPager.setAdapter(new GuideAdapter());</span><br><span class=\"line\">        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageSelected(int position) &#123;</span><br><span class=\"line\">                currentItem &#x3D; position;</span><br><span class=\"line\">                Log.i(&quot;Guide&quot;,&quot;监听改变&quot;+position);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrollStateChanged(int state) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        viewPager.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class=\"line\">            float startX;</span><br><span class=\"line\">            float startY;</span><br><span class=\"line\">            float endX;</span><br><span class=\"line\">            float endY;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class=\"line\">                switch (event.getAction())&#123;</span><br><span class=\"line\">                    case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                        startX&#x3D;event.getX();</span><br><span class=\"line\">                        startY&#x3D;event.getY();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                        endX&#x3D;event.getX();</span><br><span class=\"line\">                        endY&#x3D;event.getY();</span><br><span class=\"line\">                        WindowManager windowManager&#x3D; (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">                        &#x2F;&#x2F;获取屏幕的宽度</span><br><span class=\"line\">                        Point size &#x3D; new Point();</span><br><span class=\"line\">                        windowManager.getDefaultDisplay().getSize(size);</span><br><span class=\"line\">                        int width&#x3D;size.x;</span><br><span class=\"line\">                        &#x2F;&#x2F;首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）</span><br><span class=\"line\">                        if(currentItem&#x3D;&#x3D;(imageViews.size()-1)&amp;&amp;startX-endX&gt;0&amp;&amp;startX-endX&gt;&#x3D;(width&#x2F;4))&#123;</span><br><span class=\"line\">                            Log.i(LOG,&quot;进入了触摸&quot;);</span><br><span class=\"line\">                            goToMainActivity();</span><br><span class=\"line\">                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void goToMainActivity() &#123;</span><br><span class=\"line\">        Intent intent&#x3D;new Intent(this,MainActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Viewpager适配器</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private class GuideAdapter extends PagerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int getCount() &#123;</span><br><span class=\"line\">            return imageViews.size();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 判断当前分页是不是view</span><br><span class=\"line\">         * 由于ViewPager里面的分页可以填入Fragment</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param view</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean isViewFromObject(View view, Object object) &#123;</span><br><span class=\"line\">            return view &#x3D;&#x3D; object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 清理内存</span><br><span class=\"line\">         * 从第一页滑动到第二页，此时第一页的内存应该释放</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param container</span><br><span class=\"line\">         * @param position</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void destroyItem(ViewGroup container, int position, Object object) &#123;</span><br><span class=\"line\">           container.removeView(imageViews.get(position));&#x2F;&#x2F;释放滑动过后的前一页</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 得到----&gt;暂时是没有用的</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int getItemPosition(Object object) &#123;</span><br><span class=\"line\">            return super.getItemPosition(object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 初始化分页</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param container</span><br><span class=\"line\">         * @param position</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Object instantiateItem(ViewGroup container, int position) &#123;</span><br><span class=\"line\">            ImageView imageView &#x3D; imageViews.get(position);</span><br><span class=\"line\">            imageView.setImageResource(imageIDList.get(position));</span><br><span class=\"line\">            ViewGroup.LayoutParams viewLayoutParams &#x3D; new ViewGroup.LayoutParams</span><br><span class=\"line\">                    (</span><br><span class=\"line\">                            DisplayUtils.dip2px(GuideActivity.this, 170),</span><br><span class=\"line\">                            DisplayUtils.dip2px(GuideActivity.this, 200)</span><br><span class=\"line\">                    );</span><br><span class=\"line\">            container.addView(imageView,viewLayoutParams);&#x2F;&#x2F;设置图片的宽高</span><br><span class=\"line\"></span><br><span class=\"line\">            return imageView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"以下为动画资源代码\"><a href=\"#以下为动画资源代码\" class=\"headerlink\" title=\"以下为动画资源代码\"></a>以下为动画资源代码</h3><h4 id=\"slide-in-left-xml\"><a href=\"#slide-in-left-xml\" class=\"headerlink\" title=\"slide_in_left.xml\"></a>slide_in_left.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;translate</span><br><span class=\"line\">        android:duration&#x3D;&quot;1000&quot;</span><br><span class=\"line\">        android:fromXDelta&#x3D;&quot;0%p&quot;</span><br><span class=\"line\">        android:toXDelta&#x3D;&quot;-100%&quot;</span><br><span class=\"line\">        &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>\n<p>####slide_in_right.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;translate</span><br><span class=\"line\">        android:duration&#x3D;&quot;1000&quot;</span><br><span class=\"line\">        android:fromXDelta&#x3D;&quot;100%p&quot;</span><br><span class=\"line\">        android:toXDelta&#x3D;&quot;0&quot;</span><br><span class=\"line\">        &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"以下是动画效果\"><a href=\"#以下是动画效果\" class=\"headerlink\" title=\"以下是动画效果\"></a>以下是动画效果</h4><p><img src=\"/2018/05/26/viewpager%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E9%A1%B5%E6%BB%91%E5%8A%A8%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%BB%E9%A1%B5%E9%9D%A2/20160731130745293.gif\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"viewpager在最后一页滑动之后，跳转到主页面\"><a href=\"#viewpager在最后一页滑动之后，跳转到主页面\" class=\"headerlink\" title=\"viewpager在最后一页滑动之后，跳转到主页面\"></a>viewpager在最后一页滑动之后，跳转到主页面</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>主要有是两个监听，<br>一是addOnPageChangeListener();二是setOnTouchListener()；</p>\n<p>addOnPageChangeListener()主要是为了获取position(滑动到了第几页)</p>\n<p>setOnTouchListener()主要是判断在最后一页中是否向左滑动了，然后进入主页</p>","more":"<h2 id=\"主要功能代码\"><a href=\"#主要功能代码\" class=\"headerlink\" title=\"主要功能代码\"></a>主要功能代码</h2><h3 id=\"addOnPageChangeListener\"><a href=\"#addOnPageChangeListener\" class=\"headerlink\" title=\"addOnPageChangeListener();\"></a>addOnPageChangeListener();</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageSelected(int position) &#123;</span><br><span class=\"line\">                currentItem &#x3D; position;&#x2F;&#x2F;获取位置，即第几页</span><br><span class=\"line\">                Log.i(&quot;Guide&quot;,&quot;监听改变&quot;+position);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrollStateChanged(int state) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"setOnTouchListener-；\"><a href=\"#setOnTouchListener-；\" class=\"headerlink\" title=\"setOnTouchListener()；\"></a>setOnTouchListener()；</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewPager.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class=\"line\">            float startX;</span><br><span class=\"line\">            float startY;&#x2F;&#x2F;没有用到</span><br><span class=\"line\">            float endX;</span><br><span class=\"line\">            float endY;&#x2F;&#x2F;没有用到</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class=\"line\">                switch (event.getAction())&#123;</span><br><span class=\"line\">                    case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                        startX&#x3D;event.getX();</span><br><span class=\"line\">                        startY&#x3D;event.getY();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                        endX&#x3D;event.getX();</span><br><span class=\"line\">                        endY&#x3D;event.getY();</span><br><span class=\"line\">                     WindowManager windowManager&#x3D; (WindowManager)                                   getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">       </span><br><span class=\"line\">                        &#x2F;&#x2F;获取屏幕的宽度</span><br><span class=\"line\">                 Point size &#x3D; new Point();</span><br><span class=\"line\">                 windowManager.getDefaultDisplay().getSize(size);</span><br><span class=\"line\">                        int width&#x3D;size.x;</span><br><span class=\"line\">                        </span><br><span class=\"line\"> &#x2F;&#x2F;首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）</span><br><span class=\"line\">if(currentItem&#x3D;&#x3D;(imageViews.size()-1)&amp;&amp;startX-endX&gt;&#x3D;(width&#x2F;4))&#123;</span><br><span class=\"line\">       Log.i(LOG,&quot;进入了触摸&quot;);</span><br><span class=\"line\">       goToMainActivity();&#x2F;&#x2F;进入主页</span><br><span class=\"line\">                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);&#x2F;&#x2F;这部分代码是切换Activity时的动画，看起来就不会很生硬</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"以下是全部代码\"><a href=\"#以下是全部代码\" class=\"headerlink\" title=\"以下是全部代码\"></a>以下是全部代码</h2><h3 id=\"GuideActivity\"><a href=\"#GuideActivity\" class=\"headerlink\" title=\"GuideActivity\"></a>GuideActivity</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.tc.mobileshop;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.content.Intent;</span><br><span class=\"line\">import android.graphics.Point;</span><br><span class=\"line\">import android.support.v4.view.PagerAdapter;</span><br><span class=\"line\">import android.support.v4.view.ViewPager;</span><br><span class=\"line\">import android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">import android.util.Log;</span><br><span class=\"line\">import android.view.Display;</span><br><span class=\"line\">import android.view.MotionEvent;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.view.ViewGroup;</span><br><span class=\"line\">import android.view.WindowManager;</span><br><span class=\"line\">import android.widget.ImageView;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.tc.mobileshop.utils.DisplayUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class GuideActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    private static final String LOG &#x3D; &quot;GuideActivity&quot;;</span><br><span class=\"line\">    int touchCount;</span><br><span class=\"line\">    int currentItem;</span><br><span class=\"line\">    List&lt;Integer&gt; imageIDList;</span><br><span class=\"line\">    List&lt;ImageView&gt; imageViews;</span><br><span class=\"line\">    ViewPager viewPager;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_guide);</span><br><span class=\"line\">        &#x2F;&#x2F;初始化引导数据</span><br><span class=\"line\">        initGuideData();</span><br><span class=\"line\">        &#x2F;&#x2F;初始化引导页</span><br><span class=\"line\">        initGuideView();</span><br><span class=\"line\">        &#x2F;&#x2F;初始化分页控件</span><br><span class=\"line\">        iniView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化引导页数据</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void initGuideData() &#123;</span><br><span class=\"line\">        imageIDList &#x3D; new ArrayList();</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img1);</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img2);</span><br><span class=\"line\">        imageIDList.add(R.mipmap.apk_img3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化引导页</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void initGuideView() &#123;</span><br><span class=\"line\">        imageViews &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; imageIDList.size(); i++) &#123;</span><br><span class=\"line\">            imageViews.add(new ImageView(this));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 初始化分页控件</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private void iniView() &#123;</span><br><span class=\"line\">        viewPager &#x3D; (ViewPager) findViewById(R.id.guide_pager);</span><br><span class=\"line\">        viewPager.setAdapter(new GuideAdapter());</span><br><span class=\"line\">        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageSelected(int position) &#123;</span><br><span class=\"line\">                currentItem &#x3D; position;</span><br><span class=\"line\">                Log.i(&quot;Guide&quot;,&quot;监听改变&quot;+position);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onPageScrollStateChanged(int state) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        viewPager.setOnTouchListener(new View.OnTouchListener() &#123;</span><br><span class=\"line\">            float startX;</span><br><span class=\"line\">            float startY;</span><br><span class=\"line\">            float endX;</span><br><span class=\"line\">            float endY;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class=\"line\">                switch (event.getAction())&#123;</span><br><span class=\"line\">                    case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                        startX&#x3D;event.getX();</span><br><span class=\"line\">                        startY&#x3D;event.getY();</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                        endX&#x3D;event.getX();</span><br><span class=\"line\">                        endY&#x3D;event.getY();</span><br><span class=\"line\">                        WindowManager windowManager&#x3D; (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">                        &#x2F;&#x2F;获取屏幕的宽度</span><br><span class=\"line\">                        Point size &#x3D; new Point();</span><br><span class=\"line\">                        windowManager.getDefaultDisplay().getSize(size);</span><br><span class=\"line\">                        int width&#x3D;size.x;</span><br><span class=\"line\">                        &#x2F;&#x2F;首先要确定的是，是否到了最后一页，然后判断是否向左滑动，并且滑动距离是否符合，我这里的判断距离是屏幕宽度的4分之一（这里可以适当控制）</span><br><span class=\"line\">                        if(currentItem&#x3D;&#x3D;(imageViews.size()-1)&amp;&amp;startX-endX&gt;0&amp;&amp;startX-endX&gt;&#x3D;(width&#x2F;4))&#123;</span><br><span class=\"line\">                            Log.i(LOG,&quot;进入了触摸&quot;);</span><br><span class=\"line\">                            goToMainActivity();</span><br><span class=\"line\">                            overridePendingTransition(R.anim.slide_in_right,R.anim.slide_in_left);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void goToMainActivity() &#123;</span><br><span class=\"line\">        Intent intent&#x3D;new Intent(this,MainActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Viewpager适配器</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    private class GuideAdapter extends PagerAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int getCount() &#123;</span><br><span class=\"line\">            return imageViews.size();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 判断当前分页是不是view</span><br><span class=\"line\">         * 由于ViewPager里面的分页可以填入Fragment</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param view</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean isViewFromObject(View view, Object object) &#123;</span><br><span class=\"line\">            return view &#x3D;&#x3D; object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 清理内存</span><br><span class=\"line\">         * 从第一页滑动到第二页，此时第一页的内存应该释放</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param container</span><br><span class=\"line\">         * @param position</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void destroyItem(ViewGroup container, int position, Object object) &#123;</span><br><span class=\"line\">           container.removeView(imageViews.get(position));&#x2F;&#x2F;释放滑动过后的前一页</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 得到----&gt;暂时是没有用的</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param object</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public int getItemPosition(Object object) &#123;</span><br><span class=\"line\">            return super.getItemPosition(object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 初始化分页</span><br><span class=\"line\">         *</span><br><span class=\"line\">         * @param container</span><br><span class=\"line\">         * @param position</span><br><span class=\"line\">         * @return</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public Object instantiateItem(ViewGroup container, int position) &#123;</span><br><span class=\"line\">            ImageView imageView &#x3D; imageViews.get(position);</span><br><span class=\"line\">            imageView.setImageResource(imageIDList.get(position));</span><br><span class=\"line\">            ViewGroup.LayoutParams viewLayoutParams &#x3D; new ViewGroup.LayoutParams</span><br><span class=\"line\">                    (</span><br><span class=\"line\">                            DisplayUtils.dip2px(GuideActivity.this, 170),</span><br><span class=\"line\">                            DisplayUtils.dip2px(GuideActivity.this, 200)</span><br><span class=\"line\">                    );</span><br><span class=\"line\">            container.addView(imageView,viewLayoutParams);&#x2F;&#x2F;设置图片的宽高</span><br><span class=\"line\"></span><br><span class=\"line\">            return imageView;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"以下为动画资源代码\"><a href=\"#以下为动画资源代码\" class=\"headerlink\" title=\"以下为动画资源代码\"></a>以下为动画资源代码</h3><h4 id=\"slide-in-left-xml\"><a href=\"#slide-in-left-xml\" class=\"headerlink\" title=\"slide_in_left.xml\"></a>slide_in_left.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;translate</span><br><span class=\"line\">        android:duration&#x3D;&quot;1000&quot;</span><br><span class=\"line\">        android:fromXDelta&#x3D;&quot;0%p&quot;</span><br><span class=\"line\">        android:toXDelta&#x3D;&quot;-100%&quot;</span><br><span class=\"line\">        &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>\n<p>####slide_in_right.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class=\"line\">    &lt;translate</span><br><span class=\"line\">        android:duration&#x3D;&quot;1000&quot;</span><br><span class=\"line\">        android:fromXDelta&#x3D;&quot;100%p&quot;</span><br><span class=\"line\">        android:toXDelta&#x3D;&quot;0&quot;</span><br><span class=\"line\">        &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"以下是动画效果\"><a href=\"#以下是动画效果\" class=\"headerlink\" title=\"以下是动画效果\"></a>以下是动画效果</h4><p><img src=\"/2018/05/26/viewpager%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E9%A1%B5%E6%BB%91%E5%8A%A8%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%BB%E9%A1%B5%E9%9D%A2/20160731130745293.gif\" alt=\"这里写图片描述\"></p>"},{"title":"如何在github上创建个人博客？","date":"2017-01-26T17:13:43.000Z","_content":"\n摘要:\n    个人如何创建免费博客呢？github就有为用户提供创建个人博客的机会，如果你是一个开发者完全可以为自己定义一个个人博客。\n<!--more-->\n正文:\n\n  [文章来自于hifor的博客](http://hifor.net/2015/07/01/零基础免费搭建个人博客-hexo-github/)\n  # 如何在github创建个人博客？\n  [TOC]\n  ## git和node.js的安装就不解释了\n  ```\n  # 查看安装是否成功\n  git --version\n  node -v\n  npm -v\n  ```\n  ![这里写图片描述](http://img.blog.csdn.net/20170127011000970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ## 申请github账号（是程序员应该都有一个吧，不解释）\n  ## 创建github仓库\n  ![这里写图片描述](http://img.blog.csdn.net/20170127011049344?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013138526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  因为我已经创建过了，所以会报错，仓库命名一定要严格按“zengmianhui.github.io”来命名，\"zengmianhui\"是你的用户名\n  这样创建成功后就可以直接访问了\n  ## 安装hexo(hexo是基于node.js的)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013343317?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013402558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  在hifor的博客中，在安装hexo之前，有先设置淘宝的镜像来安装hexo的，但是我实际安装是不需要的，网速还可以。\n  使用以下代码安装hexo\n  ```\n  $ npm install -g hexo-cli\n  ```\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013758197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  出现的WARN可以不用理会\n  继续使用命令\n\n  ```\n  npm install hexo --save\n\n  ```\n  查看hexo是否安装正确\n  ```\n  hexo -v\n  ```\n  ## 本地支行hexo\n  初始化hexo\n  ```\n  hexo init\n  ```\n  安装生成器\n\n  ```\n  npm install\n  ```\n  在本地运行hexo\n\n  ```\n  hexo s -g\n  ```\n  打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了，按住Ctrl+C键即可停止\n  ## 管理博客\n  打开根目录下的_config.yml，注意：主题目录下也有 _config.yml\n  ![这里写图片描述](http://img.blog.csdn.net/20170127014901283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ```\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site\n  title: zengmianhui's personal blog\n  subtitle:\n  description: 来这里，查看更多技术的分享\n  author: zengmianhui\n  language: zh-Hans\n  #时区\n  timezone:\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  url: https://zengmianhui.github.io\n  root: /\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory\n  source_dir: source\n  public_dir: public\n  tag_dir: tags\n  archive_dir: archives\n  category_dir: categories\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing\n  new_post_name: :title.md # File name of new posts\n  default_layout: post\n  titlecase: false # Transform title into titlecase\n  external_link: true # Open external links in new tab\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: false\n  relative_link: false\n  future: true\n  highlight:\n    enable: true\n    line_number: true\n    auto_detect: false\n    tab_replace:\n\n  # Category & Tag\n  default_category: categorized\n  category_map:\n  tag_map:\n\n  # Date / Time format\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  #博客主题\n  # Extensions\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: next\n\n  #发布设置\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repo: https://github.com/zengmianhui/zengmianhui.github.io.git\n    branch: master\n    message: 我的博客\n  #头像\n  avatar: zengmianhui.github.io/images/avatar.jpg\n  ```\n  ## 发一篇新的博客\n  输入命令\n\n  ```\n  $ hexo new \"博客名\"\n  ```\n\n  ![这里写图片描述](http://img.blog.csdn.net/20170127015326231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  打开生成的博客，并编辑\n\n  ```\n  ---\n  title: 如何在github上创建个人博客？\n  date: 2017-01-27 01:13:43\n  categories:\n    - 其他\n    - github\n  tags:\n    - 其他\n  ---\n\n  摘要:\n  <!--more-->\n  正文:\n\n  ```\n  ## 发布博客\n\n\n  当然发布之前，首先要确保你本地的SSH和github上保存的SSH是一致的\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020333242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  如果电脑中没有SSH，就输入以下命令生成\n  ```\n  $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n  Generating public/private rsa key pair.\n  Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<直接回车>\n\n  ```\n  注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；\n  注意2: 此处的「-C」的是大写的「C」\n  然后系统会要你输入密码：\n\n  ```\n  Enter passphrase (empty for no passphrase):<输入加密串>\n  Enter same passphrase again:<再次输入加密串>\n  ```\n  在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020532649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  添加SSH Key到GitHub\n  在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\n  1、打开本地C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n  2、登陆github系统。点击右上角的 Account Settings—>SSH Public keys —> add another public keys\n  3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020622059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  设置git信息\n\n  ```\n\n  2\n  $ git config --global user.name \"你的用户名\"\n  $ git config --global user.email \"你的邮箱\"\n\n  ```\n  安装hexo git插件，这个插件会自动push到github\n\n  ```\n  $ npm install hexo-deployer-git --save\n\n  ```\n  使用命令，hexo会自动将博客push到github上\n\n  ```\n  $ hexo d -g\n  ```\n  发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的\n\n  发布成功后，访问yourname.github.io看下成果\n  [我的个人博客](https://zengmianhui.github.io)\n","source":"_posts/如何在github上创建个人博客？.md","raw":"---\ntitle: 如何在github上创建个人博客？\ndate: 2017-01-27 01:13:43\ncategories:\n  - git\n  - hexo\ntags:\n  - 个人主页\n---\n\n摘要:\n    个人如何创建免费博客呢？github就有为用户提供创建个人博客的机会，如果你是一个开发者完全可以为自己定义一个个人博客。\n<!--more-->\n正文:\n\n  [文章来自于hifor的博客](http://hifor.net/2015/07/01/零基础免费搭建个人博客-hexo-github/)\n  # 如何在github创建个人博客？\n  [TOC]\n  ## git和node.js的安装就不解释了\n  ```\n  # 查看安装是否成功\n  git --version\n  node -v\n  npm -v\n  ```\n  ![这里写图片描述](http://img.blog.csdn.net/20170127011000970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ## 申请github账号（是程序员应该都有一个吧，不解释）\n  ## 创建github仓库\n  ![这里写图片描述](http://img.blog.csdn.net/20170127011049344?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013138526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  因为我已经创建过了，所以会报错，仓库命名一定要严格按“zengmianhui.github.io”来命名，\"zengmianhui\"是你的用户名\n  这样创建成功后就可以直接访问了\n  ## 安装hexo(hexo是基于node.js的)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013343317?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013402558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  在hifor的博客中，在安装hexo之前，有先设置淘宝的镜像来安装hexo的，但是我实际安装是不需要的，网速还可以。\n  使用以下代码安装hexo\n  ```\n  $ npm install -g hexo-cli\n  ```\n  ![这里写图片描述](http://img.blog.csdn.net/20170127013758197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  出现的WARN可以不用理会\n  继续使用命令\n\n  ```\n  npm install hexo --save\n\n  ```\n  查看hexo是否安装正确\n  ```\n  hexo -v\n  ```\n  ## 本地支行hexo\n  初始化hexo\n  ```\n  hexo init\n  ```\n  安装生成器\n\n  ```\n  npm install\n  ```\n  在本地运行hexo\n\n  ```\n  hexo s -g\n  ```\n  打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了，按住Ctrl+C键即可停止\n  ## 管理博客\n  打开根目录下的_config.yml，注意：主题目录下也有 _config.yml\n  ![这里写图片描述](http://img.blog.csdn.net/20170127014901283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ```\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site\n  title: zengmianhui's personal blog\n  subtitle:\n  description: 来这里，查看更多技术的分享\n  author: zengmianhui\n  language: zh-Hans\n  #时区\n  timezone:\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  url: https://zengmianhui.github.io\n  root: /\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory\n  source_dir: source\n  public_dir: public\n  tag_dir: tags\n  archive_dir: archives\n  category_dir: categories\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing\n  new_post_name: :title.md # File name of new posts\n  default_layout: post\n  titlecase: false # Transform title into titlecase\n  external_link: true # Open external links in new tab\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: false\n  relative_link: false\n  future: true\n  highlight:\n    enable: true\n    line_number: true\n    auto_detect: false\n    tab_replace:\n\n  # Category & Tag\n  default_category: categorized\n  category_map:\n  tag_map:\n\n  # Date / Time format\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  #博客主题\n  # Extensions\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: next\n\n  #发布设置\n  # Deployment\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repo: https://github.com/zengmianhui/zengmianhui.github.io.git\n    branch: master\n    message: 我的博客\n  #头像\n  avatar: zengmianhui.github.io/images/avatar.jpg\n  ```\n  ## 发一篇新的博客\n  输入命令\n\n  ```\n  $ hexo new \"博客名\"\n  ```\n\n  ![这里写图片描述](http://img.blog.csdn.net/20170127015326231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  打开生成的博客，并编辑\n\n  ```\n  ---\n  title: 如何在github上创建个人博客？\n  date: 2017-01-27 01:13:43\n  categories:\n    - 其他\n    - github\n  tags:\n    - 其他\n  ---\n\n  摘要:\n  <!--more-->\n  正文:\n\n  ```\n  ## 发布博客\n\n\n  当然发布之前，首先要确保你本地的SSH和github上保存的SSH是一致的\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020333242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  如果电脑中没有SSH，就输入以下命令生成\n  ```\n  $ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\n  Generating public/private rsa key pair.\n  Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<直接回车>\n\n  ```\n  注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；\n  注意2: 此处的「-C」的是大写的「C」\n  然后系统会要你输入密码：\n\n  ```\n  Enter passphrase (empty for no passphrase):<输入加密串>\n  Enter same passphrase again:<再次输入加密串>\n  ```\n  在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020532649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  添加SSH Key到GitHub\n  在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\n  1、打开本地C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n  2、登陆github系统。点击右上角的 Account Settings—>SSH Public keys —> add another public keys\n  3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了\n  ![这里写图片描述](http://img.blog.csdn.net/20170127020622059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  设置git信息\n\n  ```\n\n  2\n  $ git config --global user.name \"你的用户名\"\n  $ git config --global user.email \"你的邮箱\"\n\n  ```\n  安装hexo git插件，这个插件会自动push到github\n\n  ```\n  $ npm install hexo-deployer-git --save\n\n  ```\n  使用命令，hexo会自动将博客push到github上\n\n  ```\n  $ hexo d -g\n  ```\n  发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的\n\n  发布成功后，访问yourname.github.io看下成果\n  [我的个人博客](https://zengmianhui.github.io)\n","slug":"如何在github上创建个人博客？","published":1,"updated":"2019-05-05T09:43:39.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncijk003cy8us4g0qgh3z","content":"<p>摘要:<br>    个人如何创建免费博客呢？github就有为用户提供创建个人博客的机会，如果你是一个开发者完全可以为自己定义一个个人博客。<br><a id=\"more\"></a><br>正文:</p>\n<p>  <a href=\"http://hifor.net/2015/07/01/零基础免费搭建个人博客-hexo-github/\" target=\"_blank\" rel=\"noopener\">文章来自于hifor的博客</a></p>\n<h1 id=\"如何在github创建个人博客？\"><a href=\"#如何在github创建个人博客？\" class=\"headerlink\" title=\"如何在github创建个人博客？\"></a>如何在github创建个人博客？</h1><p>  [TOC]</p>\n<h2 id=\"git和node-js的安装就不解释了\"><a href=\"#git和node-js的安装就不解释了\" class=\"headerlink\" title=\"git和node.js的安装就不解释了\"></a>git和node.js的安装就不解释了</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看安装是否成功</span><br><span class=\"line\">git --version</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"http://img.blog.csdn.net/20170127011000970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"申请github账号（是程序员应该都有一个吧，不解释）\"><a href=\"#申请github账号（是程序员应该都有一个吧，不解释）\" class=\"headerlink\" title=\"申请github账号（是程序员应该都有一个吧，不解释）\"></a>申请github账号（是程序员应该都有一个吧，不解释）</h2><h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p>  <img src=\"http://img.blog.csdn.net/20170127011049344?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <img src=\"http://img.blog.csdn.net/20170127013138526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  因为我已经创建过了，所以会报错，仓库命名一定要严格按“zengmianhui.github.io”来命名，”zengmianhui”是你的用户名<br>  这样创建成功后就可以直接访问了</p>\n<h2 id=\"安装hexo-hexo是基于node-js的\"><a href=\"#安装hexo-hexo是基于node-js的\" class=\"headerlink\" title=\"安装hexo(hexo是基于node.js的)\"></a>安装hexo(hexo是基于node.js的)</h2><p>  <img src=\"http://img.blog.csdn.net/20170127013343317?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <img src=\"http://img.blog.csdn.net/20170127013402558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  在hifor的博客中，在安装hexo之前，有先设置淘宝的镜像来安装hexo的，但是我实际安装是不需要的，网速还可以。<br>  使用以下代码安装hexo<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>  <img src=\"http://img.blog.csdn.net/20170127013758197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  出现的WARN可以不用理会<br>  继续使用命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n<p>  查看hexo是否安装正确<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地支行hexo\"><a href=\"#本地支行hexo\" class=\"headerlink\" title=\"本地支行hexo\"></a>本地支行hexo</h2><p>  初始化hexo<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure><br>  安装生成器</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>  在本地运行hexo</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n<p>  打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了，按住Ctrl+C键即可停止</p>\n<h2 id=\"管理博客\"><a href=\"#管理博客\" class=\"headerlink\" title=\"管理博客\"></a>管理博客</h2><p>  打开根目录下的_config.yml，注意：主题目录下也有 _config.yml<br>  <img src=\"http://img.blog.csdn.net/20170127014901283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html</span><br><span class=\"line\">## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\">title: zengmianhui&#39;s personal blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: 来这里，查看更多技术的分享</span><br><span class=\"line\">author: zengmianhui</span><br><span class=\"line\">language: zh-Hans</span><br><span class=\"line\">#时区</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class=\"line\">url: https:&#x2F;&#x2F;zengmianhui.github.io</span><br><span class=\"line\">root: &#x2F;</span><br><span class=\"line\">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads&#x2F;code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: categorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date &#x2F; Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\">#博客主题</span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next</span><br><span class=\"line\"></span><br><span class=\"line\">#发布设置</span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;zengmianhui&#x2F;zengmianhui.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: 我的博客</span><br><span class=\"line\">#头像</span><br><span class=\"line\">avatar: zengmianhui.github.io&#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"发一篇新的博客\"><a href=\"#发一篇新的博客\" class=\"headerlink\" title=\"发一篇新的博客\"></a>发一篇新的博客</h2><p>  输入命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;博客名&quot;</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"http://img.blog.csdn.net/20170127015326231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  打开生成的博客，并编辑</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 如何在github上创建个人博客？</span><br><span class=\"line\">date: 2017-01-27 01:13:43</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - 其他</span><br><span class=\"line\">  - github</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - 其他</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">摘要:</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">正文:</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>  当然发布之前，首先要确保你本地的SSH和github上保存的SSH是一致的<br>  <img src=\"http://img.blog.csdn.net/20170127020333242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  如果电脑中没有SSH，就输入以下命令生成<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class=\"line\">Generating public&#x2F;private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):&lt;直接回车&gt;</span><br></pre></td></tr></table></figure><br>  注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；<br>  注意2: 此处的「-C」的是大写的「C」<br>  然后系统会要你输入密码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class=\"line\">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure>\n<p>  在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>  <img src=\"http://img.blog.csdn.net/20170127020532649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  添加SSH Key到GitHub<br>  在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。<br>  1、打开本地C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。<br>  2、登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys<br>  3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了<br>  <img src=\"http://img.blog.csdn.net/20170127020622059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  设置git信息</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">$ git config --global user.name &quot;你的用户名&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>  安装hexo git插件，这个插件会自动push到github</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>  使用命令，hexo会自动将博客push到github上</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<p>  发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的</p>\n<p>  发布成功后，访问yourname.github.io看下成果<br>  <a href=\"https://zengmianhui.github.io\" target=\"_blank\" rel=\"noopener\">我的个人博客</a></p>\n","site":{"data":{}},"excerpt":"<p>摘要:<br>    个人如何创建免费博客呢？github就有为用户提供创建个人博客的机会，如果你是一个开发者完全可以为自己定义一个个人博客。<br></p>","more":"<br>正文:<p></p>\n<p>  <a href=\"http://hifor.net/2015/07/01/零基础免费搭建个人博客-hexo-github/\" target=\"_blank\" rel=\"noopener\">文章来自于hifor的博客</a></p>\n<h1 id=\"如何在github创建个人博客？\"><a href=\"#如何在github创建个人博客？\" class=\"headerlink\" title=\"如何在github创建个人博客？\"></a>如何在github创建个人博客？</h1><p>  [TOC]</p>\n<h2 id=\"git和node-js的安装就不解释了\"><a href=\"#git和node-js的安装就不解释了\" class=\"headerlink\" title=\"git和node.js的安装就不解释了\"></a>git和node.js的安装就不解释了</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看安装是否成功</span><br><span class=\"line\">git --version</span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"http://img.blog.csdn.net/20170127011000970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"申请github账号（是程序员应该都有一个吧，不解释）\"><a href=\"#申请github账号（是程序员应该都有一个吧，不解释）\" class=\"headerlink\" title=\"申请github账号（是程序员应该都有一个吧，不解释）\"></a>申请github账号（是程序员应该都有一个吧，不解释）</h2><h2 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h2><p>  <img src=\"http://img.blog.csdn.net/20170127011049344?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <img src=\"http://img.blog.csdn.net/20170127013138526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  因为我已经创建过了，所以会报错，仓库命名一定要严格按“zengmianhui.github.io”来命名，”zengmianhui”是你的用户名<br>  这样创建成功后就可以直接访问了</p>\n<h2 id=\"安装hexo-hexo是基于node-js的\"><a href=\"#安装hexo-hexo是基于node-js的\" class=\"headerlink\" title=\"安装hexo(hexo是基于node.js的)\"></a>安装hexo(hexo是基于node.js的)</h2><p>  <img src=\"http://img.blog.csdn.net/20170127013343317?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <img src=\"http://img.blog.csdn.net/20170127013402558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  在hifor的博客中，在安装hexo之前，有先设置淘宝的镜像来安装hexo的，但是我实际安装是不需要的，网速还可以。<br>  使用以下代码安装hexo<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>  <img src=\"http://img.blog.csdn.net/20170127013758197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  出现的WARN可以不用理会<br>  继续使用命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n<p>  查看hexo是否安装正确<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地支行hexo\"><a href=\"#本地支行hexo\" class=\"headerlink\" title=\"本地支行hexo\"></a>本地支行hexo</h2><p>  初始化hexo<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure><br>  安装生成器</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>  在本地运行hexo</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></table></figure>\n<p>  打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了，按住Ctrl+C键即可停止</p>\n<h2 id=\"管理博客\"><a href=\"#管理博客\" class=\"headerlink\" title=\"管理博客\"></a>管理博客</h2><p>  打开根目录下的_config.yml，注意：主题目录下也有 _config.yml<br>  <img src=\"http://img.blog.csdn.net/20170127014901283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html</span><br><span class=\"line\">## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"># Site</span><br><span class=\"line\">title: zengmianhui&#39;s personal blog</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: 来这里，查看更多技术的分享</span><br><span class=\"line\">author: zengmianhui</span><br><span class=\"line\">language: zh-Hans</span><br><span class=\"line\">#时区</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class=\"line\">url: https:&#x2F;&#x2F;zengmianhui.github.io</span><br><span class=\"line\">root: &#x2F;</span><br><span class=\"line\">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\"></span><br><span class=\"line\"># Directory</span><br><span class=\"line\">source_dir: source</span><br><span class=\"line\">public_dir: public</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\">code_dir: downloads&#x2F;code</span><br><span class=\"line\">i18n_dir: :lang</span><br><span class=\"line\">skip_render:</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">external_link: true # Open external links in new tab</span><br><span class=\"line\">filename_case: 0</span><br><span class=\"line\">render_drafts: false</span><br><span class=\"line\">post_asset_folder: false</span><br><span class=\"line\">relative_link: false</span><br><span class=\"line\">future: true</span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  line_number: true</span><br><span class=\"line\">  auto_detect: false</span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: categorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date &#x2F; Time format</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;</span><br><span class=\"line\">date_format: YYYY-MM-DD</span><br><span class=\"line\">time_format: HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: 10</span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\">#博客主题</span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next</span><br><span class=\"line\"></span><br><span class=\"line\">#发布设置</span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;zengmianhui&#x2F;zengmianhui.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message: 我的博客</span><br><span class=\"line\">#头像</span><br><span class=\"line\">avatar: zengmianhui.github.io&#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"发一篇新的博客\"><a href=\"#发一篇新的博客\" class=\"headerlink\" title=\"发一篇新的博客\"></a>发一篇新的博客</h2><p>  输入命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;博客名&quot;</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"http://img.blog.csdn.net/20170127015326231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  打开生成的博客，并编辑</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 如何在github上创建个人博客？</span><br><span class=\"line\">date: 2017-01-27 01:13:43</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - 其他</span><br><span class=\"line\">  - github</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - 其他</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">摘要:</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">正文:</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>  当然发布之前，首先要确保你本地的SSH和github上保存的SSH是一致的<br>  <img src=\"http://img.blog.csdn.net/20170127020333242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  如果电脑中没有SSH，就输入以下命令生成<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class=\"line\">Generating public&#x2F;private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):&lt;直接回车&gt;</span><br></pre></td></tr></table></figure><br>  注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；<br>  注意2: 此处的「-C」的是大写的「C」<br>  然后系统会要你输入密码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class=\"line\">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure>\n<p>  在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>  <img src=\"http://img.blog.csdn.net/20170127020532649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  添加SSH Key到GitHub<br>  在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。<br>  1、打开本地C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。<br>  2、登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys<br>  3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了<br>  <img src=\"http://img.blog.csdn.net/20170127020622059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTEyNzQ2MjQ5OTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  设置git信息</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">$ git config --global user.name &quot;你的用户名&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>  安装hexo git插件，这个插件会自动push到github</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>  使用命令，hexo会自动将博客push到github上</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g</span><br></pre></td></tr></table></figure>\n<p>  发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的</p>\n<p>  发布成功后，访问yourname.github.io看下成果<br>  <a href=\"https://zengmianhui.github.io\" target=\"_blank\" rel=\"noopener\">我的个人博客</a></p>"},{"title":"再总结一下activity的生命周期吧","date":"2017-03-27T02:28:33.000Z","_content":"## 文章参考自\n[谈谈Activity生命周期和启动模式(一)- ReturnYHH](http://www.jianshu.com/p/54cdc02ccd93)  \n[谈谈Activity生命周期和启动模式(二)- ReturnYHH](http://www.jianshu.com/p/ca0d8b7680ed)  \n[Activity生命周期中我们可以做些什么?-小坤同学](http://blog.csdn.net/data_hlk/article/details/51472252)  \n[Activity-android Developer API doc](https://developer.android.google.cn/reference/android/app/Activity.html)\n>如果有侵权行为，请及时通知我，一般不会吧-_-!\n\n<!--more-->\n\n# 再总结一下activity的周期吧\n按back按钮、进入home screen、发生异常、横竖屏切换、更高优先级应用程序需要内存，这个几个方面入手测试总结吧。我们需要特别注意onSaveInstanceState()和onRestoreInstanceState()的调用情况。\n## 先给一张标准的activity生命周期吧（中英文都给你们吧）\n![1生命周期中文](再总结一下activity的生命周期吧/1生命周期中文.png)  \n![1生命周期中文](再总结一下activity的生命周期吧/2生命周期英文.png)\n## android官方文档以三个点来总体分析activity的生命周期\n### 全部的生命周期(entire lifetime)\n>The entire lifetime of an activity happens between the first call to onCreate(Bundle) through to a single final call to onDestroy(). An activity will do all setup of \"global\" state in onCreate(), and release all remaining resources in onDestroy(). For example, if it has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread in onDestroy().  \nactivity的全部生命周期发生在首次调用onCreate(Bundle)到最后调用onDestroy()，一个activity将在onCreate()方法里面做所有目标状态的配置，和在onDestroy()里面释放所有残留的资源。例如，一个线程在网络中正在下载所有的数据，这个activity可能在onCreate()创建这个线程并且在之后在onDestroy()停止这个线程。\n### 可见生命周期(visiable lifetime)\n>The visible lifetime of an activity happens between a call to onStart() until a corresponding call to onStop(). During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor for changes that impact your UI, and unregister it in onStop() when the user no longer sees what you are displaying. The onStart() and onStop() methods can be called multiple times, as the activity becomes visible and hidden to the user.  \nactivity的可见生命周期发生在onStart()的调用，到在合适的情况下调用onStop()方法。在这个期间内用户可以看activity在屏幕上，即使它可能不在前台与用户交互。在这两个方法之前，你可以保留资源去展示activity给用户。例如，你可以注册一个广播接收者在onStart()监视影响用户的更改，也可以在用户不再看到你所显示的情况下，在onStop()中unregister这个广播。在activity变成显示隐藏给用户下，onStart()和onStop()方法可以被多次调用。\n### 前台生命周期(foreground lifetime)\n>The foreground lifetime of an activity happens between a call to onResume() until a corresponding call to onPause(). During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states -- for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered -- so the code in these methods should be fairly lightweight.  \nactivity的前台生命周期发生在onResume()调用，到在合适的情况下调用onPause()。在这期间activity是在所有其他的activities之前并且与用户交互。一个activity可以频繁地复位暂停状态————例如，当设备进入睡眠状态时，当一个activity结果被发布/发表时，当一个新意图被发布/发表时————因此代码在这些方法里面应该适当地做轻量工作。\n## 再总结一下各个生命周期可以处理什么的事情吧 \n### onCreate()\n>Called when the activity is first created. This is where you should do all of your normal static set up: create views, bind data to lists, etc. This method also provides you with a Bundle containing the activity's previously frozen state, if there was one.\nAlways followed by onStart().  \n当activity第一次被创建的时候调用。这儿应该做全部的静态安装，如**创建视图，绑定数据到列表**等等。这个方法也提供了一个Bundle（onCreate(Bundle savedInstanceState)中的参数），这个Bundle提供activity之前冻结的状态，如果有相关状态数据,**状态及数据会被恢复**。onCreate方法总是与OnStart()一起被调用。\n### onRestart()\n>Called after your activity has been stopped, prior to it being started again.\nAlways followed by onStart()  \n你的activity停止后，再次优先启动后调用。总是在这之后调用onStart()  \n\n### onStart()\n>Called when the activity is becoming visible to the user.\nFollowed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.  \n当与onResume()一起调用使用activity进入前台，变成用户可见时调用。或者与onStop一起调用变成隐藏状态。  \n\n>**一般可以通过在此注册broadcastReceiver来监控影响UI或者加载一些资源**\n### onResume()\n>Called when the activity will start interacting with the user. At this point your activity is at the top of the activity stack, with user input going to it.\nAlways followed by onPause().  \n当activity将开始与用户交互时调用，在这一点你的actvity是在activity栈顶上，处于用户的输入。总是在这之后调用onPause()。\n### onPause()\n>Called when the system is about to start resuming a previous activity. This is typically used to commit unsaved changes to persistent data, stop animations and other things that may be consuming CPU, etc. Implementations of this method must be very quick because the next activity will not be resumed until this method returns.\nFollowed by either onResume() if the activity returns back to the front, or onStop() if it becomes invisible to the user  \n系统开始正在复位之前的activity时调用。这个经常用于提交未保存的改变的持久性数据，停止动画和其他消耗CPU等等的事情。这个方法的实现必须是非常快的，因为下一个activity将不会复位，直到这个方法return后。\n### onStop()\n>Called when the activity is no longer visible to the user, because another activity has been resumed and is covering this one. This may happen either because a new activity is being started, an existing one is being brought in front of this one, or this one is being destroyed.\nFollowed by either onRestart() if this activity is coming back to interact with the user, or onDestroy() if this activity is going away.  \n当activity不再显示给用户时调用，因为其他activity 复位并且覆盖它。这可能发生要么是因为一个新的activity正在启动，一个存在的activity被带到前面的这一个activity，或者这一个activity正在被摧毁。\n### onDestory()\n>The final call you receive before your activity is destroyed. This can happen either because the activity is finishing (someone called finish() on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing() method.  \n在你的activity被销毁之前最终的调用。这会发生的原因，要么是activity正在完成（某人调用finish()在activity中，或者因为系统暂时销毁地activity的实例去节省内存。）\n## 影响activity生命周期的几种情况\n### 按back按钮\n>当前Task：A，再创建B\n>以下为打印结果，当前Task:A-B\n\n>由打印结果可以看A会预先调用OnPause()，表示开始进入暂时状态，等到目标启动B复位在前台显示时，才会执行onSaveInstanceState(Bundle outState)，再调用onStop()\n```\n03-27 13:29:52.938 5057-5057/com.app.androidbasic I/ActivityA: onPause: 调用了onPause  \n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onCreate(Bundle savedInstanceState): 调用onCreate，获取当前Task的id4\n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n03-27 13:29:53.398 5057-5057/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 13:29:53.398 5057-5057/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n```\n>当B按了“back”\n>以下为打印结果，此时Task:A\n>Activity并没有调用onRestoreInstanceState()，可能是activity在非常状态退出，可能会调用onRestoreInstanceState()恢复activity的实例\n```\n03-27 13:31:53.018 5057-5057/com.app.androidbasic I/ActivityB: onPause: 调用了onPause\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onRestart: 调用了onRestart\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n03-27 13:31:53.438 5057-5057/com.app.androidbasic I/ActivityB: onStop: 调用onStop\n03-27 13:31:53.438 5057-5057/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy\n```\n### 进入home\n>当前Task A-B,点击“Home”进入home screen\n\n>B执行了onPause()-onSaveInstanceState(Bundle)-onStop()\n```\n03-27 13:39:22.088 5057-5057/com.app.androidbasic I/ActivityA: onPause: 调用了onPause  \n03-27 13:39:22.688 5057-5057/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 13:39:22.688 5057-5057/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n```\n>从Home恢复前台时，B并没有调用onRestoreInstanceState(Bundle)\n```\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onRestart: 调用了onRestart\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n```\n### 发生异常\n#### onCreate()发生异常\n>onCreate—>onPause—>onSaveInstanceState()->onStop—>onDestroy\n#### onStart()发生异常\n>onCreate—>onStart—>onPause—>onSaveInstanceState()->onStop—>onDestroy\n#### onResume()发生异常\n>onCreate—>onStart—>onResume—>onPause—>onSaveInstanceState()->onStop—>onDestroy  \n\n### 横竖屏切换\n>当前Task:A,处于坚屏状态\n>当A 进入横屏状态\n>onPause()->onSaveInstanceState(Bundle)->onStop()-onDestory->onCreate(Bundle)->onStart()-onRestoreInstanceState(Bundle)-onResume()\n```\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onPause: 调用了onPause\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onDestroy: 调用onDestroy\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onCreate: 调用onCreate，获取当前Task的id12\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onRestoreInstanceState(Bundle savedInstanceState): 恢复实例\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n```\n### 更高优先级的应用需要内存\nonStop()->onCreate()-onStart()-onResume()\n\n>有不对的地方，还请大神多指教\n\n","source":"_posts/再总结一下activity的生命周期吧.md","raw":"---\ntitle: 再总结一下activity的生命周期吧\ndate: 2017-03-27 10:28:33\ncategories:\n  - android\n  - 四大组件\n  - activity\ntags:\n  - android\n  - activity lifetime\n---\n## 文章参考自\n[谈谈Activity生命周期和启动模式(一)- ReturnYHH](http://www.jianshu.com/p/54cdc02ccd93)  \n[谈谈Activity生命周期和启动模式(二)- ReturnYHH](http://www.jianshu.com/p/ca0d8b7680ed)  \n[Activity生命周期中我们可以做些什么?-小坤同学](http://blog.csdn.net/data_hlk/article/details/51472252)  \n[Activity-android Developer API doc](https://developer.android.google.cn/reference/android/app/Activity.html)\n>如果有侵权行为，请及时通知我，一般不会吧-_-!\n\n<!--more-->\n\n# 再总结一下activity的周期吧\n按back按钮、进入home screen、发生异常、横竖屏切换、更高优先级应用程序需要内存，这个几个方面入手测试总结吧。我们需要特别注意onSaveInstanceState()和onRestoreInstanceState()的调用情况。\n## 先给一张标准的activity生命周期吧（中英文都给你们吧）\n![1生命周期中文](再总结一下activity的生命周期吧/1生命周期中文.png)  \n![1生命周期中文](再总结一下activity的生命周期吧/2生命周期英文.png)\n## android官方文档以三个点来总体分析activity的生命周期\n### 全部的生命周期(entire lifetime)\n>The entire lifetime of an activity happens between the first call to onCreate(Bundle) through to a single final call to onDestroy(). An activity will do all setup of \"global\" state in onCreate(), and release all remaining resources in onDestroy(). For example, if it has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread in onDestroy().  \nactivity的全部生命周期发生在首次调用onCreate(Bundle)到最后调用onDestroy()，一个activity将在onCreate()方法里面做所有目标状态的配置，和在onDestroy()里面释放所有残留的资源。例如，一个线程在网络中正在下载所有的数据，这个activity可能在onCreate()创建这个线程并且在之后在onDestroy()停止这个线程。\n### 可见生命周期(visiable lifetime)\n>The visible lifetime of an activity happens between a call to onStart() until a corresponding call to onStop(). During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor for changes that impact your UI, and unregister it in onStop() when the user no longer sees what you are displaying. The onStart() and onStop() methods can be called multiple times, as the activity becomes visible and hidden to the user.  \nactivity的可见生命周期发生在onStart()的调用，到在合适的情况下调用onStop()方法。在这个期间内用户可以看activity在屏幕上，即使它可能不在前台与用户交互。在这两个方法之前，你可以保留资源去展示activity给用户。例如，你可以注册一个广播接收者在onStart()监视影响用户的更改，也可以在用户不再看到你所显示的情况下，在onStop()中unregister这个广播。在activity变成显示隐藏给用户下，onStart()和onStop()方法可以被多次调用。\n### 前台生命周期(foreground lifetime)\n>The foreground lifetime of an activity happens between a call to onResume() until a corresponding call to onPause(). During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states -- for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered -- so the code in these methods should be fairly lightweight.  \nactivity的前台生命周期发生在onResume()调用，到在合适的情况下调用onPause()。在这期间activity是在所有其他的activities之前并且与用户交互。一个activity可以频繁地复位暂停状态————例如，当设备进入睡眠状态时，当一个activity结果被发布/发表时，当一个新意图被发布/发表时————因此代码在这些方法里面应该适当地做轻量工作。\n## 再总结一下各个生命周期可以处理什么的事情吧 \n### onCreate()\n>Called when the activity is first created. This is where you should do all of your normal static set up: create views, bind data to lists, etc. This method also provides you with a Bundle containing the activity's previously frozen state, if there was one.\nAlways followed by onStart().  \n当activity第一次被创建的时候调用。这儿应该做全部的静态安装，如**创建视图，绑定数据到列表**等等。这个方法也提供了一个Bundle（onCreate(Bundle savedInstanceState)中的参数），这个Bundle提供activity之前冻结的状态，如果有相关状态数据,**状态及数据会被恢复**。onCreate方法总是与OnStart()一起被调用。\n### onRestart()\n>Called after your activity has been stopped, prior to it being started again.\nAlways followed by onStart()  \n你的activity停止后，再次优先启动后调用。总是在这之后调用onStart()  \n\n### onStart()\n>Called when the activity is becoming visible to the user.\nFollowed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.  \n当与onResume()一起调用使用activity进入前台，变成用户可见时调用。或者与onStop一起调用变成隐藏状态。  \n\n>**一般可以通过在此注册broadcastReceiver来监控影响UI或者加载一些资源**\n### onResume()\n>Called when the activity will start interacting with the user. At this point your activity is at the top of the activity stack, with user input going to it.\nAlways followed by onPause().  \n当activity将开始与用户交互时调用，在这一点你的actvity是在activity栈顶上，处于用户的输入。总是在这之后调用onPause()。\n### onPause()\n>Called when the system is about to start resuming a previous activity. This is typically used to commit unsaved changes to persistent data, stop animations and other things that may be consuming CPU, etc. Implementations of this method must be very quick because the next activity will not be resumed until this method returns.\nFollowed by either onResume() if the activity returns back to the front, or onStop() if it becomes invisible to the user  \n系统开始正在复位之前的activity时调用。这个经常用于提交未保存的改变的持久性数据，停止动画和其他消耗CPU等等的事情。这个方法的实现必须是非常快的，因为下一个activity将不会复位，直到这个方法return后。\n### onStop()\n>Called when the activity is no longer visible to the user, because another activity has been resumed and is covering this one. This may happen either because a new activity is being started, an existing one is being brought in front of this one, or this one is being destroyed.\nFollowed by either onRestart() if this activity is coming back to interact with the user, or onDestroy() if this activity is going away.  \n当activity不再显示给用户时调用，因为其他activity 复位并且覆盖它。这可能发生要么是因为一个新的activity正在启动，一个存在的activity被带到前面的这一个activity，或者这一个activity正在被摧毁。\n### onDestory()\n>The final call you receive before your activity is destroyed. This can happen either because the activity is finishing (someone called finish() on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing() method.  \n在你的activity被销毁之前最终的调用。这会发生的原因，要么是activity正在完成（某人调用finish()在activity中，或者因为系统暂时销毁地activity的实例去节省内存。）\n## 影响activity生命周期的几种情况\n### 按back按钮\n>当前Task：A，再创建B\n>以下为打印结果，当前Task:A-B\n\n>由打印结果可以看A会预先调用OnPause()，表示开始进入暂时状态，等到目标启动B复位在前台显示时，才会执行onSaveInstanceState(Bundle outState)，再调用onStop()\n```\n03-27 13:29:52.938 5057-5057/com.app.androidbasic I/ActivityA: onPause: 调用了onPause  \n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onCreate(Bundle savedInstanceState): 调用onCreate，获取当前Task的id4\n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onStart: 调用onstart()\n03-27 13:29:52.968 5057-5057/com.app.androidbasic I/ActivityB: onResume: 调用了onResume\n03-27 13:29:53.398 5057-5057/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 13:29:53.398 5057-5057/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n```\n>当B按了“back”\n>以下为打印结果，此时Task:A\n>Activity并没有调用onRestoreInstanceState()，可能是activity在非常状态退出，可能会调用onRestoreInstanceState()恢复activity的实例\n```\n03-27 13:31:53.018 5057-5057/com.app.androidbasic I/ActivityB: onPause: 调用了onPause\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onRestart: 调用了onRestart\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 13:31:53.028 5057-5057/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n03-27 13:31:53.438 5057-5057/com.app.androidbasic I/ActivityB: onStop: 调用onStop\n03-27 13:31:53.438 5057-5057/com.app.androidbasic I/ActivityB: onDestroy: 调用onDestroy\n```\n### 进入home\n>当前Task A-B,点击“Home”进入home screen\n\n>B执行了onPause()-onSaveInstanceState(Bundle)-onStop()\n```\n03-27 13:39:22.088 5057-5057/com.app.androidbasic I/ActivityA: onPause: 调用了onPause  \n03-27 13:39:22.688 5057-5057/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 13:39:22.688 5057-5057/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n```\n>从Home恢复前台时，B并没有调用onRestoreInstanceState(Bundle)\n```\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onRestart: 调用了onRestart\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 13:41:55.068 5057-5057/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n```\n### 发生异常\n#### onCreate()发生异常\n>onCreate—>onPause—>onSaveInstanceState()->onStop—>onDestroy\n#### onStart()发生异常\n>onCreate—>onStart—>onPause—>onSaveInstanceState()->onStop—>onDestroy\n#### onResume()发生异常\n>onCreate—>onStart—>onResume—>onPause—>onSaveInstanceState()->onStop—>onDestroy  \n\n### 横竖屏切换\n>当前Task:A,处于坚屏状态\n>当A 进入横屏状态\n>onPause()->onSaveInstanceState(Bundle)->onStop()-onDestory->onCreate(Bundle)->onStart()-onRestoreInstanceState(Bundle)-onResume()\n```\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onPause: 调用了onPause\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onStop: 调用onStop\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onDestroy: 调用onDestroy\n03-27 14:10:57.668 10213-10213/com.app.androidbasic I/ActivityA: onCreate: 调用onCreate，获取当前Task的id12\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onStart: 调用onstart()\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onRestoreInstanceState(Bundle savedInstanceState): 恢复实例\n03-27 14:10:57.708 10213-10213/com.app.androidbasic I/ActivityA: onResume: 调用了onResume\n```\n### 更高优先级的应用需要内存\nonStop()->onCreate()-onStart()-onResume()\n\n>有不对的地方，还请大神多指教\n\n","slug":"再总结一下activity的生命周期吧","published":1,"updated":"2019-05-05T09:43:39.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncijm003fy8usjjn6jji5","content":"<h2 id=\"文章参考自\"><a href=\"#文章参考自\" class=\"headerlink\" title=\"文章参考自\"></a>文章参考自</h2><p><a href=\"http://www.jianshu.com/p/54cdc02ccd93\" target=\"_blank\" rel=\"noopener\">谈谈Activity生命周期和启动模式(一)- ReturnYHH</a><br><a href=\"http://www.jianshu.com/p/ca0d8b7680ed\" target=\"_blank\" rel=\"noopener\">谈谈Activity生命周期和启动模式(二)- ReturnYHH</a><br><a href=\"http://blog.csdn.net/data_hlk/article/details/51472252\" target=\"_blank\" rel=\"noopener\">Activity生命周期中我们可以做些什么?-小坤同学</a><br><a href=\"https://developer.android.google.cn/reference/android/app/Activity.html\" target=\"_blank\" rel=\"noopener\">Activity-android Developer API doc</a></p>\n<blockquote>\n<p>如果有侵权行为，请及时通知我，一般不会吧-_-!</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"再总结一下activity的周期吧\"><a href=\"#再总结一下activity的周期吧\" class=\"headerlink\" title=\"再总结一下activity的周期吧\"></a>再总结一下activity的周期吧</h1><p>按back按钮、进入home screen、发生异常、横竖屏切换、更高优先级应用程序需要内存，这个几个方面入手测试总结吧。我们需要特别注意onSaveInstanceState()和onRestoreInstanceState()的调用情况。</p>\n<h2 id=\"先给一张标准的activity生命周期吧（中英文都给你们吧）\"><a href=\"#先给一张标准的activity生命周期吧（中英文都给你们吧）\" class=\"headerlink\" title=\"先给一张标准的activity生命周期吧（中英文都给你们吧）\"></a>先给一张标准的activity生命周期吧（中英文都给你们吧）</h2><p><img src=\"/2017/03/27/%E5%86%8D%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bactivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%A7/1生命周期中文.png\" alt=\"1生命周期中文\"><br><img src=\"/2017/03/27/%E5%86%8D%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bactivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%A7/2生命周期英文.png\" alt=\"1生命周期中文\"></p>\n<h2 id=\"android官方文档以三个点来总体分析activity的生命周期\"><a href=\"#android官方文档以三个点来总体分析activity的生命周期\" class=\"headerlink\" title=\"android官方文档以三个点来总体分析activity的生命周期\"></a>android官方文档以三个点来总体分析activity的生命周期</h2><h3 id=\"全部的生命周期-entire-lifetime\"><a href=\"#全部的生命周期-entire-lifetime\" class=\"headerlink\" title=\"全部的生命周期(entire lifetime)\"></a>全部的生命周期(entire lifetime)</h3><blockquote>\n<p>The entire lifetime of an activity happens between the first call to onCreate(Bundle) through to a single final call to onDestroy(). An activity will do all setup of “global” state in onCreate(), and release all remaining resources in onDestroy(). For example, if it has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread in onDestroy().<br>activity的全部生命周期发生在首次调用onCreate(Bundle)到最后调用onDestroy()，一个activity将在onCreate()方法里面做所有目标状态的配置，和在onDestroy()里面释放所有残留的资源。例如，一个线程在网络中正在下载所有的数据，这个activity可能在onCreate()创建这个线程并且在之后在onDestroy()停止这个线程。</p>\n<h3 id=\"可见生命周期-visiable-lifetime\"><a href=\"#可见生命周期-visiable-lifetime\" class=\"headerlink\" title=\"可见生命周期(visiable lifetime)\"></a>可见生命周期(visiable lifetime)</h3><p>The visible lifetime of an activity happens between a call to onStart() until a corresponding call to onStop(). During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor for changes that impact your UI, and unregister it in onStop() when the user no longer sees what you are displaying. The onStart() and onStop() methods can be called multiple times, as the activity becomes visible and hidden to the user.<br>activity的可见生命周期发生在onStart()的调用，到在合适的情况下调用onStop()方法。在这个期间内用户可以看activity在屏幕上，即使它可能不在前台与用户交互。在这两个方法之前，你可以保留资源去展示activity给用户。例如，你可以注册一个广播接收者在onStart()监视影响用户的更改，也可以在用户不再看到你所显示的情况下，在onStop()中unregister这个广播。在activity变成显示隐藏给用户下，onStart()和onStop()方法可以被多次调用。</p>\n<h3 id=\"前台生命周期-foreground-lifetime\"><a href=\"#前台生命周期-foreground-lifetime\" class=\"headerlink\" title=\"前台生命周期(foreground lifetime)\"></a>前台生命周期(foreground lifetime)</h3><p>The foreground lifetime of an activity happens between a call to onResume() until a corresponding call to onPause(). During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states – for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered – so the code in these methods should be fairly lightweight.<br>activity的前台生命周期发生在onResume()调用，到在合适的情况下调用onPause()。在这期间activity是在所有其他的activities之前并且与用户交互。一个activity可以频繁地复位暂停状态————例如，当设备进入睡眠状态时，当一个activity结果被发布/发表时，当一个新意图被发布/发表时————因此代码在这些方法里面应该适当地做轻量工作。</p>\n<h2 id=\"再总结一下各个生命周期可以处理什么的事情吧\"><a href=\"#再总结一下各个生命周期可以处理什么的事情吧\" class=\"headerlink\" title=\"再总结一下各个生命周期可以处理什么的事情吧\"></a>再总结一下各个生命周期可以处理什么的事情吧</h2><h3 id=\"onCreate\"><a href=\"#onCreate\" class=\"headerlink\" title=\"onCreate()\"></a>onCreate()</h3><p>Called when the activity is first created. This is where you should do all of your normal static set up: create views, bind data to lists, etc. This method also provides you with a Bundle containing the activity’s previously frozen state, if there was one.<br>Always followed by onStart().<br>当activity第一次被创建的时候调用。这儿应该做全部的静态安装，如<strong>创建视图，绑定数据到列表</strong>等等。这个方法也提供了一个Bundle（onCreate(Bundle savedInstanceState)中的参数），这个Bundle提供activity之前冻结的状态，如果有相关状态数据,<strong>状态及数据会被恢复</strong>。onCreate方法总是与OnStart()一起被调用。</p>\n<h3 id=\"onRestart\"><a href=\"#onRestart\" class=\"headerlink\" title=\"onRestart()\"></a>onRestart()</h3><p>Called after your activity has been stopped, prior to it being started again.<br>Always followed by onStart()<br>你的activity停止后，再次优先启动后调用。总是在这之后调用onStart()  </p>\n</blockquote>\n<h3 id=\"onStart\"><a href=\"#onStart\" class=\"headerlink\" title=\"onStart()\"></a>onStart()</h3><blockquote>\n<p>Called when the activity is becoming visible to the user.<br>Followed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.<br>当与onResume()一起调用使用activity进入前台，变成用户可见时调用。或者与onStop一起调用变成隐藏状态。  </p>\n<p><strong>一般可以通过在此注册broadcastReceiver来监控影响UI或者加载一些资源</strong></p>\n<h3 id=\"onResume\"><a href=\"#onResume\" class=\"headerlink\" title=\"onResume()\"></a>onResume()</h3><p>Called when the activity will start interacting with the user. At this point your activity is at the top of the activity stack, with user input going to it.<br>Always followed by onPause().<br>当activity将开始与用户交互时调用，在这一点你的actvity是在activity栈顶上，处于用户的输入。总是在这之后调用onPause()。</p>\n<h3 id=\"onPause\"><a href=\"#onPause\" class=\"headerlink\" title=\"onPause()\"></a>onPause()</h3><p>Called when the system is about to start resuming a previous activity. This is typically used to commit unsaved changes to persistent data, stop animations and other things that may be consuming CPU, etc. Implementations of this method must be very quick because the next activity will not be resumed until this method returns.<br>Followed by either onResume() if the activity returns back to the front, or onStop() if it becomes invisible to the user<br>系统开始正在复位之前的activity时调用。这个经常用于提交未保存的改变的持久性数据，停止动画和其他消耗CPU等等的事情。这个方法的实现必须是非常快的，因为下一个activity将不会复位，直到这个方法return后。</p>\n<h3 id=\"onStop\"><a href=\"#onStop\" class=\"headerlink\" title=\"onStop()\"></a>onStop()</h3><p>Called when the activity is no longer visible to the user, because another activity has been resumed and is covering this one. This may happen either because a new activity is being started, an existing one is being brought in front of this one, or this one is being destroyed.<br>Followed by either onRestart() if this activity is coming back to interact with the user, or onDestroy() if this activity is going away.<br>当activity不再显示给用户时调用，因为其他activity 复位并且覆盖它。这可能发生要么是因为一个新的activity正在启动，一个存在的activity被带到前面的这一个activity，或者这一个activity正在被摧毁。</p>\n<h3 id=\"onDestory\"><a href=\"#onDestory\" class=\"headerlink\" title=\"onDestory()\"></a>onDestory()</h3><p>The final call you receive before your activity is destroyed. This can happen either because the activity is finishing (someone called finish() on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing() method.<br>在你的activity被销毁之前最终的调用。这会发生的原因，要么是activity正在完成（某人调用finish()在activity中，或者因为系统暂时销毁地activity的实例去节省内存。）</p>\n<h2 id=\"影响activity生命周期的几种情况\"><a href=\"#影响activity生命周期的几种情况\" class=\"headerlink\" title=\"影响activity生命周期的几种情况\"></a>影响activity生命周期的几种情况</h2><h3 id=\"按back按钮\"><a href=\"#按back按钮\" class=\"headerlink\" title=\"按back按钮\"></a>按back按钮</h3><p>当前Task：A，再创建B<br>以下为打印结果，当前Task:A-B</p>\n<p>由打印结果可以看A会预先调用OnPause()，表示开始进入暂时状态，等到目标启动B复位在前台显示时，才会执行onSaveInstanceState(Bundle outState)，再调用onStop()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:29:52.938 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause  </span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onCreate(Bundle savedInstanceState): 调用onCreate，获取当前Task的id4</span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onResume: 调用了onResume</span><br><span class=\"line\">03-27 13:29:53.398 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 13:29:53.398 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br></pre></td></tr></table></figure><br>当B按了“back”<br>以下为打印结果，此时Task:A<br>Activity并没有调用onRestoreInstanceState()，可能是activity在非常状态退出，可能会调用onRestoreInstanceState()恢复activity的实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:31:53.018 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onPause: 调用了onPause</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestart: 调用了onRestart</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br><span class=\"line\">03-27 13:31:53.438 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onStop: 调用onStop</span><br><span class=\"line\">03-27 13:31:53.438 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onDestroy: 调用onDestroy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进入home\"><a href=\"#进入home\" class=\"headerlink\" title=\"进入home\"></a>进入home</h3><p>当前Task A-B,点击“Home”进入home screen</p>\n<p>B执行了onPause()-onSaveInstanceState(Bundle)-onStop()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:39:22.088 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause  </span><br><span class=\"line\">03-27 13:39:22.688 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 13:39:22.688 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br></pre></td></tr></table></figure><br>从Home恢复前台时，B并没有调用onRestoreInstanceState(Bundle)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestart: 调用了onRestart</span><br><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发生异常\"><a href=\"#发生异常\" class=\"headerlink\" title=\"发生异常\"></a>发生异常</h3><h4 id=\"onCreate-发生异常\"><a href=\"#onCreate-发生异常\" class=\"headerlink\" title=\"onCreate()发生异常\"></a>onCreate()发生异常</h4><p>onCreate—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy</p>\n<h4 id=\"onStart-发生异常\"><a href=\"#onStart-发生异常\" class=\"headerlink\" title=\"onStart()发生异常\"></a>onStart()发生异常</h4><p>onCreate—&gt;onStart—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy</p>\n<h4 id=\"onResume-发生异常\"><a href=\"#onResume-发生异常\" class=\"headerlink\" title=\"onResume()发生异常\"></a>onResume()发生异常</h4><p>onCreate—&gt;onStart—&gt;onResume—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy  </p>\n</blockquote>\n<h3 id=\"横竖屏切换\"><a href=\"#横竖屏切换\" class=\"headerlink\" title=\"横竖屏切换\"></a>横竖屏切换</h3><blockquote>\n<p>当前Task:A,处于坚屏状态<br>当A 进入横屏状态<br>onPause()-&gt;onSaveInstanceState(Bundle)-&gt;onStop()-onDestory-&gt;onCreate(Bundle)-&gt;onStart()-onRestoreInstanceState(Bundle)-onResume()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onDestroy: 调用onDestroy</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onCreate: 调用onCreate，获取当前Task的id12</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestoreInstanceState(Bundle savedInstanceState): 恢复实例</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更高优先级的应用需要内存\"><a href=\"#更高优先级的应用需要内存\" class=\"headerlink\" title=\"更高优先级的应用需要内存\"></a>更高优先级的应用需要内存</h3><p>onStop()-&gt;onCreate()-onStart()-onResume()</p>\n<p>有不对的地方，还请大神多指教</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"文章参考自\"><a href=\"#文章参考自\" class=\"headerlink\" title=\"文章参考自\"></a>文章参考自</h2><p><a href=\"http://www.jianshu.com/p/54cdc02ccd93\" target=\"_blank\" rel=\"noopener\">谈谈Activity生命周期和启动模式(一)- ReturnYHH</a><br><a href=\"http://www.jianshu.com/p/ca0d8b7680ed\" target=\"_blank\" rel=\"noopener\">谈谈Activity生命周期和启动模式(二)- ReturnYHH</a><br><a href=\"http://blog.csdn.net/data_hlk/article/details/51472252\" target=\"_blank\" rel=\"noopener\">Activity生命周期中我们可以做些什么?-小坤同学</a><br><a href=\"https://developer.android.google.cn/reference/android/app/Activity.html\" target=\"_blank\" rel=\"noopener\">Activity-android Developer API doc</a></p>\n<blockquote>\n<p>如果有侵权行为，请及时通知我，一般不会吧-_-!</p>\n</blockquote>","more":"<h1 id=\"再总结一下activity的周期吧\"><a href=\"#再总结一下activity的周期吧\" class=\"headerlink\" title=\"再总结一下activity的周期吧\"></a>再总结一下activity的周期吧</h1><p>按back按钮、进入home screen、发生异常、横竖屏切换、更高优先级应用程序需要内存，这个几个方面入手测试总结吧。我们需要特别注意onSaveInstanceState()和onRestoreInstanceState()的调用情况。</p>\n<h2 id=\"先给一张标准的activity生命周期吧（中英文都给你们吧）\"><a href=\"#先给一张标准的activity生命周期吧（中英文都给你们吧）\" class=\"headerlink\" title=\"先给一张标准的activity生命周期吧（中英文都给你们吧）\"></a>先给一张标准的activity生命周期吧（中英文都给你们吧）</h2><p><img src=\"/2017/03/27/%E5%86%8D%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bactivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%A7/1生命周期中文.png\" alt=\"1生命周期中文\"><br><img src=\"/2017/03/27/%E5%86%8D%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8Bactivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%A7/2生命周期英文.png\" alt=\"1生命周期中文\"></p>\n<h2 id=\"android官方文档以三个点来总体分析activity的生命周期\"><a href=\"#android官方文档以三个点来总体分析activity的生命周期\" class=\"headerlink\" title=\"android官方文档以三个点来总体分析activity的生命周期\"></a>android官方文档以三个点来总体分析activity的生命周期</h2><h3 id=\"全部的生命周期-entire-lifetime\"><a href=\"#全部的生命周期-entire-lifetime\" class=\"headerlink\" title=\"全部的生命周期(entire lifetime)\"></a>全部的生命周期(entire lifetime)</h3><blockquote>\n<p>The entire lifetime of an activity happens between the first call to onCreate(Bundle) through to a single final call to onDestroy(). An activity will do all setup of “global” state in onCreate(), and release all remaining resources in onDestroy(). For example, if it has a thread running in the background to download data from the network, it may create that thread in onCreate() and then stop the thread in onDestroy().<br>activity的全部生命周期发生在首次调用onCreate(Bundle)到最后调用onDestroy()，一个activity将在onCreate()方法里面做所有目标状态的配置，和在onDestroy()里面释放所有残留的资源。例如，一个线程在网络中正在下载所有的数据，这个activity可能在onCreate()创建这个线程并且在之后在onDestroy()停止这个线程。</p>\n<h3 id=\"可见生命周期-visiable-lifetime\"><a href=\"#可见生命周期-visiable-lifetime\" class=\"headerlink\" title=\"可见生命周期(visiable lifetime)\"></a>可见生命周期(visiable lifetime)</h3><p>The visible lifetime of an activity happens between a call to onStart() until a corresponding call to onStop(). During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor for changes that impact your UI, and unregister it in onStop() when the user no longer sees what you are displaying. The onStart() and onStop() methods can be called multiple times, as the activity becomes visible and hidden to the user.<br>activity的可见生命周期发生在onStart()的调用，到在合适的情况下调用onStop()方法。在这个期间内用户可以看activity在屏幕上，即使它可能不在前台与用户交互。在这两个方法之前，你可以保留资源去展示activity给用户。例如，你可以注册一个广播接收者在onStart()监视影响用户的更改，也可以在用户不再看到你所显示的情况下，在onStop()中unregister这个广播。在activity变成显示隐藏给用户下，onStart()和onStop()方法可以被多次调用。</p>\n<h3 id=\"前台生命周期-foreground-lifetime\"><a href=\"#前台生命周期-foreground-lifetime\" class=\"headerlink\" title=\"前台生命周期(foreground lifetime)\"></a>前台生命周期(foreground lifetime)</h3><p>The foreground lifetime of an activity happens between a call to onResume() until a corresponding call to onPause(). During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states – for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered – so the code in these methods should be fairly lightweight.<br>activity的前台生命周期发生在onResume()调用，到在合适的情况下调用onPause()。在这期间activity是在所有其他的activities之前并且与用户交互。一个activity可以频繁地复位暂停状态————例如，当设备进入睡眠状态时，当一个activity结果被发布/发表时，当一个新意图被发布/发表时————因此代码在这些方法里面应该适当地做轻量工作。</p>\n<h2 id=\"再总结一下各个生命周期可以处理什么的事情吧\"><a href=\"#再总结一下各个生命周期可以处理什么的事情吧\" class=\"headerlink\" title=\"再总结一下各个生命周期可以处理什么的事情吧\"></a>再总结一下各个生命周期可以处理什么的事情吧</h2><h3 id=\"onCreate\"><a href=\"#onCreate\" class=\"headerlink\" title=\"onCreate()\"></a>onCreate()</h3><p>Called when the activity is first created. This is where you should do all of your normal static set up: create views, bind data to lists, etc. This method also provides you with a Bundle containing the activity’s previously frozen state, if there was one.<br>Always followed by onStart().<br>当activity第一次被创建的时候调用。这儿应该做全部的静态安装，如<strong>创建视图，绑定数据到列表</strong>等等。这个方法也提供了一个Bundle（onCreate(Bundle savedInstanceState)中的参数），这个Bundle提供activity之前冻结的状态，如果有相关状态数据,<strong>状态及数据会被恢复</strong>。onCreate方法总是与OnStart()一起被调用。</p>\n<h3 id=\"onRestart\"><a href=\"#onRestart\" class=\"headerlink\" title=\"onRestart()\"></a>onRestart()</h3><p>Called after your activity has been stopped, prior to it being started again.<br>Always followed by onStart()<br>你的activity停止后，再次优先启动后调用。总是在这之后调用onStart()  </p>\n</blockquote>\n<h3 id=\"onStart\"><a href=\"#onStart\" class=\"headerlink\" title=\"onStart()\"></a>onStart()</h3><blockquote>\n<p>Called when the activity is becoming visible to the user.<br>Followed by onResume() if the activity comes to the foreground, or onStop() if it becomes hidden.<br>当与onResume()一起调用使用activity进入前台，变成用户可见时调用。或者与onStop一起调用变成隐藏状态。  </p>\n<p><strong>一般可以通过在此注册broadcastReceiver来监控影响UI或者加载一些资源</strong></p>\n<h3 id=\"onResume\"><a href=\"#onResume\" class=\"headerlink\" title=\"onResume()\"></a>onResume()</h3><p>Called when the activity will start interacting with the user. At this point your activity is at the top of the activity stack, with user input going to it.<br>Always followed by onPause().<br>当activity将开始与用户交互时调用，在这一点你的actvity是在activity栈顶上，处于用户的输入。总是在这之后调用onPause()。</p>\n<h3 id=\"onPause\"><a href=\"#onPause\" class=\"headerlink\" title=\"onPause()\"></a>onPause()</h3><p>Called when the system is about to start resuming a previous activity. This is typically used to commit unsaved changes to persistent data, stop animations and other things that may be consuming CPU, etc. Implementations of this method must be very quick because the next activity will not be resumed until this method returns.<br>Followed by either onResume() if the activity returns back to the front, or onStop() if it becomes invisible to the user<br>系统开始正在复位之前的activity时调用。这个经常用于提交未保存的改变的持久性数据，停止动画和其他消耗CPU等等的事情。这个方法的实现必须是非常快的，因为下一个activity将不会复位，直到这个方法return后。</p>\n<h3 id=\"onStop\"><a href=\"#onStop\" class=\"headerlink\" title=\"onStop()\"></a>onStop()</h3><p>Called when the activity is no longer visible to the user, because another activity has been resumed and is covering this one. This may happen either because a new activity is being started, an existing one is being brought in front of this one, or this one is being destroyed.<br>Followed by either onRestart() if this activity is coming back to interact with the user, or onDestroy() if this activity is going away.<br>当activity不再显示给用户时调用，因为其他activity 复位并且覆盖它。这可能发生要么是因为一个新的activity正在启动，一个存在的activity被带到前面的这一个activity，或者这一个activity正在被摧毁。</p>\n<h3 id=\"onDestory\"><a href=\"#onDestory\" class=\"headerlink\" title=\"onDestory()\"></a>onDestory()</h3><p>The final call you receive before your activity is destroyed. This can happen either because the activity is finishing (someone called finish() on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing() method.<br>在你的activity被销毁之前最终的调用。这会发生的原因，要么是activity正在完成（某人调用finish()在activity中，或者因为系统暂时销毁地activity的实例去节省内存。）</p>\n<h2 id=\"影响activity生命周期的几种情况\"><a href=\"#影响activity生命周期的几种情况\" class=\"headerlink\" title=\"影响activity生命周期的几种情况\"></a>影响activity生命周期的几种情况</h2><h3 id=\"按back按钮\"><a href=\"#按back按钮\" class=\"headerlink\" title=\"按back按钮\"></a>按back按钮</h3><p>当前Task：A，再创建B<br>以下为打印结果，当前Task:A-B</p>\n<p>由打印结果可以看A会预先调用OnPause()，表示开始进入暂时状态，等到目标启动B复位在前台显示时，才会执行onSaveInstanceState(Bundle outState)，再调用onStop()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:29:52.938 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause  </span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onCreate(Bundle savedInstanceState): 调用onCreate，获取当前Task的id4</span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:29:52.968 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onResume: 调用了onResume</span><br><span class=\"line\">03-27 13:29:53.398 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 13:29:53.398 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br></pre></td></tr></table></figure><br>当B按了“back”<br>以下为打印结果，此时Task:A<br>Activity并没有调用onRestoreInstanceState()，可能是activity在非常状态退出，可能会调用onRestoreInstanceState()恢复activity的实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:31:53.018 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onPause: 调用了onPause</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestart: 调用了onRestart</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:31:53.028 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br><span class=\"line\">03-27 13:31:53.438 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onStop: 调用onStop</span><br><span class=\"line\">03-27 13:31:53.438 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityB: onDestroy: 调用onDestroy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进入home\"><a href=\"#进入home\" class=\"headerlink\" title=\"进入home\"></a>进入home</h3><p>当前Task A-B,点击“Home”进入home screen</p>\n<p>B执行了onPause()-onSaveInstanceState(Bundle)-onStop()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:39:22.088 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause  </span><br><span class=\"line\">03-27 13:39:22.688 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 13:39:22.688 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br></pre></td></tr></table></figure><br>从Home恢复前台时，B并没有调用onRestoreInstanceState(Bundle)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestart: 调用了onRestart</span><br><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 13:41:55.068 5057-5057&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发生异常\"><a href=\"#发生异常\" class=\"headerlink\" title=\"发生异常\"></a>发生异常</h3><h4 id=\"onCreate-发生异常\"><a href=\"#onCreate-发生异常\" class=\"headerlink\" title=\"onCreate()发生异常\"></a>onCreate()发生异常</h4><p>onCreate—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy</p>\n<h4 id=\"onStart-发生异常\"><a href=\"#onStart-发生异常\" class=\"headerlink\" title=\"onStart()发生异常\"></a>onStart()发生异常</h4><p>onCreate—&gt;onStart—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy</p>\n<h4 id=\"onResume-发生异常\"><a href=\"#onResume-发生异常\" class=\"headerlink\" title=\"onResume()发生异常\"></a>onResume()发生异常</h4><p>onCreate—&gt;onStart—&gt;onResume—&gt;onPause—&gt;onSaveInstanceState()-&gt;onStop—&gt;onDestroy  </p>\n</blockquote>\n<h3 id=\"横竖屏切换\"><a href=\"#横竖屏切换\" class=\"headerlink\" title=\"横竖屏切换\"></a>横竖屏切换</h3><blockquote>\n<p>当前Task:A,处于坚屏状态<br>当A 进入横屏状态<br>onPause()-&gt;onSaveInstanceState(Bundle)-&gt;onStop()-onDestory-&gt;onCreate(Bundle)-&gt;onStart()-onRestoreInstanceState(Bundle)-onResume()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onPause: 调用了onPause</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onSaveInstanceState(Bundle outState): 保存状态信息</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStop: 调用onStop</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onDestroy: 调用onDestroy</span><br><span class=\"line\">03-27 14:10:57.668 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onCreate: 调用onCreate，获取当前Task的id12</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onStart: 调用onstart()</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onRestoreInstanceState(Bundle savedInstanceState): 恢复实例</span><br><span class=\"line\">03-27 14:10:57.708 10213-10213&#x2F;com.app.androidbasic I&#x2F;ActivityA: onResume: 调用了onResume</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更高优先级的应用需要内存\"><a href=\"#更高优先级的应用需要内存\" class=\"headerlink\" title=\"更高优先级的应用需要内存\"></a>更高优先级的应用需要内存</h3><p>onStop()-&gt;onCreate()-onStart()-onResume()</p>\n<p>有不对的地方，还请大神多指教</p>\n</blockquote>"},{"title":"Websphere Application Server之知识汇总","urlname":"gb7szd","date":"2020-02-24T14:21:16.000Z","_content":"<a name=\"NWeFj\"></a>\n# 参考链接\n<a name=\"UmoyM\"></a>\n# Websphere Application Server之知识汇总\n<a name=\"hmN5K\"></a>\n## Summary\nTO-DO<br />\n<a name=\"3nmOQ\"></a>\n## delete profile\n\n```powershell\n:delete profile by using windows command \nC:\\IBM\\WebSphere\\AppServer\\bin\\manageprofiles.bat -delete -profileName [profile name] -username [admin username]-password [admin password]\n```\n\n\n","source":"_posts/yuque/Websphere Application Server之知识汇总.md","raw":"\n---\n\ntitle: Websphere Application Server之知识汇总\n\nurlname: gb7szd\n\ndate: 2020-02-24 22:21:16 +0800\n\ntags: []\n\n---\n<a name=\"NWeFj\"></a>\n# 参考链接\n<a name=\"UmoyM\"></a>\n# Websphere Application Server之知识汇总\n<a name=\"hmN5K\"></a>\n## Summary\nTO-DO<br />\n<a name=\"3nmOQ\"></a>\n## delete profile\n\n```powershell\n:delete profile by using windows command \nC:\\IBM\\WebSphere\\AppServer\\bin\\manageprofiles.bat -delete -profileName [profile name] -username [admin username]-password [admin password]\n```\n\n\n","slug":"yuque/Websphere Application Server之知识汇总","published":1,"updated":"2020-02-29T07:15:14.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimb005jy8ush5zyyoka","content":"<p><a name=\"NWeFj\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a name=\"UmoyM\"></a></p>\n<h1 id=\"Websphere-Application-Server之知识汇总\"><a href=\"#Websphere-Application-Server之知识汇总\" class=\"headerlink\" title=\"Websphere Application Server之知识汇总\"></a>Websphere Application Server之知识汇总</h1><p><a name=\"hmN5K\"></a></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>TO-DO<br><br><a name=\"3nmOQ\"></a></p>\n<h2 id=\"delete-profile\"><a href=\"#delete-profile\" class=\"headerlink\" title=\"delete profile\"></a>delete profile</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:delete profile by <span class=\"keyword\">using</span> windows <span class=\"keyword\">command</span> </span><br><span class=\"line\">C:\\IBM\\WebSphere\\AppServer\\bin\\manageprofiles.bat <span class=\"literal\">-delete</span> <span class=\"literal\">-profileName</span> [<span class=\"type\">profile</span> <span class=\"type\">name</span>] <span class=\"literal\">-username</span> [<span class=\"type\">admin</span> <span class=\"type\">username</span>]<span class=\"literal\">-password</span> [<span class=\"type\">admin</span> <span class=\"type\">password</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"NWeFj\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a name=\"UmoyM\"></a></p>\n<h1 id=\"Websphere-Application-Server之知识汇总\"><a href=\"#Websphere-Application-Server之知识汇总\" class=\"headerlink\" title=\"Websphere Application Server之知识汇总\"></a>Websphere Application Server之知识汇总</h1><p><a name=\"hmN5K\"></a></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>TO-DO<br><br><a name=\"3nmOQ\"></a></p>\n<h2 id=\"delete-profile\"><a href=\"#delete-profile\" class=\"headerlink\" title=\"delete profile\"></a>delete profile</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:delete profile by <span class=\"keyword\">using</span> windows <span class=\"keyword\">command</span> </span><br><span class=\"line\">C:\\IBM\\WebSphere\\AppServer\\bin\\manageprofiles.bat <span class=\"literal\">-delete</span> <span class=\"literal\">-profileName</span> [<span class=\"type\">profile</span> <span class=\"type\">name</span>] <span class=\"literal\">-username</span> [<span class=\"type\">admin</span> <span class=\"type\">username</span>]<span class=\"literal\">-password</span> [<span class=\"type\">admin</span> <span class=\"type\">password</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"android小经验","urlname":"uninya","date":"2020-01-12T10:28:30.000Z","_content":"<a name=\"OgWCa\"></a>\n# \n\n<a name=\"AgUOM\"></a>\n# android 小经验\n<a name=\"Ki9vI\"></a>\n## 参考链接\n<br />[StaticLayout——AndroidDeveloper@google](https://developer.android.google.cn/reference/kotlin/android/text/StaticLayout?hl=en)\n<a name=\"Iremp\"></a>\n## getMeasuredHeight和getMeasuredWidth为0\n是由于getMeasuredHeight和getMeasuredWidth需要先经过测量，如果在未测量结束时调用则无法获取，可以通过在post方法内调用，post方法会在布局渲染结束后调用<br />\n\n```java\nview.post(new Runnable(){\n\t//content for your code\n    int height=view.getMeasuredHeight();\n});\n```\n\n<a name=\"e4Txb\"></a>\n## 返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)\n\n> StaticLayout is a Layout for text that will not be edited after it is laid out. Use `[DynamicLayout](https://developer.android.google.cn/reference/kotlin/android/text/DynamicLayout.html)` for text that may change.\n> StaticLayout是一个针对文本的布局，它在布局后不能被编辑。使用针对文本的DynamicLayout可以改变。\n> This is used by widgets to control text layout. You should not \nneed to use this class directly unless you are implementing your own \nwidget or custom display object, or would be tempted to call `[ Canvas.drawText()](https://developer.android.google.cn/reference/kotlin/android/graphics/Canvas.html#drawText(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Float,%20kotlin.Float,%20android.graphics.Paint))` directly.\n> 这是被控件使用去控制文本布局的。你应该不需要直接去使用它的，除非你想实现你自己的控件或者自定义显示对象，又或者试图直接调用Canvas.drawText()。\n\n上面是摘取自官方文档，StaticLayout针对文本的布局，需要有很多针对文本封装好的方法getDesiredWidth()就是其中一个，getDesiredWidth()可以传入一段字符，计算字符绘制所需的宽度。\n\n> _Return how wide a layout must be in order to display the specified text with one line per  paragraph._\n> _返回一个布局的宽度用于显示指定每个段落中的一行文本<br />_\n\n以上摘取自Android API文档<br />\n\n","source":"_posts/yuque/android小经验.md","raw":"\n---\n\ntitle: android小经验\n\nurlname: uninya\n\ndate: 2020-01-12 18:28:30 +0800\n\ntags: []\n\n---\n<a name=\"OgWCa\"></a>\n# \n\n<a name=\"AgUOM\"></a>\n# android 小经验\n<a name=\"Ki9vI\"></a>\n## 参考链接\n<br />[StaticLayout——AndroidDeveloper@google](https://developer.android.google.cn/reference/kotlin/android/text/StaticLayout?hl=en)\n<a name=\"Iremp\"></a>\n## getMeasuredHeight和getMeasuredWidth为0\n是由于getMeasuredHeight和getMeasuredWidth需要先经过测量，如果在未测量结束时调用则无法获取，可以通过在post方法内调用，post方法会在布局渲染结束后调用<br />\n\n```java\nview.post(new Runnable(){\n\t//content for your code\n    int height=view.getMeasuredHeight();\n});\n```\n\n<a name=\"e4Txb\"></a>\n## 返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)\n\n> StaticLayout is a Layout for text that will not be edited after it is laid out. Use `[DynamicLayout](https://developer.android.google.cn/reference/kotlin/android/text/DynamicLayout.html)` for text that may change.\n> StaticLayout是一个针对文本的布局，它在布局后不能被编辑。使用针对文本的DynamicLayout可以改变。\n> This is used by widgets to control text layout. You should not \nneed to use this class directly unless you are implementing your own \nwidget or custom display object, or would be tempted to call `[ Canvas.drawText()](https://developer.android.google.cn/reference/kotlin/android/graphics/Canvas.html#drawText(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Float,%20kotlin.Float,%20android.graphics.Paint))` directly.\n> 这是被控件使用去控制文本布局的。你应该不需要直接去使用它的，除非你想实现你自己的控件或者自定义显示对象，又或者试图直接调用Canvas.drawText()。\n\n上面是摘取自官方文档，StaticLayout针对文本的布局，需要有很多针对文本封装好的方法getDesiredWidth()就是其中一个，getDesiredWidth()可以传入一段字符，计算字符绘制所需的宽度。\n\n> _Return how wide a layout must be in order to display the specified text with one line per  paragraph._\n> _返回一个布局的宽度用于显示指定每个段落中的一行文本<br />_\n\n以上摘取自Android API文档<br />\n\n","slug":"yuque/android小经验","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimf005oy8usawe45x1x","content":"<p><a name=\"OgWCa\"></a></p>\n<p># </p>\n<p><a name=\"AgUOM\"></a></p>\n<h1 id=\"android-小经验\"><a href=\"#android-小经验\" class=\"headerlink\" title=\"android 小经验\"></a>android 小经验</h1><p><a name=\"Ki9vI\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><br><a href=\"https://developer.android.google.cn/reference/kotlin/android/text/StaticLayout?hl=en\" target=\"_blank\" rel=\"noopener\">StaticLayout——AndroidDeveloper@google</a><br><a name=\"Iremp\"></a></p>\n<h2 id=\"getMeasuredHeight和getMeasuredWidth为0\"><a href=\"#getMeasuredHeight和getMeasuredWidth为0\" class=\"headerlink\" title=\"getMeasuredHeight和getMeasuredWidth为0\"></a>getMeasuredHeight和getMeasuredWidth为0</h2><p>是由于getMeasuredHeight和getMeasuredWidth需要先经过测量，如果在未测量结束时调用则无法获取，可以通过在post方法内调用，post方法会在布局渲染结束后调用<br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//content for your code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> height=view.getMeasuredHeight();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"e4Txb\"></a></p>\n<h2 id=\"返回需要绘制的宽度StaticLayout-getDesiredWidth-CharSequence-source-TextPaint-paint\"><a href=\"#返回需要绘制的宽度StaticLayout-getDesiredWidth-CharSequence-source-TextPaint-paint\" class=\"headerlink\" title=\"返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)\"></a>返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)</h2><blockquote>\n<p>StaticLayout is a Layout for text that will not be edited after it is laid out. Use <code>[DynamicLayout](https://developer.android.google.cn/reference/kotlin/android/text/DynamicLayout.html)</code> for text that may change.<br>StaticLayout是一个针对文本的布局，它在布局后不能被编辑。使用针对文本的DynamicLayout可以改变。<br>This is used by widgets to control text layout. You should not<br>need to use this class directly unless you are implementing your own<br>widget or custom display object, or would be tempted to call <code>[ Canvas.drawText()](https://developer.android.google.cn/reference/kotlin/android/graphics/Canvas.html#drawText(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Float,%20kotlin.Float,%20android.graphics.Paint))</code> directly.<br>这是被控件使用去控制文本布局的。你应该不需要直接去使用它的，除非你想实现你自己的控件或者自定义显示对象，又或者试图直接调用Canvas.drawText()。</p>\n</blockquote>\n<p>上面是摘取自官方文档，StaticLayout针对文本的布局，需要有很多针对文本封装好的方法getDesiredWidth()就是其中一个，getDesiredWidth()可以传入一段字符，计算字符绘制所需的宽度。</p>\n<blockquote>\n<p><em>Return how wide a layout must be in order to display the specified text with one line per  paragraph.</em><br><em>返回一个布局的宽度用于显示指定每个段落中的一行文本<br></em></p>\n</blockquote>\n<p>以上摘取自Android API文档<br></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"OgWCa\"></a></p>\n<p># </p>\n<p><a name=\"AgUOM\"></a></p>\n<h1 id=\"android-小经验\"><a href=\"#android-小经验\" class=\"headerlink\" title=\"android 小经验\"></a>android 小经验</h1><p><a name=\"Ki9vI\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><br><a href=\"https://developer.android.google.cn/reference/kotlin/android/text/StaticLayout?hl=en\" target=\"_blank\" rel=\"noopener\">StaticLayout——AndroidDeveloper@google</a><br><a name=\"Iremp\"></a></p>\n<h2 id=\"getMeasuredHeight和getMeasuredWidth为0\"><a href=\"#getMeasuredHeight和getMeasuredWidth为0\" class=\"headerlink\" title=\"getMeasuredHeight和getMeasuredWidth为0\"></a>getMeasuredHeight和getMeasuredWidth为0</h2><p>是由于getMeasuredHeight和getMeasuredWidth需要先经过测量，如果在未测量结束时调用则无法获取，可以通过在post方法内调用，post方法会在布局渲染结束后调用<br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.post(<span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//content for your code</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> height=view.getMeasuredHeight();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"e4Txb\"></a></p>\n<h2 id=\"返回需要绘制的宽度StaticLayout-getDesiredWidth-CharSequence-source-TextPaint-paint\"><a href=\"#返回需要绘制的宽度StaticLayout-getDesiredWidth-CharSequence-source-TextPaint-paint\" class=\"headerlink\" title=\"返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)\"></a>返回需要绘制的宽度StaticLayout.getDesiredWidth(CharSequence source,TextPaint paint)</h2><blockquote>\n<p>StaticLayout is a Layout for text that will not be edited after it is laid out. Use <code>[DynamicLayout](https://developer.android.google.cn/reference/kotlin/android/text/DynamicLayout.html)</code> for text that may change.<br>StaticLayout是一个针对文本的布局，它在布局后不能被编辑。使用针对文本的DynamicLayout可以改变。<br>This is used by widgets to control text layout. You should not<br>need to use this class directly unless you are implementing your own<br>widget or custom display object, or would be tempted to call <code>[ Canvas.drawText()](https://developer.android.google.cn/reference/kotlin/android/graphics/Canvas.html#drawText(kotlin.CharSequence,%20kotlin.Int,%20kotlin.Int,%20kotlin.Float,%20kotlin.Float,%20android.graphics.Paint))</code> directly.<br>这是被控件使用去控制文本布局的。你应该不需要直接去使用它的，除非你想实现你自己的控件或者自定义显示对象，又或者试图直接调用Canvas.drawText()。</p>\n</blockquote>\n<p>上面是摘取自官方文档，StaticLayout针对文本的布局，需要有很多针对文本封装好的方法getDesiredWidth()就是其中一个，getDesiredWidth()可以传入一段字符，计算字符绘制所需的宽度。</p>\n<blockquote>\n<p><em>Return how wide a layout must be in order to display the specified text with one line per  paragraph.</em><br><em>返回一个布局的宽度用于显示指定每个段落中的一行文本<br></em></p>\n</blockquote>\n<p>以上摘取自Android API文档<br></p>\n"},{"title":"go之我的第一个go程序","urlname":"pnyr7b","date":"2019-10-18T14:04:26.000Z","_content":"<a name=\"xubnw\"></a>\n# go之我的第一个go程序\n<a name=\"nuArP\"></a>\n## 参考链接\n[Getting Started——Go](https://golang.google.cn/doc/install?download=go1.13.3.linux-amd64.tar.gz#install)\n<a name=\"phTK8\"></a>\n## 下载go\n我使用的是deepin linux，所以本文是在linux下编写的，首先在go官网下载压缩包，并解压到“/usr/local”路径下，解压后是路径是“/usr/local/go”<br />\n\n```bash\ntar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz\n```\n\n<a name=\"XOdUG\"></a>\n## 环境变量\n使用以下命令行修改profile文件，在profile文件中插入“export PATH=$PATH:/usr/local/go/bin”<br />\n```bash\nvi /etc/profile\n```\n插入请输入i，移动光标，到指定位置输入“export PATH=$PATH:/usr/local/go/bin”，按Esc，并输入“:wq”保存并退出即可。\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571409177442-c508f544-0c88-4b1a-afd8-d90e71a77a65.png#align=left&display=inline&height=332&name=image.png&originHeight=332&originWidth=745&size=51136&status=done&width=745)\n<a name=\"GuXuN\"></a>\n## 刷新环境变量\n\n```bash\nsource /etc/proflie\n```\n\n<a name=\"r0GYO\"></a>\n## demo\n在任意一个文件夹中创建文件名为hello.go，并输入以下文件内容<br />\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"hello, world\\n\")\n}\n```\n在当前路径下打开终端，输入以下代码编译go程序,＂$HOME/go/src/hello＂是我存放文件的路径。编译完成后会发现多了一个hello的可执行文件。<br />\n\n```bash\ncd $HOME/go/src/hello\ngo build\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571409673843-af2fafea-36a7-4b4f-adef-9a0d1ea2fe7e.png#align=left&display=inline&height=126&name=image.png&originHeight=126&originWidth=667&size=13603&status=done&width=667)<br />“./<可执行程序>”,表示运行该程序，输入以下命令行运行go程序。\n\n```bash\n./hello\n```\nhello, world\n\n","source":"_posts/yuque/go之我的第一个go程序.md","raw":"\n---\n\ntitle: go之我的第一个go程序\n\nurlname: pnyr7b\n\ndate: 2019-10-18 22:04:26 +0800\n\ntags: []\n\n---\n<a name=\"xubnw\"></a>\n# go之我的第一个go程序\n<a name=\"nuArP\"></a>\n## 参考链接\n[Getting Started——Go](https://golang.google.cn/doc/install?download=go1.13.3.linux-amd64.tar.gz#install)\n<a name=\"phTK8\"></a>\n## 下载go\n我使用的是deepin linux，所以本文是在linux下编写的，首先在go官网下载压缩包，并解压到“/usr/local”路径下，解压后是路径是“/usr/local/go”<br />\n\n```bash\ntar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz\n```\n\n<a name=\"XOdUG\"></a>\n## 环境变量\n使用以下命令行修改profile文件，在profile文件中插入“export PATH=$PATH:/usr/local/go/bin”<br />\n```bash\nvi /etc/profile\n```\n插入请输入i，移动光标，到指定位置输入“export PATH=$PATH:/usr/local/go/bin”，按Esc，并输入“:wq”保存并退出即可。\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571409177442-c508f544-0c88-4b1a-afd8-d90e71a77a65.png#align=left&display=inline&height=332&name=image.png&originHeight=332&originWidth=745&size=51136&status=done&width=745)\n<a name=\"GuXuN\"></a>\n## 刷新环境变量\n\n```bash\nsource /etc/proflie\n```\n\n<a name=\"r0GYO\"></a>\n## demo\n在任意一个文件夹中创建文件名为hello.go，并输入以下文件内容<br />\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"hello, world\\n\")\n}\n```\n在当前路径下打开终端，输入以下代码编译go程序,＂$HOME/go/src/hello＂是我存放文件的路径。编译完成后会发现多了一个hello的可执行文件。<br />\n\n```bash\ncd $HOME/go/src/hello\ngo build\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571409673843-af2fafea-36a7-4b4f-adef-9a0d1ea2fe7e.png#align=left&display=inline&height=126&name=image.png&originHeight=126&originWidth=667&size=13603&status=done&width=667)<br />“./<可执行程序>”,表示运行该程序，输入以下命令行运行go程序。\n\n```bash\n./hello\n```\nhello, world\n\n","slug":"yuque/go之我的第一个go程序","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimg005ry8us42iccszk","content":"<p><a name=\"xubnw\"></a></p>\n<h1 id=\"go之我的第一个go程序\"><a href=\"#go之我的第一个go程序\" class=\"headerlink\" title=\"go之我的第一个go程序\"></a>go之我的第一个go程序</h1><p><a name=\"nuArP\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://golang.google.cn/doc/install?download=go1.13.3.linux-amd64.tar.gz#install\" target=\"_blank\" rel=\"noopener\">Getting Started——Go</a><br><a name=\"phTK8\"></a></p>\n<h2 id=\"下载go\"><a href=\"#下载go\" class=\"headerlink\" title=\"下载go\"></a>下载go</h2><p>我使用的是deepin linux，所以本文是在linux下编写的，首先在go官网下载压缩包，并解压到“/usr/local”路径下，解压后是路径是“/usr/local/go”<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.13.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a name=\"XOdUG\"></a></p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>使用以下命令行修改profile文件，在profile文件中插入“export PATH=$PATH:/usr/local/go/bin”<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure><br>插入请输入i，移动光标，到指定位置输入“export PATH=$PATH:/usr/local/go/bin”，按Esc，并输入“:wq”保存并退出即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571409177442-c508f544-0c88-4b1a-afd8-d90e71a77a65.png#align=left&amp;display=inline&amp;height=332&amp;name=image.png&amp;originHeight=332&amp;originWidth=745&amp;size=51136&amp;status=done&amp;width=745\" alt=\"image.png\"><br><a name=\"GuXuN\"></a></p>\n<h2 id=\"刷新环境变量\"><a href=\"#刷新环境变量\" class=\"headerlink\" title=\"刷新环境变量\"></a>刷新环境变量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/proflie</span><br></pre></td></tr></table></figure>\n<p><a name=\"r0GYO\"></a></p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>在任意一个文件夹中创建文件名为hello.go，并输入以下文件内容<br></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"hello, world\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在当前路径下打开终端，输入以下代码编译go程序,＂$HOME/go/src/hello＂是我存放文件的路径。编译完成后会发现多了一个hello的可执行文件。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/go/src/hello</span><br><span class=\"line\">go build</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571409673843-af2fafea-36a7-4b4f-adef-9a0d1ea2fe7e.png#align=left&amp;display=inline&amp;height=126&amp;name=image.png&amp;originHeight=126&amp;originWidth=667&amp;size=13603&amp;status=done&amp;width=667\" alt=\"image.png\"><br>“./&lt;可执行程序&gt;”,表示运行该程序，输入以下命令行运行go程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hello</span><br></pre></td></tr></table></figure>\n<p>hello, world</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"xubnw\"></a></p>\n<h1 id=\"go之我的第一个go程序\"><a href=\"#go之我的第一个go程序\" class=\"headerlink\" title=\"go之我的第一个go程序\"></a>go之我的第一个go程序</h1><p><a name=\"nuArP\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://golang.google.cn/doc/install?download=go1.13.3.linux-amd64.tar.gz#install\" target=\"_blank\" rel=\"noopener\">Getting Started——Go</a><br><a name=\"phTK8\"></a></p>\n<h2 id=\"下载go\"><a href=\"#下载go\" class=\"headerlink\" title=\"下载go\"></a>下载go</h2><p>我使用的是deepin linux，所以本文是在linux下编写的，首先在go官网下载压缩包，并解压到“/usr/local”路径下，解压后是路径是“/usr/local/go”<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.13.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n<p><a name=\"XOdUG\"></a></p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>使用以下命令行修改profile文件，在profile文件中插入“export PATH=$PATH:/usr/local/go/bin”<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure><br>插入请输入i，移动光标，到指定位置输入“export PATH=$PATH:/usr/local/go/bin”，按Esc，并输入“:wq”保存并退出即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571409177442-c508f544-0c88-4b1a-afd8-d90e71a77a65.png#align=left&amp;display=inline&amp;height=332&amp;name=image.png&amp;originHeight=332&amp;originWidth=745&amp;size=51136&amp;status=done&amp;width=745\" alt=\"image.png\"><br><a name=\"GuXuN\"></a></p>\n<h2 id=\"刷新环境变量\"><a href=\"#刷新环境变量\" class=\"headerlink\" title=\"刷新环境变量\"></a>刷新环境变量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/proflie</span><br></pre></td></tr></table></figure>\n<p><a name=\"r0GYO\"></a></p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>在任意一个文件夹中创建文件名为hello.go，并输入以下文件内容<br></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"hello, world\\n\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在当前路径下打开终端，输入以下代码编译go程序,＂$HOME/go/src/hello＂是我存放文件的路径。编译完成后会发现多了一个hello的可执行文件。<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$HOME</span>/go/src/hello</span><br><span class=\"line\">go build</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571409673843-af2fafea-36a7-4b4f-adef-9a0d1ea2fe7e.png#align=left&amp;display=inline&amp;height=126&amp;name=image.png&amp;originHeight=126&amp;originWidth=667&amp;size=13603&amp;status=done&amp;width=667\" alt=\"image.png\"><br>“./&lt;可执行程序&gt;”,表示运行该程序，输入以下命令行运行go程序。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./hello</span><br></pre></td></tr></table></figure>\n<p>hello, world</p>\n"},{"title":"java之如何使当前程序使用代理","urlname":"xg2mli","date":"2019-05-05T04:13:10.000Z","_content":"<a name=\"VKpaC\"></a>\n# 参考链接\n\n[java中设置网络代理——简书@jijs](https://www.jianshu.com/p/9e1abe05314d) \n\n<a name=\"9rrtR\"></a>\n# java之如何使当前程序使用代理\n<a name=\"jldiB\"></a>\n## 概述\n<a name=\"cSPtQ\"></a>\n## java中支持的代理\njava中支持 HTTP代理、HTTPS代理、Socket代理、FTP代理 。\n\n<!--more-->\n<a name=\"emjLU\"></a>\n## 程序中编写程序使用代理\n\n```java\n//使用http协议\nSystem.setProperty(\"http.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"http.proxyPort\", \"808\");\nSystem.setProperty(\"http.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//https代理\nSystem.setProperty(\"https.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"https.proxyPort\", \"808\");\nSystem.setProperty(\"https.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//ftp代理\nSystem.setProperty(\"ftp.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"ftp.proxyPort\", \"808\");\nSystem.setProperty(\"ftp.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//使用socks协议连接\nProperties prop = System.getProperties();\nprop.put(\"proxySet\", true);\nprop.setProperty(\"socksProxyHost\", \"143.168.16.188\");\nprop.setProperty(\"socksProxyPort\", \"1780\");\n//注意：socks无法使用忽略IP配置\n//prop.setProperty(\"nonProxyHosts\", \"192.168.1.82\");//192.168.1.82 | 192.168.3.100\n\n```\n\n<a name=\"lasfA\"></a>\n## jvm变量中设置代理\n\n```powershell\n# 在系统启动时，使用-D项来设置代理。\n# http代理\njava -Dhttp.ProxyHost=143.168.16.188 -Dhttp.ProxyPort=1780 com.test.mydemo\n# https代理\njava -Dhttps.ProxyHost=143.168.16.188 -Dhttps.ProxyPort=1780 com.test.mydemo\n# ftp代理\njava -Dftp.ProxyHost=143.168.16.188 -Dftp.ProxyPort=1780 com.test.mydemo\n# socks代理\njava -Dsocks.ProxyHost=143.168.16.188 -Dsocks.ProxyPort=1780 com.test.mydemo\n```\n\n\n","source":"_posts/yuque/java之如何使当前程序使用代理.md","raw":"\n---\n\ntitle: java之如何使当前程序使用代理\n\nurlname: xg2mli\n\ndate: 2019-05-05 12:13:10 +0800\n\ntags: []\n\n---\n<a name=\"VKpaC\"></a>\n# 参考链接\n\n[java中设置网络代理——简书@jijs](https://www.jianshu.com/p/9e1abe05314d) \n\n<a name=\"9rrtR\"></a>\n# java之如何使当前程序使用代理\n<a name=\"jldiB\"></a>\n## 概述\n<a name=\"cSPtQ\"></a>\n## java中支持的代理\njava中支持 HTTP代理、HTTPS代理、Socket代理、FTP代理 。\n\n<!--more-->\n<a name=\"emjLU\"></a>\n## 程序中编写程序使用代理\n\n```java\n//使用http协议\nSystem.setProperty(\"http.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"http.proxyPort\", \"808\");\nSystem.setProperty(\"http.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//https代理\nSystem.setProperty(\"https.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"https.proxyPort\", \"808\");\nSystem.setProperty(\"https.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//ftp代理\nSystem.setProperty(\"ftp.proxyHost\", \"192.168.10.130\");\nSystem.setProperty(\"ftp.proxyPort\", \"808\");\nSystem.setProperty(\"ftp.nonProxyHosts\", \"192.168.3.249 | 192.168.3.100\");\n//使用socks协议连接\nProperties prop = System.getProperties();\nprop.put(\"proxySet\", true);\nprop.setProperty(\"socksProxyHost\", \"143.168.16.188\");\nprop.setProperty(\"socksProxyPort\", \"1780\");\n//注意：socks无法使用忽略IP配置\n//prop.setProperty(\"nonProxyHosts\", \"192.168.1.82\");//192.168.1.82 | 192.168.3.100\n\n```\n\n<a name=\"lasfA\"></a>\n## jvm变量中设置代理\n\n```powershell\n# 在系统启动时，使用-D项来设置代理。\n# http代理\njava -Dhttp.ProxyHost=143.168.16.188 -Dhttp.ProxyPort=1780 com.test.mydemo\n# https代理\njava -Dhttps.ProxyHost=143.168.16.188 -Dhttps.ProxyPort=1780 com.test.mydemo\n# ftp代理\njava -Dftp.ProxyHost=143.168.16.188 -Dftp.ProxyPort=1780 com.test.mydemo\n# socks代理\njava -Dsocks.ProxyHost=143.168.16.188 -Dsocks.ProxyPort=1780 com.test.mydemo\n```\n\n\n","slug":"yuque/java之如何使当前程序使用代理","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimi005vy8usv5q3726a","content":"<p><a name=\"VKpaC\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.jianshu.com/p/9e1abe05314d\" target=\"_blank\" rel=\"noopener\">java中设置网络代理——简书@jijs</a> </p>\n<p><a name=\"9rrtR\"></a></p>\n<h1 id=\"java之如何使当前程序使用代理\"><a href=\"#java之如何使当前程序使用代理\" class=\"headerlink\" title=\"java之如何使当前程序使用代理\"></a>java之如何使当前程序使用代理</h1><p><a name=\"jldiB\"></a></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a name=\"cSPtQ\"></a></p>\n<h2 id=\"java中支持的代理\"><a href=\"#java中支持的代理\" class=\"headerlink\" title=\"java中支持的代理\"></a>java中支持的代理</h2><p>java中支持 HTTP代理、HTTPS代理、Socket代理、FTP代理 。</p>\n<a id=\"more\"></a>\n<p><a name=\"emjLU\"></a></p>\n<h2 id=\"程序中编写程序使用代理\"><a href=\"#程序中编写程序使用代理\" class=\"headerlink\" title=\"程序中编写程序使用代理\"></a>程序中编写程序使用代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用http协议</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//https代理</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//ftp代理</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//使用socks协议连接</span></span><br><span class=\"line\">Properties prop = System.getProperties();</span><br><span class=\"line\">prop.put(<span class=\"string\">\"proxySet\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">prop.setProperty(<span class=\"string\">\"socksProxyHost\"</span>, <span class=\"string\">\"143.168.16.188\"</span>);</span><br><span class=\"line\">prop.setProperty(<span class=\"string\">\"socksProxyPort\"</span>, <span class=\"string\">\"1780\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//注意：socks无法使用忽略IP配置</span></span><br><span class=\"line\"><span class=\"comment\">//prop.setProperty(\"nonProxyHosts\", \"192.168.1.82\");//192.168.1.82 | 192.168.3.100</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"lasfA\"></a></p>\n<h2 id=\"jvm变量中设置代理\"><a href=\"#jvm变量中设置代理\" class=\"headerlink\" title=\"jvm变量中设置代理\"></a>jvm变量中设置代理</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在系统启动时，使用-D项来设置代理。</span></span><br><span class=\"line\"><span class=\"comment\"># http代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dhttp</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dhttp</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># https代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dhttps</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dhttps</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># ftp代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dftp</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dftp</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># socks代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dsocks</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dsocks</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a name=\"VKpaC\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.jianshu.com/p/9e1abe05314d\" target=\"_blank\" rel=\"noopener\">java中设置网络代理——简书@jijs</a> </p>\n<p><a name=\"9rrtR\"></a></p>\n<h1 id=\"java之如何使当前程序使用代理\"><a href=\"#java之如何使当前程序使用代理\" class=\"headerlink\" title=\"java之如何使当前程序使用代理\"></a>java之如何使当前程序使用代理</h1><p><a name=\"jldiB\"></a></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a name=\"cSPtQ\"></a></p>\n<h2 id=\"java中支持的代理\"><a href=\"#java中支持的代理\" class=\"headerlink\" title=\"java中支持的代理\"></a>java中支持的代理</h2><p>java中支持 HTTP代理、HTTPS代理、Socket代理、FTP代理 。</p>","more":"<p><a name=\"emjLU\"></a></p>\n<h2 id=\"程序中编写程序使用代理\"><a href=\"#程序中编写程序使用代理\" class=\"headerlink\" title=\"程序中编写程序使用代理\"></a>程序中编写程序使用代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用http协议</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"http.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//https代理</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"https.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//ftp代理</span></span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.proxyHost\"</span>, <span class=\"string\">\"192.168.10.130\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.proxyPort\"</span>, <span class=\"string\">\"808\"</span>);</span><br><span class=\"line\">System.setProperty(<span class=\"string\">\"ftp.nonProxyHosts\"</span>, <span class=\"string\">\"192.168.3.249 | 192.168.3.100\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//使用socks协议连接</span></span><br><span class=\"line\">Properties prop = System.getProperties();</span><br><span class=\"line\">prop.put(<span class=\"string\">\"proxySet\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">prop.setProperty(<span class=\"string\">\"socksProxyHost\"</span>, <span class=\"string\">\"143.168.16.188\"</span>);</span><br><span class=\"line\">prop.setProperty(<span class=\"string\">\"socksProxyPort\"</span>, <span class=\"string\">\"1780\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//注意：socks无法使用忽略IP配置</span></span><br><span class=\"line\"><span class=\"comment\">//prop.setProperty(\"nonProxyHosts\", \"192.168.1.82\");//192.168.1.82 | 192.168.3.100</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"lasfA\"></a></p>\n<h2 id=\"jvm变量中设置代理\"><a href=\"#jvm变量中设置代理\" class=\"headerlink\" title=\"jvm变量中设置代理\"></a>jvm变量中设置代理</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在系统启动时，使用-D项来设置代理。</span></span><br><span class=\"line\"><span class=\"comment\"># http代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dhttp</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dhttp</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># https代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dhttps</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dhttps</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># ftp代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dftp</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dftp</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br><span class=\"line\"><span class=\"comment\"># socks代理</span></span><br><span class=\"line\">java <span class=\"literal\">-Dsocks</span>.ProxyHost=<span class=\"number\">143.168</span>.<span class=\"number\">16.188</span> <span class=\"literal\">-Dsocks</span>.ProxyPort=<span class=\"number\">1780</span> com.test.mydemo</span><br></pre></td></tr></table></figure>"},{"title":"java经验","urlname":"ec4gpt","date":"2020-02-11T03:29:58.000Z","_content":"<a name=\"7Ght7\"></a>\n# java 经验\n<a name=\"88wtx\"></a>\n## what different between Boolean.TRUE and true\n<a name=\"Cu6Cf\"></a>\n### 参考链接\n[What the difference between Boolean.TRUE and true](https://stackoverflow.com/questions/31775618/what-the-difference-between-boolean-true-and-true)\n<a name=\"RDmHr\"></a>\n### 说明\n> \n> Firstly, I have\n\n> ```\nprivate Map<String, Boolean> mem = new HashMap<String, Boolean>();\n```\n\n> And then:\n\n> ```\nif (wordDict.contains(s) ||  Boolean.TRUE==mem.get(s)) {\n        return true;\n    }\n```\n\n> why can't I use \"mem.get(s)==true\" in the if statement. There will be a error \"Line 6: java.lang.NullPointerException\"\n\n> I think I still cannot understant wrapper class well. Please give me some guidance. Thank you!\n\n\n\n","source":"_posts/yuque/java经验.md","raw":"\n---\n\ntitle: java经验\n\nurlname: ec4gpt\n\ndate: 2020-02-11 11:29:58 +0800\n\ntags: []\n\n---\n<a name=\"7Ght7\"></a>\n# java 经验\n<a name=\"88wtx\"></a>\n## what different between Boolean.TRUE and true\n<a name=\"Cu6Cf\"></a>\n### 参考链接\n[What the difference between Boolean.TRUE and true](https://stackoverflow.com/questions/31775618/what-the-difference-between-boolean-true-and-true)\n<a name=\"RDmHr\"></a>\n### 说明\n> \n> Firstly, I have\n\n> ```\nprivate Map<String, Boolean> mem = new HashMap<String, Boolean>();\n```\n\n> And then:\n\n> ```\nif (wordDict.contains(s) ||  Boolean.TRUE==mem.get(s)) {\n        return true;\n    }\n```\n\n> why can't I use \"mem.get(s)==true\" in the if statement. There will be a error \"Line 6: java.lang.NullPointerException\"\n\n> I think I still cannot understant wrapper class well. Please give me some guidance. Thank you!\n\n\n\n","slug":"yuque/java经验","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimk005xy8ustuxdfgim","content":"<p><a name=\"7Ght7\"></a></p>\n<h1 id=\"java-经验\"><a href=\"#java-经验\" class=\"headerlink\" title=\"java 经验\"></a>java 经验</h1><p><a name=\"88wtx\"></a></p>\n<h2 id=\"what-different-between-Boolean-TRUE-and-true\"><a href=\"#what-different-between-Boolean-TRUE-and-true\" class=\"headerlink\" title=\"what different between Boolean.TRUE and true\"></a>what different between Boolean.TRUE and true</h2><p><a name=\"Cu6Cf\"></a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://stackoverflow.com/questions/31775618/what-the-difference-between-boolean-true-and-true\" target=\"_blank\" rel=\"noopener\">What the difference between Boolean.TRUE and true</a><br><a name=\"RDmHr\"></a></p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><blockquote>\n<p>Firstly, I have</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Map&lt;String, Boolean&gt; mem &#x3D; new HashMap&lt;String, Boolean&gt;(); </span><br></pre></td></tr></table></figure>\n<p>And then:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (wordDict.contains(s) ||  Boolean.TRUE&#x3D;&#x3D;mem.get(s)) &#123;</span><br><span class=\"line\">       return true;</span><br><span class=\"line\">   &#125; </span><br></pre></td></tr></table></figure>\n<p>why can’t I use “mem.get(s)==true” in the if statement. There will be a error “Line 6: java.lang.NullPointerException”</p>\n<p>I think I still cannot understant wrapper class well. Please give me some guidance. Thank you!</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"7Ght7\"></a></p>\n<h1 id=\"java-经验\"><a href=\"#java-经验\" class=\"headerlink\" title=\"java 经验\"></a>java 经验</h1><p><a name=\"88wtx\"></a></p>\n<h2 id=\"what-different-between-Boolean-TRUE-and-true\"><a href=\"#what-different-between-Boolean-TRUE-and-true\" class=\"headerlink\" title=\"what different between Boolean.TRUE and true\"></a>what different between Boolean.TRUE and true</h2><p><a name=\"Cu6Cf\"></a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://stackoverflow.com/questions/31775618/what-the-difference-between-boolean-true-and-true\" target=\"_blank\" rel=\"noopener\">What the difference between Boolean.TRUE and true</a><br><a name=\"RDmHr\"></a></p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><blockquote>\n<p>Firstly, I have</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Map&lt;String, Boolean&gt; mem &#x3D; new HashMap&lt;String, Boolean&gt;(); </span><br></pre></td></tr></table></figure>\n<p>And then:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (wordDict.contains(s) ||  Boolean.TRUE&#x3D;&#x3D;mem.get(s)) &#123;</span><br><span class=\"line\">       return true;</span><br><span class=\"line\">   &#125; </span><br></pre></td></tr></table></figure>\n<p>why can’t I use “mem.get(s)==true” in the if statement. There will be a error “Line 6: java.lang.NullPointerException”</p>\n<p>I think I still cannot understant wrapper class well. Please give me some guidance. Thank you!</p>\n</blockquote>\n"},{"title":"deepin之使用教程及问题总结","urlname":"za9qlc","date":"2019-10-17T07:39:34.000Z","_content":"\n\n\n\n<a name=\"vp6dp\"></a>\n# deepin之使用教程及问题总结\n<a name=\"s8e6v\"></a>\n## 参考链接\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记  ](https://www.jianshu.com/p/6efd382094ec)\n\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记 ](1)\n\n<a name=\"qhenZ\"></a>\n### 教程\n<a name=\"ry4Qf\"></a>\n#### 如何重命名磁盘名称\n<a name=\"ZlvFL\"></a>\n##### 方法1 \n\n1. 首先右键所需磁盘名称，找到“卸载/unmount”，先卸载了磁盘,这要注意是有软件安装在此磁盘中并已经打开，或者在此磁盘中的文件是否已经打开，需要先关闭所有软件和文件<br />\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299423165-3f20c34d-5331-4fef-b19f-7a08d2f51189.png#align=left&display=inline&height=281&name=image.png&originHeight=281&originWidth=367&size=24979&status=done&width=367)\n\n1. 右键所需磁盘，点击“重命名/Rename”\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299639638-3177d7dc-ab36-400d-97e6-835b5716f670.png#align=left&display=inline&height=253&name=image.png&originHeight=253&originWidth=397&size=26197&status=done&width=397)\n\n3. 输入需要修改的磁盘名称，点击回车，会弹出需要输入管理员密码，点击“确认/comfirm”即可![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299968748-f8e60534-ff57-45d4-8785-02fe0285fae5.png#align=left&display=inline&height=350&name=image.png&originHeight=350&originWidth=722&size=50927&status=done&width=722)\n<a name=\"Grnzq\"></a>\n##### 方法2（未验证）\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记  ](https://www.jianshu.com/p/6efd382094ec)\n\n1. 查看当前所有分区\n\nsudo fdisk -l\n\n2. 先卸载要修改名称的分区：\n\nsudo umount /dev/sda5\n\n3. 修改名称:\n\nsudo ntfslabel /dev/sda5 music<br />注：ntfslabel会修改名称后自动重新加载，不用再执行mount命令\n\n<a name=\"5yOub\"></a>\n### 问题总结\n<a name=\"rzFLn\"></a>\n#### 使用su root代码时，出现authentication failure\nsu命令不能切换root，提示su: Authentication failure，只要你sudo passwd root过一次之后，下次再su的时候只要输入密码就可以成功登录了。<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1571301542073-fd5d16aa-39ab-46db-9817-2c8492c1371f.png#align=left&display=inline&height=210&originHeight=210&originWidth=405&size=0&status=done&width=405)\n\n\n\n","source":"_posts/yuque/deepin之使用教程及问题总结.md","raw":"\n---\n\ntitle: deepin之使用教程及问题总结\n\nurlname: za9qlc\n\ndate: 2019-10-17 15:39:34 +0800\n\ntags: [操作系统,deepin,教程]\n\ncategories: 操作系统\n\n---\n\n\n\n\n<a name=\"vp6dp\"></a>\n# deepin之使用教程及问题总结\n<a name=\"s8e6v\"></a>\n## 参考链接\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记  ](https://www.jianshu.com/p/6efd382094ec)\n\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记 ](1)\n\n<a name=\"qhenZ\"></a>\n### 教程\n<a name=\"ry4Qf\"></a>\n#### 如何重命名磁盘名称\n<a name=\"ZlvFL\"></a>\n##### 方法1 \n\n1. 首先右键所需磁盘名称，找到“卸载/unmount”，先卸载了磁盘,这要注意是有软件安装在此磁盘中并已经打开，或者在此磁盘中的文件是否已经打开，需要先关闭所有软件和文件<br />\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299423165-3f20c34d-5331-4fef-b19f-7a08d2f51189.png#align=left&display=inline&height=281&name=image.png&originHeight=281&originWidth=367&size=24979&status=done&width=367)\n\n1. 右键所需磁盘，点击“重命名/Rename”\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299639638-3177d7dc-ab36-400d-97e6-835b5716f670.png#align=left&display=inline&height=253&name=image.png&originHeight=253&originWidth=397&size=26197&status=done&width=397)\n\n3. 输入需要修改的磁盘名称，点击回车，会弹出需要输入管理员密码，点击“确认/comfirm”即可![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571299968748-f8e60534-ff57-45d4-8785-02fe0285fae5.png#align=left&display=inline&height=350&name=image.png&originHeight=350&originWidth=722&size=50927&status=done&width=722)\n<a name=\"Grnzq\"></a>\n##### 方法2（未验证）\n[Deepin Linux 重命名挂载磁盘——简书@白帽札记  ](https://www.jianshu.com/p/6efd382094ec)\n\n1. 查看当前所有分区\n\nsudo fdisk -l\n\n2. 先卸载要修改名称的分区：\n\nsudo umount /dev/sda5\n\n3. 修改名称:\n\nsudo ntfslabel /dev/sda5 music<br />注：ntfslabel会修改名称后自动重新加载，不用再执行mount命令\n\n<a name=\"5yOub\"></a>\n### 问题总结\n<a name=\"rzFLn\"></a>\n#### 使用su root代码时，出现authentication failure\nsu命令不能切换root，提示su: Authentication failure，只要你sudo passwd root过一次之后，下次再su的时候只要输入密码就可以成功登录了。<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1571301542073-fd5d16aa-39ab-46db-9817-2c8492c1371f.png#align=left&display=inline&height=210&originHeight=210&originWidth=405&size=0&status=done&width=405)\n\n\n\n","slug":"yuque/deepin之使用教程及问题总结","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciml005zy8usmzxkf1t3","content":"<p><a name=\"vp6dp\"></a></p>\n<h1 id=\"deepin之使用教程及问题总结\"><a href=\"#deepin之使用教程及问题总结\" class=\"headerlink\" title=\"deepin之使用教程及问题总结\"></a>deepin之使用教程及问题总结</h1><p><a name=\"s8e6v\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/6efd382094ec\" target=\"_blank\" rel=\"noopener\">Deepin Linux 重命名挂载磁盘——简书@白帽札记  </a></p>\n<p><a href=\"1\">Deepin Linux 重命名挂载磁盘——简书@白帽札记 </a></p>\n<p><a name=\"qhenZ\"></a></p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><p><a name=\"ry4Qf\"></a></p>\n<h4 id=\"如何重命名磁盘名称\"><a href=\"#如何重命名磁盘名称\" class=\"headerlink\" title=\"如何重命名磁盘名称\"></a>如何重命名磁盘名称</h4><p><a name=\"ZlvFL\"></a></p>\n<h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><ol>\n<li>首先右键所需磁盘名称，找到“卸载/unmount”，先卸载了磁盘,这要注意是有软件安装在此磁盘中并已经打开，或者在此磁盘中的文件是否已经打开，需要先关闭所有软件和文件<br></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299423165-3f20c34d-5331-4fef-b19f-7a08d2f51189.png#align=left&amp;display=inline&amp;height=281&amp;name=image.png&amp;originHeight=281&amp;originWidth=367&amp;size=24979&amp;status=done&amp;width=367\" alt=\"image.png\"></p>\n<ol>\n<li>右键所需磁盘，点击“重命名/Rename”</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299639638-3177d7dc-ab36-400d-97e6-835b5716f670.png#align=left&amp;display=inline&amp;height=253&amp;name=image.png&amp;originHeight=253&amp;originWidth=397&amp;size=26197&amp;status=done&amp;width=397\" alt=\"image.png\"></p>\n<ol>\n<li><p>输入需要修改的磁盘名称，点击回车，会弹出需要输入管理员密码，点击“确认/comfirm”即可<img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299968748-f8e60534-ff57-45d4-8785-02fe0285fae5.png#align=left&amp;display=inline&amp;height=350&amp;name=image.png&amp;originHeight=350&amp;originWidth=722&amp;size=50927&amp;status=done&amp;width=722\" alt=\"image.png\"><br><a name=\"Grnzq\"></a></p>\n<h5 id=\"方法2（未验证）\"><a href=\"#方法2（未验证）\" class=\"headerlink\" title=\"方法2（未验证）\"></a>方法2（未验证）</h5><p><a href=\"https://www.jianshu.com/p/6efd382094ec\" target=\"_blank\" rel=\"noopener\">Deepin Linux 重命名挂载磁盘——简书@白帽札记  </a></p>\n</li>\n<li><p>查看当前所有分区</p>\n</li>\n</ol>\n<p>sudo fdisk -l</p>\n<ol>\n<li>先卸载要修改名称的分区：</li>\n</ol>\n<p>sudo umount /dev/sda5</p>\n<ol>\n<li>修改名称:</li>\n</ol>\n<p>sudo ntfslabel /dev/sda5 music<br>注：ntfslabel会修改名称后自动重新加载，不用再执行mount命令</p>\n<p><a name=\"5yOub\"></a></p>\n<h3 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h3><p><a name=\"rzFLn\"></a></p>\n<h4 id=\"使用su-root代码时，出现authentication-failure\"><a href=\"#使用su-root代码时，出现authentication-failure\" class=\"headerlink\" title=\"使用su root代码时，出现authentication failure\"></a>使用su root代码时，出现authentication failure</h4><p>su命令不能切换root，提示su: Authentication failure，只要你sudo passwd root过一次之后，下次再su的时候只要输入密码就可以成功登录了。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571301542073-fd5d16aa-39ab-46db-9817-2c8492c1371f.png#align=left&amp;display=inline&amp;height=210&amp;originHeight=210&amp;originWidth=405&amp;size=0&amp;status=done&amp;width=405\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"vp6dp\"></a></p>\n<h1 id=\"deepin之使用教程及问题总结\"><a href=\"#deepin之使用教程及问题总结\" class=\"headerlink\" title=\"deepin之使用教程及问题总结\"></a>deepin之使用教程及问题总结</h1><p><a name=\"s8e6v\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/6efd382094ec\" target=\"_blank\" rel=\"noopener\">Deepin Linux 重命名挂载磁盘——简书@白帽札记  </a></p>\n<p><a href=\"1\">Deepin Linux 重命名挂载磁盘——简书@白帽札记 </a></p>\n<p><a name=\"qhenZ\"></a></p>\n<h3 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h3><p><a name=\"ry4Qf\"></a></p>\n<h4 id=\"如何重命名磁盘名称\"><a href=\"#如何重命名磁盘名称\" class=\"headerlink\" title=\"如何重命名磁盘名称\"></a>如何重命名磁盘名称</h4><p><a name=\"ZlvFL\"></a></p>\n<h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><ol>\n<li>首先右键所需磁盘名称，找到“卸载/unmount”，先卸载了磁盘,这要注意是有软件安装在此磁盘中并已经打开，或者在此磁盘中的文件是否已经打开，需要先关闭所有软件和文件<br></li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299423165-3f20c34d-5331-4fef-b19f-7a08d2f51189.png#align=left&amp;display=inline&amp;height=281&amp;name=image.png&amp;originHeight=281&amp;originWidth=367&amp;size=24979&amp;status=done&amp;width=367\" alt=\"image.png\"></p>\n<ol>\n<li>右键所需磁盘，点击“重命名/Rename”</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299639638-3177d7dc-ab36-400d-97e6-835b5716f670.png#align=left&amp;display=inline&amp;height=253&amp;name=image.png&amp;originHeight=253&amp;originWidth=397&amp;size=26197&amp;status=done&amp;width=397\" alt=\"image.png\"></p>\n<ol>\n<li><p>输入需要修改的磁盘名称，点击回车，会弹出需要输入管理员密码，点击“确认/comfirm”即可<img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571299968748-f8e60534-ff57-45d4-8785-02fe0285fae5.png#align=left&amp;display=inline&amp;height=350&amp;name=image.png&amp;originHeight=350&amp;originWidth=722&amp;size=50927&amp;status=done&amp;width=722\" alt=\"image.png\"><br><a name=\"Grnzq\"></a></p>\n<h5 id=\"方法2（未验证）\"><a href=\"#方法2（未验证）\" class=\"headerlink\" title=\"方法2（未验证）\"></a>方法2（未验证）</h5><p><a href=\"https://www.jianshu.com/p/6efd382094ec\" target=\"_blank\" rel=\"noopener\">Deepin Linux 重命名挂载磁盘——简书@白帽札记  </a></p>\n</li>\n<li><p>查看当前所有分区</p>\n</li>\n</ol>\n<p>sudo fdisk -l</p>\n<ol>\n<li>先卸载要修改名称的分区：</li>\n</ol>\n<p>sudo umount /dev/sda5</p>\n<ol>\n<li>修改名称:</li>\n</ol>\n<p>sudo ntfslabel /dev/sda5 music<br>注：ntfslabel会修改名称后自动重新加载，不用再执行mount命令</p>\n<p><a name=\"5yOub\"></a></p>\n<h3 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h3><p><a name=\"rzFLn\"></a></p>\n<h4 id=\"使用su-root代码时，出现authentication-failure\"><a href=\"#使用su-root代码时，出现authentication-failure\" class=\"headerlink\" title=\"使用su root代码时，出现authentication failure\"></a>使用su root代码时，出现authentication failure</h4><p>su命令不能切换root，提示su: Authentication failure，只要你sudo passwd root过一次之后，下次再su的时候只要输入密码就可以成功登录了。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571301542073-fd5d16aa-39ab-46db-9817-2c8492c1371f.png#align=left&amp;display=inline&amp;height=210&amp;originHeight=210&amp;originWidth=405&amp;size=0&amp;status=done&amp;width=405\" alt=\"\"></p>\n"},{"title":"mysql之Loading class `com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#39;. The driver","urlname":"lg01px","date":"2019-03-05T14:11:05.000Z","_content":"<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdb——CSDN@不信成不了大牛](https://blog.csdn.net/anaini1314/article/details/71157791)  \n<a name=\"16f5f9f6\"></a>\n# mysql之Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver\n\n异常错误：Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n\n这个问题 是在我整合项目过程中出现的，用了最新的mysql 连接驱动<br />以前版本的jdbc.properties\n\n```\njdbc.driverClass   = com.mysql.dbc.Driver\njdbc.url= jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT\njdbc.username = root\njdbc.password = root123\n```\n\n现在按照最新官方提示支持将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver\n\n```\njdbc.driverClass   = com.mysql.cj.jdbc.Driver\njdbc.url= jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT\njdbc.username = root\njdbc.password = root123\n```\n\n\n---------------------  <br />作者：不信成不了大牛  <br />来源：CSDN  <br />原文：https://blog.csdn.net/anaini1314/article/details/71157791  <br />版权声明：本文为博主原创文章，转载请附上博文链接！\n\n","source":"_posts/yuque/mysql之Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver.md","raw":"\n---\n\ntitle: mysql之Loading class `com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#39;. The driver\n\nurlname: lg01px\n\ndate: 2019-03-05 22:11:05 +0800\n\ntags: []\n\n---\n<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdb——CSDN@不信成不了大牛](https://blog.csdn.net/anaini1314/article/details/71157791)  \n<a name=\"16f5f9f6\"></a>\n# mysql之Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver\n\n异常错误：Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n\n这个问题 是在我整合项目过程中出现的，用了最新的mysql 连接驱动<br />以前版本的jdbc.properties\n\n```\njdbc.driverClass   = com.mysql.dbc.Driver\njdbc.url= jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT\njdbc.username = root\njdbc.password = root123\n```\n\n现在按照最新官方提示支持将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver\n\n```\njdbc.driverClass   = com.mysql.cj.jdbc.Driver\njdbc.url= jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT\njdbc.username = root\njdbc.password = root123\n```\n\n\n---------------------  <br />作者：不信成不了大牛  <br />来源：CSDN  <br />原文：https://blog.csdn.net/anaini1314/article/details/71157791  <br />版权声明：本文为博主原创文章，转载请附上博文链接！\n\n","slug":"yuque/mysql之Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimm0061y8use1r91peq","content":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://blog.csdn.net/anaini1314/article/details/71157791\" target=\"_blank\" rel=\"noopener\">Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdb——CSDN@不信成不了大牛</a><br><a name=\"16f5f9f6\"></a></p>\n<h1 id=\"mysql之Loading-class-com-mysql-jdbc-Driver-39-This-is-deprecated-The-new-driver-class-iscom-mysql-cj-jdbc-Driver’-The-driver\"><a href=\"#mysql之Loading-class-com-mysql-jdbc-Driver-39-This-is-deprecated-The-new-driver-class-iscom-mysql-cj-jdbc-Driver’-The-driver\" class=\"headerlink\" title=\"mysql之Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class iscom.mysql.cj.jdbc.Driver’. The driver\"></a>mysql之Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver</h1><p>异常错误：Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p>\n<p>这个问题 是在我整合项目过程中出现的，用了最新的mysql 连接驱动<br>以前版本的jdbc.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass   &#x3D; com.mysql.dbc.Driver</span><br><span class=\"line\">jdbc.url&#x3D; jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;GMT</span><br><span class=\"line\">jdbc.username &#x3D; root</span><br><span class=\"line\">jdbc.password &#x3D; root123</span><br></pre></td></tr></table></figure>\n<p>现在按照最新官方提示支持将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass   &#x3D; com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">jdbc.url&#x3D; jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;GMT</span><br><span class=\"line\">jdbc.username &#x3D; root</span><br><span class=\"line\">jdbc.password &#x3D; root123</span><br></pre></td></tr></table></figure>\n<p>———————  <br>作者：不信成不了大牛  <br>来源：CSDN  <br>原文：<a href=\"https://blog.csdn.net/anaini1314/article/details/71157791\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/anaini1314/article/details/71157791</a>  <br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://blog.csdn.net/anaini1314/article/details/71157791\" target=\"_blank\" rel=\"noopener\">Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdb——CSDN@不信成不了大牛</a><br><a name=\"16f5f9f6\"></a></p>\n<h1 id=\"mysql之Loading-class-com-mysql-jdbc-Driver-39-This-is-deprecated-The-new-driver-class-iscom-mysql-cj-jdbc-Driver’-The-driver\"><a href=\"#mysql之Loading-class-com-mysql-jdbc-Driver-39-This-is-deprecated-The-new-driver-class-iscom-mysql-cj-jdbc-Driver’-The-driver\" class=\"headerlink\" title=\"mysql之Loading class com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class iscom.mysql.cj.jdbc.Driver’. The driver\"></a>mysql之Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver</h1><p>异常错误：Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p>\n<p>这个问题 是在我整合项目过程中出现的，用了最新的mysql 连接驱动<br>以前版本的jdbc.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass   &#x3D; com.mysql.dbc.Driver</span><br><span class=\"line\">jdbc.url&#x3D; jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;GMT</span><br><span class=\"line\">jdbc.username &#x3D; root</span><br><span class=\"line\">jdbc.password &#x3D; root123</span><br></pre></td></tr></table></figure>\n<p>现在按照最新官方提示支持将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClass   &#x3D; com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">jdbc.url&#x3D; jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;GMT</span><br><span class=\"line\">jdbc.username &#x3D; root</span><br><span class=\"line\">jdbc.password &#x3D; root123</span><br></pre></td></tr></table></figure>\n<p>———————  <br>作者：不信成不了大牛  <br>来源：CSDN  <br>原文：<a href=\"https://blog.csdn.net/anaini1314/article/details/71157791\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/anaini1314/article/details/71157791</a>  <br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n"},{"title":"linux之添加环境变量","urlname":"olpbvb","date":"2019-10-18T12:28:26.000Z","_content":"<a name=\"KlTLs\"></a>\n# linux之添加环境变量\n<a name=\"crpYg\"></a>\n## 参考链接\n<a name=\"6gIdE\"></a>\n## 添加环境变量\n所有环境变量都需要添加在profile这个文件中<br />\n\n```bash\nvi /etc/profile\n```\n\n在文件插入一行环境变量，例如下面这段环境变量，插入按esc，并输入:wq，即退出并保存 <br />\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571401897558-f8593b08-3299-45b4-af05-2bd9106469f2.png#align=left&display=inline&height=330&name=image.png&originHeight=330&originWidth=752&size=68702&status=done&width=752)\n\n<a name=\"zat4N\"></a>\n## 刷新环境变量\n\n```bash\nsource /etc/profile\n```\n\n\n","source":"_posts/yuque/linux之添加环境变量.md","raw":"\n---\n\ntitle: linux之添加环境变量\n\nurlname: olpbvb\n\ndate: 2019-10-18 20:28:26 +0800\n\ntags: []\n\n---\n<a name=\"KlTLs\"></a>\n# linux之添加环境变量\n<a name=\"crpYg\"></a>\n## 参考链接\n<a name=\"6gIdE\"></a>\n## 添加环境变量\n所有环境变量都需要添加在profile这个文件中<br />\n\n```bash\nvi /etc/profile\n```\n\n在文件插入一行环境变量，例如下面这段环境变量，插入按esc，并输入:wq，即退出并保存 <br />\n\n```bash\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1571401897558-f8593b08-3299-45b4-af05-2bd9106469f2.png#align=left&display=inline&height=330&name=image.png&originHeight=330&originWidth=752&size=68702&status=done&width=752)\n\n<a name=\"zat4N\"></a>\n## 刷新环境变量\n\n```bash\nsource /etc/profile\n```\n\n\n","slug":"yuque/linux之添加环境变量","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimo0063y8usnhow2rk1","content":"<p><a name=\"KlTLs\"></a></p>\n<h1 id=\"linux之添加环境变量\"><a href=\"#linux之添加环境变量\" class=\"headerlink\" title=\"linux之添加环境变量\"></a>linux之添加环境变量</h1><p><a name=\"crpYg\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a name=\"6gIdE\"></a></p>\n<h2 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h2><p>所有环境变量都需要添加在profile这个文件中<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文件插入一行环境变量，例如下面这段环境变量，插入按esc，并输入:wq，即退出并保存 <br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571401897558-f8593b08-3299-45b4-af05-2bd9106469f2.png#align=left&amp;display=inline&amp;height=330&amp;name=image.png&amp;originHeight=330&amp;originWidth=752&amp;size=68702&amp;status=done&amp;width=752\" alt=\"image.png\"></p>\n<p><a name=\"zat4N\"></a></p>\n<h2 id=\"刷新环境变量\"><a href=\"#刷新环境变量\" class=\"headerlink\" title=\"刷新环境变量\"></a>刷新环境变量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"KlTLs\"></a></p>\n<h1 id=\"linux之添加环境变量\"><a href=\"#linux之添加环境变量\" class=\"headerlink\" title=\"linux之添加环境变量\"></a>linux之添加环境变量</h1><p><a name=\"crpYg\"></a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a name=\"6gIdE\"></a></p>\n<h2 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h2><p>所有环境变量都需要添加在profile这个文件中<br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文件插入一行环境变量，例如下面这段环境变量，插入按esc，并输入:wq，即退出并保存 <br></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1571401897558-f8593b08-3299-45b4-af05-2bd9106469f2.png#align=left&amp;display=inline&amp;height=330&amp;name=image.png&amp;originHeight=330&amp;originWidth=752&amp;size=68702&amp;status=done&amp;width=752\" alt=\"image.png\"></p>\n<p><a name=\"zat4N\"></a></p>\n<h2 id=\"刷新环境变量\"><a href=\"#刷新环境变量\" class=\"headerlink\" title=\"刷新环境变量\"></a>刷新环境变量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n"},{"title":"maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误","urlname":"zutyc3","date":"2019-03-05T15:19:33.000Z","_content":"<a name=\"bd1bf7e7\"></a>\n# 转载链接\n\n[https://www.cnblogs.com/demonrain/p/5674091.html——博客园@demonrain](https://www.cnblogs.com/demonrain/p/5674091.html)\n\n<a name=\"a1db7c12\"></a>\n# maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误\n\n```powershell\nmvn install:install-file \"-Dfile=cobra.jar\" \"-DgroupId=com.cobra\" \"-DartifactId=cobra\" \"-Dversion=0.98.4\" \"-Dpackaging=jar\" \"-DgeneratePom=true\"\n```\n\n\n","source":"_posts/yuque/maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误.md","raw":"\n---\n\ntitle: maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误\n\nurlname: zutyc3\n\ndate: 2019-03-05 23:19:33 +0800\n\ntags: []\n\n---\n<a name=\"bd1bf7e7\"></a>\n# 转载链接\n\n[https://www.cnblogs.com/demonrain/p/5674091.html——博客园@demonrain](https://www.cnblogs.com/demonrain/p/5674091.html)\n\n<a name=\"a1db7c12\"></a>\n# maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误\n\n```powershell\nmvn install:install-file \"-Dfile=cobra.jar\" \"-DgroupId=com.cobra\" \"-DartifactId=cobra\" \"-Dversion=0.98.4\" \"-Dpackaging=jar\" \"-DgeneratePom=true\"\n```\n\n\n","slug":"yuque/maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimp0065y8usp2d9pjkq","content":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://www.cnblogs.com/demonrain/p/5674091.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/demonrain/p/5674091.html——博客园@demonrain</a></p>\n<p><a name=\"a1db7c12\"></a></p>\n<h1 id=\"maven之安装第三方jar到本地-出现-The-goal-you-specified-requires-a-project-to-execute-but-there-is-no-POM-in-this-directory-错误\"><a href=\"#maven之安装第三方jar到本地-出现-The-goal-you-specified-requires-a-project-to-execute-but-there-is-no-POM-in-this-directory-错误\" class=\"headerlink\" title=\"maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误\"></a>maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:<span class=\"built_in\">install-file</span> <span class=\"string\">\"-Dfile=cobra.jar\"</span> <span class=\"string\">\"-DgroupId=com.cobra\"</span> <span class=\"string\">\"-DartifactId=cobra\"</span> <span class=\"string\">\"-Dversion=0.98.4\"</span> <span class=\"string\">\"-Dpackaging=jar\"</span> <span class=\"string\">\"-DgeneratePom=true\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://www.cnblogs.com/demonrain/p/5674091.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/demonrain/p/5674091.html——博客园@demonrain</a></p>\n<p><a name=\"a1db7c12\"></a></p>\n<h1 id=\"maven之安装第三方jar到本地-出现-The-goal-you-specified-requires-a-project-to-execute-but-there-is-no-POM-in-this-directory-错误\"><a href=\"#maven之安装第三方jar到本地-出现-The-goal-you-specified-requires-a-project-to-execute-but-there-is-no-POM-in-this-directory-错误\" class=\"headerlink\" title=\"maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误\"></a>maven之安装第三方jar到本地 出现 The goal you specified requires a project to execute but there is no POM in this directory 错误</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:<span class=\"built_in\">install-file</span> <span class=\"string\">\"-Dfile=cobra.jar\"</span> <span class=\"string\">\"-DgroupId=com.cobra\"</span> <span class=\"string\">\"-DartifactId=cobra\"</span> <span class=\"string\">\"-Dversion=0.98.4\"</span> <span class=\"string\">\"-Dpackaging=jar\"</span> <span class=\"string\">\"-DgeneratePom=true\"</span></span><br></pre></td></tr></table></figure>\n"},{"title":"maven之如何引入oracle依赖","urlname":"oe3u39","date":"2019-03-05T13:48:26.000Z","_content":"\n\n<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[spring boot pom文件引入oracle依赖，具体方法——CSDN@gaoqiang1112](https://blog.csdn.net/gaoqiang1112/article/details/79482069)  \n\n**出现问题：**<br />  使用Maven管理项目时候，在【pom.xml】中会提示错误：Missing artifact com.[oracle](https://www.baidu.com/s?wd=oracle&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd):ojdbc14:jar:10.2.0.4.0；如图所示<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050386-c6d850ce-3204-425a-afd4-b53f69704667.png#align=left&display=inline&height=121&originHeight=121&originWidth=397&size=0&status=done&width=397)<br />**造成原因：**<br />   Oracle商业版权版权问题，Maven中央仓库没有这个资源<br />**决解方法：**<br />   在Maven本地仓库添加Oracle.jar[驱动包](https://www.baidu.com/s?wd=%E9%A9%B1%E5%8A%A8%E5%8C%85&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd)<br />（注解：Maven本地仓库位置，一般默认在C盘，如：C：用户>XXX用户名>.m2>repository>）\n\n<!--more-->\n\n**  解决步骤：**<br />    一、Maven环境变量<br />      先检查Maven环境变量是否配置好：【windows+R】->输入【cmd】打开命令窗口->输入【mvn -v】，如果有版本信息表示已经配置好，否则需配置<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050397-7e8e6407-8275-4a15-ae53-9ffea77f2368.png#align=left&display=inline&height=161&originHeight=161&originWidth=573&size=0&status=done&width=573)<br />      配置Maven环境变量（前提：已经安装好JDK并配置好其环境变量）；<br />      1、【我的电脑】->【属性】->【高级系统设置】->【高级】->【环境变量】->【系统变量】->【新建】，新建系统环境变量MAVEN_HOME，并设置值为你安装的目录<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050440-12a0bbcf-ff90-4141-ad2f-97a47391e505.png#align=left&display=inline&height=180&originHeight=180&originWidth=650&size=0&status=done&width=650)<br />      2、更新系统Path变量，添加 ;AVEN_HOME%\\bin;<br />    二、安装Oracle驱动包到Maven本地仓库中<br />      1、下载ojdbc6.jar，复制到Maven本地仓库中<br />oracle官方驱动下载 <br />[http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html](http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html) <br />需要登录 <br />[百度云下载](http://pan.baidu.com/s/1pLEoY9t)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050437-02e55243-a4db-402a-b630-3be7bff74947.png#align=left&display=inline&height=126&originHeight=126&originWidth=693&size=0&status=done&width=693)\n\n      2、打开命令窗口，输入：\n\n      mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=C:\\Users\\asus-00000\\.m2\\repository\\com\\oracle\\ojdbc14\\10.20.4.0\\ojdbc6.jar （红色固定，绿色为你安装位置）<br />这里多说一嘴,也不知道什么时候起  我们习惯把我们的repository库放在d盘跟目录下   这个安装语句 有2个要注意的地方  1个是绿色部分我们要换成自己ojdbc6.jar所存放的位置 另一个是 这个语句默认会将我们调整后的10.2.0.4.0放到电脑默认的库位置,也就是我绿色的部分  我的电脑是这样的 所以如果你放在了d盘的根目录下,并且你的项目中配置的maven也换成了你自己设定的地方,那么请去他转化后的地方将生成好的ojdbc14-10.2.0.4.0.jar复制到你的d盘里\n\n        原先ojdbc6.jar会转化出新的ojdbc14-10.2.0.4.0.jar（如原先有这包要先删除才不会出现冲突），在命令窗口出现 BUILD SUCCESS 字样表示成功<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050421-b66fd60a-1dee-42c0-9468-166d302a5d35.png#align=left&display=inline&height=157&originHeight=157&originWidth=718&size=0&status=done&width=718)\n\n     ![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050475-8bb68ebf-0249-42d3-a741-1111b5c575ae.png#align=left&display=inline&height=328&originHeight=328&originWidth=519&size=0&status=done&width=519)<br />    三、项目更新<br />      右键项目->【Maven】->【Update Project】->在Available Maven Codebases勾选要更新的项目->勾选Force Update of Sapshots/Releases->【OK】\n\n","source":"_posts/yuque/maven之如何引入oracle依赖.md","raw":"\n---\n\ntitle: maven之如何引入oracle依赖\n\nurlname: oe3u39\n\ndate: 2019-03-05 21:48:26 +0800\n\ntags: [maven,oracle]\n\ncategories: maven\n\n---\n\n\n<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[spring boot pom文件引入oracle依赖，具体方法——CSDN@gaoqiang1112](https://blog.csdn.net/gaoqiang1112/article/details/79482069)  \n\n**出现问题：**<br />  使用Maven管理项目时候，在【pom.xml】中会提示错误：Missing artifact com.[oracle](https://www.baidu.com/s?wd=oracle&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd):ojdbc14:jar:10.2.0.4.0；如图所示<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050386-c6d850ce-3204-425a-afd4-b53f69704667.png#align=left&display=inline&height=121&originHeight=121&originWidth=397&size=0&status=done&width=397)<br />**造成原因：**<br />   Oracle商业版权版权问题，Maven中央仓库没有这个资源<br />**决解方法：**<br />   在Maven本地仓库添加Oracle.jar[驱动包](https://www.baidu.com/s?wd=%E9%A9%B1%E5%8A%A8%E5%8C%85&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd)<br />（注解：Maven本地仓库位置，一般默认在C盘，如：C：用户>XXX用户名>.m2>repository>）\n\n<!--more-->\n\n**  解决步骤：**<br />    一、Maven环境变量<br />      先检查Maven环境变量是否配置好：【windows+R】->输入【cmd】打开命令窗口->输入【mvn -v】，如果有版本信息表示已经配置好，否则需配置<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050397-7e8e6407-8275-4a15-ae53-9ffea77f2368.png#align=left&display=inline&height=161&originHeight=161&originWidth=573&size=0&status=done&width=573)<br />      配置Maven环境变量（前提：已经安装好JDK并配置好其环境变量）；<br />      1、【我的电脑】->【属性】->【高级系统设置】->【高级】->【环境变量】->【系统变量】->【新建】，新建系统环境变量MAVEN_HOME，并设置值为你安装的目录<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050440-12a0bbcf-ff90-4141-ad2f-97a47391e505.png#align=left&display=inline&height=180&originHeight=180&originWidth=650&size=0&status=done&width=650)<br />      2、更新系统Path变量，添加 ;AVEN_HOME%\\bin;<br />    二、安装Oracle驱动包到Maven本地仓库中<br />      1、下载ojdbc6.jar，复制到Maven本地仓库中<br />oracle官方驱动下载 <br />[http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html](http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html) <br />需要登录 <br />[百度云下载](http://pan.baidu.com/s/1pLEoY9t)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050437-02e55243-a4db-402a-b630-3be7bff74947.png#align=left&display=inline&height=126&originHeight=126&originWidth=693&size=0&status=done&width=693)\n\n      2、打开命令窗口，输入：\n\n      mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=C:\\Users\\asus-00000\\.m2\\repository\\com\\oracle\\ojdbc14\\10.20.4.0\\ojdbc6.jar （红色固定，绿色为你安装位置）<br />这里多说一嘴,也不知道什么时候起  我们习惯把我们的repository库放在d盘跟目录下   这个安装语句 有2个要注意的地方  1个是绿色部分我们要换成自己ojdbc6.jar所存放的位置 另一个是 这个语句默认会将我们调整后的10.2.0.4.0放到电脑默认的库位置,也就是我绿色的部分  我的电脑是这样的 所以如果你放在了d盘的根目录下,并且你的项目中配置的maven也换成了你自己设定的地方,那么请去他转化后的地方将生成好的ojdbc14-10.2.0.4.0.jar复制到你的d盘里\n\n        原先ojdbc6.jar会转化出新的ojdbc14-10.2.0.4.0.jar（如原先有这包要先删除才不会出现冲突），在命令窗口出现 BUILD SUCCESS 字样表示成功<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050421-b66fd60a-1dee-42c0-9468-166d302a5d35.png#align=left&display=inline&height=157&originHeight=157&originWidth=718&size=0&status=done&width=718)\n\n     ![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050475-8bb68ebf-0249-42d3-a741-1111b5c575ae.png#align=left&display=inline&height=328&originHeight=328&originWidth=519&size=0&status=done&width=519)<br />    三、项目更新<br />      右键项目->【Maven】->【Update Project】->在Available Maven Codebases勾选要更新的项目->勾选Force Update of Sapshots/Releases->【OK】\n\n","slug":"yuque/maven之如何引入oracle依赖","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimq0067y8usm7j8isic","content":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://blog.csdn.net/gaoqiang1112/article/details/79482069\" target=\"_blank\" rel=\"noopener\">spring boot pom文件引入oracle依赖，具体方法——CSDN@gaoqiang1112</a>  </p>\n<p><strong>出现问题：</strong><br>  使用Maven管理项目时候，在【pom.xml】中会提示错误：Missing artifact com.<a href=\"https://www.baidu.com/s?wd=oracle&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">oracle</a>:ojdbc14:jar:10.2.0.4.0；如图所示<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050386-c6d850ce-3204-425a-afd4-b53f69704667.png#align=left&amp;display=inline&amp;height=121&amp;originHeight=121&amp;originWidth=397&amp;size=0&amp;status=done&amp;width=397\" alt=\"\"><br><strong>造成原因：</strong><br>   Oracle商业版权版权问题，Maven中央仓库没有这个资源<br><strong>决解方法：</strong><br>   在Maven本地仓库添加Oracle.jar<a href=\"https://www.baidu.com/s?wd=%E9%A9%B1%E5%8A%A8%E5%8C%85&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">驱动包</a><br>（注解：Maven本地仓库位置，一般默认在C盘，如：C：用户&gt;XXX用户名&gt;.m2&gt;repository&gt;）</p>\n<a id=\"more\"></a>\n<p><strong>  解决步骤：</strong><br>    一、Maven环境变量<br>      先检查Maven环境变量是否配置好：【windows+R】-&gt;输入【cmd】打开命令窗口-&gt;输入【mvn -v】，如果有版本信息表示已经配置好，否则需配置<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050397-7e8e6407-8275-4a15-ae53-9ffea77f2368.png#align=left&amp;display=inline&amp;height=161&amp;originHeight=161&amp;originWidth=573&amp;size=0&amp;status=done&amp;width=573\" alt=\"\"><br>      配置Maven环境变量（前提：已经安装好JDK并配置好其环境变量）；<br>      1、【我的电脑】-&gt;【属性】-&gt;【高级系统设置】-&gt;【高级】-&gt;【环境变量】-&gt;【系统变量】-&gt;【新建】，新建系统环境变量MAVEN_HOME，并设置值为你安装的目录<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050440-12a0bbcf-ff90-4141-ad2f-97a47391e505.png#align=left&amp;display=inline&amp;height=180&amp;originHeight=180&amp;originWidth=650&amp;size=0&amp;status=done&amp;width=650\" alt=\"\"><br>      2、更新系统Path变量，添加 ;AVEN_HOME%\\bin;<br>    二、安装Oracle驱动包到Maven本地仓库中<br>      1、下载ojdbc6.jar，复制到Maven本地仓库中<br>oracle官方驱动下载 <br><a href=\"http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html</a> <br>需要登录 <br><a href=\"http://pan.baidu.com/s/1pLEoY9t\" target=\"_blank\" rel=\"noopener\">百度云下载</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050437-02e55243-a4db-402a-b630-3be7bff74947.png#align=left&amp;display=inline&amp;height=126&amp;originHeight=126&amp;originWidth=693&amp;size=0&amp;status=done&amp;width=693\" alt=\"\"></p>\n<pre><code> 2、打开命令窗口，输入：\n\n mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=C:\\Users\\asus-00000\\.m2\\repository\\com\\oracle\\ojdbc14\\10.20.4.0\\ojdbc6.jar （红色固定，绿色为你安装位置）&lt;br /&gt;这里多说一嘴,也不知道什么时候起  我们习惯把我们的repository库放在d盘跟目录下   这个安装语句 有2个要注意的地方  1个是绿色部分我们要换成自己ojdbc6.jar所存放的位置 另一个是 这个语句默认会将我们调整后的10.2.0.4.0放到电脑默认的库位置,也就是我绿色的部分  我的电脑是这样的 所以如果你放在了d盘的根目录下,并且你的项目中配置的maven也换成了你自己设定的地方,那么请去他转化后的地方将生成好的ojdbc14-10.2.0.4.0.jar复制到你的d盘里\n\n   原先ojdbc6.jar会转化出新的ojdbc14-10.2.0.4.0.jar（如原先有这包要先删除才不会出现冲突），在命令窗口出现 BUILD SUCCESS 字样表示成功&lt;br /&gt;![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050421-b66fd60a-1dee-42c0-9468-166d302a5d35.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=157&amp;originWidth=718&amp;size=0&amp;status=done&amp;width=718)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050475-8bb68ebf-0249-42d3-a741-1111b5c575ae.png#align=left&amp;display=inline&amp;height=328&amp;originHeight=328&amp;originWidth=519&amp;size=0&amp;status=done&amp;width=519)&lt;br /&gt;    三、项目更新&lt;br /&gt;      右键项目-&gt;【Maven】-&gt;【Update Project】-&gt;在Available Maven Codebases勾选要更新的项目-&gt;勾选Force Update of Sapshots/Releases-&gt;【OK】\n</code></pre>","site":{"data":{}},"excerpt":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"https://blog.csdn.net/gaoqiang1112/article/details/79482069\" target=\"_blank\" rel=\"noopener\">spring boot pom文件引入oracle依赖，具体方法——CSDN@gaoqiang1112</a>  </p>\n<p><strong>出现问题：</strong><br>  使用Maven管理项目时候，在【pom.xml】中会提示错误：Missing artifact com.<a href=\"https://www.baidu.com/s?wd=oracle&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">oracle</a>:ojdbc14:jar:10.2.0.4.0；如图所示<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050386-c6d850ce-3204-425a-afd4-b53f69704667.png#align=left&amp;display=inline&amp;height=121&amp;originHeight=121&amp;originWidth=397&amp;size=0&amp;status=done&amp;width=397\" alt=\"\"><br><strong>造成原因：</strong><br>   Oracle商业版权版权问题，Maven中央仓库没有这个资源<br><strong>决解方法：</strong><br>   在Maven本地仓库添加Oracle.jar<a href=\"https://www.baidu.com/s?wd=%E9%A9%B1%E5%8A%A8%E5%8C%85&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\" rel=\"noopener\">驱动包</a><br>（注解：Maven本地仓库位置，一般默认在C盘，如：C：用户&gt;XXX用户名&gt;.m2&gt;repository&gt;）</p>","more":"<p><strong>  解决步骤：</strong><br>    一、Maven环境变量<br>      先检查Maven环境变量是否配置好：【windows+R】-&gt;输入【cmd】打开命令窗口-&gt;输入【mvn -v】，如果有版本信息表示已经配置好，否则需配置<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050397-7e8e6407-8275-4a15-ae53-9ffea77f2368.png#align=left&amp;display=inline&amp;height=161&amp;originHeight=161&amp;originWidth=573&amp;size=0&amp;status=done&amp;width=573\" alt=\"\"><br>      配置Maven环境变量（前提：已经安装好JDK并配置好其环境变量）；<br>      1、【我的电脑】-&gt;【属性】-&gt;【高级系统设置】-&gt;【高级】-&gt;【环境变量】-&gt;【系统变量】-&gt;【新建】，新建系统环境变量MAVEN_HOME，并设置值为你安装的目录<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050440-12a0bbcf-ff90-4141-ad2f-97a47391e505.png#align=left&amp;display=inline&amp;height=180&amp;originHeight=180&amp;originWidth=650&amp;size=0&amp;status=done&amp;width=650\" alt=\"\"><br>      2、更新系统Path变量，添加 ;AVEN_HOME%\\bin;<br>    二、安装Oracle驱动包到Maven本地仓库中<br>      1、下载ojdbc6.jar，复制到Maven本地仓库中<br>oracle官方驱动下载 <br><a href=\"http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html</a> <br>需要登录 <br><a href=\"http://pan.baidu.com/s/1pLEoY9t\" target=\"_blank\" rel=\"noopener\">百度云下载</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050437-02e55243-a4db-402a-b630-3be7bff74947.png#align=left&amp;display=inline&amp;height=126&amp;originHeight=126&amp;originWidth=693&amp;size=0&amp;status=done&amp;width=693\" alt=\"\"></p>\n<pre><code> 2、打开命令窗口，输入：\n\n mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=C:\\Users\\asus-00000\\.m2\\repository\\com\\oracle\\ojdbc14\\10.20.4.0\\ojdbc6.jar （红色固定，绿色为你安装位置）&lt;br /&gt;这里多说一嘴,也不知道什么时候起  我们习惯把我们的repository库放在d盘跟目录下   这个安装语句 有2个要注意的地方  1个是绿色部分我们要换成自己ojdbc6.jar所存放的位置 另一个是 这个语句默认会将我们调整后的10.2.0.4.0放到电脑默认的库位置,也就是我绿色的部分  我的电脑是这样的 所以如果你放在了d盘的根目录下,并且你的项目中配置的maven也换成了你自己设定的地方,那么请去他转化后的地方将生成好的ojdbc14-10.2.0.4.0.jar复制到你的d盘里\n\n   原先ojdbc6.jar会转化出新的ojdbc14-10.2.0.4.0.jar（如原先有这包要先删除才不会出现冲突），在命令窗口出现 BUILD SUCCESS 字样表示成功&lt;br /&gt;![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050421-b66fd60a-1dee-42c0-9468-166d302a5d35.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=157&amp;originWidth=718&amp;size=0&amp;status=done&amp;width=718)\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1551794050475-8bb68ebf-0249-42d3-a741-1111b5c575ae.png#align=left&amp;display=inline&amp;height=328&amp;originHeight=328&amp;originWidth=519&amp;size=0&amp;status=done&amp;width=519)&lt;br /&gt;    三、项目更新&lt;br /&gt;      右键项目-&gt;【Maven】-&gt;【Update Project】-&gt;在Available Maven Codebases勾选要更新的项目-&gt;勾选Force Update of Sapshots/Releases-&gt;【OK】\n</code></pre>"},{"title":"oracle之表空间数据文件扩容","urlname":"ie8w42","date":"2019-05-24T08:37:39.000Z","_content":"\n\n\n<a name=\"xLiK6\"></a>\n# 参考链接\n<a name=\"8DpMF\"></a>\n## 查询表空间使用情况\n\n```sql\n\n----查询表空间使用情况---     \n    \nSELECT UPPER(F.TABLESPACE_NAME) \"表空间名\",     \nD.TOT_GROOTTE_MB \"表空间大小(M)\",     \nD.TOT_GROOTTE_MB - F.TOTAL_BYTES \"已使用空间(M)\",     \nTO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100,2),'990.99') \"使用比\",     \nF.TOTAL_BYTES \"空闲空间(M)\",     \nF.MAX_BYTES \"最大块(M)\"    \nFROM (SELECT TABLESPACE_NAME,     \nROUND(SUM(BYTES) / (1024 * 1024), 2) TOTAL_BYTES,     \nROUND(MAX(BYTES) / (1024 * 1024), 2) MAX_BYTES     \nFROM SYS.DBA_FREE_SPACE     \nGROUP BY TABLESPACE_NAME) F,     \n(SELECT DD.TABLESPACE_NAME,     \nROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB     \nFROM SYS.DBA_DATA_FILES DD     \nGROUP BY DD.TABLESPACE_NAME) D     \nWHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME     \nORDER BY 4 DESC;  \n\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1558687529242-c9957964-97f0-4623-a24f-36fbb5504edb.png#align=left&display=inline&height=191&name=image.png&originHeight=191&originWidth=614&size=13664&status=done&width=614)\n\n```sql\n\n--查看表空间是否具有自动扩展的能力     \nSELECT T.TABLESPACE_NAME,D.FILE_NAME,     \nD.AUTOEXTENSIBLE,D.BYTES,D.MAXBYTES,D.STATUS     \nFROM DBA_TABLESPACES T,DBA_DATA_FILES D     \nWHERE T.TABLESPACE_NAME =D.TABLESPACE_NAME     \n ORDER BY TABLESPACE_NAME,FILE_NAME; \n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1558687557539-d579743f-cc38-4f5c-927b-b24816a50bef.png#align=left&display=inline&height=213&name=image.png&originHeight=213&originWidth=866&size=24491&status=done&width=866)\n\n<a name=\"woEPM\"></a>\n## 表空间扩容\n通常默认的表空间都一个数据文件\n<a name=\"xQFMD\"></a>\n### 给表空间增加数据文件\n```sql\n\nALTER TABLESPACE app_data ADD DATAFILE  \n'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF' SIZE 50M;  \n```\n<a name=\"0s5nB\"></a>\n### 新增数据文件，并且允许数据文件自动增长\n\n```sql\nALTER TABLESPACE app_data ADD DATAFILE\n'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP04.DBF' SIZE 50M\nAUTOEXTEND ON NEXT 5M MAXSIZE 31G;\n```\n<a name=\"Bbhkr\"></a>\n### 允许已存在的数据文件自动增长\n```sql\n\nALTER DATABASE DATAFILE 'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'  \nAUTOEXTEND ON NEXT 5M MAXSIZE 100M;\n```\n\n<a name=\"Oe2uv\"></a>\n### 手工改变已存在数据文件的大小\n\n```sql\nALTER DATABASE DATAFILE 'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP02.DBF'  \nRESIZE 100M;\n```\n\n<a name=\"HuT2f\"></a>\n# oracle之表空间数据文件扩容\n\n","source":"_posts/yuque/oracle之表空间数据文件扩容.md","raw":"\n---\n\ntitle: oracle之表空间数据文件扩容\n\nurlname: ie8w42\n\ndate: 2019-05-24 16:37:39 +0800\n\ntags: [oracle,表空间]\n\ncategories: oracle\n\n---\n\n\n\n<a name=\"xLiK6\"></a>\n# 参考链接\n<a name=\"8DpMF\"></a>\n## 查询表空间使用情况\n\n```sql\n\n----查询表空间使用情况---     \n    \nSELECT UPPER(F.TABLESPACE_NAME) \"表空间名\",     \nD.TOT_GROOTTE_MB \"表空间大小(M)\",     \nD.TOT_GROOTTE_MB - F.TOTAL_BYTES \"已使用空间(M)\",     \nTO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100,2),'990.99') \"使用比\",     \nF.TOTAL_BYTES \"空闲空间(M)\",     \nF.MAX_BYTES \"最大块(M)\"    \nFROM (SELECT TABLESPACE_NAME,     \nROUND(SUM(BYTES) / (1024 * 1024), 2) TOTAL_BYTES,     \nROUND(MAX(BYTES) / (1024 * 1024), 2) MAX_BYTES     \nFROM SYS.DBA_FREE_SPACE     \nGROUP BY TABLESPACE_NAME) F,     \n(SELECT DD.TABLESPACE_NAME,     \nROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB     \nFROM SYS.DBA_DATA_FILES DD     \nGROUP BY DD.TABLESPACE_NAME) D     \nWHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME     \nORDER BY 4 DESC;  \n\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1558687529242-c9957964-97f0-4623-a24f-36fbb5504edb.png#align=left&display=inline&height=191&name=image.png&originHeight=191&originWidth=614&size=13664&status=done&width=614)\n\n```sql\n\n--查看表空间是否具有自动扩展的能力     \nSELECT T.TABLESPACE_NAME,D.FILE_NAME,     \nD.AUTOEXTENSIBLE,D.BYTES,D.MAXBYTES,D.STATUS     \nFROM DBA_TABLESPACES T,DBA_DATA_FILES D     \nWHERE T.TABLESPACE_NAME =D.TABLESPACE_NAME     \n ORDER BY TABLESPACE_NAME,FILE_NAME; \n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1558687557539-d579743f-cc38-4f5c-927b-b24816a50bef.png#align=left&display=inline&height=213&name=image.png&originHeight=213&originWidth=866&size=24491&status=done&width=866)\n\n<a name=\"woEPM\"></a>\n## 表空间扩容\n通常默认的表空间都一个数据文件\n<a name=\"xQFMD\"></a>\n### 给表空间增加数据文件\n```sql\n\nALTER TABLESPACE app_data ADD DATAFILE  \n'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF' SIZE 50M;  \n```\n<a name=\"0s5nB\"></a>\n### 新增数据文件，并且允许数据文件自动增长\n\n```sql\nALTER TABLESPACE app_data ADD DATAFILE\n'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP04.DBF' SIZE 50M\nAUTOEXTEND ON NEXT 5M MAXSIZE 31G;\n```\n<a name=\"Bbhkr\"></a>\n### 允许已存在的数据文件自动增长\n```sql\n\nALTER DATABASE DATAFILE 'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'  \nAUTOEXTEND ON NEXT 5M MAXSIZE 100M;\n```\n\n<a name=\"Oe2uv\"></a>\n### 手工改变已存在数据文件的大小\n\n```sql\nALTER DATABASE DATAFILE 'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP02.DBF'  \nRESIZE 100M;\n```\n\n<a name=\"HuT2f\"></a>\n# oracle之表空间数据文件扩容\n\n","slug":"yuque/oracle之表空间数据文件扩容","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncims0069y8us96wa8fd7","content":"<p><a name=\"xLiK6\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a name=\"8DpMF\"></a></p>\n<h2 id=\"查询表空间使用情况\"><a href=\"#查询表空间使用情况\" class=\"headerlink\" title=\"查询表空间使用情况\"></a>查询表空间使用情况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----查询表空间使用情况---     </span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UPPER</span>(F.TABLESPACE_NAME) <span class=\"string\">\"表空间名\"</span>,     </span><br><span class=\"line\">D.TOT_GROOTTE_MB <span class=\"string\">\"表空间大小(M)\"</span>,     </span><br><span class=\"line\">D.TOT_GROOTTE_MB - F.TOTAL_BYTES <span class=\"string\">\"已使用空间(M)\"</span>,     </span><br><span class=\"line\">TO_CHAR(<span class=\"keyword\">ROUND</span>((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * <span class=\"number\">100</span>,<span class=\"number\">2</span>),<span class=\"string\">'990.99'</span>) <span class=\"string\">\"使用比\"</span>,     </span><br><span class=\"line\">F.TOTAL_BYTES <span class=\"string\">\"空闲空间(M)\"</span>,     </span><br><span class=\"line\">F.MAX_BYTES <span class=\"string\">\"最大块(M)\"</span>    </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> (<span class=\"keyword\">SELECT</span> TABLESPACE_NAME,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOTAL_BYTES,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">MAX</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) MAX_BYTES     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS.DBA_FREE_SPACE     </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> TABLESPACE_NAME) F,     </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> DD.TABLESPACE_NAME,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(DD.BYTES) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOT_GROOTTE_MB     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS.DBA_DATA_FILES DD     </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> DD.TABLESPACE_NAME) D     </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> D.TABLESPACE_NAME = F.TABLESPACE_NAME     </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"number\">4</span> <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1558687529242-c9957964-97f0-4623-a24f-36fbb5504edb.png#align=left&amp;display=inline&amp;height=191&amp;name=image.png&amp;originHeight=191&amp;originWidth=614&amp;size=13664&amp;status=done&amp;width=614\" alt=\"image.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查看表空间是否具有自动扩展的能力     </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> T.TABLESPACE_NAME,D.FILE_NAME,     </span><br><span class=\"line\">D.AUTOEXTENSIBLE,D.BYTES,D.MAXBYTES,D.STATUS     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> DBA_TABLESPACES T,DBA_DATA_FILES D     </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> T.TABLESPACE_NAME =D.TABLESPACE_NAME     </span><br><span class=\"line\"> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> TABLESPACE_NAME,FILE_NAME;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1558687557539-d579743f-cc38-4f5c-927b-b24816a50bef.png#align=left&amp;display=inline&amp;height=213&amp;name=image.png&amp;originHeight=213&amp;originWidth=866&amp;size=24491&amp;status=done&amp;width=866\" alt=\"image.png\"></p>\n<p><a name=\"woEPM\"></a></p>\n<h2 id=\"表空间扩容\"><a href=\"#表空间扩容\" class=\"headerlink\" title=\"表空间扩容\"></a>表空间扩容</h2><p>通常默认的表空间都一个数据文件<br><a name=\"xQFMD\"></a></p>\n<h3 id=\"给表空间增加数据文件\"><a href=\"#给表空间增加数据文件\" class=\"headerlink\" title=\"给表空间增加数据文件\"></a>给表空间增加数据文件</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLESPACE</span> app_data <span class=\"keyword\">ADD</span> <span class=\"keyword\">DATAFILE</span>  </span><br><span class=\"line\"><span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'</span> <span class=\"keyword\">SIZE</span> <span class=\"number\">50</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"0s5nB\"></a></p>\n<h3 id=\"新增数据文件，并且允许数据文件自动增长\"><a href=\"#新增数据文件，并且允许数据文件自动增长\" class=\"headerlink\" title=\"新增数据文件，并且允许数据文件自动增长\"></a>新增数据文件，并且允许数据文件自动增长</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLESPACE</span> app_data <span class=\"keyword\">ADD</span> <span class=\"keyword\">DATAFILE</span></span><br><span class=\"line\"><span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP04.DBF'</span> <span class=\"keyword\">SIZE</span> <span class=\"number\">50</span>M</span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">5</span>M <span class=\"keyword\">MAXSIZE</span> <span class=\"number\">31</span>G;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Bbhkr\"></a></p>\n<h3 id=\"允许已存在的数据文件自动增长\"><a href=\"#允许已存在的数据文件自动增长\" class=\"headerlink\" title=\"允许已存在的数据文件自动增长\"></a>允许已存在的数据文件自动增长</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'</span>  </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">5</span>M <span class=\"keyword\">MAXSIZE</span> <span class=\"number\">100</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Oe2uv\"></a></p>\n<h3 id=\"手工改变已存在数据文件的大小\"><a href=\"#手工改变已存在数据文件的大小\" class=\"headerlink\" title=\"手工改变已存在数据文件的大小\"></a>手工改变已存在数据文件的大小</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP02.DBF'</span>  </span><br><span class=\"line\"><span class=\"keyword\">RESIZE</span> <span class=\"number\">100</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"HuT2f\"></a></p>\n<h1 id=\"oracle之表空间数据文件扩容\"><a href=\"#oracle之表空间数据文件扩容\" class=\"headerlink\" title=\"oracle之表空间数据文件扩容\"></a>oracle之表空间数据文件扩容</h1>","site":{"data":{}},"excerpt":"","more":"<p><a name=\"xLiK6\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a name=\"8DpMF\"></a></p>\n<h2 id=\"查询表空间使用情况\"><a href=\"#查询表空间使用情况\" class=\"headerlink\" title=\"查询表空间使用情况\"></a>查询表空间使用情况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----查询表空间使用情况---     </span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UPPER</span>(F.TABLESPACE_NAME) <span class=\"string\">\"表空间名\"</span>,     </span><br><span class=\"line\">D.TOT_GROOTTE_MB <span class=\"string\">\"表空间大小(M)\"</span>,     </span><br><span class=\"line\">D.TOT_GROOTTE_MB - F.TOTAL_BYTES <span class=\"string\">\"已使用空间(M)\"</span>,     </span><br><span class=\"line\">TO_CHAR(<span class=\"keyword\">ROUND</span>((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * <span class=\"number\">100</span>,<span class=\"number\">2</span>),<span class=\"string\">'990.99'</span>) <span class=\"string\">\"使用比\"</span>,     </span><br><span class=\"line\">F.TOTAL_BYTES <span class=\"string\">\"空闲空间(M)\"</span>,     </span><br><span class=\"line\">F.MAX_BYTES <span class=\"string\">\"最大块(M)\"</span>    </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> (<span class=\"keyword\">SELECT</span> TABLESPACE_NAME,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOTAL_BYTES,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">MAX</span>(<span class=\"keyword\">BYTES</span>) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) MAX_BYTES     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS.DBA_FREE_SPACE     </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> TABLESPACE_NAME) F,     </span><br><span class=\"line\">(<span class=\"keyword\">SELECT</span> DD.TABLESPACE_NAME,     </span><br><span class=\"line\"><span class=\"keyword\">ROUND</span>(<span class=\"keyword\">SUM</span>(DD.BYTES) / (<span class=\"number\">1024</span> * <span class=\"number\">1024</span>), <span class=\"number\">2</span>) TOT_GROOTTE_MB     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SYS.DBA_DATA_FILES DD     </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> DD.TABLESPACE_NAME) D     </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> D.TABLESPACE_NAME = F.TABLESPACE_NAME     </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"number\">4</span> <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1558687529242-c9957964-97f0-4623-a24f-36fbb5504edb.png#align=left&amp;display=inline&amp;height=191&amp;name=image.png&amp;originHeight=191&amp;originWidth=614&amp;size=13664&amp;status=done&amp;width=614\" alt=\"image.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查看表空间是否具有自动扩展的能力     </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> T.TABLESPACE_NAME,D.FILE_NAME,     </span><br><span class=\"line\">D.AUTOEXTENSIBLE,D.BYTES,D.MAXBYTES,D.STATUS     </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> DBA_TABLESPACES T,DBA_DATA_FILES D     </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> T.TABLESPACE_NAME =D.TABLESPACE_NAME     </span><br><span class=\"line\"> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> TABLESPACE_NAME,FILE_NAME;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1558687557539-d579743f-cc38-4f5c-927b-b24816a50bef.png#align=left&amp;display=inline&amp;height=213&amp;name=image.png&amp;originHeight=213&amp;originWidth=866&amp;size=24491&amp;status=done&amp;width=866\" alt=\"image.png\"></p>\n<p><a name=\"woEPM\"></a></p>\n<h2 id=\"表空间扩容\"><a href=\"#表空间扩容\" class=\"headerlink\" title=\"表空间扩容\"></a>表空间扩容</h2><p>通常默认的表空间都一个数据文件<br><a name=\"xQFMD\"></a></p>\n<h3 id=\"给表空间增加数据文件\"><a href=\"#给表空间增加数据文件\" class=\"headerlink\" title=\"给表空间增加数据文件\"></a>给表空间增加数据文件</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLESPACE</span> app_data <span class=\"keyword\">ADD</span> <span class=\"keyword\">DATAFILE</span>  </span><br><span class=\"line\"><span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'</span> <span class=\"keyword\">SIZE</span> <span class=\"number\">50</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"0s5nB\"></a></p>\n<h3 id=\"新增数据文件，并且允许数据文件自动增长\"><a href=\"#新增数据文件，并且允许数据文件自动增长\" class=\"headerlink\" title=\"新增数据文件，并且允许数据文件自动增长\"></a>新增数据文件，并且允许数据文件自动增长</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLESPACE</span> app_data <span class=\"keyword\">ADD</span> <span class=\"keyword\">DATAFILE</span></span><br><span class=\"line\"><span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP04.DBF'</span> <span class=\"keyword\">SIZE</span> <span class=\"number\">50</span>M</span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">5</span>M <span class=\"keyword\">MAXSIZE</span> <span class=\"number\">31</span>G;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Bbhkr\"></a></p>\n<h3 id=\"允许已存在的数据文件自动增长\"><a href=\"#允许已存在的数据文件自动增长\" class=\"headerlink\" title=\"允许已存在的数据文件自动增长\"></a>允许已存在的数据文件自动增长</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP03.DBF'</span>  </span><br><span class=\"line\"><span class=\"keyword\">AUTOEXTEND</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">NEXT</span> <span class=\"number\">5</span>M <span class=\"keyword\">MAXSIZE</span> <span class=\"number\">100</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Oe2uv\"></a></p>\n<h3 id=\"手工改变已存在数据文件的大小\"><a href=\"#手工改变已存在数据文件的大小\" class=\"headerlink\" title=\"手工改变已存在数据文件的大小\"></a>手工改变已存在数据文件的大小</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">DATAFILE</span> <span class=\"string\">'D:\\ORACLE\\PRODUCT\\10.2.0\\ORADATA\\EDWTEST\\APP02.DBF'</span>  </span><br><span class=\"line\"><span class=\"keyword\">RESIZE</span> <span class=\"number\">100</span>M;</span><br></pre></td></tr></table></figure>\n<p><a name=\"HuT2f\"></a></p>\n<h1 id=\"oracle之表空间数据文件扩容\"><a href=\"#oracle之表空间数据文件扩容\" class=\"headerlink\" title=\"oracle之表空间数据文件扩容\"></a>oracle之表空间数据文件扩容</h1>"},{"title":"windows之常用设置及安全管理","urlname":"ich5xw","date":"2019-07-13T14:02:13.000Z","_content":"<a name=\"T0vEc\"></a>\n# 参考链接\n[Windows Server 2008 R2远程协助选项灰色——百度经验@☆落墨云烟★](https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html)<br />[Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)[匿名用户](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)<br />[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)\n<a name=\"wTlYJ\"></a>\n# windows之常用设置及安全管理\n<a name=\"SYxPo\"></a>\n## [Windows Server 2008 R2允许远程协助选项灰色](https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html)\n<a name=\"CWEa2\"></a>\n### 方法一\n在“服务器管理器——功能”右键选择“添加功能”，勾选“远程协助”，点击“下一步”，等待安装完成即可<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026746618-4c1ba175-f1cb-471a-8400-b6cfc0f722ab.png#align=left&display=inline&height=580&name=%E5%9B%BE%E7%89%87.png&originHeight=580&originWidth=478&size=28044&status=done&width=478)<br />效果如下<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&display=inline&height=464&name=%E5%9B%BE%E7%89%87.png&originHeight=464&originWidth=407&size=10124&status=done&width=407)\n<a name=\"nojxo\"></a>\n### 方法2\n“控制面板——启用或者关闭windows功能”，一直点击“下一步”直到“功能”，选择“远程协助”，点击“安装”，等待时间即可。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563027106865-2db77639-753f-402d-9164-f66a049bb375.png#align=left&display=inline&height=573&name=%E5%9B%BE%E7%89%87.png&originHeight=573&originWidth=802&size=35054&status=done&width=802)\n<a name=\"FSwqt\"></a>\n## [“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)\n[Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)[匿名用户](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)<br />按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版\"——\"Windows组件\"——“远程桌面服务”——“远程桌面会话主机”——“安全”\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086761118-59643044-22ab-4ca5-ba53-317db8c57dfd.png#align=left&display=inline&height=550&name=%E5%9B%BE%E7%89%87.png&originHeight=550&originWidth=762&size=22320&status=done&width=762)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&display=inline&height=493&originHeight=493&originWidth=426&status=done&width=426)\n<a name=\"qacmY\"></a>\n## 如何设置远程桌面连接\n<a name=\"yhzKb\"></a>\n### 允许远程协助\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&display=inline&height=464&originHeight=464&originWidth=407&status=done&width=407)\n<a name=\"yN1Ob\"></a>\n### 组策略中设置“允许用户使用远程桌面服务进行远程连接”\n按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版\"——\"Windows组件\"——“远程桌面服务”——“远程桌面会话主机”——“连接”<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563087481412-9d9a71a0-2736-43d4-9bdc-cfc4681fb0af.png#align=left&display=inline&height=551&name=%E5%9B%BE%E7%89%87.png&originHeight=551&originWidth=672&size=20931&status=done&width=672)\n<a name=\"6zqv0\"></a>\n### 设置“[仅允许运行带网络级身份的远程桌面的计算机连接](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)”\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&display=inline&height=493&originHeight=493&originWidth=426&status=done&width=426)\n<a name=\"i9fJO\"></a>\n### 设置可远程的用户\n注：无论是否提示“administrator已经有访问权”，都需要添加一次用户。<br />方法：“控制面板”——“系统”——“远程设置”——“选择用户”——点击“添加”——点击“高级”——点击“立即查找”\n\n<a name=\"6PLfm\"></a>\n### 确保远程服务正在运行\n[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)<br />win+R输入“services.msc”，查看以下服务是否已启动，未启动的需要启动，并设置为“自动”\n\nRemote Desktop Configuration、Remote Desktop Services、Remote Desktop Services UserMode Port Redirector<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563088538032-947955e5-6038-41ff-aeaa-b6d01cde362f.png#align=left&display=inline&height=229&name=%E5%9B%BE%E7%89%87.png&originHeight=229&originWidth=661&size=16714&status=done&width=661)\n<a name=\"UIjkP\"></a>\n### [设置凭据分配](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)\n[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)<br />1、win+R输入“gpedit.msc”<br />2、点击“计算机配置”—“管理模板”—“系统”—“凭据分配”。双击右边窗口的“允许分配保存的凭据用于仅NTLM 服务器身份验证”。<br />3、在弹出的窗口中选中“已启用”，再单击“显示”，在弹出的窗口中，输入“TERMSRV/*”。（确保TERMSRV 为大写，在对话框右侧能找到这个‘单词’）<br />4、管理员运行“cmd”，输入“gpupdate /force”刷新组策略，或者重启计算机\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563088180346-0a89e16d-329a-4372-88dc-892a517e56cd.png#align=left&display=inline&height=491&name=%E5%9B%BE%E7%89%87.png&originHeight=491&originWidth=1074&size=30075&status=done&width=1074)\n\n<a name=\"KVlb2\"></a>\n## 文章还在不停更新中\n\n\n\n","source":"_posts/yuque/windows之常用设置及安全管理.md","raw":"\n---\n\ntitle: windows之常用设置及安全管理\n\nurlname: ich5xw\n\ndate: 2019-07-13 22:02:13 +0800\n\ntags: []\n\n---\n<a name=\"T0vEc\"></a>\n# 参考链接\n[Windows Server 2008 R2远程协助选项灰色——百度经验@☆落墨云烟★](https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html)<br />[Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)[匿名用户](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)<br />[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)\n<a name=\"wTlYJ\"></a>\n# windows之常用设置及安全管理\n<a name=\"SYxPo\"></a>\n## [Windows Server 2008 R2允许远程协助选项灰色](https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html)\n<a name=\"CWEa2\"></a>\n### 方法一\n在“服务器管理器——功能”右键选择“添加功能”，勾选“远程协助”，点击“下一步”，等待安装完成即可<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026746618-4c1ba175-f1cb-471a-8400-b6cfc0f722ab.png#align=left&display=inline&height=580&name=%E5%9B%BE%E7%89%87.png&originHeight=580&originWidth=478&size=28044&status=done&width=478)<br />效果如下<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&display=inline&height=464&name=%E5%9B%BE%E7%89%87.png&originHeight=464&originWidth=407&size=10124&status=done&width=407)\n<a name=\"nojxo\"></a>\n### 方法2\n“控制面板——启用或者关闭windows功能”，一直点击“下一步”直到“功能”，选择“远程协助”，点击“安装”，等待时间即可。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563027106865-2db77639-753f-402d-9164-f66a049bb375.png#align=left&display=inline&height=573&name=%E5%9B%BE%E7%89%87.png&originHeight=573&originWidth=802&size=35054&status=done&width=802)\n<a name=\"FSwqt\"></a>\n## [“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)\n[Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)[匿名用户](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)<br />按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版\"——\"Windows组件\"——“远程桌面服务”——“远程桌面会话主机”——“安全”\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086761118-59643044-22ab-4ca5-ba53-317db8c57dfd.png#align=left&display=inline&height=550&name=%E5%9B%BE%E7%89%87.png&originHeight=550&originWidth=762&size=22320&status=done&width=762)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&display=inline&height=493&originHeight=493&originWidth=426&status=done&width=426)\n<a name=\"qacmY\"></a>\n## 如何设置远程桌面连接\n<a name=\"yhzKb\"></a>\n### 允许远程协助\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&display=inline&height=464&originHeight=464&originWidth=407&status=done&width=407)\n<a name=\"yN1Ob\"></a>\n### 组策略中设置“允许用户使用远程桌面服务进行远程连接”\n按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版\"——\"Windows组件\"——“远程桌面服务”——“远程桌面会话主机”——“连接”<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563087481412-9d9a71a0-2736-43d4-9bdc-cfc4681fb0af.png#align=left&display=inline&height=551&name=%E5%9B%BE%E7%89%87.png&originHeight=551&originWidth=672&size=20931&status=done&width=672)\n<a name=\"6zqv0\"></a>\n### 设置“[仅允许运行带网络级身份的远程桌面的计算机连接](https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643)”\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&display=inline&height=493&originHeight=493&originWidth=426&status=done&width=426)\n<a name=\"i9fJO\"></a>\n### 设置可远程的用户\n注：无论是否提示“administrator已经有访问权”，都需要添加一次用户。<br />方法：“控制面板”——“系统”——“远程设置”——“选择用户”——点击“添加”——点击“高级”——点击“立即查找”\n\n<a name=\"6PLfm\"></a>\n### 确保远程服务正在运行\n[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)<br />win+R输入“services.msc”，查看以下服务是否已启动，未启动的需要启动，并设置为“自动”\n\nRemote Desktop Configuration、Remote Desktop Services、Remote Desktop Services UserMode Port Redirector<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563088538032-947955e5-6038-41ff-aeaa-b6d01cde362f.png#align=left&display=inline&height=229&name=%E5%9B%BE%E7%89%87.png&originHeight=229&originWidth=661&size=16714&status=done&width=661)\n<a name=\"UIjkP\"></a>\n### [设置凭据分配](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)\n[打开允许远程后仍然无法远程连接——百度经验@小明仔sweety](https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html)<br />1、win+R输入“gpedit.msc”<br />2、点击“计算机配置”—“管理模板”—“系统”—“凭据分配”。双击右边窗口的“允许分配保存的凭据用于仅NTLM 服务器身份验证”。<br />3、在弹出的窗口中选中“已启用”，再单击“显示”，在弹出的窗口中，输入“TERMSRV/*”。（确保TERMSRV 为大写，在对话框右侧能找到这个‘单词’）<br />4、管理员运行“cmd”，输入“gpupdate /force”刷新组策略，或者重启计算机\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1563088180346-0a89e16d-329a-4372-88dc-892a517e56cd.png#align=left&display=inline&height=491&name=%E5%9B%BE%E7%89%87.png&originHeight=491&originWidth=1074&size=30075&status=done&width=1074)\n\n<a name=\"KVlb2\"></a>\n## 文章还在不停更新中\n\n\n\n","slug":"yuque/windows之常用设置及安全管理","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimt006by8usqy2ohrso","content":"<p><a name=\"T0vEc\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html\" target=\"_blank\" rel=\"noopener\">Windows Server 2008 R2远程协助选项灰色——百度经验@☆落墨云烟★</a><br><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@</a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">匿名用户</a><br><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br><a name=\"wTlYJ\"></a></p>\n<h1 id=\"windows之常用设置及安全管理\"><a href=\"#windows之常用设置及安全管理\" class=\"headerlink\" title=\"windows之常用设置及安全管理\"></a>windows之常用设置及安全管理</h1><p><a name=\"SYxPo\"></a></p>\n<h2 id=\"Windows-Server-2008-R2允许远程协助选项灰色\"><a href=\"#Windows-Server-2008-R2允许远程协助选项灰色\" class=\"headerlink\" title=\"Windows Server 2008 R2允许远程协助选项灰色\"></a><a href=\"https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html\" target=\"_blank\" rel=\"noopener\">Windows Server 2008 R2允许远程协助选项灰色</a></h2><p><a name=\"CWEa2\"></a></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>在“服务器管理器——功能”右键选择“添加功能”，勾选“远程协助”，点击“下一步”，等待安装完成即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026746618-4c1ba175-f1cb-471a-8400-b6cfc0f722ab.png#align=left&amp;display=inline&amp;height=580&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=580&amp;originWidth=478&amp;size=28044&amp;status=done&amp;width=478\" alt=\"图片.png\"><br>效果如下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&amp;display=inline&amp;height=464&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=464&amp;originWidth=407&amp;size=10124&amp;status=done&amp;width=407\" alt=\"图片.png\"><br><a name=\"nojxo\"></a></p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>“控制面板——启用或者关闭windows功能”，一直点击“下一步”直到“功能”，选择“远程协助”，点击“安装”，等待时间即可。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563027106865-2db77639-753f-402d-9164-f66a049bb375.png#align=left&amp;display=inline&amp;height=573&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=573&amp;originWidth=802&amp;size=35054&amp;status=done&amp;width=802\" alt=\"图片.png\"><br><a name=\"FSwqt\"></a></p>\n<h2 id=\"“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\"><a href=\"#“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\" class=\"headerlink\" title=\"“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\"></a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色</a></h2><p><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@</a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">匿名用户</a><br>按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版”——“Windows组件”——“远程桌面服务”——“远程桌面会话主机”——“安全”</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086761118-59643044-22ab-4ca5-ba53-317db8c57dfd.png#align=left&amp;display=inline&amp;height=550&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=550&amp;originWidth=762&amp;size=22320&amp;status=done&amp;width=762\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&amp;display=inline&amp;height=493&amp;originHeight=493&amp;originWidth=426&amp;status=done&amp;width=426\" alt=\"\"><br><a name=\"qacmY\"></a></p>\n<h2 id=\"如何设置远程桌面连接\"><a href=\"#如何设置远程桌面连接\" class=\"headerlink\" title=\"如何设置远程桌面连接\"></a>如何设置远程桌面连接</h2><p><a name=\"yhzKb\"></a></p>\n<h3 id=\"允许远程协助\"><a href=\"#允许远程协助\" class=\"headerlink\" title=\"允许远程协助\"></a>允许远程协助</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&amp;display=inline&amp;height=464&amp;originHeight=464&amp;originWidth=407&amp;status=done&amp;width=407\" alt=\"\"><br><a name=\"yN1Ob\"></a></p>\n<h3 id=\"组策略中设置“允许用户使用远程桌面服务进行远程连接”\"><a href=\"#组策略中设置“允许用户使用远程桌面服务进行远程连接”\" class=\"headerlink\" title=\"组策略中设置“允许用户使用远程桌面服务进行远程连接”\"></a>组策略中设置“允许用户使用远程桌面服务进行远程连接”</h3><p>按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版”——“Windows组件”——“远程桌面服务”——“远程桌面会话主机”——“连接”<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563087481412-9d9a71a0-2736-43d4-9bdc-cfc4681fb0af.png#align=left&amp;display=inline&amp;height=551&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=551&amp;originWidth=672&amp;size=20931&amp;status=done&amp;width=672\" alt=\"图片.png\"><br><a name=\"6zqv0\"></a></p>\n<h3 id=\"设置“仅允许运行带网络级身份的远程桌面的计算机连接”\"><a href=\"#设置“仅允许运行带网络级身份的远程桌面的计算机连接”\" class=\"headerlink\" title=\"设置“仅允许运行带网络级身份的远程桌面的计算机连接”\"></a>设置“<a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">仅允许运行带网络级身份的远程桌面的计算机连接</a>”</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&amp;display=inline&amp;height=493&amp;originHeight=493&amp;originWidth=426&amp;status=done&amp;width=426\" alt=\"\"><br><a name=\"i9fJO\"></a></p>\n<h3 id=\"设置可远程的用户\"><a href=\"#设置可远程的用户\" class=\"headerlink\" title=\"设置可远程的用户\"></a>设置可远程的用户</h3><p>注：无论是否提示“administrator已经有访问权”，都需要添加一次用户。<br>方法：“控制面板”——“系统”——“远程设置”——“选择用户”——点击“添加”——点击“高级”——点击“立即查找”</p>\n<p><a name=\"6PLfm\"></a></p>\n<h3 id=\"确保远程服务正在运行\"><a href=\"#确保远程服务正在运行\" class=\"headerlink\" title=\"确保远程服务正在运行\"></a>确保远程服务正在运行</h3><p><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br>win+R输入“services.msc”，查看以下服务是否已启动，未启动的需要启动，并设置为“自动”</p>\n<p>Remote Desktop Configuration、Remote Desktop Services、Remote Desktop Services UserMode Port Redirector<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563088538032-947955e5-6038-41ff-aeaa-b6d01cde362f.png#align=left&amp;display=inline&amp;height=229&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=229&amp;originWidth=661&amp;size=16714&amp;status=done&amp;width=661\" alt=\"图片.png\"><br><a name=\"UIjkP\"></a></p>\n<h3 id=\"设置凭据分配\"><a href=\"#设置凭据分配\" class=\"headerlink\" title=\"设置凭据分配\"></a><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">设置凭据分配</a></h3><p><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br>1、win+R输入“gpedit.msc”<br>2、点击“计算机配置”—“管理模板”—“系统”—“凭据分配”。双击右边窗口的“允许分配保存的凭据用于仅NTLM 服务器身份验证”。<br>3、在弹出的窗口中选中“已启用”，再单击“显示”，在弹出的窗口中，输入“TERMSRV/*”。（确保TERMSRV 为大写，在对话框右侧能找到这个‘单词’）<br>4、管理员运行“cmd”，输入“gpupdate /force”刷新组策略，或者重启计算机</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563088180346-0a89e16d-329a-4372-88dc-892a517e56cd.png#align=left&amp;display=inline&amp;height=491&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=491&amp;originWidth=1074&amp;size=30075&amp;status=done&amp;width=1074\" alt=\"图片.png\"></p>\n<p><a name=\"KVlb2\"></a></p>\n<h2 id=\"文章还在不停更新中\"><a href=\"#文章还在不停更新中\" class=\"headerlink\" title=\"文章还在不停更新中\"></a>文章还在不停更新中</h2>","site":{"data":{}},"excerpt":"","more":"<p><a name=\"T0vEc\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html\" target=\"_blank\" rel=\"noopener\">Windows Server 2008 R2远程协助选项灰色——百度经验@☆落墨云烟★</a><br><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@</a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">匿名用户</a><br><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br><a name=\"wTlYJ\"></a></p>\n<h1 id=\"windows之常用设置及安全管理\"><a href=\"#windows之常用设置及安全管理\" class=\"headerlink\" title=\"windows之常用设置及安全管理\"></a>windows之常用设置及安全管理</h1><p><a name=\"SYxPo\"></a></p>\n<h2 id=\"Windows-Server-2008-R2允许远程协助选项灰色\"><a href=\"#Windows-Server-2008-R2允许远程协助选项灰色\" class=\"headerlink\" title=\"Windows Server 2008 R2允许远程协助选项灰色\"></a><a href=\"https://jingyan.baidu.com/article/f3e34a12a75dd5f5ea653570.html\" target=\"_blank\" rel=\"noopener\">Windows Server 2008 R2允许远程协助选项灰色</a></h2><p><a name=\"CWEa2\"></a></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>在“服务器管理器——功能”右键选择“添加功能”，勾选“远程协助”，点击“下一步”，等待安装完成即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026746618-4c1ba175-f1cb-471a-8400-b6cfc0f722ab.png#align=left&amp;display=inline&amp;height=580&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=580&amp;originWidth=478&amp;size=28044&amp;status=done&amp;width=478\" alt=\"图片.png\"><br>效果如下<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&amp;display=inline&amp;height=464&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=464&amp;originWidth=407&amp;size=10124&amp;status=done&amp;width=407\" alt=\"图片.png\"><br><a name=\"nojxo\"></a></p>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>“控制面板——启用或者关闭windows功能”，一直点击“下一步”直到“功能”，选择“远程协助”，点击“安装”，等待时间即可。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563027106865-2db77639-753f-402d-9164-f66a049bb375.png#align=left&amp;display=inline&amp;height=573&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=573&amp;originWidth=802&amp;size=35054&amp;status=done&amp;width=802\" alt=\"图片.png\"><br><a name=\"FSwqt\"></a></p>\n<h2 id=\"“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\"><a href=\"#“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\" class=\"headerlink\" title=\"“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色\"></a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">“仅允许运行带网络级身份的远程桌面的计算机连接”按钮灰色</a></h2><p><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">Windows Srever 2008 R2 服务器远程桌面连接，仅允许运行使用网络级别身份证的远程桌面计算机连接失败——百度@</a><a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">匿名用户</a><br>按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版”——“Windows组件”——“远程桌面服务”——“远程桌面会话主机”——“安全”</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086761118-59643044-22ab-4ca5-ba53-317db8c57dfd.png#align=left&amp;display=inline&amp;height=550&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=550&amp;originWidth=762&amp;size=22320&amp;status=done&amp;width=762\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&amp;display=inline&amp;height=493&amp;originHeight=493&amp;originWidth=426&amp;status=done&amp;width=426\" alt=\"\"><br><a name=\"qacmY\"></a></p>\n<h2 id=\"如何设置远程桌面连接\"><a href=\"#如何设置远程桌面连接\" class=\"headerlink\" title=\"如何设置远程桌面连接\"></a>如何设置远程桌面连接</h2><p><a name=\"yhzKb\"></a></p>\n<h3 id=\"允许远程协助\"><a href=\"#允许远程协助\" class=\"headerlink\" title=\"允许远程协助\"></a>允许远程协助</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563026893036-0fce47bb-6323-4c38-8b97-b8d6768e8188.png#align=left&amp;display=inline&amp;height=464&amp;originHeight=464&amp;originWidth=407&amp;status=done&amp;width=407\" alt=\"\"><br><a name=\"yN1Ob\"></a></p>\n<h3 id=\"组策略中设置“允许用户使用远程桌面服务进行远程连接”\"><a href=\"#组策略中设置“允许用户使用远程桌面服务进行远程连接”\" class=\"headerlink\" title=\"组策略中设置“允许用户使用远程桌面服务进行远程连接”\"></a>组策略中设置“允许用户使用远程桌面服务进行远程连接”</h3><p>按win+R，输入“gpedit.msc”，进入“计算机配置”——“管理模版”——“Windows组件”——“远程桌面服务”——“远程桌面会话主机”——“连接”<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563087481412-9d9a71a0-2736-43d4-9bdc-cfc4681fb0af.png#align=left&amp;display=inline&amp;height=551&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=551&amp;originWidth=672&amp;size=20931&amp;status=done&amp;width=672\" alt=\"图片.png\"><br><a name=\"6zqv0\"></a></p>\n<h3 id=\"设置“仅允许运行带网络级身份的远程桌面的计算机连接”\"><a href=\"#设置“仅允许运行带网络级身份的远程桌面的计算机连接”\" class=\"headerlink\" title=\"设置“仅允许运行带网络级身份的远程桌面的计算机连接”\"></a>设置“<a href=\"https://zhidao.baidu.com/question/1388826106841180660.html#best-answer-2987455643\" target=\"_blank\" rel=\"noopener\">仅允许运行带网络级身份的远程桌面的计算机连接</a>”</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563086789327-a4c66720-b99b-4de9-8283-7a9d3fbed02d.png#align=left&amp;display=inline&amp;height=493&amp;originHeight=493&amp;originWidth=426&amp;status=done&amp;width=426\" alt=\"\"><br><a name=\"i9fJO\"></a></p>\n<h3 id=\"设置可远程的用户\"><a href=\"#设置可远程的用户\" class=\"headerlink\" title=\"设置可远程的用户\"></a>设置可远程的用户</h3><p>注：无论是否提示“administrator已经有访问权”，都需要添加一次用户。<br>方法：“控制面板”——“系统”——“远程设置”——“选择用户”——点击“添加”——点击“高级”——点击“立即查找”</p>\n<p><a name=\"6PLfm\"></a></p>\n<h3 id=\"确保远程服务正在运行\"><a href=\"#确保远程服务正在运行\" class=\"headerlink\" title=\"确保远程服务正在运行\"></a>确保远程服务正在运行</h3><p><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br>win+R输入“services.msc”，查看以下服务是否已启动，未启动的需要启动，并设置为“自动”</p>\n<p>Remote Desktop Configuration、Remote Desktop Services、Remote Desktop Services UserMode Port Redirector<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563088538032-947955e5-6038-41ff-aeaa-b6d01cde362f.png#align=left&amp;display=inline&amp;height=229&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=229&amp;originWidth=661&amp;size=16714&amp;status=done&amp;width=661\" alt=\"图片.png\"><br><a name=\"UIjkP\"></a></p>\n<h3 id=\"设置凭据分配\"><a href=\"#设置凭据分配\" class=\"headerlink\" title=\"设置凭据分配\"></a><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">设置凭据分配</a></h3><p><a href=\"https://jingyan.baidu.com/article/380abd0a1a14631d91192c4a.html\" target=\"_blank\" rel=\"noopener\">打开允许远程后仍然无法远程连接——百度经验@小明仔sweety</a><br>1、win+R输入“gpedit.msc”<br>2、点击“计算机配置”—“管理模板”—“系统”—“凭据分配”。双击右边窗口的“允许分配保存的凭据用于仅NTLM 服务器身份验证”。<br>3、在弹出的窗口中选中“已启用”，再单击“显示”，在弹出的窗口中，输入“TERMSRV/*”。（确保TERMSRV 为大写，在对话框右侧能找到这个‘单词’）<br>4、管理员运行“cmd”，输入“gpupdate /force”刷新组策略，或者重启计算机</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1563088180346-0a89e16d-329a-4372-88dc-892a517e56cd.png#align=left&amp;display=inline&amp;height=491&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=491&amp;originWidth=1074&amp;size=30075&amp;status=done&amp;width=1074\" alt=\"图片.png\"></p>\n<p><a name=\"KVlb2\"></a></p>\n<h2 id=\"文章还在不停更新中\"><a href=\"#文章还在不停更新中\" class=\"headerlink\" title=\"文章还在不停更新中\"></a>文章还在不停更新中</h2>"},{"title":"oracle之记录被另一个用户锁住","urlname":"sogvik","date":"2019-03-25T03:58:05.000Z","_content":"<a name=\"ea6f3b87\"></a>\n# 参考链接\n[oracle \"记录被另一个用户锁定\"——博客园@流年煮雪](https://www.cnblogs.com/angusbao/p/7521430.html)\n\n<!--more-->\n<a name=\"ef2bb941\"></a>\n# oracle之记录被另一个用户锁住\n\n```powershell\nSQL> select object_id,session_id,locked_mode from v$locked_object;\n\n OBJECT_ID SESSION_ID LOCKED_MODE\n\n---------- ---------- -----------\n\n    74605         11           3\n\nSQL> select t2.username,t2.sid,t2.serial#,t2.logon_time from v$locked_object t1,\n\nv$session t2 where t1.session_id=t2.sid order by t2.logon_time;\n\nUSERNAME                        SID        SERIAL#    LOGON_TIME\n\n------------------------------ ---------- ---------- --------------\n\nFSET                                11       2430     25-3月 -19\n\nSQL>  alter system kill session '11,2430' ;\n\n系统已更改。\n\nSQL> select object_id,session_id,locked_mode from v$locked_object;\n\n未选定行\n```\n\n\n","source":"_posts/yuque/oracle之记录被另一个用户锁住.md","raw":"\n---\n\ntitle: oracle之记录被另一个用户锁住\n\nurlname: sogvik\n\ndate: 2019-03-25 11:58:05 +0800\n\ntags: []\n\n---\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[oracle \"记录被另一个用户锁定\"——博客园@流年煮雪](https://www.cnblogs.com/angusbao/p/7521430.html)\n\n<!--more-->\n<a name=\"ef2bb941\"></a>\n# oracle之记录被另一个用户锁住\n\n```powershell\nSQL> select object_id,session_id,locked_mode from v$locked_object;\n\n OBJECT_ID SESSION_ID LOCKED_MODE\n\n---------- ---------- -----------\n\n    74605         11           3\n\nSQL> select t2.username,t2.sid,t2.serial#,t2.logon_time from v$locked_object t1,\n\nv$session t2 where t1.session_id=t2.sid order by t2.logon_time;\n\nUSERNAME                        SID        SERIAL#    LOGON_TIME\n\n------------------------------ ---------- ---------- --------------\n\nFSET                                11       2430     25-3月 -19\n\nSQL>  alter system kill session '11,2430' ;\n\n系统已更改。\n\nSQL> select object_id,session_id,locked_mode from v$locked_object;\n\n未选定行\n```\n\n\n","slug":"yuque/oracle之记录被另一个用户锁住","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimu006dy8us4790tp6i","content":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/angusbao/p/7521430.html\" target=\"_blank\" rel=\"noopener\">oracle “记录被另一个用户锁定”——博客园@流年煮雪</a></p>\n<a id=\"more\"></a>\n<p><a name=\"ef2bb941\"></a></p>\n<h1 id=\"oracle之记录被另一个用户锁住\"><a href=\"#oracle之记录被另一个用户锁住\" class=\"headerlink\" title=\"oracle之记录被另一个用户锁住\"></a>oracle之记录被另一个用户锁住</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt; select object_id,session_id,locked_mode from v<span class=\"variable\">$locked_object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> OBJECT_ID SESSION_ID LOCKED_MODE</span><br><span class=\"line\"></span><br><span class=\"line\">---------- ---------- -----------</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">74605</span>         <span class=\"number\">11</span>           <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; select t2.username,t2.sid,t2.serial<span class=\"comment\">#,t2.logon_time from v$locked_object t1,</span></span><br><span class=\"line\"></span><br><span class=\"line\">v<span class=\"variable\">$session</span> t2 where t1.session_id=t2.sid order by t2.logon_time;</span><br><span class=\"line\"></span><br><span class=\"line\">USERNAME                        SID        SERIAL<span class=\"comment\">#    LOGON_TIME</span></span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------ ---------- ---------- --------------</span><br><span class=\"line\"></span><br><span class=\"line\">FSET                                <span class=\"number\">11</span>       <span class=\"number\">2430</span>     <span class=\"number\">25</span><span class=\"literal\">-3</span>月 <span class=\"literal\">-19</span></span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;  alter system kill session <span class=\"string\">'11,2430'</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; select object_id,session_id,locked_mode from v<span class=\"variable\">$locked_object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">未选定行</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/angusbao/p/7521430.html\" target=\"_blank\" rel=\"noopener\">oracle “记录被另一个用户锁定”——博客园@流年煮雪</a></p>","more":"<p><a name=\"ef2bb941\"></a></p>\n<h1 id=\"oracle之记录被另一个用户锁住\"><a href=\"#oracle之记录被另一个用户锁住\" class=\"headerlink\" title=\"oracle之记录被另一个用户锁住\"></a>oracle之记录被另一个用户锁住</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt; select object_id,session_id,locked_mode from v<span class=\"variable\">$locked_object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> OBJECT_ID SESSION_ID LOCKED_MODE</span><br><span class=\"line\"></span><br><span class=\"line\">---------- ---------- -----------</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">74605</span>         <span class=\"number\">11</span>           <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; select t2.username,t2.sid,t2.serial<span class=\"comment\">#,t2.logon_time from v$locked_object t1,</span></span><br><span class=\"line\"></span><br><span class=\"line\">v<span class=\"variable\">$session</span> t2 where t1.session_id=t2.sid order by t2.logon_time;</span><br><span class=\"line\"></span><br><span class=\"line\">USERNAME                        SID        SERIAL<span class=\"comment\">#    LOGON_TIME</span></span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------ ---------- ---------- --------------</span><br><span class=\"line\"></span><br><span class=\"line\">FSET                                <span class=\"number\">11</span>       <span class=\"number\">2430</span>     <span class=\"number\">25</span><span class=\"literal\">-3</span>月 <span class=\"literal\">-19</span></span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;  alter system kill session <span class=\"string\">'11,2430'</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; select object_id,session_id,locked_mode from v<span class=\"variable\">$locked_object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">未选定行</span><br></pre></td></tr></table></figure>"},{"title":"spring boot之配置数据源时提示无法加载驱动类","urlname":"ug2d5n","date":"2019-03-06T14:55:02.000Z","_content":"<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Difference between Oracle jdbc driver classes?](https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721)[——stackoverflow@bw_üezi](https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721)  \n\n<!--more-->\n<a name=\"af3c8dff\"></a>\n# spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver\n\n1. 环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator\\.m2\\repository，如果自定义了，iDea中也一定要配置好。\n1. Idea设置问题，由于我环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator\\.m2\\repository，如果自定义了，iDea中也一定要配置好。\n\n<!--more-->\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1551884347572-64098d3c-b391-4934-9ee4-793fb17d85a6.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=818&size=43119&status=done&width=818)\n\n3. oracle9i开始就不允许使用__oracle.jdbc.driver.OracleDriver__驱动名,而需要使用****oracle.jdbc.OracleDriver****\n\n \n\n4. 没有初始化相应的bean，或者没有使用注解@Bean使用于相关数源方法，以下我是之前错误的代码\n\n```java\n@ConfigurationProperties(\"oracle.datasource\")\npublic DataSourceProperties oracleDataSourceProperties(){\n   return new DataSourceProperties();\n}\n@Bean\npublic DataSource oracleDataSource() {\n   DataSourceProperties dataSourceProperties =oracleDataSourceProperties();\n   System.out.println(\"oracle.datasource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n@Bean\n@Resource\npublic PlatformTransactionManager oracleTxManager(DataSource oracleDataSource) {\n   return new DataSourceTransactionManager(oracleDataSource);\n}\n```\n\n以上如果仔细看，可以看到oracleDataSourceProperties()这个方法没有使用注解@Bean，导致其一个bean在初始时找不到,我在打印输出时提示“oracle.datasource: {}null”\n\n","source":"_posts/yuque/spring boot之配置数据源时提示无法加载驱动类.md","raw":"\n---\n\ntitle: spring boot之配置数据源时提示无法加载驱动类\n\nurlname: ug2d5n\n\ndate: 2019-03-06 22:55:02 +0800\n\ntags: []\n\n---\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Difference between Oracle jdbc driver classes?](https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721)[——stackoverflow@bw_üezi](https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721)  \n\n<!--more-->\n<a name=\"af3c8dff\"></a>\n# spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver\n\n1. 环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator\\.m2\\repository，如果自定义了，iDea中也一定要配置好。\n1. Idea设置问题，由于我环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator\\.m2\\repository，如果自定义了，iDea中也一定要配置好。\n\n<!--more-->\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1551884347572-64098d3c-b391-4934-9ee4-793fb17d85a6.png#align=left&display=inline&height=649&name=image.png&originHeight=649&originWidth=818&size=43119&status=done&width=818)\n\n3. oracle9i开始就不允许使用__oracle.jdbc.driver.OracleDriver__驱动名,而需要使用****oracle.jdbc.OracleDriver****\n\n \n\n4. 没有初始化相应的bean，或者没有使用注解@Bean使用于相关数源方法，以下我是之前错误的代码\n\n```java\n@ConfigurationProperties(\"oracle.datasource\")\npublic DataSourceProperties oracleDataSourceProperties(){\n   return new DataSourceProperties();\n}\n@Bean\npublic DataSource oracleDataSource() {\n   DataSourceProperties dataSourceProperties =oracleDataSourceProperties();\n   System.out.println(\"oracle.datasource: {}\"+dataSourceProperties.getUrl());\n   return dataSourceProperties.initializeDataSourceBuilder().build();\n}\n@Bean\n@Resource\npublic PlatformTransactionManager oracleTxManager(DataSource oracleDataSource) {\n   return new DataSourceTransactionManager(oracleDataSource);\n}\n```\n\n以上如果仔细看，可以看到oracleDataSourceProperties()这个方法没有使用注解@Bean，导致其一个bean在初始时找不到,我在打印输出时提示“oracle.datasource: {}null”\n\n","slug":"yuque/spring boot之配置数据源时提示无法加载驱动类","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimv006fy8us4ttynbs8","content":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721\" target=\"_blank\" rel=\"noopener\">Difference between Oracle jdbc driver classes?</a><a href=\"https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721\" target=\"_blank\" rel=\"noopener\">——stackoverflow@bw_üezi</a>  </p>\n<a id=\"more\"></a>\n<p><a name=\"af3c8dff\"></a></p>\n<h1 id=\"spring-boot之配置数据源时提示spring-boot-Cannot-load-driver-class-oracle-jdbc-driver-OracleDriver\"><a href=\"#spring-boot之配置数据源时提示spring-boot-Cannot-load-driver-class-oracle-jdbc-driver-OracleDriver\" class=\"headerlink\" title=\"spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver\"></a>spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver</h1><ol>\n<li>环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator.m2\\repository，如果自定义了，iDea中也一定要配置好。</li>\n<li>Idea设置问题，由于我环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator.m2\\repository，如果自定义了，iDea中也一定要配置好。</li>\n</ol>\n<!--more-->\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551884347572-64098d3c-b391-4934-9ee4-793fb17d85a6.png#align=left&amp;display=inline&amp;height=649&amp;name=image.png&amp;originHeight=649&amp;originWidth=818&amp;size=43119&amp;status=done&amp;width=818\" alt=\"image.png\"></p>\n<ol>\n<li>oracle9i开始就不允许使用<strong>oracle.jdbc.driver.OracleDriver</strong>驱动名,而需要使用<strong><strong>oracle.jdbc.OracleDriver</strong></strong></li>\n</ol>\n<ol>\n<li>没有初始化相应的bean，或者没有使用注解@Bean使用于相关数源方法，以下我是之前错误的代码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"oracle.datasource\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">oracleDataSourceProperties</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">oracleDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties =oracleDataSourceProperties();</span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"oracle.datasource: &#123;&#125;\"</span>+dataSourceProperties.getUrl());</span><br><span class=\"line\">   <span class=\"keyword\">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">oracleTxManager</span><span class=\"params\">(DataSource oracleDataSource)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(oracleDataSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上如果仔细看，可以看到oracleDataSourceProperties()这个方法没有使用注解@Bean，导致其一个bean在初始时找不到,我在打印输出时提示“oracle.datasource: {}null”</p>\n","site":{"data":{}},"excerpt":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721\" target=\"_blank\" rel=\"noopener\">Difference between Oracle jdbc driver classes?</a><a href=\"https://stackoverflow.com/questions/6202653/difference-between-oracle-jdbc-driver-classes/6202721#6202721\" target=\"_blank\" rel=\"noopener\">——stackoverflow@bw_üezi</a>  </p>","more":"<p><a name=\"af3c8dff\"></a></p>\n<h1 id=\"spring-boot之配置数据源时提示spring-boot-Cannot-load-driver-class-oracle-jdbc-driver-OracleDriver\"><a href=\"#spring-boot之配置数据源时提示spring-boot-Cannot-load-driver-class-oracle-jdbc-driver-OracleDriver\" class=\"headerlink\" title=\"spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver\"></a>spring boot之配置数据源时提示spring boot Cannot load driver class: oracle.jdbc.driver.OracleDriver</h1><ol>\n<li>环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator.m2\\repository，如果自定义了，iDea中也一定要配置好。</li>\n<li>Idea设置问题，由于我环境的maven是自定义了本地仓库位置，但是idea配置maven的设置时却引用的C:\\Users\\Administrator.m2\\repository，如果自定义了，iDea中也一定要配置好。</li>\n</ol>\n<!--more-->\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1551884347572-64098d3c-b391-4934-9ee4-793fb17d85a6.png#align=left&amp;display=inline&amp;height=649&amp;name=image.png&amp;originHeight=649&amp;originWidth=818&amp;size=43119&amp;status=done&amp;width=818\" alt=\"image.png\"></p>\n<ol>\n<li>oracle9i开始就不允许使用<strong>oracle.jdbc.driver.OracleDriver</strong>驱动名,而需要使用<strong><strong>oracle.jdbc.OracleDriver</strong></strong></li>\n</ol>\n<ol>\n<li>没有初始化相应的bean，或者没有使用注解@Bean使用于相关数源方法，以下我是之前错误的代码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"oracle.datasource\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DataSourceProperties <span class=\"title\">oracleDataSourceProperties</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProperties();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">oracleDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   DataSourceProperties dataSourceProperties =oracleDataSourceProperties();</span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"oracle.datasource: &#123;&#125;\"</span>+dataSourceProperties.getUrl());</span><br><span class=\"line\">   <span class=\"keyword\">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">oracleTxManager</span><span class=\"params\">(DataSource oracleDataSource)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(oracleDataSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上如果仔细看，可以看到oracleDataSourceProperties()这个方法没有使用注解@Bean，导致其一个bean在初始时找不到,我在打印输出时提示“oracle.datasource: {}null”</p>"},{"title":"oracle之重装系统后恢复","urlname":"ivm3hq","date":"2019-02-19T15:12:33.000Z","_content":"\n\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world](https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg)  （这篇文章参考测试了很久，很遗憾没有成功）<br />[重装系统后ORACLE的恢复——CSDN@haiross](https://blog.csdn.net/haiross/article/details/18550523)  （注：用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的）<br />[Windows Server 2012上安装.NET Framework 3.5——CSDN@lvmenglong888](https://blog.csdn.net/sunny_lv/article/details/73603360)<br />[Oracle监听服务无法启动——博客园@Leis](https://www.cnblogs.com/leis/p/5525844.html)  （注：试过问题二改注册表没有成功）<br />[Oracle监听服务无法启动——ITPUB博客@chenoracle](http://blog.itpub.net/29785807/viewspace-2131834/)  （注：试过没有成功，但是有了启发，觉得可能是监听配置有问题）<br />[ORA-12514: TNS:监听程序当前无法识别连接描述符中请求的服务——CSDN@麦田](https://blog.csdn.net/a921122/article/details/51878992)  （注：没有成功）<br />[关于Win7 64位下：Navicat无法连接64位Oracle 11gR2：Cannot load OCI DLL 87 解决方法——CSDN@a921122](https://blog.csdn.net/a921122/article/details/51878992)  （注：后面发现不是oracle问题，可能是oracle配置变更了navicat无法访问）<br />[处理错误：ORA-27101: shared memory realm does not exist 解决方](https://www.cnblogs.com/loveling-0239/p/6547409.html)[案](https://www.cnblogs.com/loveling-0239/p/6547409.html)[——博客园@AlgorithmInit](https://www.cnblogs.com/loveling-0239/p/6547409.html)  （注：成功）<br />[ORA-27101: shared memory realm does not exist 错误的处理——博客园@lpioneer](https://blog.csdn.net/lpioneer/article/details/6109933)（注：这篇看过不太一样，但是有试过没有成功） \n\n<a name=\"c83d32c2\"></a>\n# oracle之重装系统后恢复\n<a name=\"59683fbc\"></a>\n## 简述\noracle恢复我也是模模糊糊的，毕竟我对oracle不是很熟悉，不一定保证能成功，如果想要百分百成功的可以不用看下去。<br /><!--more-->\n<a name=\"a96b396f\"></a>\n## 具体操作分析\n\n1. 第一次我是采用“[Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world](https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg)  ”中冷恢复法，测试了很久没有成功\n1. 第二次我是采用“[重装系统后ORACLE的恢复——CSDN@haiross](https://blog.csdn.net/haiross/article/details/18550523)”用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的，我也有了怀疑，可能是重装的oralce配置跟之前系统的还是有区别，然后仔细思考，**安装oracle的时候一直提示“.net framework 3.5无法安装”**\n1. 在服务器上安装**.net framework 3.5**，并将oracle卸载了，注册表也删除干净，重新启动\n1. **重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器，启动完成后查看服务，**发现只有监听程序没有启动，尝试启动后失败提示“启动服务失败，无法找到对应文件”\n1. 参考文件“[Oracle监听服务无法启动——ITPUB博客@chenoracle](http://blog.itpub.net/29785807/viewspace-2131834/)”后怀疑1521端口被占用，遂使用“net Configuration Assistant”删除1521监听，重新创建一个1522新监听，测试没有成功，但是测试连接ip:1521/orcl时居然成功旧数据也可以查询，但是我已经删除1521的监听程序，我发现其他实例连接不行，仔细查看发现居然三个监听服务，“OracleOraDb11g_home1TNSListener”、“OracleTNSListener”、“OracleTNSListenerLISTNER2”；经测试发现在我创建“OracleTNSListenerLISTNER2”时，oracle自动帮我创建了“OracleTNSListener”，这个明显是1521端口监听程序，仔细思考1521可以那么“OracleTNSListener”一定可以使用，遂删除“OracleTNSListenerLISTNER2”监听程序\n1. 在通过sqlplus尝试连接其他实例jzcc，报错“ORA-27101: shared memory realm does not exist”，参考“[处理错误：ORA-27101: shared memory realm does not exist 解决方](https://www.cnblogs.com/loveling-0239/p/6547409.html)[案](https://www.cnblogs.com/loveling-0239/p/6547409.html)[——博客园@AlgorithmInit](https://www.cnblogs.com/loveling-0239/p/6547409.html)  ”，测试成功，原来恢复后，实例服务虽然打启动了，但是实例数据库没有打开，需要用sysdba登录 ，调用startup打开数据库实例。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592701794-be5b7d15-cc1a-45dc-ac6a-e255ccb64f73.png#align=left&display=inline&height=449&originHeight=449&originWidth=679&size=0&status=done&width=679)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png#align=left&display=inline&height=316&originHeight=316&originWidth=613&size=0&status=done&width=613)\n<a name=\"25f9c7fa\"></a>\n## 总结\n\n1. 需要保存跟之前一样的环境，一样配置，即操作系统、计算机名、oracle版本（桌面版或者是企业版必须一致）、windows的配置(.net framework 3.5)\n1. 重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器。\n1. 此时你可能会发现，只有监听服务没有启动，重新配置监听，使用“net Configuration Assistant”删除1521监听，重新建立1521监听\n1. 查看oracle实例服务是否启动，已经启动，进入cmd管理员\n\n```powershell\nset oracle_sid=sid\nsqlplus / as sysdba\nstartup\n```\n\n以下图片中代码与上面相同\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png)\n\n","source":"_posts/yuque/oracle之重装系统后恢复.md","raw":"\n---\n\ntitle: oracle之重装系统后恢复\n\nurlname: ivm3hq\n\ndate: 2019-02-19 23:12:33 +0800\n\ntags: [oracle,数据库]\n\ncategories: oracle\n\n---\n\n\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world](https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg)  （这篇文章参考测试了很久，很遗憾没有成功）<br />[重装系统后ORACLE的恢复——CSDN@haiross](https://blog.csdn.net/haiross/article/details/18550523)  （注：用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的）<br />[Windows Server 2012上安装.NET Framework 3.5——CSDN@lvmenglong888](https://blog.csdn.net/sunny_lv/article/details/73603360)<br />[Oracle监听服务无法启动——博客园@Leis](https://www.cnblogs.com/leis/p/5525844.html)  （注：试过问题二改注册表没有成功）<br />[Oracle监听服务无法启动——ITPUB博客@chenoracle](http://blog.itpub.net/29785807/viewspace-2131834/)  （注：试过没有成功，但是有了启发，觉得可能是监听配置有问题）<br />[ORA-12514: TNS:监听程序当前无法识别连接描述符中请求的服务——CSDN@麦田](https://blog.csdn.net/a921122/article/details/51878992)  （注：没有成功）<br />[关于Win7 64位下：Navicat无法连接64位Oracle 11gR2：Cannot load OCI DLL 87 解决方法——CSDN@a921122](https://blog.csdn.net/a921122/article/details/51878992)  （注：后面发现不是oracle问题，可能是oracle配置变更了navicat无法访问）<br />[处理错误：ORA-27101: shared memory realm does not exist 解决方](https://www.cnblogs.com/loveling-0239/p/6547409.html)[案](https://www.cnblogs.com/loveling-0239/p/6547409.html)[——博客园@AlgorithmInit](https://www.cnblogs.com/loveling-0239/p/6547409.html)  （注：成功）<br />[ORA-27101: shared memory realm does not exist 错误的处理——博客园@lpioneer](https://blog.csdn.net/lpioneer/article/details/6109933)（注：这篇看过不太一样，但是有试过没有成功） \n\n<a name=\"c83d32c2\"></a>\n# oracle之重装系统后恢复\n<a name=\"59683fbc\"></a>\n## 简述\noracle恢复我也是模模糊糊的，毕竟我对oracle不是很熟悉，不一定保证能成功，如果想要百分百成功的可以不用看下去。<br /><!--more-->\n<a name=\"a96b396f\"></a>\n## 具体操作分析\n\n1. 第一次我是采用“[Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world](https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg)  ”中冷恢复法，测试了很久没有成功\n1. 第二次我是采用“[重装系统后ORACLE的恢复——CSDN@haiross](https://blog.csdn.net/haiross/article/details/18550523)”用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的，我也有了怀疑，可能是重装的oralce配置跟之前系统的还是有区别，然后仔细思考，**安装oracle的时候一直提示“.net framework 3.5无法安装”**\n1. 在服务器上安装**.net framework 3.5**，并将oracle卸载了，注册表也删除干净，重新启动\n1. **重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器，启动完成后查看服务，**发现只有监听程序没有启动，尝试启动后失败提示“启动服务失败，无法找到对应文件”\n1. 参考文件“[Oracle监听服务无法启动——ITPUB博客@chenoracle](http://blog.itpub.net/29785807/viewspace-2131834/)”后怀疑1521端口被占用，遂使用“net Configuration Assistant”删除1521监听，重新创建一个1522新监听，测试没有成功，但是测试连接ip:1521/orcl时居然成功旧数据也可以查询，但是我已经删除1521的监听程序，我发现其他实例连接不行，仔细查看发现居然三个监听服务，“OracleOraDb11g_home1TNSListener”、“OracleTNSListener”、“OracleTNSListenerLISTNER2”；经测试发现在我创建“OracleTNSListenerLISTNER2”时，oracle自动帮我创建了“OracleTNSListener”，这个明显是1521端口监听程序，仔细思考1521可以那么“OracleTNSListener”一定可以使用，遂删除“OracleTNSListenerLISTNER2”监听程序\n1. 在通过sqlplus尝试连接其他实例jzcc，报错“ORA-27101: shared memory realm does not exist”，参考“[处理错误：ORA-27101: shared memory realm does not exist 解决方](https://www.cnblogs.com/loveling-0239/p/6547409.html)[案](https://www.cnblogs.com/loveling-0239/p/6547409.html)[——博客园@AlgorithmInit](https://www.cnblogs.com/loveling-0239/p/6547409.html)  ”，测试成功，原来恢复后，实例服务虽然打启动了，但是实例数据库没有打开，需要用sysdba登录 ，调用startup打开数据库实例。\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592701794-be5b7d15-cc1a-45dc-ac6a-e255ccb64f73.png#align=left&display=inline&height=449&originHeight=449&originWidth=679&size=0&status=done&width=679)<br />![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png#align=left&display=inline&height=316&originHeight=316&originWidth=613&size=0&status=done&width=613)\n<a name=\"25f9c7fa\"></a>\n## 总结\n\n1. 需要保存跟之前一样的环境，一样配置，即操作系统、计算机名、oracle版本（桌面版或者是企业版必须一致）、windows的配置(.net framework 3.5)\n1. 重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器。\n1. 此时你可能会发现，只有监听服务没有启动，重新配置监听，使用“net Configuration Assistant”删除1521监听，重新建立1521监听\n1. 查看oracle实例服务是否启动，已经启动，进入cmd管理员\n\n```powershell\nset oracle_sid=sid\nsqlplus / as sysdba\nstartup\n```\n\n以下图片中代码与上面相同\n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png)\n\n","slug":"yuque/oracle之重装系统后恢复","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimw006hy8us72qm6144","content":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world</a>  （这篇文章参考测试了很久，很遗憾没有成功）<br><a href=\"https://blog.csdn.net/haiross/article/details/18550523\" target=\"_blank\" rel=\"noopener\">重装系统后ORACLE的恢复——CSDN@haiross</a>  （注：用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的）<br><a href=\"https://blog.csdn.net/sunny_lv/article/details/73603360\" target=\"_blank\" rel=\"noopener\">Windows Server 2012上安装.NET Framework 3.5——CSDN@lvmenglong888</a><br><a href=\"https://www.cnblogs.com/leis/p/5525844.html\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——博客园@Leis</a>  （注：试过问题二改注册表没有成功）<br><a href=\"http://blog.itpub.net/29785807/viewspace-2131834/\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——ITPUB博客@chenoracle</a>  （注：试过没有成功，但是有了启发，觉得可能是监听配置有问题）<br><a href=\"https://blog.csdn.net/a921122/article/details/51878992\" target=\"_blank\" rel=\"noopener\">ORA-12514: TNS:监听程序当前无法识别连接描述符中请求的服务——CSDN@麦田</a>  （注：没有成功）<br><a href=\"https://blog.csdn.net/a921122/article/details/51878992\" target=\"_blank\" rel=\"noopener\">关于Win7 64位下：Navicat无法连接64位Oracle 11gR2：Cannot load OCI DLL 87 解决方法——CSDN@a921122</a>  （注：后面发现不是oracle问题，可能是oracle配置变更了navicat无法访问）<br><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">处理错误：ORA-27101: shared memory realm does not exist 解决方</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">案</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">——博客园@AlgorithmInit</a>  （注：成功）<br><a href=\"https://blog.csdn.net/lpioneer/article/details/6109933\" target=\"_blank\" rel=\"noopener\">ORA-27101: shared memory realm does not exist 错误的处理——博客园@lpioneer</a>（注：这篇看过不太一样，但是有试过没有成功） </p>\n<p><a name=\"c83d32c2\"></a></p>\n<h1 id=\"oracle之重装系统后恢复\"><a href=\"#oracle之重装系统后恢复\" class=\"headerlink\" title=\"oracle之重装系统后恢复\"></a>oracle之重装系统后恢复</h1><p><a name=\"59683fbc\"></a></p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>oracle恢复我也是模模糊糊的，毕竟我对oracle不是很熟悉，不一定保证能成功，如果想要百分百成功的可以不用看下去。<br><a id=\"more\"></a><br><a name=\"a96b396f\"></a></p>\n<h2 id=\"具体操作分析\"><a href=\"#具体操作分析\" class=\"headerlink\" title=\"具体操作分析\"></a>具体操作分析</h2><ol>\n<li>第一次我是采用“<a href=\"https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world</a>  ”中冷恢复法，测试了很久没有成功</li>\n<li>第二次我是采用“<a href=\"https://blog.csdn.net/haiross/article/details/18550523\" target=\"_blank\" rel=\"noopener\">重装系统后ORACLE的恢复——CSDN@haiross</a>”用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的，我也有了怀疑，可能是重装的oralce配置跟之前系统的还是有区别，然后仔细思考，<strong>安装oracle的时候一直提示“.net framework 3.5无法安装”</strong></li>\n<li>在服务器上安装<strong>.net framework 3.5</strong>，并将oracle卸载了，注册表也删除干净，重新启动</li>\n<li><strong>重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器，启动完成后查看服务，</strong>发现只有监听程序没有启动，尝试启动后失败提示“启动服务失败，无法找到对应文件”</li>\n<li>参考文件“<a href=\"http://blog.itpub.net/29785807/viewspace-2131834/\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——ITPUB博客@chenoracle</a>”后怀疑1521端口被占用，遂使用“net Configuration Assistant”删除1521监听，重新创建一个1522新监听，测试没有成功，但是测试连接ip:1521/orcl时居然成功旧数据也可以查询，但是我已经删除1521的监听程序，我发现其他实例连接不行，仔细查看发现居然三个监听服务，“OracleOraDb11g_home1TNSListener”、“OracleTNSListener”、“OracleTNSListenerLISTNER2”；经测试发现在我创建“OracleTNSListenerLISTNER2”时，oracle自动帮我创建了“OracleTNSListener”，这个明显是1521端口监听程序，仔细思考1521可以那么“OracleTNSListener”一定可以使用，遂删除“OracleTNSListenerLISTNER2”监听程序</li>\n<li>在通过sqlplus尝试连接其他实例jzcc，报错“ORA-27101: shared memory realm does not exist”，参考“<a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">处理错误：ORA-27101: shared memory realm does not exist 解决方</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">案</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">——博客园@AlgorithmInit</a>  ”，测试成功，原来恢复后，实例服务虽然打启动了，但是实例数据库没有打开，需要用sysdba登录 ，调用startup打开数据库实例。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592701794-be5b7d15-cc1a-45dc-ac6a-e255ccb64f73.png#align=left&amp;display=inline&amp;height=449&amp;originHeight=449&amp;originWidth=679&amp;size=0&amp;status=done&amp;width=679\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png#align=left&amp;display=inline&amp;height=316&amp;originHeight=316&amp;originWidth=613&amp;size=0&amp;status=done&amp;width=613\" alt=\"\"><br><a name=\"25f9c7fa\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>需要保存跟之前一样的环境，一样配置，即操作系统、计算机名、oracle版本（桌面版或者是企业版必须一致）、windows的配置(.net framework 3.5)</li>\n<li>重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器。</li>\n<li>此时你可能会发现，只有监听服务没有启动，重新配置监听，使用“net Configuration Assistant”删除1521监听，重新建立1521监听</li>\n<li>查看oracle实例服务是否启动，已经启动，进入cmd管理员</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set oracle_sid=sid</span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\">startup</span><br></pre></td></tr></table></figure>\n<p>以下图片中代码与上面相同</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world</a>  （这篇文章参考测试了很久，很遗憾没有成功）<br><a href=\"https://blog.csdn.net/haiross/article/details/18550523\" target=\"_blank\" rel=\"noopener\">重装系统后ORACLE的恢复——CSDN@haiross</a>  （注：用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的）<br><a href=\"https://blog.csdn.net/sunny_lv/article/details/73603360\" target=\"_blank\" rel=\"noopener\">Windows Server 2012上安装.NET Framework 3.5——CSDN@lvmenglong888</a><br><a href=\"https://www.cnblogs.com/leis/p/5525844.html\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——博客园@Leis</a>  （注：试过问题二改注册表没有成功）<br><a href=\"http://blog.itpub.net/29785807/viewspace-2131834/\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——ITPUB博客@chenoracle</a>  （注：试过没有成功，但是有了启发，觉得可能是监听配置有问题）<br><a href=\"https://blog.csdn.net/a921122/article/details/51878992\" target=\"_blank\" rel=\"noopener\">ORA-12514: TNS:监听程序当前无法识别连接描述符中请求的服务——CSDN@麦田</a>  （注：没有成功）<br><a href=\"https://blog.csdn.net/a921122/article/details/51878992\" target=\"_blank\" rel=\"noopener\">关于Win7 64位下：Navicat无法连接64位Oracle 11gR2：Cannot load OCI DLL 87 解决方法——CSDN@a921122</a>  （注：后面发现不是oracle问题，可能是oracle配置变更了navicat无法访问）<br><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">处理错误：ORA-27101: shared memory realm does not exist 解决方</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">案</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">——博客园@AlgorithmInit</a>  （注：成功）<br><a href=\"https://blog.csdn.net/lpioneer/article/details/6109933\" target=\"_blank\" rel=\"noopener\">ORA-27101: shared memory realm does not exist 错误的处理——博客园@lpioneer</a>（注：这篇看过不太一样，但是有试过没有成功） </p>\n<p><a name=\"c83d32c2\"></a></p>\n<h1 id=\"oracle之重装系统后恢复\"><a href=\"#oracle之重装系统后恢复\" class=\"headerlink\" title=\"oracle之重装系统后恢复\"></a>oracle之重装系统后恢复</h1><p><a name=\"59683fbc\"></a></p>\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>oracle恢复我也是模模糊糊的，毕竟我对oracle不是很熟悉，不一定保证能成功，如果想要百分百成功的可以不用看下去。<br></p>","more":"<br><a name=\"a96b396f\"></a><p></p>\n<h2 id=\"具体操作分析\"><a href=\"#具体操作分析\" class=\"headerlink\" title=\"具体操作分析\"></a>具体操作分析</h2><ol>\n<li>第一次我是采用“<a href=\"https://www.cnblogs.com/arxive/p/9437152.html?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">Oracle数据库冷备份与恢复（救命稻草）——博客园@Hellow world</a>  ”中冷恢复法，测试了很久没有成功</li>\n<li>第二次我是采用“<a href=\"https://blog.csdn.net/haiross/article/details/18550523\" target=\"_blank\" rel=\"noopener\">重装系统后ORACLE的恢复——CSDN@haiross</a>”用户能够登录了，但是在navicat中双击用户查看表时报错了，错误忘记了好像是“sql查询错误[][][][][]”，没有成功，但是有了启发，能登录说明这个方法可能是可行的，我也有了怀疑，可能是重装的oralce配置跟之前系统的还是有区别，然后仔细思考，<strong>安装oracle的时候一直提示“.net framework 3.5无法安装”</strong></li>\n<li>在服务器上安装<strong>.net framework 3.5</strong>，并将oracle卸载了，注册表也删除干净，重新启动</li>\n<li><strong>重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器，启动完成后查看服务，</strong>发现只有监听程序没有启动，尝试启动后失败提示“启动服务失败，无法找到对应文件”</li>\n<li>参考文件“<a href=\"http://blog.itpub.net/29785807/viewspace-2131834/\" target=\"_blank\" rel=\"noopener\">Oracle监听服务无法启动——ITPUB博客@chenoracle</a>”后怀疑1521端口被占用，遂使用“net Configuration Assistant”删除1521监听，重新创建一个1522新监听，测试没有成功，但是测试连接ip:1521/orcl时居然成功旧数据也可以查询，但是我已经删除1521的监听程序，我发现其他实例连接不行，仔细查看发现居然三个监听服务，“OracleOraDb11g_home1TNSListener”、“OracleTNSListener”、“OracleTNSListenerLISTNER2”；经测试发现在我创建“OracleTNSListenerLISTNER2”时，oracle自动帮我创建了“OracleTNSListener”，这个明显是1521端口监听程序，仔细思考1521可以那么“OracleTNSListener”一定可以使用，遂删除“OracleTNSListenerLISTNER2”监听程序</li>\n<li>在通过sqlplus尝试连接其他实例jzcc，报错“ORA-27101: shared memory realm does not exist”，参考“<a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">处理错误：ORA-27101: shared memory realm does not exist 解决方</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">案</a><a href=\"https://www.cnblogs.com/loveling-0239/p/6547409.html\" target=\"_blank\" rel=\"noopener\">——博客园@AlgorithmInit</a>  ”，测试成功，原来恢复后，实例服务虽然打启动了，但是实例数据库没有打开，需要用sysdba登录 ，调用startup打开数据库实例。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592701794-be5b7d15-cc1a-45dc-ac6a-e255ccb64f73.png#align=left&amp;display=inline&amp;height=449&amp;originHeight=449&amp;originWidth=679&amp;size=0&amp;status=done&amp;width=679\" alt=\"\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png#align=left&amp;display=inline&amp;height=316&amp;originHeight=316&amp;originWidth=613&amp;size=0&amp;status=done&amp;width=613\" alt=\"\"><br><a name=\"25f9c7fa\"></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>需要保存跟之前一样的环境，一样配置，即操作系统、计算机名、oracle版本（桌面版或者是企业版必须一致）、windows的配置(.net framework 3.5)</li>\n<li>重新安装oracle，创建与旧oracle一模一样的实例，停掉所有服务，将旧oracle安装目录整个替换为新oracle，直接重新启动服务器。</li>\n<li>此时你可能会发现，只有监听服务没有启动，重新配置监听，使用“net Configuration Assistant”删除1521监听，重新建立1521监听</li>\n<li>查看oracle实例服务是否启动，已经启动，进入cmd管理员</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set oracle_sid=sid</span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\">startup</span><br></pre></td></tr></table></figure>\n<p>以下图片中代码与上面相同</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550592738223-a093d680-6243-483f-8532-811d71fcb822.png\" alt=\"\"></p>"},{"title":"mysql之绿色版","urlname":"ta9e6i","date":"2019-01-27T19:26:51.000Z","_content":"<a name=\"ea6f3b87\"></a>\n# 参考链接\n[MySQL 5.7.20绿色版安装详细图文教程](https://www.jb51.net/article/129367.htm?utm_medium=referral)  <br />[mysql安装常见问题（系统找不到指定的文件、发生系统错误 1067 进程意外终止）——CSDN@MikanMu](https://blog.csdn.net/mhmyqn/article/details/17043921)  \n\n<a name=\"58378f0d\"></a>\n# 正文\n<a name=\"6b2ff274\"></a>\n## 下载mysql解压版\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548617933737-b535ebc1-0570-447e-aad6-b4be74e0ad46.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=1026&size=91231&status=done&width=1026)\n\n<!--more-->\n\n<a name=\"bd872cff\"></a>\n## 解压mysql，并在根目录创建my.ini\n\n```shell\n[client]\nport=3306\ndefault-character-set=utf8\n[mysqld] \n# 设置MYSQL安装目录 \nbasedir=D:\\Program Files (x86)\\mysql-5.7.20\n# 设置MYSQL数据目录 \ndatadir=D:\\Program Files (x86)\\mysql-5.7.20\\data\nport=3306\ncharacter_set_server=utf8\nsql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER\n#开启查询缓存\nexplicit_defaults_for_timestamp=true\nskip-grant-tables\n```\n<a name=\"914c1a08\"></a>\n## 创建mysql服务\n以管理员身份证运行cmd，输入以下命令，创建mysql服务，并启动\n\n```shell\ncd D:\\Program Files (x86)\\mysql-5.7.20\\bin\nmysqld -install\nnet start mysql\n```\n<a name=\"7fc88aee\"></a>\n## 修改密码\n初次系统是默认用户是root，默认没有密码，以管理员身份证运行cmd，输入以下命令\n\n```\nmysql\n\n```\n\n\n","source":"_posts/yuque/mysql之绿色版.md","raw":"\n---\n\ntitle: mysql之绿色版\n\nurlname: ta9e6i\n\ndate: 2019-01-28 03:26:51 +0800\n\ntags: []\n\n---\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[MySQL 5.7.20绿色版安装详细图文教程](https://www.jb51.net/article/129367.htm?utm_medium=referral)  <br />[mysql安装常见问题（系统找不到指定的文件、发生系统错误 1067 进程意外终止）——CSDN@MikanMu](https://blog.csdn.net/mhmyqn/article/details/17043921)  \n\n<a name=\"58378f0d\"></a>\n# 正文\n<a name=\"6b2ff274\"></a>\n## 下载mysql解压版\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548617933737-b535ebc1-0570-447e-aad6-b4be74e0ad46.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=1026&size=91231&status=done&width=1026)\n\n<!--more-->\n\n<a name=\"bd872cff\"></a>\n## 解压mysql，并在根目录创建my.ini\n\n```shell\n[client]\nport=3306\ndefault-character-set=utf8\n[mysqld] \n# 设置MYSQL安装目录 \nbasedir=D:\\Program Files (x86)\\mysql-5.7.20\n# 设置MYSQL数据目录 \ndatadir=D:\\Program Files (x86)\\mysql-5.7.20\\data\nport=3306\ncharacter_set_server=utf8\nsql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER\n#开启查询缓存\nexplicit_defaults_for_timestamp=true\nskip-grant-tables\n```\n<a name=\"914c1a08\"></a>\n## 创建mysql服务\n以管理员身份证运行cmd，输入以下命令，创建mysql服务，并启动\n\n```shell\ncd D:\\Program Files (x86)\\mysql-5.7.20\\bin\nmysqld -install\nnet start mysql\n```\n<a name=\"7fc88aee\"></a>\n## 修改密码\n初次系统是默认用户是root，默认没有密码，以管理员身份证运行cmd，输入以下命令\n\n```\nmysql\n\n```\n\n\n","slug":"yuque/mysql之绿色版","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncimy006jy8usd4ye1x0g","content":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.jb51.net/article/129367.htm?utm_medium=referral\" target=\"_blank\" rel=\"noopener\">MySQL 5.7.20绿色版安装详细图文教程</a>  <br><a href=\"https://blog.csdn.net/mhmyqn/article/details/17043921\" target=\"_blank\" rel=\"noopener\">mysql安装常见问题（系统找不到指定的文件、发生系统错误 1067 进程意外终止）——CSDN@MikanMu</a>  </p>\n<p><a name=\"58378f0d\"></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><a name=\"6b2ff274\"></a></p>\n<h2 id=\"下载mysql解压版\"><a href=\"#下载mysql解压版\" class=\"headerlink\" title=\"下载mysql解压版\"></a>下载mysql解压版</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548617933737-b535ebc1-0570-447e-aad6-b4be74e0ad46.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=1026&amp;size=91231&amp;status=done&amp;width=1026\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n<p><a name=\"bd872cff\"></a></p>\n<h2 id=\"解压mysql，并在根目录创建my-ini\"><a href=\"#解压mysql，并在根目录创建my-ini\" class=\"headerlink\" title=\"解压mysql，并在根目录创建my.ini\"></a>解压mysql，并在根目录创建my.ini</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysqld] </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置MYSQL安装目录 </span></span><br><span class=\"line\">basedir=D:\\Program Files (x86)\\mysql-5.7.20</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置MYSQL数据目录 </span></span><br><span class=\"line\">datadir=D:\\Program Files (x86)\\mysql-5.7.20\\data</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启查询缓存</span></span><br><span class=\"line\">explicit_defaults_for_timestamp=true</span><br><span class=\"line\">skip-grant-tables</span><br></pre></td></tr></table></figure>\n<p><a name=\"914c1a08\"></a></p>\n<h2 id=\"创建mysql服务\"><a href=\"#创建mysql服务\" class=\"headerlink\" title=\"创建mysql服务\"></a>创建mysql服务</h2><p>以管理员身份证运行cmd，输入以下命令，创建mysql服务，并启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd D:\\Program Files (x86)\\mysql-5.7.20\\bin</span><br><span class=\"line\">mysqld -install</span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n<p><a name=\"7fc88aee\"></a></p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>初次系统是默认用户是root，默认没有密码，以管理员身份证运行cmd，输入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.jb51.net/article/129367.htm?utm_medium=referral\" target=\"_blank\" rel=\"noopener\">MySQL 5.7.20绿色版安装详细图文教程</a>  <br><a href=\"https://blog.csdn.net/mhmyqn/article/details/17043921\" target=\"_blank\" rel=\"noopener\">mysql安装常见问题（系统找不到指定的文件、发生系统错误 1067 进程意外终止）——CSDN@MikanMu</a>  </p>\n<p><a name=\"58378f0d\"></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><a name=\"6b2ff274\"></a></p>\n<h2 id=\"下载mysql解压版\"><a href=\"#下载mysql解压版\" class=\"headerlink\" title=\"下载mysql解压版\"></a>下载mysql解压版</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548617933737-b535ebc1-0570-447e-aad6-b4be74e0ad46.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=1026&amp;size=91231&amp;status=done&amp;width=1026\" alt=\"image.png\"></p>","more":"<p><a name=\"bd872cff\"></a></p>\n<h2 id=\"解压mysql，并在根目录创建my-ini\"><a href=\"#解压mysql，并在根目录创建my-ini\" class=\"headerlink\" title=\"解压mysql，并在根目录创建my.ini\"></a>解压mysql，并在根目录创建my.ini</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysqld] </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置MYSQL安装目录 </span></span><br><span class=\"line\">basedir=D:\\Program Files (x86)\\mysql-5.7.20</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置MYSQL数据目录 </span></span><br><span class=\"line\">datadir=D:\\Program Files (x86)\\mysql-5.7.20\\data</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启查询缓存</span></span><br><span class=\"line\">explicit_defaults_for_timestamp=true</span><br><span class=\"line\">skip-grant-tables</span><br></pre></td></tr></table></figure>\n<p><a name=\"914c1a08\"></a></p>\n<h2 id=\"创建mysql服务\"><a href=\"#创建mysql服务\" class=\"headerlink\" title=\"创建mysql服务\"></a>创建mysql服务</h2><p>以管理员身份证运行cmd，输入以下命令，创建mysql服务，并启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd D:\\Program Files (x86)\\mysql-5.7.20\\bin</span><br><span class=\"line\">mysqld -install</span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n<p><a name=\"7fc88aee\"></a></p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>初次系统是默认用户是root，默认没有密码，以管理员身份证运行cmd，输入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>"},{"title":"开发工具之arthas命令","urlname":"tfnv65","date":"2019-07-02T07:25:34.000Z","_content":"<a name=\"tSiLs\"></a>\n# 开发工具之arthas命令\n<a name=\"N1m6c\"></a>\n# 参考链接\n[arthas官方文档——arthas](https://alibaba.github.io/arthas/)<br />[arthas官方在线模拟器教程——arths](https://alibaba.github.io/arthas/arthas-tutorials?language=cn)<br />\n<a name=\"shuQ1\"></a>\n# 概述\n> 当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： <br />\n> 1. 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n> 1. 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n> 1. 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n> 1. 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n> 1. 是否有一个全局视角来查看系统的运行状况？\n> 1. 有什么办法可以监控到JVM的实时运行状态？\n> \nArthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。\n\n<a name=\"UxmlN\"></a>\n## 安装及运行\n<a name=\"hHWYN\"></a>\n### 安装\nwindows版本需要从官方下载一个压缩包，解压即可<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053000011-6b93ae1e-c3eb-4851-8e60-5a4e0f2800ef.png#align=left&display=inline&height=336&name=%E5%9B%BE%E7%89%87.png&originHeight=336&originWidth=748&size=22442&status=done&width=748)\n<a name=\"uScch\"></a>\n### 运行\n可以使用默认提供的`as.bat`文件，不过需要手动输入JVM进程的pid，也可以采用我下面自己写的，保存为bat批处理文件，只需知道pid，运行选择数字即可<br />\n\n```powershell\n:A\njava -jar arthas-boot.jar\ngoto A\npause\n```\n\n实际运行效果，下图“org.apache.catalina.startup.bootsrap”是我现在的tomcat，因为只运行了一个JVM，非常好选择，直接输入1进入arthas仪表盘即可。<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053490019-4276d91b-15fb-45a5-b981-23772fa31bcf.png#align=left&display=inline&height=429&name=%E5%9B%BE%E7%89%87.png&originHeight=429&originWidth=667&size=6993&status=done&width=667)<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053592838-41334dd7-b780-4956-9663-31c1f5795661.png#align=left&display=inline&height=481&name=%E5%9B%BE%E7%89%87.png&originHeight=481&originWidth=731&size=16430&status=done&width=731)\n\n<a name=\"DorZF\"></a>\n## 命令行\n<a name=\"MCK8S\"></a>\n### redefine重新加载class文件到JVM中\n\n```powershell\nredefine D:/tomcat/webapps/test/WEB-INF/classes/com/kingzheng/fsjscx/util/JSON.class\n```\n\n1. redefine只能重新加载已经存在JVM内存的中class，没有相应的class时，会报错\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053771798-c118b453-6e64-4560-a068-eab5d572c1a8.png#align=left&display=inline&height=136&name=%E5%9B%BE%E7%89%87.png&originHeight=136&originWidth=699&size=3512&status=done&width=699)\n\n2. 当已经加载过的类，是有编译错误的，也是无法重新加载的\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562056224413-a8768fb2-3936-46e9-83a2-602c43218a9f.png#align=left&display=inline&height=82&name=%E5%9B%BE%E7%89%87.png&originHeight=82&originWidth=717&size=2558&status=done&width=717)\n\n","source":"_posts/yuque/开发工具之arthas命令.md","raw":"\n---\n\ntitle: 开发工具之arthas命令\n\nurlname: tfnv65\n\ndate: 2019-07-02 15:25:34 +0800\n\ntags: []\n\n---\n<a name=\"tSiLs\"></a>\n# 开发工具之arthas命令\n<a name=\"N1m6c\"></a>\n# 参考链接\n[arthas官方文档——arthas](https://alibaba.github.io/arthas/)<br />[arthas官方在线模拟器教程——arths](https://alibaba.github.io/arthas/arthas-tutorials?language=cn)<br />\n<a name=\"shuQ1\"></a>\n# 概述\n> 当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： <br />\n> 1. 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\n> 1. 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\n> 1. 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\n> 1. 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\n> 1. 是否有一个全局视角来查看系统的运行状况？\n> 1. 有什么办法可以监控到JVM的实时运行状态？\n> \nArthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。\n\n<a name=\"UxmlN\"></a>\n## 安装及运行\n<a name=\"hHWYN\"></a>\n### 安装\nwindows版本需要从官方下载一个压缩包，解压即可<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053000011-6b93ae1e-c3eb-4851-8e60-5a4e0f2800ef.png#align=left&display=inline&height=336&name=%E5%9B%BE%E7%89%87.png&originHeight=336&originWidth=748&size=22442&status=done&width=748)\n<a name=\"uScch\"></a>\n### 运行\n可以使用默认提供的`as.bat`文件，不过需要手动输入JVM进程的pid，也可以采用我下面自己写的，保存为bat批处理文件，只需知道pid，运行选择数字即可<br />\n\n```powershell\n:A\njava -jar arthas-boot.jar\ngoto A\npause\n```\n\n实际运行效果，下图“org.apache.catalina.startup.bootsrap”是我现在的tomcat，因为只运行了一个JVM，非常好选择，直接输入1进入arthas仪表盘即可。<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053490019-4276d91b-15fb-45a5-b981-23772fa31bcf.png#align=left&display=inline&height=429&name=%E5%9B%BE%E7%89%87.png&originHeight=429&originWidth=667&size=6993&status=done&width=667)<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053592838-41334dd7-b780-4956-9663-31c1f5795661.png#align=left&display=inline&height=481&name=%E5%9B%BE%E7%89%87.png&originHeight=481&originWidth=731&size=16430&status=done&width=731)\n\n<a name=\"DorZF\"></a>\n## 命令行\n<a name=\"MCK8S\"></a>\n### redefine重新加载class文件到JVM中\n\n```powershell\nredefine D:/tomcat/webapps/test/WEB-INF/classes/com/kingzheng/fsjscx/util/JSON.class\n```\n\n1. redefine只能重新加载已经存在JVM内存的中class，没有相应的class时，会报错\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562053771798-c118b453-6e64-4560-a068-eab5d572c1a8.png#align=left&display=inline&height=136&name=%E5%9B%BE%E7%89%87.png&originHeight=136&originWidth=699&size=3512&status=done&width=699)\n\n2. 当已经加载过的类，是有编译错误的，也是无法重新加载的\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1562056224413-a8768fb2-3936-46e9-83a2-602c43218a9f.png#align=left&display=inline&height=82&name=%E5%9B%BE%E7%89%87.png&originHeight=82&originWidth=717&size=2558&status=done&width=717)\n\n","slug":"yuque/开发工具之arthas命令","published":1,"updated":"2020-02-29T07:15:14.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncin1006ly8usil8rk205","content":"<p><a name=\"tSiLs\"></a></p>\n<h1 id=\"开发工具之arthas命令\"><a href=\"#开发工具之arthas命令\" class=\"headerlink\" title=\"开发工具之arthas命令\"></a>开发工具之arthas命令</h1><p><a name=\"N1m6c\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\" rel=\"noopener\">arthas官方文档——arthas</a><br><a href=\"https://alibaba.github.io/arthas/arthas-tutorials?language=cn\" target=\"_blank\" rel=\"noopener\">arthas官方在线模拟器教程——arths</a><br><br><a name=\"shuQ1\"></a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： <br></p>\n<ol>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n</ol>\n<p>Arthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n</blockquote>\n<p><a name=\"UxmlN\"></a></p>\n<h2 id=\"安装及运行\"><a href=\"#安装及运行\" class=\"headerlink\" title=\"安装及运行\"></a>安装及运行</h2><p><a name=\"hHWYN\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>windows版本需要从官方下载一个压缩包，解压即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053000011-6b93ae1e-c3eb-4851-8e60-5a4e0f2800ef.png#align=left&amp;display=inline&amp;height=336&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=336&amp;originWidth=748&amp;size=22442&amp;status=done&amp;width=748\" alt=\"图片.png\"><br><a name=\"uScch\"></a></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>可以使用默认提供的<code>as.bat</code>文件，不过需要手动输入JVM进程的pid，也可以采用我下面自己写的，保存为bat批处理文件，只需知道pid，运行选择数字即可<br></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:A</span><br><span class=\"line\">java <span class=\"literal\">-jar</span> arthas<span class=\"literal\">-boot</span>.jar</span><br><span class=\"line\">goto A</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<p>实际运行效果，下图“org.apache.catalina.startup.bootsrap”是我现在的tomcat，因为只运行了一个JVM，非常好选择，直接输入1进入arthas仪表盘即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053490019-4276d91b-15fb-45a5-b981-23772fa31bcf.png#align=left&amp;display=inline&amp;height=429&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=429&amp;originWidth=667&amp;size=6993&amp;status=done&amp;width=667\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053592838-41334dd7-b780-4956-9663-31c1f5795661.png#align=left&amp;display=inline&amp;height=481&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=481&amp;originWidth=731&amp;size=16430&amp;status=done&amp;width=731\" alt=\"图片.png\"></p>\n<p><a name=\"DorZF\"></a></p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p><a name=\"MCK8S\"></a></p>\n<h3 id=\"redefine重新加载class文件到JVM中\"><a href=\"#redefine重新加载class文件到JVM中\" class=\"headerlink\" title=\"redefine重新加载class文件到JVM中\"></a>redefine重新加载class文件到JVM中</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine D:/tomcat/webapps/test/WEB<span class=\"literal\">-INF</span>/classes/com/kingzheng/fsjscx/util/JSON<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>redefine只能重新加载已经存在JVM内存的中class，没有相应的class时，会报错</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053771798-c118b453-6e64-4560-a068-eab5d572c1a8.png#align=left&amp;display=inline&amp;height=136&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=136&amp;originWidth=699&amp;size=3512&amp;status=done&amp;width=699\" alt=\"图片.png\"></p>\n<ol>\n<li>当已经加载过的类，是有编译错误的，也是无法重新加载的</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562056224413-a8768fb2-3936-46e9-83a2-602c43218a9f.png#align=left&amp;display=inline&amp;height=82&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=82&amp;originWidth=717&amp;size=2558&amp;status=done&amp;width=717\" alt=\"图片.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"tSiLs\"></a></p>\n<h1 id=\"开发工具之arthas命令\"><a href=\"#开发工具之arthas命令\" class=\"headerlink\" title=\"开发工具之arthas命令\"></a>开发工具之arthas命令</h1><p><a name=\"N1m6c\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://alibaba.github.io/arthas/\" target=\"_blank\" rel=\"noopener\">arthas官方文档——arthas</a><br><a href=\"https://alibaba.github.io/arthas/arthas-tutorials?language=cn\" target=\"_blank\" rel=\"noopener\">arthas官方在线模拟器教程——arths</a><br><br><a name=\"shuQ1\"></a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： <br></p>\n<ol>\n<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>\n<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>\n<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>\n<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>\n<li>是否有一个全局视角来查看系统的运行状况？</li>\n<li>有什么办法可以监控到JVM的实时运行状态？</li>\n</ol>\n<p>Arthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p>\n</blockquote>\n<p><a name=\"UxmlN\"></a></p>\n<h2 id=\"安装及运行\"><a href=\"#安装及运行\" class=\"headerlink\" title=\"安装及运行\"></a>安装及运行</h2><p><a name=\"hHWYN\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>windows版本需要从官方下载一个压缩包，解压即可<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053000011-6b93ae1e-c3eb-4851-8e60-5a4e0f2800ef.png#align=left&amp;display=inline&amp;height=336&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=336&amp;originWidth=748&amp;size=22442&amp;status=done&amp;width=748\" alt=\"图片.png\"><br><a name=\"uScch\"></a></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>可以使用默认提供的<code>as.bat</code>文件，不过需要手动输入JVM进程的pid，也可以采用我下面自己写的，保存为bat批处理文件，只需知道pid，运行选择数字即可<br></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:A</span><br><span class=\"line\">java <span class=\"literal\">-jar</span> arthas<span class=\"literal\">-boot</span>.jar</span><br><span class=\"line\">goto A</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<p>实际运行效果，下图“org.apache.catalina.startup.bootsrap”是我现在的tomcat，因为只运行了一个JVM，非常好选择，直接输入1进入arthas仪表盘即可。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053490019-4276d91b-15fb-45a5-b981-23772fa31bcf.png#align=left&amp;display=inline&amp;height=429&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=429&amp;originWidth=667&amp;size=6993&amp;status=done&amp;width=667\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053592838-41334dd7-b780-4956-9663-31c1f5795661.png#align=left&amp;display=inline&amp;height=481&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=481&amp;originWidth=731&amp;size=16430&amp;status=done&amp;width=731\" alt=\"图片.png\"></p>\n<p><a name=\"DorZF\"></a></p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p><a name=\"MCK8S\"></a></p>\n<h3 id=\"redefine重新加载class文件到JVM中\"><a href=\"#redefine重新加载class文件到JVM中\" class=\"headerlink\" title=\"redefine重新加载class文件到JVM中\"></a>redefine重新加载class文件到JVM中</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redefine D:/tomcat/webapps/test/WEB<span class=\"literal\">-INF</span>/classes/com/kingzheng/fsjscx/util/JSON<span class=\"class\">.<span class=\"keyword\">class</span></span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>redefine只能重新加载已经存在JVM内存的中class，没有相应的class时，会报错</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562053771798-c118b453-6e64-4560-a068-eab5d572c1a8.png#align=left&amp;display=inline&amp;height=136&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=136&amp;originWidth=699&amp;size=3512&amp;status=done&amp;width=699\" alt=\"图片.png\"></p>\n<ol>\n<li>当已经加载过的类，是有编译错误的，也是无法重新加载的</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1562056224413-a8768fb2-3936-46e9-83a2-602c43218a9f.png#align=left&amp;display=inline&amp;height=82&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=82&amp;originWidth=717&amp;size=2558&amp;status=done&amp;width=717\" alt=\"图片.png\"></p>\n"},{"title":"语雀之Hello World","urlname":"vgxf01","date":"2019-01-26T15:33:10.000Z","_content":"---\n\n<a name=\"c36ff178\"></a>\n## 语雀之Hello World\n\ntest\n\n","source":"_posts/yuque/语雀之Hello World.md","raw":"\n---\n\ntitle: 语雀之Hello World\n\nurlname: vgxf01\n\ndate: 2019-01-26 23:33:10 +0800\n\ntags: []\n\n---\n---\n\n<a name=\"c36ff178\"></a>\n## 语雀之Hello World\n\ntest\n\n","slug":"yuque/语雀之Hello World","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncin2006ny8uskk5tn5ze","content":"<hr>\n<p><a name=\"c36ff178\"></a></p>\n<h2 id=\"语雀之Hello-World\"><a href=\"#语雀之Hello-World\" class=\"headerlink\" title=\"语雀之Hello World\"></a>语雀之Hello World</h2><p>test</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><a name=\"c36ff178\"></a></p>\n<h2 id=\"语雀之Hello-World\"><a href=\"#语雀之Hello-World\" class=\"headerlink\" title=\"语雀之Hello World\"></a>语雀之Hello World</h2><p>test</p>\n"},{"title":"设计模式之mvp设计模式","urlname":"kcx0ku","date":"2019-06-15T10:03:17.000Z","_content":"\n\n<a name=\"MnP5e\"></a>\n# 参考链接\n\n[《android-architecture》-googlesample](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)\n\n<a name=\"a1b97d97\"></a>\n# mvp设计模式\n\n<a name=\"f411d0f1\"></a>\n## 说明\n\n  和传统的mvc不同的的是，原先controller的概念变为presenter，原意为“代理”的意思，mvp设计模式中，model和view的交互完全由Presenter进行代理，简单理解就是，View请求Model时，是先发送给Presenter，Presenter收到请求，再发送请求给Model，Model响应数据回Presenter，Presenter再响应回View，此时完成交互。Model请求View也是差不多的过程。<br />  mvp设计模式在Android最为常用。\n\n<a name=\"58f3538c\"></a>\n## 传统MVC和MVP之间的图示比较\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609538338-a7b7ddad-8142-4f3f-a6de-a42e9ca574ed.png#align=left&display=inline&height=305&name=%E5%9B%BE%E7%89%87.png&originHeight=305&originWidth=612&size=66298&status=done&width=612)<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609522736-9af018f0-8023-4170-b0a7-d00f9dac3c25.png#align=left&display=inline&height=189&name=%E5%9B%BE%E7%89%87.png&originHeight=189&originWidth=663&size=46261&status=done&width=663)\n\n<!--more-->\n<a name=\"a8ea117a\"></a>\n## google mvp\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609574407-ea399c51-ce34-4da6-89f4-e33617c0b6e7.png#align=left&display=inline&height=374&name=%E5%9B%BE%E7%89%87.png&originHeight=374&originWidth=552&size=224865&status=done&width=552)\n<a name=\"BasePresenter\"></a>\n### BasePresenter\n\n```java\npublic interface BasePresenter {\n    //可以用来初始化相关的数据\n    void start();\n}\n```\n\n<a name=\"BaseView\"></a>\n### BaseView\n\n```java\npublic interface BaseView<T> {\n    //view层可以引用Presenter\n    void setPresenter(T presenter);\n}\n```\n\n<a name=\"module\"></a>\n### module\n\n<a name=\"contract\"></a>\n#### contract\n这个是根据具体模块，抽象更多功能的类\n\n```java\npublic interface TasksContract {\n    interface View extends BaseView<Presenter> {\n//可以再设计更多抽象方法···············\n        void showTasks(List<Task> tasks);\n    }\n    interface Presenter extends BasePresenter {\n//可以再设计更多抽象方法···············\n        void loadTasks(boolean forceUpdate);\n    }\n}\n```\n\n<a name=\"View\"></a>\n#### View\n\n```java\npublic class TasksFragment extends Fragment implements TasksContract.View {\n    private TasksContract.Presenter mPresenter;\n//其他方法略····················\n    @Override\n    public void showTasks(List<Task> tasks) {\n        //Presenter向model获取数据后，将回调此方法，返回有数据的tasks给View层\n    }\n    @Override\n    public void setPresenter(@NonNull TasksContract.Presenter presenter) {\n    //Presenter实例化后回调TasksContract.View 中setPresenter()方法，从而View层也获取到Presenter的引用\n        mPresenter = checkNotNull(presenter);\n    }\n}\n```\n\n<a name=\"Presenter\"></a>\n#### Presenter\n\n```java\npublic class TasksPresenter implements TasksContract.Presenter {\n//数据层data包中的封装类\n    private final TasksRepository mTasksRepository;\n//view层\n    private final TasksContract.View mTasksView;\n    public TasksPresenter(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView) {\n        mTasksRepository = checkNotNull(tasksRepository, \"tasksRepository cannot be null\");\n        mTasksView = checkNotNull(tasksView, \"tasksView cannot be null!\");\n//使View层得到Presenter的引用\n        mTasksView.setPresenter(this);\n    }\n}\n```\n\n<a name=\"Activity\"></a>\n### Activity\n\n在Activity中初始化Presenter的实现类，即可完成MVP模式的分层,view层只做视图展示，model层负责查询数据，Presenter负责View和model的代理。\n\n```java\n// Create the presenter\nmTasksPresenter = new TasksPresenter(\n        Injection.provideTasksRepository(getApplicationContext()), tasksFragment);\n```\n\n\n","source":"_posts/yuque/设计模式之mvp设计模式.md","raw":"\n---\n\ntitle: 设计模式之mvp设计模式\n\nurlname: kcx0ku\n\ndate: 2019-06-15 18:03:17 +0800\n\ntags: [设计模式,mvp,android设计模式]\n\ncategories: 设计模式\n\n---\n\n\n<a name=\"MnP5e\"></a>\n# 参考链接\n\n[《android-architecture》-googlesample](https://github.com/googlesamples/android-architecture/tree/todo-mvp/)\n\n<a name=\"a1b97d97\"></a>\n# mvp设计模式\n\n<a name=\"f411d0f1\"></a>\n## 说明\n\n  和传统的mvc不同的的是，原先controller的概念变为presenter，原意为“代理”的意思，mvp设计模式中，model和view的交互完全由Presenter进行代理，简单理解就是，View请求Model时，是先发送给Presenter，Presenter收到请求，再发送请求给Model，Model响应数据回Presenter，Presenter再响应回View，此时完成交互。Model请求View也是差不多的过程。<br />  mvp设计模式在Android最为常用。\n\n<a name=\"58f3538c\"></a>\n## 传统MVC和MVP之间的图示比较\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609538338-a7b7ddad-8142-4f3f-a6de-a42e9ca574ed.png#align=left&display=inline&height=305&name=%E5%9B%BE%E7%89%87.png&originHeight=305&originWidth=612&size=66298&status=done&width=612)<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609522736-9af018f0-8023-4170-b0a7-d00f9dac3c25.png#align=left&display=inline&height=189&name=%E5%9B%BE%E7%89%87.png&originHeight=189&originWidth=663&size=46261&status=done&width=663)\n\n<!--more-->\n<a name=\"a8ea117a\"></a>\n## google mvp\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560609574407-ea399c51-ce34-4da6-89f4-e33617c0b6e7.png#align=left&display=inline&height=374&name=%E5%9B%BE%E7%89%87.png&originHeight=374&originWidth=552&size=224865&status=done&width=552)\n<a name=\"BasePresenter\"></a>\n### BasePresenter\n\n```java\npublic interface BasePresenter {\n    //可以用来初始化相关的数据\n    void start();\n}\n```\n\n<a name=\"BaseView\"></a>\n### BaseView\n\n```java\npublic interface BaseView<T> {\n    //view层可以引用Presenter\n    void setPresenter(T presenter);\n}\n```\n\n<a name=\"module\"></a>\n### module\n\n<a name=\"contract\"></a>\n#### contract\n这个是根据具体模块，抽象更多功能的类\n\n```java\npublic interface TasksContract {\n    interface View extends BaseView<Presenter> {\n//可以再设计更多抽象方法···············\n        void showTasks(List<Task> tasks);\n    }\n    interface Presenter extends BasePresenter {\n//可以再设计更多抽象方法···············\n        void loadTasks(boolean forceUpdate);\n    }\n}\n```\n\n<a name=\"View\"></a>\n#### View\n\n```java\npublic class TasksFragment extends Fragment implements TasksContract.View {\n    private TasksContract.Presenter mPresenter;\n//其他方法略····················\n    @Override\n    public void showTasks(List<Task> tasks) {\n        //Presenter向model获取数据后，将回调此方法，返回有数据的tasks给View层\n    }\n    @Override\n    public void setPresenter(@NonNull TasksContract.Presenter presenter) {\n    //Presenter实例化后回调TasksContract.View 中setPresenter()方法，从而View层也获取到Presenter的引用\n        mPresenter = checkNotNull(presenter);\n    }\n}\n```\n\n<a name=\"Presenter\"></a>\n#### Presenter\n\n```java\npublic class TasksPresenter implements TasksContract.Presenter {\n//数据层data包中的封装类\n    private final TasksRepository mTasksRepository;\n//view层\n    private final TasksContract.View mTasksView;\n    public TasksPresenter(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView) {\n        mTasksRepository = checkNotNull(tasksRepository, \"tasksRepository cannot be null\");\n        mTasksView = checkNotNull(tasksView, \"tasksView cannot be null!\");\n//使View层得到Presenter的引用\n        mTasksView.setPresenter(this);\n    }\n}\n```\n\n<a name=\"Activity\"></a>\n### Activity\n\n在Activity中初始化Presenter的实现类，即可完成MVP模式的分层,view层只做视图展示，model层负责查询数据，Presenter负责View和model的代理。\n\n```java\n// Create the presenter\nmTasksPresenter = new TasksPresenter(\n        Injection.provideTasksRepository(getApplicationContext()), tasksFragment);\n```\n\n\n","slug":"yuque/设计模式之mvp设计模式","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncin3006py8usa7rp5av2","content":"<p><a name=\"MnP5e\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\" target=\"_blank\" rel=\"noopener\">《android-architecture》-googlesample</a></p>\n<p><a name=\"a1b97d97\"></a></p>\n<h1 id=\"mvp设计模式\"><a href=\"#mvp设计模式\" class=\"headerlink\" title=\"mvp设计模式\"></a>mvp设计模式</h1><p><a name=\"f411d0f1\"></a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  和传统的mvc不同的的是，原先controller的概念变为presenter，原意为“代理”的意思，mvp设计模式中，model和view的交互完全由Presenter进行代理，简单理解就是，View请求Model时，是先发送给Presenter，Presenter收到请求，再发送请求给Model，Model响应数据回Presenter，Presenter再响应回View，此时完成交互。Model请求View也是差不多的过程。<br>  mvp设计模式在Android最为常用。</p>\n<p><a name=\"58f3538c\"></a></p>\n<h2 id=\"传统MVC和MVP之间的图示比较\"><a href=\"#传统MVC和MVP之间的图示比较\" class=\"headerlink\" title=\"传统MVC和MVP之间的图示比较\"></a>传统MVC和MVP之间的图示比较</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609538338-a7b7ddad-8142-4f3f-a6de-a42e9ca574ed.png#align=left&amp;display=inline&amp;height=305&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=305&amp;originWidth=612&amp;size=66298&amp;status=done&amp;width=612\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609522736-9af018f0-8023-4170-b0a7-d00f9dac3c25.png#align=left&amp;display=inline&amp;height=189&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=189&amp;originWidth=663&amp;size=46261&amp;status=done&amp;width=663\" alt=\"图片.png\"></p>\n<a id=\"more\"></a>\n<p><a name=\"a8ea117a\"></a></p>\n<h2 id=\"google-mvp\"><a href=\"#google-mvp\" class=\"headerlink\" title=\"google mvp\"></a>google mvp</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609574407-ea399c51-ce34-4da6-89f4-e33617c0b6e7.png#align=left&amp;display=inline&amp;height=374&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=374&amp;originWidth=552&amp;size=224865&amp;status=done&amp;width=552\" alt=\"图片.png\"><br><a name=\"BasePresenter\"></a></p>\n<h3 id=\"BasePresenter\"><a href=\"#BasePresenter\" class=\"headerlink\" title=\"BasePresenter\"></a>BasePresenter</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BasePresenter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以用来初始化相关的数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"BaseView\"></a></p>\n<h3 id=\"BaseView\"><a href=\"#BaseView\" class=\"headerlink\" title=\"BaseView\"></a>BaseView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseView</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//view层可以引用Presenter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPresenter</span><span class=\"params\">(T presenter)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"module\"></a></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p><a name=\"contract\"></a></p>\n<h4 id=\"contract\"><a href=\"#contract\" class=\"headerlink\" title=\"contract\"></a>contract</h4><p>这个是根据具体模块，抽象更多功能的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TasksContract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">View</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseView</span>&lt;<span class=\"title\">Presenter</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可以再设计更多抽象方法···············</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showTasks</span><span class=\"params\">(List&lt;Task&gt; tasks)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Presenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenter</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可以再设计更多抽象方法···············</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadTasks</span><span class=\"params\">(<span class=\"keyword\">boolean</span> forceUpdate)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"View\"></a></p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">TasksContract</span>.<span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TasksContract.Presenter mPresenter;</span><br><span class=\"line\"><span class=\"comment\">//其他方法略····················</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTasks</span><span class=\"params\">(List&lt;Task&gt; tasks)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Presenter向model获取数据后，将回调此方法，返回有数据的tasks给View层</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPresenter</span><span class=\"params\">(@NonNull TasksContract.Presenter presenter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Presenter实例化后回调TasksContract.View 中setPresenter()方法，从而View层也获取到Presenter的引用</span></span><br><span class=\"line\">        mPresenter = checkNotNull(presenter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Presenter\"></a></p>\n<h4 id=\"Presenter\"><a href=\"#Presenter\" class=\"headerlink\" title=\"Presenter\"></a>Presenter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksPresenter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TasksContract</span>.<span class=\"title\">Presenter</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//数据层data包中的封装类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksRepository mTasksRepository;</span><br><span class=\"line\"><span class=\"comment\">//view层</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksContract.View mTasksView;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TasksPresenter</span><span class=\"params\">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</span><br><span class=\"line\">        mTasksRepository = checkNotNull(tasksRepository, <span class=\"string\">\"tasksRepository cannot be null\"</span>);</span><br><span class=\"line\">        mTasksView = checkNotNull(tasksView, <span class=\"string\">\"tasksView cannot be null!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//使View层得到Presenter的引用</span></span><br><span class=\"line\">        mTasksView.setPresenter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Activity\"></a></p>\n<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>在Activity中初始化Presenter的实现类，即可完成MVP模式的分层,view层只做视图展示，model层负责查询数据，Presenter负责View和model的代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create the presenter</span></span><br><span class=\"line\">mTasksPresenter = <span class=\"keyword\">new</span> TasksPresenter(</span><br><span class=\"line\">        Injection.provideTasksRepository(getApplicationContext()), tasksFragment);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a name=\"MnP5e\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp/\" target=\"_blank\" rel=\"noopener\">《android-architecture》-googlesample</a></p>\n<p><a name=\"a1b97d97\"></a></p>\n<h1 id=\"mvp设计模式\"><a href=\"#mvp设计模式\" class=\"headerlink\" title=\"mvp设计模式\"></a>mvp设计模式</h1><p><a name=\"f411d0f1\"></a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  和传统的mvc不同的的是，原先controller的概念变为presenter，原意为“代理”的意思，mvp设计模式中，model和view的交互完全由Presenter进行代理，简单理解就是，View请求Model时，是先发送给Presenter，Presenter收到请求，再发送请求给Model，Model响应数据回Presenter，Presenter再响应回View，此时完成交互。Model请求View也是差不多的过程。<br>  mvp设计模式在Android最为常用。</p>\n<p><a name=\"58f3538c\"></a></p>\n<h2 id=\"传统MVC和MVP之间的图示比较\"><a href=\"#传统MVC和MVP之间的图示比较\" class=\"headerlink\" title=\"传统MVC和MVP之间的图示比较\"></a>传统MVC和MVP之间的图示比较</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609538338-a7b7ddad-8142-4f3f-a6de-a42e9ca574ed.png#align=left&amp;display=inline&amp;height=305&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=305&amp;originWidth=612&amp;size=66298&amp;status=done&amp;width=612\" alt=\"图片.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609522736-9af018f0-8023-4170-b0a7-d00f9dac3c25.png#align=left&amp;display=inline&amp;height=189&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=189&amp;originWidth=663&amp;size=46261&amp;status=done&amp;width=663\" alt=\"图片.png\"></p>","more":"<p><a name=\"a8ea117a\"></a></p>\n<h2 id=\"google-mvp\"><a href=\"#google-mvp\" class=\"headerlink\" title=\"google mvp\"></a>google mvp</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560609574407-ea399c51-ce34-4da6-89f4-e33617c0b6e7.png#align=left&amp;display=inline&amp;height=374&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=374&amp;originWidth=552&amp;size=224865&amp;status=done&amp;width=552\" alt=\"图片.png\"><br><a name=\"BasePresenter\"></a></p>\n<h3 id=\"BasePresenter\"><a href=\"#BasePresenter\" class=\"headerlink\" title=\"BasePresenter\"></a>BasePresenter</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BasePresenter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以用来初始化相关的数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"BaseView\"></a></p>\n<h3 id=\"BaseView\"><a href=\"#BaseView\" class=\"headerlink\" title=\"BaseView\"></a>BaseView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseView</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//view层可以引用Presenter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPresenter</span><span class=\"params\">(T presenter)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"module\"></a></p>\n<h3 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h3><p><a name=\"contract\"></a></p>\n<h4 id=\"contract\"><a href=\"#contract\" class=\"headerlink\" title=\"contract\"></a>contract</h4><p>这个是根据具体模块，抽象更多功能的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TasksContract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">View</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseView</span>&lt;<span class=\"title\">Presenter</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可以再设计更多抽象方法···············</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showTasks</span><span class=\"params\">(List&lt;Task&gt; tasks)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Presenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasePresenter</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可以再设计更多抽象方法···············</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadTasks</span><span class=\"params\">(<span class=\"keyword\">boolean</span> forceUpdate)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"View\"></a></p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">TasksContract</span>.<span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TasksContract.Presenter mPresenter;</span><br><span class=\"line\"><span class=\"comment\">//其他方法略····················</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTasks</span><span class=\"params\">(List&lt;Task&gt; tasks)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Presenter向model获取数据后，将回调此方法，返回有数据的tasks给View层</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPresenter</span><span class=\"params\">(@NonNull TasksContract.Presenter presenter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Presenter实例化后回调TasksContract.View 中setPresenter()方法，从而View层也获取到Presenter的引用</span></span><br><span class=\"line\">        mPresenter = checkNotNull(presenter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Presenter\"></a></p>\n<h4 id=\"Presenter\"><a href=\"#Presenter\" class=\"headerlink\" title=\"Presenter\"></a>Presenter</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksPresenter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TasksContract</span>.<span class=\"title\">Presenter</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//数据层data包中的封装类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksRepository mTasksRepository;</span><br><span class=\"line\"><span class=\"comment\">//view层</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksContract.View mTasksView;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TasksPresenter</span><span class=\"params\">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</span><br><span class=\"line\">        mTasksRepository = checkNotNull(tasksRepository, <span class=\"string\">\"tasksRepository cannot be null\"</span>);</span><br><span class=\"line\">        mTasksView = checkNotNull(tasksView, <span class=\"string\">\"tasksView cannot be null!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//使View层得到Presenter的引用</span></span><br><span class=\"line\">        mTasksView.setPresenter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"Activity\"></a></p>\n<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>在Activity中初始化Presenter的实现类，即可完成MVP模式的分层,view层只做视图展示，model层负责查询数据，Presenter负责View和model的代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create the presenter</span></span><br><span class=\"line\">mTasksPresenter = <span class=\"keyword\">new</span> TasksPresenter(</span><br><span class=\"line\">        Injection.provideTasksRepository(getApplicationContext()), tasksFragment);</span><br></pre></td></tr></table></figure>"},{"title":"svn之svn server重装系统恢复","urlname":"zxy4nd","date":"2019-02-19T03:02:06.000Z","_content":"<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[windows操作系统重装后恢复svn仓库、tortoisesvn客户端信息、及权限信息的方法——博客园@mni_Ya](http://www.cnblogs.com/painwhy/p/4085873.html)  \n<a name=\"019fa851\"></a>\n# svn之svn server重装系统恢复\n<a name=\"0585c62f\"></a>\n## **SVN仓库信息的恢复（使用visual svn作为svn服务器的）**\n前提：必须要有原来的仓库文件<br />a.下载与原来同样版本的visual svn或者下载最新的visualsvn 。因为你不知道原来的visualsvn的版本，所以安装旧的版本是无法恢复仓库信息的，提示错误 Expected FS format between '1' and '3'; found format '4'。<br />visual svn下载地址：[https://www.visualsvn.com/server/](https://www.visualsvn.com/server/)<br />b.安装完之后把原来的仓库文件放入新的仓库位置\n\n<!--more-->\n\n<a name=\"ae5a8d41\"></a>\n## svn客户端信息的恢复（使用tortoiseSvn作为客户端）\n前提必须要有原来的svn文件<br />只要安装和从前tortoiseSvn一个版本的就好，版本信息可以在你的文件中的svn目录中看到，为隐藏目录<br />tortoiseSvn下载地址：[http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)\n<a name=\"41ed8f57\"></a>\n## svn权限恢复\n只要你记得原来的用户名密码可以直接用，要是不记得使用visualsvn建立一个新的用户分配权限，调节成没有权限是不行的<br /> <br />这是笔者重装了一次操作系统，总结出来恢复svn信息的方法，希望对遇到同样问题的人有帮助。\n\n\n","source":"_posts/yuque/svn之svn server重装系统恢复.md","raw":"\n---\n\ntitle: svn之svn server重装系统恢复\n\nurlname: zxy4nd\n\ndate: 2019-02-19 11:02:06 +0800\n\ntags: [svn,版本控制工具]\n\ncategories: svn\n\n---\n<a name=\"bd1bf7e7\"></a>\n# 转载链接\n[windows操作系统重装后恢复svn仓库、tortoisesvn客户端信息、及权限信息的方法——博客园@mni_Ya](http://www.cnblogs.com/painwhy/p/4085873.html)  \n<a name=\"019fa851\"></a>\n# svn之svn server重装系统恢复\n<a name=\"0585c62f\"></a>\n## **SVN仓库信息的恢复（使用visual svn作为svn服务器的）**\n前提：必须要有原来的仓库文件<br />a.下载与原来同样版本的visual svn或者下载最新的visualsvn 。因为你不知道原来的visualsvn的版本，所以安装旧的版本是无法恢复仓库信息的，提示错误 Expected FS format between '1' and '3'; found format '4'。<br />visual svn下载地址：[https://www.visualsvn.com/server/](https://www.visualsvn.com/server/)<br />b.安装完之后把原来的仓库文件放入新的仓库位置\n\n<!--more-->\n\n<a name=\"ae5a8d41\"></a>\n## svn客户端信息的恢复（使用tortoiseSvn作为客户端）\n前提必须要有原来的svn文件<br />只要安装和从前tortoiseSvn一个版本的就好，版本信息可以在你的文件中的svn目录中看到，为隐藏目录<br />tortoiseSvn下载地址：[http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)\n<a name=\"41ed8f57\"></a>\n## svn权限恢复\n只要你记得原来的用户名密码可以直接用，要是不记得使用visualsvn建立一个新的用户分配权限，调节成没有权限是不行的<br /> <br />这是笔者重装了一次操作系统，总结出来恢复svn信息的方法，希望对遇到同样问题的人有帮助。\n\n\n","slug":"yuque/svn之svn server重装系统恢复","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncin5006ry8usvhiijoq6","content":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"http://www.cnblogs.com/painwhy/p/4085873.html\" target=\"_blank\" rel=\"noopener\">windows操作系统重装后恢复svn仓库、tortoisesvn客户端信息、及权限信息的方法——博客园@mni_Ya</a><br><a name=\"019fa851\"></a></p>\n<h1 id=\"svn之svn-server重装系统恢复\"><a href=\"#svn之svn-server重装系统恢复\" class=\"headerlink\" title=\"svn之svn server重装系统恢复\"></a>svn之svn server重装系统恢复</h1><p><a name=\"0585c62f\"></a></p>\n<h2 id=\"SVN仓库信息的恢复（使用visual-svn作为svn服务器的）\"><a href=\"#SVN仓库信息的恢复（使用visual-svn作为svn服务器的）\" class=\"headerlink\" title=\"SVN仓库信息的恢复（使用visual svn作为svn服务器的）\"></a><strong>SVN仓库信息的恢复（使用visual svn作为svn服务器的）</strong></h2><p>前提：必须要有原来的仓库文件<br>a.下载与原来同样版本的visual svn或者下载最新的visualsvn 。因为你不知道原来的visualsvn的版本，所以安装旧的版本是无法恢复仓库信息的，提示错误 Expected FS format between ‘1’ and ‘3’; found format ‘4’。<br>visual svn下载地址：<a href=\"https://www.visualsvn.com/server/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/server/</a><br>b.安装完之后把原来的仓库文件放入新的仓库位置</p>\n<a id=\"more\"></a>\n<p><a name=\"ae5a8d41\"></a></p>\n<h2 id=\"svn客户端信息的恢复（使用tortoiseSvn作为客户端）\"><a href=\"#svn客户端信息的恢复（使用tortoiseSvn作为客户端）\" class=\"headerlink\" title=\"svn客户端信息的恢复（使用tortoiseSvn作为客户端）\"></a>svn客户端信息的恢复（使用tortoiseSvn作为客户端）</h2><p>前提必须要有原来的svn文件<br>只要安装和从前tortoiseSvn一个版本的就好，版本信息可以在你的文件中的svn目录中看到，为隐藏目录<br>tortoiseSvn下载地址：<a href=\"http://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">http://tortoisesvn.net/downloads.html</a><br><a name=\"41ed8f57\"></a></p>\n<h2 id=\"svn权限恢复\"><a href=\"#svn权限恢复\" class=\"headerlink\" title=\"svn权限恢复\"></a>svn权限恢复</h2><p>只要你记得原来的用户名密码可以直接用，要是不记得使用visualsvn建立一个新的用户分配权限，调节成没有权限是不行的<br> <br>这是笔者重装了一次操作系统，总结出来恢复svn信息的方法，希望对遇到同样问题的人有帮助。</p>\n","site":{"data":{}},"excerpt":"<p><a name=\"bd1bf7e7\"></a></p>\n<h1 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a>转载链接</h1><p><a href=\"http://www.cnblogs.com/painwhy/p/4085873.html\" target=\"_blank\" rel=\"noopener\">windows操作系统重装后恢复svn仓库、tortoisesvn客户端信息、及权限信息的方法——博客园@mni_Ya</a><br><a name=\"019fa851\"></a></p>\n<h1 id=\"svn之svn-server重装系统恢复\"><a href=\"#svn之svn-server重装系统恢复\" class=\"headerlink\" title=\"svn之svn server重装系统恢复\"></a>svn之svn server重装系统恢复</h1><p><a name=\"0585c62f\"></a></p>\n<h2 id=\"SVN仓库信息的恢复（使用visual-svn作为svn服务器的）\"><a href=\"#SVN仓库信息的恢复（使用visual-svn作为svn服务器的）\" class=\"headerlink\" title=\"SVN仓库信息的恢复（使用visual svn作为svn服务器的）\"></a><strong>SVN仓库信息的恢复（使用visual svn作为svn服务器的）</strong></h2><p>前提：必须要有原来的仓库文件<br>a.下载与原来同样版本的visual svn或者下载最新的visualsvn 。因为你不知道原来的visualsvn的版本，所以安装旧的版本是无法恢复仓库信息的，提示错误 Expected FS format between ‘1’ and ‘3’; found format ‘4’。<br>visual svn下载地址：<a href=\"https://www.visualsvn.com/server/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/server/</a><br>b.安装完之后把原来的仓库文件放入新的仓库位置</p>","more":"<p><a name=\"ae5a8d41\"></a></p>\n<h2 id=\"svn客户端信息的恢复（使用tortoiseSvn作为客户端）\"><a href=\"#svn客户端信息的恢复（使用tortoiseSvn作为客户端）\" class=\"headerlink\" title=\"svn客户端信息的恢复（使用tortoiseSvn作为客户端）\"></a>svn客户端信息的恢复（使用tortoiseSvn作为客户端）</h2><p>前提必须要有原来的svn文件<br>只要安装和从前tortoiseSvn一个版本的就好，版本信息可以在你的文件中的svn目录中看到，为隐藏目录<br>tortoiseSvn下载地址：<a href=\"http://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">http://tortoisesvn.net/downloads.html</a><br><a name=\"41ed8f57\"></a></p>\n<h2 id=\"svn权限恢复\"><a href=\"#svn权限恢复\" class=\"headerlink\" title=\"svn权限恢复\"></a>svn权限恢复</h2><p>只要你记得原来的用户名密码可以直接用，要是不记得使用visualsvn建立一个新的用户分配权限，调节成没有权限是不行的<br> <br>这是笔者重装了一次操作系统，总结出来恢复svn信息的方法，希望对遇到同样问题的人有帮助。</p>"},{"title":"设计模式：工厂方法模式、简单工厂模式与抽象工厂模式","date":"2018-05-22T13:53:07.000Z","_content":"\n# 参考链接（如有侵权立即删除） \n[Abstract Factory——java-design-patterns](http://java-design-patterns.com/patterns/abstract-factory/)  \n[简单工厂、工厂方法和抽象工厂模式示例——CSDN@逐兔郎](https://blog.csdn.net/zhutulang/article/details/43495825)  \n[简单工厂模式,工厂方法模式和抽象工厂模式的异同——百度词库@hui332986207](https://wenku.baidu.com/view/60c6ca21192e45361066f5e0.html)  \n[抽象工厂模式和工厂模式的区别？——知乎](https://www.zhihu.com/question/20367734/answer/115807228)  \n[开闭原则——百度百科](https://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/2828775)\n## 推荐学习地址\n[java-design-patterns](http://java-design-patterns.com)  \n# 正文\n## 概述\n&emsp;&emsp;首先我们需要了解一下“开闭原则”，“开闭原则”就是不修改原有的代码，通过增加模块的方式来扩展原有的功能。接下来简述三种设计模式\n\n<!-- more -->\n\n1. 简单工厂模式\n\n> &emsp;&emsp;专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有+共同的父类。它又称为静态工厂方法模式。它的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。\n\n2. 工厂方法模式（工厂模式）\n\n> &emsp;&emsp;工厂方法是粒度很小的设计模式，因为模式的表现只是一个抽象的方法。+提前定义用于创建对象的接口，让子类决定实例化具体的某一个类，即在工厂和产品中间增加接口，工厂不再负责产品的创建，由接口针对不同条件返回具体的类实例，由具体类实例去实现。\n\n3. 抽象工厂模式\n\n> &emsp;&emsp;抽象工厂模式是提供一个接口来创建相关或依赖对象的类，而不指定它们的具体类。抽象工厂与工厂模式很像，只是抽象工厂更像是工厂中工厂，既然叫抽象工厂，当然是工厂具体用途是什么时候我们不确定了，但是我们设计工厂的原型，规范了未来工厂的扩展。\n \n### 简单工厂模式\n![简单工厂模式](https://pic2.zhimg.com/80/09067f878916c0e4377bfadc82afc248_hd.jpg)\n\n假设需要生产两种鼠标，戴尔鼠标和惠普鼠标。\n```\n/**\n * 创建一个鼠标工厂，用来生产鼠标\n * @author zmh\n *\n */\npublic class MouseFactory {\n    private MouseFactory() {\n    }\n    /**\n     * 生产鼠标,0为戴尔，1为惠普\n     */\n    public static Mouse createMouse(int i){\n        return i==0?(new DellMouse()):(new HpMouse());\n    }\n}\n/**\n * 设计鼠标接口\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n}\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\");\n    }\n    \n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n/**\n * 简单工厂模式\n * 简单工厂模式不是23种设计模式中的，专门定义一个用来创建其他类，这些类通常都拥有同一个父类。\n * @author zmh\n *\n */\npublic class Main {\n    public static void main(String[] args) {\n        Mouse mouse = MouseFactory.createMouse(0);//创建鼠标工厂\n        mouse.sayHi();\n    }\n}\n```\n## 工厂方法模式\n假设现在不仅有戴尔鼠标和惠普鼠标了，而且还要生产联想鼠标，但是我们原告的简单工厂设计模式，已经定义好`MouseFacotry`仅生产两种鼠标，如果要去修改源代码的话，违背了“开闭原则”，所以简单工厂设计模式不适用产品扩展。现在我们来使用工厂方法模式扩展鼠标产品的生产。  \n![工厂方法模式类图](设计模式：工厂方法模式、简单工厂模式与抽象工厂模式/1.jpg)\n```\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\"+test());\n    }\n}\n\npublic class DellMouseFactory extends MouseFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new DellMouse();\n    }\n\n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n\npublic class HpMouseFactory extends MouseFactory{\n\n    @Override\n    Mouse createMouse() {\n        return new HpMouse();\n    }\n\n\n}\n/**\n * 联想鼠标\n * @author zmh\n *\n */\npublic class LenovoMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"联想鼠标\");\n    }\n\n}\n\npublic class LenovoMouseFactory extends MouseFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new LenovoMouse();\n    }\n\n}\n/**\n * 鼠标\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n\n    default double test(){\n        return 1L;\n    }\n}\n/**\n * 设计鼠标工厂\n * @author zmh\n *\n */\npublic abstract class MouseFactory {\n    abstract Mouse createMouse();\n}\n\n\n/**\n * 工厂方法模式\n * @author zmh\n *\n */\npublic class Main {\n    public static void main(String[] args) {\n        //如果未来有更多类型的鼠标，那么我们就实现更多工厂\n        Mouse dellMouse = new DellMouseFactory().createMouse();\n        dellMouse.sayHi();\n        Mouse hpMouse = new HpMouseFactory().createMouse();\n        hpMouse.sayHi();\n        Mouse lenovoMouse = new LenovoMouseFactory().createMouse();\n        lenovoMouse.sayHi();\n\n    }\n}\n```\n\n## 抽象工厂\n如果现在我们不仅有鼠标产品，还有键盘或者耳机等等，其他产品，这样也不能在工厂方法模式上去修改源代码了，因为工厂方法模式只下定义了子类只能生产鼠标，而不能生产其他产品。\n![抽象工厂](https://pic1.zhimg.com/80/e8184a3c6b3463338d85c329004d7c64_hd.jpg)\n```\n/**\n * 抽象设计鼠标，规范未来产品\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n}\n/**\n * 抽象设计键盘，规范未来产品\n * @author zmh\n *\n */\npublic interface KeyBo {\n    void sayHi();\n}\n/**\n * 华硕鼠标\n * @author zmh\n *\n */\npublic class AsusMouse implements Mouse {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"华硕鼠标\");\n    }\n\n}\n/**\n * 华硕键盘\n * @author zmh\n *\n */\npublic class AsusKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"华硕键盘\");\n    }\n\n}\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\");\n    }\n}\n/**\n * 戴尔键盘\n * @author zmh\n *\n */\npublic class DellKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔键盘\");\n    }\n\n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n/**\n * 惠普键盘\n * @author zmh\n *\n */\npublic class HpKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普键盘\");\n    }\n\n}\n/**\n * 如果需要增加新产品时，简单工厂和工厂方法都违背了开闭原则，我们现在使用抽象工厂模式\n * 抽象化工厂，使用工厂可以被扩展，可以有键盘工厂，耳机工厂，甚至戴尔键盘工厂，戴尔耳机工厂\n * @author zmh\n *\n */\npublic abstract class PcFatory {\n    abstract Mouse createMouse();\n    abstract KeyBo createKeyBo();\n}\n/**\n * 华硕工厂，可以生产鼠标和键盘\n * @author zmh\n *\n */\npublic class AsusFactory extends PcFatory {\n\n    @Override\n    Mouse createMouse() {\n        return new AsusMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        // TODO Auto-generated method stub\n        return new AsusKeyBo();\n    }\n\n}\n/**\n * 戴尔工厂\n * @author zmh\n *\n */\npublic class DellFactory extends HpFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new DellMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        return new DellKeyBo();\n    }\n\n}\n/**\n * 惠普工厂，现在工厂不仅可以生产鼠标了，还可以生产键盘\n * @author zmh\n *\n */\npublic  class HpFactory extends PcFatory{\n     Mouse createMouse() {\n        return new HpMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        return new HpKeyBo();\n    }\n}\n\npublic static void main(String[] args) {\n//每个工厂可以生产两种产品\n        PcFatory hpf=new HpFactory();\n        Mouse hpm = hpf.createMouse();\n        hpm.sayHi();\n        KeyBo hpk = hpf.createKeyBo();\n        hpk.sayHi();\n        \n        PcFatory asf=new AsusFactory(); \n        Mouse asm = asf.createMouse();\n        asm.sayHi();\n        KeyBo ask = asf.createKeyBo();\n        ask.sayHi();\n        \n        PcFatory def=new DellFactory(); \n        Mouse dem = def.createMouse();\n        dem.sayHi();\n        KeyBo dek = def.createKeyBo();\n        dek.sayHi();\n\n    }\n\n```\n\n### 我们也可以使用枚举的方法创建工厂，减少大部分的代码\n```\n/**\n * 使用枚举方式，创建工厂\n * @author zmh\n *\n */\npublic class FactoryMarker {\n    public enum FactoryType{\n        ASUS,DELL,HP\n    }\n    public static PcFatory getFactory(FactoryType type){\n        switch (type) {\n        case ASUS:\n            return new AsusFactory();\n        case DELL:\n            return new DellFactory();\n        case HP:\n            return new HpFactory();\n\n        default:\n            throw new IllegalArgumentException(\"KingdomType not supported.\");\n        }\n    }\n    public static void main(String[] args) {\n        /**\n         * 我们还可以为工厂类实现枚举，省去大部分的代码\n         */\n        PcFatory asusFatory = FactoryMarker.getFactory(FactoryType.ASUS);\n        Mouse asusMouse = asusFatory.createMouse();\n        System.out.println(\"--------------------\");\n        asusMouse.sayHi();\n    }\n}\n\n```\n\n\n","source":"_posts/设计模式：工厂方法模式、简单工厂模式与抽象工厂模式.md","raw":"---\ntitle: 设计模式：工厂方法模式、简单工厂模式与抽象工厂模式\ndate: 2018-05-22 21:53:07\ncategories:\n  - 设计模式\n  - 工厂模式\ntags:\n  - 工厂模式\n---\n\n# 参考链接（如有侵权立即删除） \n[Abstract Factory——java-design-patterns](http://java-design-patterns.com/patterns/abstract-factory/)  \n[简单工厂、工厂方法和抽象工厂模式示例——CSDN@逐兔郎](https://blog.csdn.net/zhutulang/article/details/43495825)  \n[简单工厂模式,工厂方法模式和抽象工厂模式的异同——百度词库@hui332986207](https://wenku.baidu.com/view/60c6ca21192e45361066f5e0.html)  \n[抽象工厂模式和工厂模式的区别？——知乎](https://www.zhihu.com/question/20367734/answer/115807228)  \n[开闭原则——百度百科](https://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/2828775)\n## 推荐学习地址\n[java-design-patterns](http://java-design-patterns.com)  \n# 正文\n## 概述\n&emsp;&emsp;首先我们需要了解一下“开闭原则”，“开闭原则”就是不修改原有的代码，通过增加模块的方式来扩展原有的功能。接下来简述三种设计模式\n\n<!-- more -->\n\n1. 简单工厂模式\n\n> &emsp;&emsp;专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有+共同的父类。它又称为静态工厂方法模式。它的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。\n\n2. 工厂方法模式（工厂模式）\n\n> &emsp;&emsp;工厂方法是粒度很小的设计模式，因为模式的表现只是一个抽象的方法。+提前定义用于创建对象的接口，让子类决定实例化具体的某一个类，即在工厂和产品中间增加接口，工厂不再负责产品的创建，由接口针对不同条件返回具体的类实例，由具体类实例去实现。\n\n3. 抽象工厂模式\n\n> &emsp;&emsp;抽象工厂模式是提供一个接口来创建相关或依赖对象的类，而不指定它们的具体类。抽象工厂与工厂模式很像，只是抽象工厂更像是工厂中工厂，既然叫抽象工厂，当然是工厂具体用途是什么时候我们不确定了，但是我们设计工厂的原型，规范了未来工厂的扩展。\n \n### 简单工厂模式\n![简单工厂模式](https://pic2.zhimg.com/80/09067f878916c0e4377bfadc82afc248_hd.jpg)\n\n假设需要生产两种鼠标，戴尔鼠标和惠普鼠标。\n```\n/**\n * 创建一个鼠标工厂，用来生产鼠标\n * @author zmh\n *\n */\npublic class MouseFactory {\n    private MouseFactory() {\n    }\n    /**\n     * 生产鼠标,0为戴尔，1为惠普\n     */\n    public static Mouse createMouse(int i){\n        return i==0?(new DellMouse()):(new HpMouse());\n    }\n}\n/**\n * 设计鼠标接口\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n}\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\");\n    }\n    \n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n/**\n * 简单工厂模式\n * 简单工厂模式不是23种设计模式中的，专门定义一个用来创建其他类，这些类通常都拥有同一个父类。\n * @author zmh\n *\n */\npublic class Main {\n    public static void main(String[] args) {\n        Mouse mouse = MouseFactory.createMouse(0);//创建鼠标工厂\n        mouse.sayHi();\n    }\n}\n```\n## 工厂方法模式\n假设现在不仅有戴尔鼠标和惠普鼠标了，而且还要生产联想鼠标，但是我们原告的简单工厂设计模式，已经定义好`MouseFacotry`仅生产两种鼠标，如果要去修改源代码的话，违背了“开闭原则”，所以简单工厂设计模式不适用产品扩展。现在我们来使用工厂方法模式扩展鼠标产品的生产。  \n![工厂方法模式类图](设计模式：工厂方法模式、简单工厂模式与抽象工厂模式/1.jpg)\n```\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\"+test());\n    }\n}\n\npublic class DellMouseFactory extends MouseFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new DellMouse();\n    }\n\n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n\npublic class HpMouseFactory extends MouseFactory{\n\n    @Override\n    Mouse createMouse() {\n        return new HpMouse();\n    }\n\n\n}\n/**\n * 联想鼠标\n * @author zmh\n *\n */\npublic class LenovoMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"联想鼠标\");\n    }\n\n}\n\npublic class LenovoMouseFactory extends MouseFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new LenovoMouse();\n    }\n\n}\n/**\n * 鼠标\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n\n    default double test(){\n        return 1L;\n    }\n}\n/**\n * 设计鼠标工厂\n * @author zmh\n *\n */\npublic abstract class MouseFactory {\n    abstract Mouse createMouse();\n}\n\n\n/**\n * 工厂方法模式\n * @author zmh\n *\n */\npublic class Main {\n    public static void main(String[] args) {\n        //如果未来有更多类型的鼠标，那么我们就实现更多工厂\n        Mouse dellMouse = new DellMouseFactory().createMouse();\n        dellMouse.sayHi();\n        Mouse hpMouse = new HpMouseFactory().createMouse();\n        hpMouse.sayHi();\n        Mouse lenovoMouse = new LenovoMouseFactory().createMouse();\n        lenovoMouse.sayHi();\n\n    }\n}\n```\n\n## 抽象工厂\n如果现在我们不仅有鼠标产品，还有键盘或者耳机等等，其他产品，这样也不能在工厂方法模式上去修改源代码了，因为工厂方法模式只下定义了子类只能生产鼠标，而不能生产其他产品。\n![抽象工厂](https://pic1.zhimg.com/80/e8184a3c6b3463338d85c329004d7c64_hd.jpg)\n```\n/**\n * 抽象设计鼠标，规范未来产品\n * @author zmh\n *\n */\npublic interface Mouse {\n    void sayHi();\n}\n/**\n * 抽象设计键盘，规范未来产品\n * @author zmh\n *\n */\npublic interface KeyBo {\n    void sayHi();\n}\n/**\n * 华硕鼠标\n * @author zmh\n *\n */\npublic class AsusMouse implements Mouse {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"华硕鼠标\");\n    }\n\n}\n/**\n * 华硕键盘\n * @author zmh\n *\n */\npublic class AsusKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"华硕键盘\");\n    }\n\n}\n/**\n * 戴尔鼠标\n * @author zmh\n *\n */\npublic class DellMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔鼠标\");\n    }\n}\n/**\n * 戴尔键盘\n * @author zmh\n *\n */\npublic class DellKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"戴尔键盘\");\n    }\n\n}\n/**\n * 惠普鼠标\n * @author zmh\n *\n */\npublic class HpMouse implements Mouse{\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普鼠标\");     \n    }\n\n}\n/**\n * 惠普键盘\n * @author zmh\n *\n */\npublic class HpKeyBo implements KeyBo {\n\n    @Override\n    public void sayHi() {\n        System.out.println(\"惠普键盘\");\n    }\n\n}\n/**\n * 如果需要增加新产品时，简单工厂和工厂方法都违背了开闭原则，我们现在使用抽象工厂模式\n * 抽象化工厂，使用工厂可以被扩展，可以有键盘工厂，耳机工厂，甚至戴尔键盘工厂，戴尔耳机工厂\n * @author zmh\n *\n */\npublic abstract class PcFatory {\n    abstract Mouse createMouse();\n    abstract KeyBo createKeyBo();\n}\n/**\n * 华硕工厂，可以生产鼠标和键盘\n * @author zmh\n *\n */\npublic class AsusFactory extends PcFatory {\n\n    @Override\n    Mouse createMouse() {\n        return new AsusMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        // TODO Auto-generated method stub\n        return new AsusKeyBo();\n    }\n\n}\n/**\n * 戴尔工厂\n * @author zmh\n *\n */\npublic class DellFactory extends HpFactory {\n\n    @Override\n    Mouse createMouse() {\n        return new DellMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        return new DellKeyBo();\n    }\n\n}\n/**\n * 惠普工厂，现在工厂不仅可以生产鼠标了，还可以生产键盘\n * @author zmh\n *\n */\npublic  class HpFactory extends PcFatory{\n     Mouse createMouse() {\n        return new HpMouse();\n    }\n\n    @Override\n    KeyBo createKeyBo() {\n        return new HpKeyBo();\n    }\n}\n\npublic static void main(String[] args) {\n//每个工厂可以生产两种产品\n        PcFatory hpf=new HpFactory();\n        Mouse hpm = hpf.createMouse();\n        hpm.sayHi();\n        KeyBo hpk = hpf.createKeyBo();\n        hpk.sayHi();\n        \n        PcFatory asf=new AsusFactory(); \n        Mouse asm = asf.createMouse();\n        asm.sayHi();\n        KeyBo ask = asf.createKeyBo();\n        ask.sayHi();\n        \n        PcFatory def=new DellFactory(); \n        Mouse dem = def.createMouse();\n        dem.sayHi();\n        KeyBo dek = def.createKeyBo();\n        dek.sayHi();\n\n    }\n\n```\n\n### 我们也可以使用枚举的方法创建工厂，减少大部分的代码\n```\n/**\n * 使用枚举方式，创建工厂\n * @author zmh\n *\n */\npublic class FactoryMarker {\n    public enum FactoryType{\n        ASUS,DELL,HP\n    }\n    public static PcFatory getFactory(FactoryType type){\n        switch (type) {\n        case ASUS:\n            return new AsusFactory();\n        case DELL:\n            return new DellFactory();\n        case HP:\n            return new HpFactory();\n\n        default:\n            throw new IllegalArgumentException(\"KingdomType not supported.\");\n        }\n    }\n    public static void main(String[] args) {\n        /**\n         * 我们还可以为工厂类实现枚举，省去大部分的代码\n         */\n        PcFatory asusFatory = FactoryMarker.getFactory(FactoryType.ASUS);\n        Mouse asusMouse = asusFatory.createMouse();\n        System.out.println(\"--------------------\");\n        asusMouse.sayHi();\n    }\n}\n\n```\n\n\n","slug":"设计模式：工厂方法模式、简单工厂模式与抽象工厂模式","published":1,"updated":"2019-05-05T09:43:39.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncioa007uy8usnkdc2pq6","content":"<h1 id=\"参考链接（如有侵权立即删除）\"><a href=\"#参考链接（如有侵权立即删除）\" class=\"headerlink\" title=\"参考链接（如有侵权立即删除）\"></a>参考链接（如有侵权立即删除）</h1><p><a href=\"http://java-design-patterns.com/patterns/abstract-factory/\" target=\"_blank\" rel=\"noopener\">Abstract Factory——java-design-patterns</a><br><a href=\"https://blog.csdn.net/zhutulang/article/details/43495825\" target=\"_blank\" rel=\"noopener\">简单工厂、工厂方法和抽象工厂模式示例——CSDN@逐兔郎</a><br><a href=\"https://wenku.baidu.com/view/60c6ca21192e45361066f5e0.html\" target=\"_blank\" rel=\"noopener\">简单工厂模式,工厂方法模式和抽象工厂模式的异同——百度词库@hui332986207</a><br><a href=\"https://www.zhihu.com/question/20367734/answer/115807228\" target=\"_blank\" rel=\"noopener\">抽象工厂模式和工厂模式的区别？——知乎</a><br><a href=\"https://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/2828775\" target=\"_blank\" rel=\"noopener\">开闭原则——百度百科</a></p>\n<h2 id=\"推荐学习地址\"><a href=\"#推荐学习地址\" class=\"headerlink\" title=\"推荐学习地址\"></a>推荐学习地址</h2><p><a href=\"http://java-design-patterns.com\" target=\"_blank\" rel=\"noopener\">java-design-patterns</a>  </p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>&emsp;&emsp;首先我们需要了解一下“开闭原则”，“开闭原则”就是不修改原有的代码，通过增加模块的方式来扩展原有的功能。接下来简述三种设计模式</p>\n<a id=\"more\"></a>\n<ol>\n<li>简单工厂模式</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有+共同的父类。它又称为静态工厂方法模式。它的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</p>\n</blockquote>\n<ol>\n<li>工厂方法模式（工厂模式）</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;工厂方法是粒度很小的设计模式，因为模式的表现只是一个抽象的方法。+提前定义用于创建对象的接口，让子类决定实例化具体的某一个类，即在工厂和产品中间增加接口，工厂不再负责产品的创建，由接口针对不同条件返回具体的类实例，由具体类实例去实现。</p>\n</blockquote>\n<ol>\n<li>抽象工厂模式</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;抽象工厂模式是提供一个接口来创建相关或依赖对象的类，而不指定它们的具体类。抽象工厂与工厂模式很像，只是抽象工厂更像是工厂中工厂，既然叫抽象工厂，当然是工厂具体用途是什么时候我们不确定了，但是我们设计工厂的原型，规范了未来工厂的扩展。</p>\n</blockquote>\n<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p><img src=\"https://pic2.zhimg.com/80/09067f878916c0e4377bfadc82afc248_hd.jpg\" alt=\"简单工厂模式\"></p>\n<p>假设需要生产两种鼠标，戴尔鼠标和惠普鼠标。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 创建一个鼠标工厂，用来生产鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class MouseFactory &#123;</span><br><span class=\"line\">    private MouseFactory() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 生产鼠标,0为戴尔，1为惠普</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Mouse createMouse(int i)&#123;</span><br><span class=\"line\">        return i&#x3D;&#x3D;0?(new DellMouse()):(new HpMouse());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 设计鼠标接口</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 简单工厂模式</span><br><span class=\"line\"> * 简单工厂模式不是23种设计模式中的，专门定义一个用来创建其他类，这些类通常都拥有同一个父类。</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Mouse mouse &#x3D; MouseFactory.createMouse(0);&#x2F;&#x2F;创建鼠标工厂</span><br><span class=\"line\">        mouse.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>假设现在不仅有戴尔鼠标和惠普鼠标了，而且还要生产联想鼠标，但是我们原告的简单工厂设计模式，已经定义好<code>MouseFacotry</code>仅生产两种鼠标，如果要去修改源代码的话，违背了“开闭原则”，所以简单工厂设计模式不适用产品扩展。现在我们来使用工厂方法模式扩展鼠标产品的生产。<br><img src=\"/2018/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E3%80%81%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg\" alt=\"工厂方法模式类图\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;+test());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DellMouseFactory extends MouseFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new DellMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HpMouseFactory extends MouseFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new HpMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 联想鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class LenovoMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;联想鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LenovoMouseFactory extends MouseFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new LenovoMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    default double test()&#123;</span><br><span class=\"line\">        return 1L;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 设计鼠标工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public abstract class MouseFactory &#123;</span><br><span class=\"line\">    abstract Mouse createMouse();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 工厂方法模式</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;如果未来有更多类型的鼠标，那么我们就实现更多工厂</span><br><span class=\"line\">        Mouse dellMouse &#x3D; new DellMouseFactory().createMouse();</span><br><span class=\"line\">        dellMouse.sayHi();</span><br><span class=\"line\">        Mouse hpMouse &#x3D; new HpMouseFactory().createMouse();</span><br><span class=\"line\">        hpMouse.sayHi();</span><br><span class=\"line\">        Mouse lenovoMouse &#x3D; new LenovoMouseFactory().createMouse();</span><br><span class=\"line\">        lenovoMouse.sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h2><p>如果现在我们不仅有鼠标产品，还有键盘或者耳机等等，其他产品，这样也不能在工厂方法模式上去修改源代码了，因为工厂方法模式只下定义了子类只能生产鼠标，而不能生产其他产品。<br><img src=\"https://pic1.zhimg.com/80/e8184a3c6b3463338d85c329004d7c64_hd.jpg\" alt=\"抽象工厂\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 抽象设计鼠标，规范未来产品</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 抽象设计键盘，规范未来产品</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface KeyBo &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusMouse implements Mouse &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;华硕鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;华硕键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 如果需要增加新产品时，简单工厂和工厂方法都违背了开闭原则，我们现在使用抽象工厂模式</span><br><span class=\"line\"> * 抽象化工厂，使用工厂可以被扩展，可以有键盘工厂，耳机工厂，甚至戴尔键盘工厂，戴尔耳机工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public abstract class PcFatory &#123;</span><br><span class=\"line\">    abstract Mouse createMouse();</span><br><span class=\"line\">    abstract KeyBo createKeyBo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕工厂，可以生产鼠标和键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusFactory extends PcFatory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new AsusMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        return new AsusKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellFactory extends HpFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new DellMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        return new DellKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普工厂，现在工厂不仅可以生产鼠标了，还可以生产键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public  class HpFactory extends PcFatory&#123;</span><br><span class=\"line\">     Mouse createMouse() &#123;</span><br><span class=\"line\">        return new HpMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        return new HpKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;每个工厂可以生产两种产品</span><br><span class=\"line\">        PcFatory hpf&#x3D;new HpFactory();</span><br><span class=\"line\">        Mouse hpm &#x3D; hpf.createMouse();</span><br><span class=\"line\">        hpm.sayHi();</span><br><span class=\"line\">        KeyBo hpk &#x3D; hpf.createKeyBo();</span><br><span class=\"line\">        hpk.sayHi();</span><br><span class=\"line\">        </span><br><span class=\"line\">        PcFatory asf&#x3D;new AsusFactory(); </span><br><span class=\"line\">        Mouse asm &#x3D; asf.createMouse();</span><br><span class=\"line\">        asm.sayHi();</span><br><span class=\"line\">        KeyBo ask &#x3D; asf.createKeyBo();</span><br><span class=\"line\">        ask.sayHi();</span><br><span class=\"line\">        </span><br><span class=\"line\">        PcFatory def&#x3D;new DellFactory(); </span><br><span class=\"line\">        Mouse dem &#x3D; def.createMouse();</span><br><span class=\"line\">        dem.sayHi();</span><br><span class=\"line\">        KeyBo dek &#x3D; def.createKeyBo();</span><br><span class=\"line\">        dek.sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我们也可以使用枚举的方法创建工厂，减少大部分的代码\"><a href=\"#我们也可以使用枚举的方法创建工厂，减少大部分的代码\" class=\"headerlink\" title=\"我们也可以使用枚举的方法创建工厂，减少大部分的代码\"></a>我们也可以使用枚举的方法创建工厂，减少大部分的代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 使用枚举方式，创建工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class FactoryMarker &#123;</span><br><span class=\"line\">    public enum FactoryType&#123;</span><br><span class=\"line\">        ASUS,DELL,HP</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static PcFatory getFactory(FactoryType type)&#123;</span><br><span class=\"line\">        switch (type) &#123;</span><br><span class=\"line\">        case ASUS:</span><br><span class=\"line\">            return new AsusFactory();</span><br><span class=\"line\">        case DELL:</span><br><span class=\"line\">            return new DellFactory();</span><br><span class=\"line\">        case HP:</span><br><span class=\"line\">            return new HpFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;KingdomType not supported.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 我们还可以为工厂类实现枚举，省去大部分的代码</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        PcFatory asusFatory &#x3D; FactoryMarker.getFactory(FactoryType.ASUS);</span><br><span class=\"line\">        Mouse asusMouse &#x3D; asusFatory.createMouse();</span><br><span class=\"line\">        System.out.println(&quot;--------------------&quot;);</span><br><span class=\"line\">        asusMouse.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"参考链接（如有侵权立即删除）\"><a href=\"#参考链接（如有侵权立即删除）\" class=\"headerlink\" title=\"参考链接（如有侵权立即删除）\"></a>参考链接（如有侵权立即删除）</h1><p><a href=\"http://java-design-patterns.com/patterns/abstract-factory/\" target=\"_blank\" rel=\"noopener\">Abstract Factory——java-design-patterns</a><br><a href=\"https://blog.csdn.net/zhutulang/article/details/43495825\" target=\"_blank\" rel=\"noopener\">简单工厂、工厂方法和抽象工厂模式示例——CSDN@逐兔郎</a><br><a href=\"https://wenku.baidu.com/view/60c6ca21192e45361066f5e0.html\" target=\"_blank\" rel=\"noopener\">简单工厂模式,工厂方法模式和抽象工厂模式的异同——百度词库@hui332986207</a><br><a href=\"https://www.zhihu.com/question/20367734/answer/115807228\" target=\"_blank\" rel=\"noopener\">抽象工厂模式和工厂模式的区别？——知乎</a><br><a href=\"https://baike.baidu.com/item/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/2828775\" target=\"_blank\" rel=\"noopener\">开闭原则——百度百科</a></p>\n<h2 id=\"推荐学习地址\"><a href=\"#推荐学习地址\" class=\"headerlink\" title=\"推荐学习地址\"></a>推荐学习地址</h2><p><a href=\"http://java-design-patterns.com\" target=\"_blank\" rel=\"noopener\">java-design-patterns</a>  </p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>&emsp;&emsp;首先我们需要了解一下“开闭原则”，“开闭原则”就是不修改原有的代码，通过增加模块的方式来扩展原有的功能。接下来简述三种设计模式</p>","more":"<ol>\n<li>简单工厂模式</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有+共同的父类。它又称为静态工厂方法模式。它的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</p>\n</blockquote>\n<ol>\n<li>工厂方法模式（工厂模式）</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;工厂方法是粒度很小的设计模式，因为模式的表现只是一个抽象的方法。+提前定义用于创建对象的接口，让子类决定实例化具体的某一个类，即在工厂和产品中间增加接口，工厂不再负责产品的创建，由接口针对不同条件返回具体的类实例，由具体类实例去实现。</p>\n</blockquote>\n<ol>\n<li>抽象工厂模式</li>\n</ol>\n<blockquote>\n<p>&emsp;&emsp;抽象工厂模式是提供一个接口来创建相关或依赖对象的类，而不指定它们的具体类。抽象工厂与工厂模式很像，只是抽象工厂更像是工厂中工厂，既然叫抽象工厂，当然是工厂具体用途是什么时候我们不确定了，但是我们设计工厂的原型，规范了未来工厂的扩展。</p>\n</blockquote>\n<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><p><img src=\"https://pic2.zhimg.com/80/09067f878916c0e4377bfadc82afc248_hd.jpg\" alt=\"简单工厂模式\"></p>\n<p>假设需要生产两种鼠标，戴尔鼠标和惠普鼠标。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 创建一个鼠标工厂，用来生产鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class MouseFactory &#123;</span><br><span class=\"line\">    private MouseFactory() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 生产鼠标,0为戴尔，1为惠普</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static Mouse createMouse(int i)&#123;</span><br><span class=\"line\">        return i&#x3D;&#x3D;0?(new DellMouse()):(new HpMouse());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 设计鼠标接口</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 简单工厂模式</span><br><span class=\"line\"> * 简单工厂模式不是23种设计模式中的，专门定义一个用来创建其他类，这些类通常都拥有同一个父类。</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Mouse mouse &#x3D; MouseFactory.createMouse(0);&#x2F;&#x2F;创建鼠标工厂</span><br><span class=\"line\">        mouse.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>假设现在不仅有戴尔鼠标和惠普鼠标了，而且还要生产联想鼠标，但是我们原告的简单工厂设计模式，已经定义好<code>MouseFacotry</code>仅生产两种鼠标，如果要去修改源代码的话，违背了“开闭原则”，所以简单工厂设计模式不适用产品扩展。现在我们来使用工厂方法模式扩展鼠标产品的生产。<br><img src=\"/2018/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E3%80%81%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg\" alt=\"工厂方法模式类图\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;+test());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DellMouseFactory extends MouseFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new DellMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HpMouseFactory extends MouseFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new HpMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 联想鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class LenovoMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;联想鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LenovoMouseFactory extends MouseFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new LenovoMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    default double test()&#123;</span><br><span class=\"line\">        return 1L;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 设计鼠标工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public abstract class MouseFactory &#123;</span><br><span class=\"line\">    abstract Mouse createMouse();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 工厂方法模式</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;如果未来有更多类型的鼠标，那么我们就实现更多工厂</span><br><span class=\"line\">        Mouse dellMouse &#x3D; new DellMouseFactory().createMouse();</span><br><span class=\"line\">        dellMouse.sayHi();</span><br><span class=\"line\">        Mouse hpMouse &#x3D; new HpMouseFactory().createMouse();</span><br><span class=\"line\">        hpMouse.sayHi();</span><br><span class=\"line\">        Mouse lenovoMouse &#x3D; new LenovoMouseFactory().createMouse();</span><br><span class=\"line\">        lenovoMouse.sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h2><p>如果现在我们不仅有鼠标产品，还有键盘或者耳机等等，其他产品，这样也不能在工厂方法模式上去修改源代码了，因为工厂方法模式只下定义了子类只能生产鼠标，而不能生产其他产品。<br><img src=\"https://pic1.zhimg.com/80/e8184a3c6b3463338d85c329004d7c64_hd.jpg\" alt=\"抽象工厂\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 抽象设计鼠标，规范未来产品</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Mouse &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 抽象设计键盘，规范未来产品</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface KeyBo &#123;</span><br><span class=\"line\">    void sayHi();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusMouse implements Mouse &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;华硕鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;华硕键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔鼠标&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;戴尔键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普鼠标</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpMouse implements Mouse&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普鼠标&quot;);     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class HpKeyBo implements KeyBo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void sayHi() &#123;</span><br><span class=\"line\">        System.out.println(&quot;惠普键盘&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 如果需要增加新产品时，简单工厂和工厂方法都违背了开闭原则，我们现在使用抽象工厂模式</span><br><span class=\"line\"> * 抽象化工厂，使用工厂可以被扩展，可以有键盘工厂，耳机工厂，甚至戴尔键盘工厂，戴尔耳机工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public abstract class PcFatory &#123;</span><br><span class=\"line\">    abstract Mouse createMouse();</span><br><span class=\"line\">    abstract KeyBo createKeyBo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 华硕工厂，可以生产鼠标和键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class AsusFactory extends PcFatory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new AsusMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">        return new AsusKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 戴尔工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class DellFactory extends HpFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    Mouse createMouse() &#123;</span><br><span class=\"line\">        return new DellMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        return new DellKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 惠普工厂，现在工厂不仅可以生产鼠标了，还可以生产键盘</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public  class HpFactory extends PcFatory&#123;</span><br><span class=\"line\">     Mouse createMouse() &#123;</span><br><span class=\"line\">        return new HpMouse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    KeyBo createKeyBo() &#123;</span><br><span class=\"line\">        return new HpKeyBo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;每个工厂可以生产两种产品</span><br><span class=\"line\">        PcFatory hpf&#x3D;new HpFactory();</span><br><span class=\"line\">        Mouse hpm &#x3D; hpf.createMouse();</span><br><span class=\"line\">        hpm.sayHi();</span><br><span class=\"line\">        KeyBo hpk &#x3D; hpf.createKeyBo();</span><br><span class=\"line\">        hpk.sayHi();</span><br><span class=\"line\">        </span><br><span class=\"line\">        PcFatory asf&#x3D;new AsusFactory(); </span><br><span class=\"line\">        Mouse asm &#x3D; asf.createMouse();</span><br><span class=\"line\">        asm.sayHi();</span><br><span class=\"line\">        KeyBo ask &#x3D; asf.createKeyBo();</span><br><span class=\"line\">        ask.sayHi();</span><br><span class=\"line\">        </span><br><span class=\"line\">        PcFatory def&#x3D;new DellFactory(); </span><br><span class=\"line\">        Mouse dem &#x3D; def.createMouse();</span><br><span class=\"line\">        dem.sayHi();</span><br><span class=\"line\">        KeyBo dek &#x3D; def.createKeyBo();</span><br><span class=\"line\">        dek.sayHi();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我们也可以使用枚举的方法创建工厂，减少大部分的代码\"><a href=\"#我们也可以使用枚举的方法创建工厂，减少大部分的代码\" class=\"headerlink\" title=\"我们也可以使用枚举的方法创建工厂，减少大部分的代码\"></a>我们也可以使用枚举的方法创建工厂，减少大部分的代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 使用枚举方式，创建工厂</span><br><span class=\"line\"> * @author zmh</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class FactoryMarker &#123;</span><br><span class=\"line\">    public enum FactoryType&#123;</span><br><span class=\"line\">        ASUS,DELL,HP</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static PcFatory getFactory(FactoryType type)&#123;</span><br><span class=\"line\">        switch (type) &#123;</span><br><span class=\"line\">        case ASUS:</span><br><span class=\"line\">            return new AsusFactory();</span><br><span class=\"line\">        case DELL:</span><br><span class=\"line\">            return new DellFactory();</span><br><span class=\"line\">        case HP:</span><br><span class=\"line\">            return new HpFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;KingdomType not supported.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">         * 我们还可以为工厂类实现枚举，省去大部分的代码</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        PcFatory asusFatory &#x3D; FactoryMarker.getFactory(FactoryType.ASUS);</span><br><span class=\"line\">        Mouse asusMouse &#x3D; asusFatory.createMouse();</span><br><span class=\"line\">        System.out.println(&quot;--------------------&quot;);</span><br><span class=\"line\">        asusMouse.sayHi();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用Builder设计模式，设计ToolBar","urlname":"nui80z","date":"2019-06-15T10:20:25.000Z","_content":"\n\n<a name=\"PLZoY\"></a>\n# 使用Builder设计模式，设计ToolBar\n<a name=\"nO5mk\"></a>\n## Builder设计模式解析\nandroid也有不地方采用了Builder设计模式的，比如NotificationCompat.Builder和AlertDialog.Builder就采用了Builder的设计模式\n\n<a name=\"EhCjH\"></a>\n### 最典型的代码示例\n<a name=\"4toIJ\"></a>\n#### NotificationCompat.Builder\n\n```java\nNotificationCompat.Builder mBuilder =\n        new NotificationCompat.Builder(this)\n        .setSmallIcon(R.drawable.notification_icon)\n        .setContentTitle(\"My notification\")\n        .setContentText(\"Hello World!\");\n// Creates an explicit intent for an Activity in your app\nIntent resultIntent = new Intent(this, ResultActivity.class);\n\n// The stack builder object will contain an artificial back stack for the\n// started Activity.\n// This ensures that navigating backward from the Activity leads out of\n// your application to the Home screen.\nTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n// Adds the back stack for the Intent (but not the Intent itself)\nstackBuilder.addParentStack(ResultActivity.class);\n// Adds the Intent that starts the Activity to the top of the stack\nstackBuilder.addNextIntent(resultIntent);\nPendingIntent resultPendingIntent =\n        stackBuilder.getPendingIntent(\n            0,\n            PendingIntent.FLAG_UPDATE_CURRENT\n        );\nmBuilder.setContentIntent(resultPendingIntent);\nNotificationManager mNotificationManager =\n    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// mId allows you to update the notification later on.\nmNotificationManager.notify(mId, mBuilder.build());\n```\n\n<a name=\"qoIBp\"></a>\n#### AlertDialog.Builder\n\n```java\nAlertDialog.Builder builder2=new AlertDialog.Builder(\ngetActivity(),R.style.AppTheme_NoActionBar);\n\n        builder2.setTitle(\"警告\")\n        .setMessage(\"你确定删除吗\")\n\t\tnew DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog,\n             int which) {\n                ToastUtil.showToast(getActivity(),\"你点击了取消\");\n            }\n        })\n         .setPositiveButton(\"确定\", \n         new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, \n                    int which) {\n                        ToastUtil.showToast(getActivity(),\n                        \"你点击了确定\");\n                    }\n          }) .create().show();\n```\n\n<!--more-->\n<a name=\"Abool\"></a>\n### Builder设计模式的特点\n<a name=\"PBxbY\"></a>\n#### 参数化\nAlertDialog.Builder里面会实例一个AlertController.AlertParams，里面包含大部分，创建AlertDialog的参数，实现功能的参数化\n\n```java\npublic Builder(Context context, int themeResId) {\n\n P = new AlertController.AlertParams(new ContextThemeWrapper(context, resolveDialogTheme(context, themeResId)));\n        }\n```\n\n<a name=\"uQJkb\"></a>\n#### 可维护性强\n由于Builder设计模式的参数，达到功能的多变，可维护性就变得很强<br />例如：可以 调用setMessage(\"你确定删除吗\")，也可以去掉\n<a name=\"rxztf\"></a>\n## ToolBar的设计，抽象化\n\n<a name=\"3dhnt\"></a>\n### 接口抽象toolbar的规范public interface INavigation\n\n```java\n/**\n * 所有Toolbar的规范\n * 抽象一个Toolbar\n * \n * Created by 辉神 on 2016/8/10.\n */\n\npublic interface INavigation {\n    /**\n     * 定义布局（返回布局id）\n     * @return\n     */\n    public int bindLayoutId();\n\n    /**\n     * 创建和绑定布局\n     */\n    public void build();\n}\n```\n\n<a name=\"9uiSL\"></a>\n### 抽象并实现INavigation——public abstract class AbsNavigation\n\n```java\n/**\n * 再次抽象Toolbar\n * -只要是app的开发，都会有布局的创建和绑定\n * -再次抽象，是为了，下次使用时，不用再次创建布局和绑定\n * Created by 辉神 on 2016/8/10.\n */\n\npublic abstract class AbsNavigation<P extends AbsNavigation.NavigationParams> implements INavigation {\n    /**\n     *     设置一个默认LayoutId，默认为0\n     */\n    private static final  int DEFAULT_LAYOUT_ID=0;\n    private P params;\n    private View contentView;\n\n    public AbsNavigation(P params) {\n        this.params = params;\n    }\n\n    public P getParams() {\n        return  params;\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return DEFAULT_LAYOUT_ID;\n    }\n\n    @Override\n    public void build() {\n        //创建和绑定布局\n        if (contentView==null)\n        contentView = bindParent(bindLayoutId(), ((NavigationParams)getParams()).parent);\n    }\n\n    /**\n     * 方便子类使用\n     * @param id\n     * @return\n     */\n    public View findLayoutById(int id){\n        return contentView!=null?contentView.findViewById(id):null;\n    }\n    public String getString(int id){\n        return contentView.getContext().getResources().getString(id);\n    }\n\n    public View bindParent(int id, ViewGroup parent) {\n        //先要判断这个id是否为0\n        if (id==DEFAULT_LAYOUT_ID){\n            return null;\n        }\n        View childView = ((NavigationParams)getParams()).inflater.inflate(id, parent,false);\n        return bindParent(childView,parent);\n    }\n\n    public View bindParent(View childView, ViewGroup parent) {\n        ViewGroup viewParent= (ViewGroup) childView.getParent();\n        //如果他原来有一个爸爸了，就先把它爸爸干掉\n        if(viewParent!=null){\n            viewParent.removeView(childView);\n        }\n        //添加我们的爸爸给这个视图，因为一个视图不可能有两个爸爸\n        parent.addView(childView,0);\n        //将爸爸返回\n        return parent;\n    }\n\n    /**\n     * Builder设计模式，所有Toolbar都必须有的参数----------参数集（参数类）\n     */\n    public static class NavigationParams{\n        private Context context;//上下文对象，用于加载布局视图\n        private ViewGroup parent;//每一个布局视图都有一个爸爸\n        private LayoutInflater inflater;\n        public NavigationParams(Context context, ViewGroup parent) {\n            this.context = context;\n            this.parent = parent;\n            inflater=inflater.from(context);\n        }\n    }\n\n    /**\n     * 创建Toolbar\n     */\n    public abstract static class Builder{\n        public Builder(Context context,ViewGroup parent) {\n        }\n\n        /**\n         * 创建Toolbar\n         * @return\n         */\n        public abstract INavigation create();\n    }\n}\n```\n\n<a name=\"87mMM\"></a>\n### 搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\n\n```java\n/**\n * 左中右场场景，\n * 也就是先设置左中右的布局，子类可以实现更多内容\n * Created by 辉神 on 2016/8/11.\n */\n\npublic abstract class DefaultNavigation<P extends AbsNavigation.NavigationParams> extends AbsNavigation<P> {\n\n    public DefaultNavigation(P params) {\n        super(params);\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return R.layout.navigation_default;\n    }\n\n    @Override\n    public void build() {\n        super.build();//一定要super，因为要绑定左中右的父容器\n\n        //初始化父容器，布局框架\n        LinearLayout ll_left= (LinearLayout) findLayoutById(R.id.ll_left);\n        LinearLayout ll_center= (LinearLayout) findLayoutById(R.id.ll_center);\n        LinearLayout ll_right= (LinearLayout) findLayoutById(R.id.ll_right);\n\n        //以下方法都是抽象，显然，子类可以任意定义布局，达到动态改变，方便维护\n        //绑定布局也就是，将子布局添加到当前这个“左中右场景”中来\n        bindParent(bindLeftLayoutId(),ll_left);\n        bindParent(bindCenterLayoutId(),ll_center);\n        bindParent(bindRightLayoutId(),ll_right);\n        //初始化子布局\n        initLeftLayout(ll_left);\n        initCenterLayout(ll_center);\n        initRightLayout(ll_right);\n\n    }\n\n    /**\n     *返回左边布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindLeftLayoutId();\n\n    /**\n     * 返回中间布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindCenterLayoutId();\n\n    /**\n     * 返回右边布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindRightLayoutId();\n\n    /**\n     * 初始化左边的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initLeftLayout(View view);\n    /**\n     * 初始化中间的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initCenterLayout(View view);\n    /**\n     * 初始化右边的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initRightLayout(View view);\n}\n```\n\n<a name=\"LbOY6\"></a>\n### 主页toolbar的实现——HomeNavigation\n\n```java\n/**\n * 默认的主页toolbar实现\n * Created by 辉神 on 2016/8/11.\n */\n\npublic class HomeNavigation extends DefaultNavigation<HomeNavigation.HomeNavigationParams> {\n\n    public HomeNavigation(HomeNavigationParams params) {\n        super(params);\n    }\n\n    /**\n     * 设置默认主页的参数\n     */\n    public static class HomeNavigationParams extends AbsNavigation.NavigationParams{\n        public int leftImageRes;\n        public int centerTitleRes;\n        public int rightImageRes;\n        public int rightTextRes;\n\n        public View.OnClickListener leftOnclickListener;\n        public View.OnClickListener rightOnClickListener;\n\n        public HomeNavigationParams(Context context, ViewGroup parent) {\n            super(context, parent);\n        }\n    }\n\n    /**\n     * 构建我们的Toolbar\n     * @return\n     */\n    public static class Builder extends AbsNavigation.Builder{\n        private HomeNavigationParams p;\n\n        public Builder(Context context, ViewGroup parent) {\n            super(context, parent);\n            this.p=new HomeNavigationParams(context,parent);\n        }\n        /**\n         *  设置左边的图片\n         */\n        public Builder setLeftImageRes(int leftImageRes){\n            this.p.leftImageRes=leftImageRes;\n            return this;\n        }\n\n        /**\n         * 设置中间标题\n         * @param centerTitleRes\n         * @return\n         */\n        public Builder setCenterTitleRes(int centerTitleRes){\n            this.p.centerTitleRes=centerTitleRes;\n            return this;\n        }\n\n        /**\n         * 设置右边图片\n         * @param rightImageRes\n         * @return\n         */\n        public Builder setRightImageRes(int rightImageRes){\n            this.p.rightImageRes=rightImageRes;\n            return this;\n        }\n\n        /**\n         * 设置右边文字\n         * @param rightTextRes\n         * @return\n         */\n        public Builder setRightTextRes(int rightTextRes){\n            this.p.rightTextRes=rightTextRes;\n            return this;\n        }\n\n        /**\n         * 设置左边监听事件\n         * @param leftOnclickListener\n         * @return\n         */\n        public Builder setLeftOnclickListener(View.OnClickListener leftOnclickListener){\n            this.p.leftOnclickListener=leftOnclickListener;\n            return this;\n        }\n\n        /**\n         * 设置右边监听事件\n         * @param rightOnClickListener\n         * @return\n         */\n        public Builder setRightOnClickListener(View.OnClickListener rightOnClickListener){\n            this.p.rightOnClickListener=rightOnClickListener;\n            return this;\n        }\n\n        /**\n         * <p>这个方法被调用了之后，还没有结束，还需要调用接口中的build()方法</p>\n         * <p>HomeNavigation的是上层父类，是INavigation的实现类，</p>\n         * <p>所以当前INavigation的build()方法被调用时，也就相当于接口回调了，builder设计模式也就完成</p>\n         * <p>用户还需要再调用最高层接口，已经设计好的方法build()方法</p>\n         * <p>这个builder设计模式简直屌炸天</p>\n         * @return\n         */\n        @Override\n        public INavigation create() {\n            return new HomeNavigation(p);\n        }\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return super.bindLayoutId();\n    }\n\n    @Override\n    public int bindLeftLayoutId() {\n        return R.layout.navigation_default_left;\n    }\n\n    @Override\n    public int bindCenterLayoutId() {\n        return R.layout.navigation_default_center;\n    }\n\n    @Override\n    public int bindRightLayoutId() {\n        return R.layout.navigation_home_right;\n    }\n\n    @Override\n    public void initLeftLayout(View view) {\n        ImageView iv_default_left = (ImageView) view.findViewById(R.id.iv_default_left);\n        iv_default_left.setImageResource(getParams().leftImageRes);\n        iv_default_left.setOnClickListener(getParams().leftOnclickListener);\n    }\n\n    @Override\n    public void initCenterLayout(View view) {\n        TextView tv_default_center = (TextView) view.findViewById(R.id.tv_default_center);\n        tv_default_center.setText(getString(getParams().centerTitleRes));\n    }\n\n    @Override\n    public void initRightLayout(View view) {\n        TextView tv_home_right = (TextView) view.findViewById(R.id.tv_home_right);\n        tv_home_right.setText(getString(getParams().rightTextRes));\n        tv_home_right.setOnClickListener(getParams().rightOnClickListener);\n        ImageView iv_home_right= (ImageView) view.findViewById(R.id.iv_home_right);\n        iv_home_right.setImageResource(getParams().rightImageRes);\n        //启动金币动画\n        AnimationDrawable animationDrawable= (AnimationDrawable) iv_home_right.getBackground();\n        animationDrawable.start();\n    }\n}\n```\n\n<a name=\"gzCTn\"></a>\n### HomeNavigation的调用,即实例化\n\n```java\nprivate void initNavigation(View contentView) {\n\nHomeNavigation.Builder builder=new HomeNavigation.Builder\n(getActivity(), (ViewGroup) contentView);\n\n        builder.setLeftImageRes(R.mipmap.apk_all_top_nav)\n                .setCenterTitleRes(R.string.tabbar_home_text)\n                .setRightTextRes(R.string.nav_sign_in)\n                .setRightImageRes(R.drawable.anim_sign_coin)\n                .setLeftOnclickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n\t\t\t\t     ToastUtil .showToast(getActivity(),\n\t\t\t\t     \"点击了菜单\");\n                    }\n                })\n                .setRightOnClickListener\n                (new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        ToastUtil.showToast(getActivity(),\n                        \"点击了签到\");\n                    }\n                })\n                .create().build();\n\n    }\n```\n\n<a name=\"bmmNN\"></a>\n### 主页toolbar实现效果\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1560594037506-246261ac-6c1a-4a07-a2f5-10904d4e47a7.png#align=left&display=inline&height=217&originHeight=217&originWidth=321&size=0&status=done&width=321)\n\n<a name=\"cp07W\"></a>\n## 布局代码就不给了\n\n","source":"_posts/yuque/使用Builder设计模式，设计ToolBar.md","raw":"\n---\n\ntitle: 使用Builder设计模式，设计ToolBar\n\nurlname: nui80z\n\ndate: 2019-06-15 18:20:25 +0800\n\ntags: [设计模式,mvp,android设计模式]\n\ncategories: 设计模式\n\n---\n\n\n<a name=\"PLZoY\"></a>\n# 使用Builder设计模式，设计ToolBar\n<a name=\"nO5mk\"></a>\n## Builder设计模式解析\nandroid也有不地方采用了Builder设计模式的，比如NotificationCompat.Builder和AlertDialog.Builder就采用了Builder的设计模式\n\n<a name=\"EhCjH\"></a>\n### 最典型的代码示例\n<a name=\"4toIJ\"></a>\n#### NotificationCompat.Builder\n\n```java\nNotificationCompat.Builder mBuilder =\n        new NotificationCompat.Builder(this)\n        .setSmallIcon(R.drawable.notification_icon)\n        .setContentTitle(\"My notification\")\n        .setContentText(\"Hello World!\");\n// Creates an explicit intent for an Activity in your app\nIntent resultIntent = new Intent(this, ResultActivity.class);\n\n// The stack builder object will contain an artificial back stack for the\n// started Activity.\n// This ensures that navigating backward from the Activity leads out of\n// your application to the Home screen.\nTaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n// Adds the back stack for the Intent (but not the Intent itself)\nstackBuilder.addParentStack(ResultActivity.class);\n// Adds the Intent that starts the Activity to the top of the stack\nstackBuilder.addNextIntent(resultIntent);\nPendingIntent resultPendingIntent =\n        stackBuilder.getPendingIntent(\n            0,\n            PendingIntent.FLAG_UPDATE_CURRENT\n        );\nmBuilder.setContentIntent(resultPendingIntent);\nNotificationManager mNotificationManager =\n    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n// mId allows you to update the notification later on.\nmNotificationManager.notify(mId, mBuilder.build());\n```\n\n<a name=\"qoIBp\"></a>\n#### AlertDialog.Builder\n\n```java\nAlertDialog.Builder builder2=new AlertDialog.Builder(\ngetActivity(),R.style.AppTheme_NoActionBar);\n\n        builder2.setTitle(\"警告\")\n        .setMessage(\"你确定删除吗\")\n\t\tnew DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog,\n             int which) {\n                ToastUtil.showToast(getActivity(),\"你点击了取消\");\n            }\n        })\n         .setPositiveButton(\"确定\", \n         new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, \n                    int which) {\n                        ToastUtil.showToast(getActivity(),\n                        \"你点击了确定\");\n                    }\n          }) .create().show();\n```\n\n<!--more-->\n<a name=\"Abool\"></a>\n### Builder设计模式的特点\n<a name=\"PBxbY\"></a>\n#### 参数化\nAlertDialog.Builder里面会实例一个AlertController.AlertParams，里面包含大部分，创建AlertDialog的参数，实现功能的参数化\n\n```java\npublic Builder(Context context, int themeResId) {\n\n P = new AlertController.AlertParams(new ContextThemeWrapper(context, resolveDialogTheme(context, themeResId)));\n        }\n```\n\n<a name=\"uQJkb\"></a>\n#### 可维护性强\n由于Builder设计模式的参数，达到功能的多变，可维护性就变得很强<br />例如：可以 调用setMessage(\"你确定删除吗\")，也可以去掉\n<a name=\"rxztf\"></a>\n## ToolBar的设计，抽象化\n\n<a name=\"3dhnt\"></a>\n### 接口抽象toolbar的规范public interface INavigation\n\n```java\n/**\n * 所有Toolbar的规范\n * 抽象一个Toolbar\n * \n * Created by 辉神 on 2016/8/10.\n */\n\npublic interface INavigation {\n    /**\n     * 定义布局（返回布局id）\n     * @return\n     */\n    public int bindLayoutId();\n\n    /**\n     * 创建和绑定布局\n     */\n    public void build();\n}\n```\n\n<a name=\"9uiSL\"></a>\n### 抽象并实现INavigation——public abstract class AbsNavigation\n\n```java\n/**\n * 再次抽象Toolbar\n * -只要是app的开发，都会有布局的创建和绑定\n * -再次抽象，是为了，下次使用时，不用再次创建布局和绑定\n * Created by 辉神 on 2016/8/10.\n */\n\npublic abstract class AbsNavigation<P extends AbsNavigation.NavigationParams> implements INavigation {\n    /**\n     *     设置一个默认LayoutId，默认为0\n     */\n    private static final  int DEFAULT_LAYOUT_ID=0;\n    private P params;\n    private View contentView;\n\n    public AbsNavigation(P params) {\n        this.params = params;\n    }\n\n    public P getParams() {\n        return  params;\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return DEFAULT_LAYOUT_ID;\n    }\n\n    @Override\n    public void build() {\n        //创建和绑定布局\n        if (contentView==null)\n        contentView = bindParent(bindLayoutId(), ((NavigationParams)getParams()).parent);\n    }\n\n    /**\n     * 方便子类使用\n     * @param id\n     * @return\n     */\n    public View findLayoutById(int id){\n        return contentView!=null?contentView.findViewById(id):null;\n    }\n    public String getString(int id){\n        return contentView.getContext().getResources().getString(id);\n    }\n\n    public View bindParent(int id, ViewGroup parent) {\n        //先要判断这个id是否为0\n        if (id==DEFAULT_LAYOUT_ID){\n            return null;\n        }\n        View childView = ((NavigationParams)getParams()).inflater.inflate(id, parent,false);\n        return bindParent(childView,parent);\n    }\n\n    public View bindParent(View childView, ViewGroup parent) {\n        ViewGroup viewParent= (ViewGroup) childView.getParent();\n        //如果他原来有一个爸爸了，就先把它爸爸干掉\n        if(viewParent!=null){\n            viewParent.removeView(childView);\n        }\n        //添加我们的爸爸给这个视图，因为一个视图不可能有两个爸爸\n        parent.addView(childView,0);\n        //将爸爸返回\n        return parent;\n    }\n\n    /**\n     * Builder设计模式，所有Toolbar都必须有的参数----------参数集（参数类）\n     */\n    public static class NavigationParams{\n        private Context context;//上下文对象，用于加载布局视图\n        private ViewGroup parent;//每一个布局视图都有一个爸爸\n        private LayoutInflater inflater;\n        public NavigationParams(Context context, ViewGroup parent) {\n            this.context = context;\n            this.parent = parent;\n            inflater=inflater.from(context);\n        }\n    }\n\n    /**\n     * 创建Toolbar\n     */\n    public abstract static class Builder{\n        public Builder(Context context,ViewGroup parent) {\n        }\n\n        /**\n         * 创建Toolbar\n         * @return\n         */\n        public abstract INavigation create();\n    }\n}\n```\n\n<a name=\"87mMM\"></a>\n### 搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\n\n```java\n/**\n * 左中右场场景，\n * 也就是先设置左中右的布局，子类可以实现更多内容\n * Created by 辉神 on 2016/8/11.\n */\n\npublic abstract class DefaultNavigation<P extends AbsNavigation.NavigationParams> extends AbsNavigation<P> {\n\n    public DefaultNavigation(P params) {\n        super(params);\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return R.layout.navigation_default;\n    }\n\n    @Override\n    public void build() {\n        super.build();//一定要super，因为要绑定左中右的父容器\n\n        //初始化父容器，布局框架\n        LinearLayout ll_left= (LinearLayout) findLayoutById(R.id.ll_left);\n        LinearLayout ll_center= (LinearLayout) findLayoutById(R.id.ll_center);\n        LinearLayout ll_right= (LinearLayout) findLayoutById(R.id.ll_right);\n\n        //以下方法都是抽象，显然，子类可以任意定义布局，达到动态改变，方便维护\n        //绑定布局也就是，将子布局添加到当前这个“左中右场景”中来\n        bindParent(bindLeftLayoutId(),ll_left);\n        bindParent(bindCenterLayoutId(),ll_center);\n        bindParent(bindRightLayoutId(),ll_right);\n        //初始化子布局\n        initLeftLayout(ll_left);\n        initCenterLayout(ll_center);\n        initRightLayout(ll_right);\n\n    }\n\n    /**\n     *返回左边布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindLeftLayoutId();\n\n    /**\n     * 返回中间布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindCenterLayoutId();\n\n    /**\n     * 返回右边布局ID—— 用于子布局（待子类实现）\n     * @return ID\n     */\n    public abstract int bindRightLayoutId();\n\n    /**\n     * 初始化左边的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initLeftLayout(View view);\n    /**\n     * 初始化中间的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initCenterLayout(View view);\n    /**\n     * 初始化右边的布局—— 用于子布局（待子类实现）\n     * @param view\n     * @return\n     */\n    public abstract void initRightLayout(View view);\n}\n```\n\n<a name=\"LbOY6\"></a>\n### 主页toolbar的实现——HomeNavigation\n\n```java\n/**\n * 默认的主页toolbar实现\n * Created by 辉神 on 2016/8/11.\n */\n\npublic class HomeNavigation extends DefaultNavigation<HomeNavigation.HomeNavigationParams> {\n\n    public HomeNavigation(HomeNavigationParams params) {\n        super(params);\n    }\n\n    /**\n     * 设置默认主页的参数\n     */\n    public static class HomeNavigationParams extends AbsNavigation.NavigationParams{\n        public int leftImageRes;\n        public int centerTitleRes;\n        public int rightImageRes;\n        public int rightTextRes;\n\n        public View.OnClickListener leftOnclickListener;\n        public View.OnClickListener rightOnClickListener;\n\n        public HomeNavigationParams(Context context, ViewGroup parent) {\n            super(context, parent);\n        }\n    }\n\n    /**\n     * 构建我们的Toolbar\n     * @return\n     */\n    public static class Builder extends AbsNavigation.Builder{\n        private HomeNavigationParams p;\n\n        public Builder(Context context, ViewGroup parent) {\n            super(context, parent);\n            this.p=new HomeNavigationParams(context,parent);\n        }\n        /**\n         *  设置左边的图片\n         */\n        public Builder setLeftImageRes(int leftImageRes){\n            this.p.leftImageRes=leftImageRes;\n            return this;\n        }\n\n        /**\n         * 设置中间标题\n         * @param centerTitleRes\n         * @return\n         */\n        public Builder setCenterTitleRes(int centerTitleRes){\n            this.p.centerTitleRes=centerTitleRes;\n            return this;\n        }\n\n        /**\n         * 设置右边图片\n         * @param rightImageRes\n         * @return\n         */\n        public Builder setRightImageRes(int rightImageRes){\n            this.p.rightImageRes=rightImageRes;\n            return this;\n        }\n\n        /**\n         * 设置右边文字\n         * @param rightTextRes\n         * @return\n         */\n        public Builder setRightTextRes(int rightTextRes){\n            this.p.rightTextRes=rightTextRes;\n            return this;\n        }\n\n        /**\n         * 设置左边监听事件\n         * @param leftOnclickListener\n         * @return\n         */\n        public Builder setLeftOnclickListener(View.OnClickListener leftOnclickListener){\n            this.p.leftOnclickListener=leftOnclickListener;\n            return this;\n        }\n\n        /**\n         * 设置右边监听事件\n         * @param rightOnClickListener\n         * @return\n         */\n        public Builder setRightOnClickListener(View.OnClickListener rightOnClickListener){\n            this.p.rightOnClickListener=rightOnClickListener;\n            return this;\n        }\n\n        /**\n         * <p>这个方法被调用了之后，还没有结束，还需要调用接口中的build()方法</p>\n         * <p>HomeNavigation的是上层父类，是INavigation的实现类，</p>\n         * <p>所以当前INavigation的build()方法被调用时，也就相当于接口回调了，builder设计模式也就完成</p>\n         * <p>用户还需要再调用最高层接口，已经设计好的方法build()方法</p>\n         * <p>这个builder设计模式简直屌炸天</p>\n         * @return\n         */\n        @Override\n        public INavigation create() {\n            return new HomeNavigation(p);\n        }\n    }\n\n    @Override\n    public int bindLayoutId() {\n        return super.bindLayoutId();\n    }\n\n    @Override\n    public int bindLeftLayoutId() {\n        return R.layout.navigation_default_left;\n    }\n\n    @Override\n    public int bindCenterLayoutId() {\n        return R.layout.navigation_default_center;\n    }\n\n    @Override\n    public int bindRightLayoutId() {\n        return R.layout.navigation_home_right;\n    }\n\n    @Override\n    public void initLeftLayout(View view) {\n        ImageView iv_default_left = (ImageView) view.findViewById(R.id.iv_default_left);\n        iv_default_left.setImageResource(getParams().leftImageRes);\n        iv_default_left.setOnClickListener(getParams().leftOnclickListener);\n    }\n\n    @Override\n    public void initCenterLayout(View view) {\n        TextView tv_default_center = (TextView) view.findViewById(R.id.tv_default_center);\n        tv_default_center.setText(getString(getParams().centerTitleRes));\n    }\n\n    @Override\n    public void initRightLayout(View view) {\n        TextView tv_home_right = (TextView) view.findViewById(R.id.tv_home_right);\n        tv_home_right.setText(getString(getParams().rightTextRes));\n        tv_home_right.setOnClickListener(getParams().rightOnClickListener);\n        ImageView iv_home_right= (ImageView) view.findViewById(R.id.iv_home_right);\n        iv_home_right.setImageResource(getParams().rightImageRes);\n        //启动金币动画\n        AnimationDrawable animationDrawable= (AnimationDrawable) iv_home_right.getBackground();\n        animationDrawable.start();\n    }\n}\n```\n\n<a name=\"gzCTn\"></a>\n### HomeNavigation的调用,即实例化\n\n```java\nprivate void initNavigation(View contentView) {\n\nHomeNavigation.Builder builder=new HomeNavigation.Builder\n(getActivity(), (ViewGroup) contentView);\n\n        builder.setLeftImageRes(R.mipmap.apk_all_top_nav)\n                .setCenterTitleRes(R.string.tabbar_home_text)\n                .setRightTextRes(R.string.nav_sign_in)\n                .setRightImageRes(R.drawable.anim_sign_coin)\n                .setLeftOnclickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n\t\t\t\t     ToastUtil .showToast(getActivity(),\n\t\t\t\t     \"点击了菜单\");\n                    }\n                })\n                .setRightOnClickListener\n                (new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        ToastUtil.showToast(getActivity(),\n                        \"点击了签到\");\n                    }\n                })\n                .create().build();\n\n    }\n```\n\n<a name=\"bmmNN\"></a>\n### 主页toolbar实现效果\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1560594037506-246261ac-6c1a-4a07-a2f5-10904d4e47a7.png#align=left&display=inline&height=217&originHeight=217&originWidth=321&size=0&status=done&width=321)\n\n<a name=\"cp07W\"></a>\n## 布局代码就不给了\n\n","slug":"yuque/使用Builder设计模式，设计ToolBar","published":1,"updated":"2020-02-29T07:15:14.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77nciof007zy8usrcnidfzl","content":"<p><a name=\"PLZoY\"></a></p>\n<h1 id=\"使用Builder设计模式，设计ToolBar\"><a href=\"#使用Builder设计模式，设计ToolBar\" class=\"headerlink\" title=\"使用Builder设计模式，设计ToolBar\"></a>使用Builder设计模式，设计ToolBar</h1><p><a name=\"nO5mk\"></a></p>\n<h2 id=\"Builder设计模式解析\"><a href=\"#Builder设计模式解析\" class=\"headerlink\" title=\"Builder设计模式解析\"></a>Builder设计模式解析</h2><p>android也有不地方采用了Builder设计模式的，比如NotificationCompat.Builder和AlertDialog.Builder就采用了Builder的设计模式</p>\n<p><a name=\"EhCjH\"></a></p>\n<h3 id=\"最典型的代码示例\"><a href=\"#最典型的代码示例\" class=\"headerlink\" title=\"最典型的代码示例\"></a>最典型的代码示例</h3><p><a name=\"4toIJ\"></a></p>\n<h4 id=\"NotificationCompat-Builder\"><a href=\"#NotificationCompat-Builder\" class=\"headerlink\" title=\"NotificationCompat.Builder\"></a>NotificationCompat.Builder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NotificationCompat.Builder mBuilder =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class=\"line\">        .setContentTitle(<span class=\"string\">\"My notification\"</span>)</span><br><span class=\"line\">        .setContentText(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Creates an explicit intent for an Activity in your app</span></span><br><span class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ResultActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The stack builder object will contain an artificial back stack for the</span></span><br><span class=\"line\"><span class=\"comment\">// started Activity.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that navigating backward from the Activity leads out of</span></span><br><span class=\"line\"><span class=\"comment\">// your application to the Home screen.</span></span><br><span class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// Adds the back stack for the Intent (but not the Intent itself)</span></span><br><span class=\"line\">stackBuilder.addParentStack(ResultActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack</span></span><br><span class=\"line\">stackBuilder.addNextIntent(resultIntent);</span><br><span class=\"line\">PendingIntent resultPendingIntent =</span><br><span class=\"line\">        stackBuilder.getPendingIntent(</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class=\"line\">        );</span><br><span class=\"line\">mBuilder.setContentIntent(resultPendingIntent);</span><br><span class=\"line\">NotificationManager mNotificationManager =</span><br><span class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\"><span class=\"comment\">// mId allows you to update the notification later on.</span></span><br><span class=\"line\">mNotificationManager.notify(mId, mBuilder.build());</span><br></pre></td></tr></table></figure>\n<p><a name=\"qoIBp\"></a></p>\n<h4 id=\"AlertDialog-Builder\"><a href=\"#AlertDialog-Builder\" class=\"headerlink\" title=\"AlertDialog.Builder\"></a>AlertDialog.Builder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder builder2=<span class=\"keyword\">new</span> AlertDialog.Builder(</span><br><span class=\"line\">getActivity(),R.style.AppTheme_NoActionBar);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder2.setTitle(<span class=\"string\">\"警告\"</span>)</span><br><span class=\"line\">        .setMessage(<span class=\"string\">\"你确定删除吗\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                ToastUtil.showToast(getActivity(),<span class=\"string\">\"你点击了取消\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">         .setPositiveButton(<span class=\"string\">\"确定\"</span>, </span><br><span class=\"line\">         <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        ToastUtil.showToast(getActivity(),</span><br><span class=\"line\">                        <span class=\"string\">\"你点击了确定\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">          &#125;) .create().show();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><a name=\"Abool\"></a></p>\n<h3 id=\"Builder设计模式的特点\"><a href=\"#Builder设计模式的特点\" class=\"headerlink\" title=\"Builder设计模式的特点\"></a>Builder设计模式的特点</h3><p><a name=\"PBxbY\"></a></p>\n<h4 id=\"参数化\"><a href=\"#参数化\" class=\"headerlink\" title=\"参数化\"></a>参数化</h4><p>AlertDialog.Builder里面会实例一个AlertController.AlertParams，里面包含大部分，创建AlertDialog的参数，实现功能的参数化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> themeResId)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> P = <span class=\"keyword\">new</span> AlertController.AlertParams(<span class=\"keyword\">new</span> ContextThemeWrapper(context, resolveDialogTheme(context, themeResId)));</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"uQJkb\"></a></p>\n<h4 id=\"可维护性强\"><a href=\"#可维护性强\" class=\"headerlink\" title=\"可维护性强\"></a>可维护性强</h4><p>由于Builder设计模式的参数，达到功能的多变，可维护性就变得很强<br>例如：可以 调用setMessage(“你确定删除吗”)，也可以去掉<br><a name=\"rxztf\"></a></p>\n<h2 id=\"ToolBar的设计，抽象化\"><a href=\"#ToolBar的设计，抽象化\" class=\"headerlink\" title=\"ToolBar的设计，抽象化\"></a>ToolBar的设计，抽象化</h2><p><a name=\"3dhnt\"></a></p>\n<h3 id=\"接口抽象toolbar的规范public-interface-INavigation\"><a href=\"#接口抽象toolbar的规范public-interface-INavigation\" class=\"headerlink\" title=\"接口抽象toolbar的规范public interface INavigation\"></a>接口抽象toolbar的规范public interface INavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有Toolbar的规范</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象一个Toolbar</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/10.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义布局（返回布局id）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建和绑定布局</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"9uiSL\"></a></p>\n<h3 id=\"抽象并实现INavigation——public-abstract-class-AbsNavigation\"><a href=\"#抽象并实现INavigation——public-abstract-class-AbsNavigation\" class=\"headerlink\" title=\"抽象并实现INavigation——public abstract class AbsNavigation\"></a>抽象并实现INavigation——public abstract class AbsNavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 再次抽象Toolbar</span></span><br><span class=\"line\"><span class=\"comment\"> * -只要是app的开发，都会有布局的创建和绑定</span></span><br><span class=\"line\"><span class=\"comment\"> * -再次抽象，是为了，下次使用时，不用再次创建布局和绑定</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/10.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsNavigation</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *     设置一个默认LayoutId，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span>  <span class=\"keyword\">int</span> DEFAULT_LAYOUT_ID=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> P params;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View contentView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbsNavigation</span><span class=\"params\">(P params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.params = params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> P <span class=\"title\">getParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DEFAULT_LAYOUT_ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建和绑定布局</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentView==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">        contentView = bindParent(bindLayoutId(), ((NavigationParams)getParams()).parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方便子类使用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">findLayoutById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contentView!=<span class=\"keyword\">null</span>?contentView.findViewById(id):<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contentView.getContext().getResources().getString(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">bindParent</span><span class=\"params\">(<span class=\"keyword\">int</span> id, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先要判断这个id是否为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id==DEFAULT_LAYOUT_ID)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        View childView = ((NavigationParams)getParams()).inflater.inflate(id, parent,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindParent(childView,parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">bindParent</span><span class=\"params\">(View childView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        ViewGroup viewParent= (ViewGroup) childView.getParent();</span><br><span class=\"line\">        <span class=\"comment\">//如果他原来有一个爸爸了，就先把它爸爸干掉</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(viewParent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            viewParent.removeView(childView);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加我们的爸爸给这个视图，因为一个视图不可能有两个爸爸</span></span><br><span class=\"line\">        parent.addView(childView,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将爸爸返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Builder设计模式，所有Toolbar都必须有的参数----------参数集（参数类）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationParams</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Context context;<span class=\"comment\">//上下文对象，用于加载布局视图</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> ViewGroup parent;<span class=\"comment\">//每一个布局视图都有一个爸爸</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LayoutInflater inflater;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavigationParams</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">            inflater=inflater.from(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context,ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 创建Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> INavigation <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"87mMM\"></a></p>\n<h3 id=\"搭建toolbar布局框架——abstract-class-DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\"><a href=\"#搭建toolbar布局框架——abstract-class-DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\" class=\"headerlink\" title=\"搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\"></a>搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 左中右场场景，</span></span><br><span class=\"line\"><span class=\"comment\"> * 也就是先设置左中右的布局，子类可以实现更多内容</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultNavigation</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>&lt;<span class=\"title\">P</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultNavigation</span><span class=\"params\">(P params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.build();<span class=\"comment\">//一定要super，因为要绑定左中右的父容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化父容器，布局框架</span></span><br><span class=\"line\">        LinearLayout ll_left= (LinearLayout) findLayoutById(R.id.ll_left);</span><br><span class=\"line\">        LinearLayout ll_center= (LinearLayout) findLayoutById(R.id.ll_center);</span><br><span class=\"line\">        LinearLayout ll_right= (LinearLayout) findLayoutById(R.id.ll_right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//以下方法都是抽象，显然，子类可以任意定义布局，达到动态改变，方便维护</span></span><br><span class=\"line\">        <span class=\"comment\">//绑定布局也就是，将子布局添加到当前这个“左中右场景”中来</span></span><br><span class=\"line\">        bindParent(bindLeftLayoutId(),ll_left);</span><br><span class=\"line\">        bindParent(bindCenterLayoutId(),ll_center);</span><br><span class=\"line\">        bindParent(bindRightLayoutId(),ll_right);</span><br><span class=\"line\">        <span class=\"comment\">//初始化子布局</span></span><br><span class=\"line\">        initLeftLayout(ll_left);</span><br><span class=\"line\">        initCenterLayout(ll_center);</span><br><span class=\"line\">        initRightLayout(ll_right);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *返回左边布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLeftLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回中间布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindCenterLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回右边布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindRightLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化左边的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initLeftLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化中间的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initCenterLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化右边的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initRightLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"LbOY6\"></a></p>\n<h3 id=\"主页toolbar的实现——HomeNavigation\"><a href=\"#主页toolbar的实现——HomeNavigation\" class=\"headerlink\" title=\"主页toolbar的实现——HomeNavigation\"></a>主页toolbar的实现——HomeNavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认的主页toolbar实现</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeNavigation</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultNavigation</span>&lt;<span class=\"title\">HomeNavigation</span>.<span class=\"title\">HomeNavigationParams</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeNavigation</span><span class=\"params\">(HomeNavigationParams params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置默认主页的参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeNavigationParams</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> leftImageRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> centerTitleRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rightImageRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rightTextRes;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> View.OnClickListener leftOnclickListener;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> View.OnClickListener rightOnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeNavigationParams</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context, parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建我们的Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> HomeNavigationParams p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context, parent);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p=<span class=\"keyword\">new</span> HomeNavigationParams(context,parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  设置左边的图片</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setLeftImageRes</span><span class=\"params\">(<span class=\"keyword\">int</span> leftImageRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.leftImageRes=leftImageRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置中间标题</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> centerTitleRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setCenterTitleRes</span><span class=\"params\">(<span class=\"keyword\">int</span> centerTitleRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.centerTitleRes=centerTitleRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边图片</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightImageRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightImageRes</span><span class=\"params\">(<span class=\"keyword\">int</span> rightImageRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightImageRes=rightImageRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边文字</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightTextRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightTextRes</span><span class=\"params\">(<span class=\"keyword\">int</span> rightTextRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightTextRes=rightTextRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置左边监听事件</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> leftOnclickListener</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setLeftOnclickListener</span><span class=\"params\">(View.OnClickListener leftOnclickListener)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.leftOnclickListener=leftOnclickListener;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边监听事件</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightOnClickListener</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightOnClickListener</span><span class=\"params\">(View.OnClickListener rightOnClickListener)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightOnClickListener=rightOnClickListener;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;这个方法被调用了之后，还没有结束，还需要调用接口中的build()方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;HomeNavigation的是上层父类，是INavigation的实现类，&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;所以当前INavigation的build()方法被调用时，也就相当于接口回调了，builder设计模式也就完成&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;用户还需要再调用最高层接口，已经设计好的方法build()方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;这个builder设计模式简直屌炸天&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> INavigation <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HomeNavigation(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.bindLayoutId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLeftLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default_left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindCenterLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default_center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindRightLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_home_right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initLeftLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        ImageView iv_default_left = (ImageView) view.findViewById(R.id.iv_default_left);</span><br><span class=\"line\">        iv_default_left.setImageResource(getParams().leftImageRes);</span><br><span class=\"line\">        iv_default_left.setOnClickListener(getParams().leftOnclickListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initCenterLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        TextView tv_default_center = (TextView) view.findViewById(R.id.tv_default_center);</span><br><span class=\"line\">        tv_default_center.setText(getString(getParams().centerTitleRes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initRightLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        TextView tv_home_right = (TextView) view.findViewById(R.id.tv_home_right);</span><br><span class=\"line\">        tv_home_right.setText(getString(getParams().rightTextRes));</span><br><span class=\"line\">        tv_home_right.setOnClickListener(getParams().rightOnClickListener);</span><br><span class=\"line\">        ImageView iv_home_right= (ImageView) view.findViewById(R.id.iv_home_right);</span><br><span class=\"line\">        iv_home_right.setImageResource(getParams().rightImageRes);</span><br><span class=\"line\">        <span class=\"comment\">//启动金币动画</span></span><br><span class=\"line\">        AnimationDrawable animationDrawable= (AnimationDrawable) iv_home_right.getBackground();</span><br><span class=\"line\">        animationDrawable.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"gzCTn\"></a></p>\n<h3 id=\"HomeNavigation的调用-即实例化\"><a href=\"#HomeNavigation的调用-即实例化\" class=\"headerlink\" title=\"HomeNavigation的调用,即实例化\"></a>HomeNavigation的调用,即实例化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initNavigation</span><span class=\"params\">(View contentView)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">HomeNavigation.Builder builder=<span class=\"keyword\">new</span> HomeNavigation.Builder</span><br><span class=\"line\">(getActivity(), (ViewGroup) contentView);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setLeftImageRes(R.mipmap.apk_all_top_nav)</span><br><span class=\"line\">                .setCenterTitleRes(R.string.tabbar_home_text)</span><br><span class=\"line\">                .setRightTextRes(R.string.nav_sign_in)</span><br><span class=\"line\">                .setRightImageRes(R.drawable.anim_sign_coin)</span><br><span class=\"line\">                .setLeftOnclickListener(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t     ToastUtil .showToast(getActivity(),</span><br><span class=\"line\">\t\t\t\t     <span class=\"string\">\"点击了菜单\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setRightOnClickListener</span><br><span class=\"line\">                (<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                        ToastUtil.showToast(getActivity(),</span><br><span class=\"line\">                        <span class=\"string\">\"点击了签到\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .create().build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"bmmNN\"></a></p>\n<h3 id=\"主页toolbar实现效果\"><a href=\"#主页toolbar实现效果\" class=\"headerlink\" title=\"主页toolbar实现效果\"></a>主页toolbar实现效果</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560594037506-246261ac-6c1a-4a07-a2f5-10904d4e47a7.png#align=left&amp;display=inline&amp;height=217&amp;originHeight=217&amp;originWidth=321&amp;size=0&amp;status=done&amp;width=321\" alt=\"\"></p>\n<p><a name=\"cp07W\"></a></p>\n<h2 id=\"布局代码就不给了\"><a href=\"#布局代码就不给了\" class=\"headerlink\" title=\"布局代码就不给了\"></a>布局代码就不给了</h2>","site":{"data":{}},"excerpt":"<p><a name=\"PLZoY\"></a></p>\n<h1 id=\"使用Builder设计模式，设计ToolBar\"><a href=\"#使用Builder设计模式，设计ToolBar\" class=\"headerlink\" title=\"使用Builder设计模式，设计ToolBar\"></a>使用Builder设计模式，设计ToolBar</h1><p><a name=\"nO5mk\"></a></p>\n<h2 id=\"Builder设计模式解析\"><a href=\"#Builder设计模式解析\" class=\"headerlink\" title=\"Builder设计模式解析\"></a>Builder设计模式解析</h2><p>android也有不地方采用了Builder设计模式的，比如NotificationCompat.Builder和AlertDialog.Builder就采用了Builder的设计模式</p>\n<p><a name=\"EhCjH\"></a></p>\n<h3 id=\"最典型的代码示例\"><a href=\"#最典型的代码示例\" class=\"headerlink\" title=\"最典型的代码示例\"></a>最典型的代码示例</h3><p><a name=\"4toIJ\"></a></p>\n<h4 id=\"NotificationCompat-Builder\"><a href=\"#NotificationCompat-Builder\" class=\"headerlink\" title=\"NotificationCompat.Builder\"></a>NotificationCompat.Builder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NotificationCompat.Builder mBuilder =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class=\"line\">        .setContentTitle(<span class=\"string\">\"My notification\"</span>)</span><br><span class=\"line\">        .setContentText(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Creates an explicit intent for an Activity in your app</span></span><br><span class=\"line\">Intent resultIntent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ResultActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The stack builder object will contain an artificial back stack for the</span></span><br><span class=\"line\"><span class=\"comment\">// started Activity.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that navigating backward from the Activity leads out of</span></span><br><span class=\"line\"><span class=\"comment\">// your application to the Home screen.</span></span><br><span class=\"line\">TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// Adds the back stack for the Intent (but not the Intent itself)</span></span><br><span class=\"line\">stackBuilder.addParentStack(ResultActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// Adds the Intent that starts the Activity to the top of the stack</span></span><br><span class=\"line\">stackBuilder.addNextIntent(resultIntent);</span><br><span class=\"line\">PendingIntent resultPendingIntent =</span><br><span class=\"line\">        stackBuilder.getPendingIntent(</span><br><span class=\"line\">            <span class=\"number\">0</span>,</span><br><span class=\"line\">            PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class=\"line\">        );</span><br><span class=\"line\">mBuilder.setContentIntent(resultPendingIntent);</span><br><span class=\"line\">NotificationManager mNotificationManager =</span><br><span class=\"line\">    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\"><span class=\"comment\">// mId allows you to update the notification later on.</span></span><br><span class=\"line\">mNotificationManager.notify(mId, mBuilder.build());</span><br></pre></td></tr></table></figure>\n<p><a name=\"qoIBp\"></a></p>\n<h4 id=\"AlertDialog-Builder\"><a href=\"#AlertDialog-Builder\" class=\"headerlink\" title=\"AlertDialog.Builder\"></a>AlertDialog.Builder</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlertDialog.Builder builder2=<span class=\"keyword\">new</span> AlertDialog.Builder(</span><br><span class=\"line\">getActivity(),R.style.AppTheme_NoActionBar);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder2.setTitle(<span class=\"string\">\"警告\"</span>)</span><br><span class=\"line\">        .setMessage(<span class=\"string\">\"你确定删除吗\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                ToastUtil.showToast(getActivity(),<span class=\"string\">\"你点击了取消\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">         .setPositiveButton(<span class=\"string\">\"确定\"</span>, </span><br><span class=\"line\">         <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialog, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    <span class=\"keyword\">int</span> which)</span> </span>&#123;</span><br><span class=\"line\">                        ToastUtil.showToast(getActivity(),</span><br><span class=\"line\">                        <span class=\"string\">\"你点击了确定\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">          &#125;) .create().show();</span><br></pre></td></tr></table></figure>","more":"<p><a name=\"Abool\"></a></p>\n<h3 id=\"Builder设计模式的特点\"><a href=\"#Builder设计模式的特点\" class=\"headerlink\" title=\"Builder设计模式的特点\"></a>Builder设计模式的特点</h3><p><a name=\"PBxbY\"></a></p>\n<h4 id=\"参数化\"><a href=\"#参数化\" class=\"headerlink\" title=\"参数化\"></a>参数化</h4><p>AlertDialog.Builder里面会实例一个AlertController.AlertParams，里面包含大部分，创建AlertDialog的参数，实现功能的参数化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> themeResId)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> P = <span class=\"keyword\">new</span> AlertController.AlertParams(<span class=\"keyword\">new</span> ContextThemeWrapper(context, resolveDialogTheme(context, themeResId)));</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"uQJkb\"></a></p>\n<h4 id=\"可维护性强\"><a href=\"#可维护性强\" class=\"headerlink\" title=\"可维护性强\"></a>可维护性强</h4><p>由于Builder设计模式的参数，达到功能的多变，可维护性就变得很强<br>例如：可以 调用setMessage(“你确定删除吗”)，也可以去掉<br><a name=\"rxztf\"></a></p>\n<h2 id=\"ToolBar的设计，抽象化\"><a href=\"#ToolBar的设计，抽象化\" class=\"headerlink\" title=\"ToolBar的设计，抽象化\"></a>ToolBar的设计，抽象化</h2><p><a name=\"3dhnt\"></a></p>\n<h3 id=\"接口抽象toolbar的规范public-interface-INavigation\"><a href=\"#接口抽象toolbar的规范public-interface-INavigation\" class=\"headerlink\" title=\"接口抽象toolbar的规范public interface INavigation\"></a>接口抽象toolbar的规范public interface INavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有Toolbar的规范</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象一个Toolbar</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/10.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义布局（返回布局id）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建和绑定布局</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"9uiSL\"></a></p>\n<h3 id=\"抽象并实现INavigation——public-abstract-class-AbsNavigation\"><a href=\"#抽象并实现INavigation——public-abstract-class-AbsNavigation\" class=\"headerlink\" title=\"抽象并实现INavigation——public abstract class AbsNavigation\"></a>抽象并实现INavigation——public abstract class AbsNavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 再次抽象Toolbar</span></span><br><span class=\"line\"><span class=\"comment\"> * -只要是app的开发，都会有布局的创建和绑定</span></span><br><span class=\"line\"><span class=\"comment\"> * -再次抽象，是为了，下次使用时，不用再次创建布局和绑定</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/10.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsNavigation</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">INavigation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *     设置一个默认LayoutId，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span>  <span class=\"keyword\">int</span> DEFAULT_LAYOUT_ID=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> P params;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View contentView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbsNavigation</span><span class=\"params\">(P params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.params = params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> P <span class=\"title\">getParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DEFAULT_LAYOUT_ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建和绑定布局</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (contentView==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">        contentView = bindParent(bindLayoutId(), ((NavigationParams)getParams()).parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方便子类使用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">findLayoutById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contentView!=<span class=\"keyword\">null</span>?contentView.findViewById(id):<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getString</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> contentView.getContext().getResources().getString(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">bindParent</span><span class=\"params\">(<span class=\"keyword\">int</span> id, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先要判断这个id是否为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id==DEFAULT_LAYOUT_ID)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        View childView = ((NavigationParams)getParams()).inflater.inflate(id, parent,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindParent(childView,parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">bindParent</span><span class=\"params\">(View childView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        ViewGroup viewParent= (ViewGroup) childView.getParent();</span><br><span class=\"line\">        <span class=\"comment\">//如果他原来有一个爸爸了，就先把它爸爸干掉</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(viewParent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            viewParent.removeView(childView);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加我们的爸爸给这个视图，因为一个视图不可能有两个爸爸</span></span><br><span class=\"line\">        parent.addView(childView,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将爸爸返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Builder设计模式，所有Toolbar都必须有的参数----------参数集（参数类）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationParams</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Context context;<span class=\"comment\">//上下文对象，用于加载布局视图</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> ViewGroup parent;<span class=\"comment\">//每一个布局视图都有一个爸爸</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LayoutInflater inflater;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavigationParams</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">            inflater=inflater.from(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context,ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 创建Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> INavigation <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"87mMM\"></a></p>\n<h3 id=\"搭建toolbar布局框架——abstract-class-DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\"><a href=\"#搭建toolbar布局框架——abstract-class-DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\" class=\"headerlink\" title=\"搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）\"></a>搭建toolbar布局框架——abstract class DefaultNavigation（多个子类（功能）继承此父类，功能需求就可以多变）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 左中右场场景，</span></span><br><span class=\"line\"><span class=\"comment\"> * 也就是先设置左中右的布局，子类可以实现更多内容</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultNavigation</span>&lt;<span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>&lt;<span class=\"title\">P</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultNavigation</span><span class=\"params\">(P params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.build();<span class=\"comment\">//一定要super，因为要绑定左中右的父容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化父容器，布局框架</span></span><br><span class=\"line\">        LinearLayout ll_left= (LinearLayout) findLayoutById(R.id.ll_left);</span><br><span class=\"line\">        LinearLayout ll_center= (LinearLayout) findLayoutById(R.id.ll_center);</span><br><span class=\"line\">        LinearLayout ll_right= (LinearLayout) findLayoutById(R.id.ll_right);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//以下方法都是抽象，显然，子类可以任意定义布局，达到动态改变，方便维护</span></span><br><span class=\"line\">        <span class=\"comment\">//绑定布局也就是，将子布局添加到当前这个“左中右场景”中来</span></span><br><span class=\"line\">        bindParent(bindLeftLayoutId(),ll_left);</span><br><span class=\"line\">        bindParent(bindCenterLayoutId(),ll_center);</span><br><span class=\"line\">        bindParent(bindRightLayoutId(),ll_right);</span><br><span class=\"line\">        <span class=\"comment\">//初始化子布局</span></span><br><span class=\"line\">        initLeftLayout(ll_left);</span><br><span class=\"line\">        initCenterLayout(ll_center);</span><br><span class=\"line\">        initRightLayout(ll_right);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *返回左边布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLeftLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回中间布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindCenterLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回右边布局ID—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">bindRightLayoutId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化左边的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initLeftLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化中间的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initCenterLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化右边的布局—— 用于子布局（待子类实现）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">initRightLayout</span><span class=\"params\">(View view)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"LbOY6\"></a></p>\n<h3 id=\"主页toolbar的实现——HomeNavigation\"><a href=\"#主页toolbar的实现——HomeNavigation\" class=\"headerlink\" title=\"主页toolbar的实现——HomeNavigation\"></a>主页toolbar的实现——HomeNavigation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认的主页toolbar实现</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by 辉神 on 2016/8/11.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeNavigation</span> <span class=\"keyword\">extends</span> <span class=\"title\">DefaultNavigation</span>&lt;<span class=\"title\">HomeNavigation</span>.<span class=\"title\">HomeNavigationParams</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeNavigation</span><span class=\"params\">(HomeNavigationParams params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置默认主页的参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeNavigationParams</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">NavigationParams</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> leftImageRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> centerTitleRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rightImageRes;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> rightTextRes;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> View.OnClickListener leftOnclickListener;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> View.OnClickListener rightOnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeNavigationParams</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context, parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建我们的Toolbar</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbsNavigation</span>.<span class=\"title\">Builder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> HomeNavigationParams p;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(Context context, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context, parent);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p=<span class=\"keyword\">new</span> HomeNavigationParams(context,parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  设置左边的图片</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setLeftImageRes</span><span class=\"params\">(<span class=\"keyword\">int</span> leftImageRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.leftImageRes=leftImageRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置中间标题</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> centerTitleRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setCenterTitleRes</span><span class=\"params\">(<span class=\"keyword\">int</span> centerTitleRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.centerTitleRes=centerTitleRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边图片</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightImageRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightImageRes</span><span class=\"params\">(<span class=\"keyword\">int</span> rightImageRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightImageRes=rightImageRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边文字</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightTextRes</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightTextRes</span><span class=\"params\">(<span class=\"keyword\">int</span> rightTextRes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightTextRes=rightTextRes;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置左边监听事件</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> leftOnclickListener</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setLeftOnclickListener</span><span class=\"params\">(View.OnClickListener leftOnclickListener)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.leftOnclickListener=leftOnclickListener;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置右边监听事件</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> rightOnClickListener</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setRightOnClickListener</span><span class=\"params\">(View.OnClickListener rightOnClickListener)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.p.rightOnClickListener=rightOnClickListener;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;这个方法被调用了之后，还没有结束，还需要调用接口中的build()方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;HomeNavigation的是上层父类，是INavigation的实现类，&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;所以当前INavigation的build()方法被调用时，也就相当于接口回调了，builder设计模式也就完成&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;用户还需要再调用最高层接口，已经设计好的方法build()方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;这个builder设计模式简直屌炸天&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> INavigation <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HomeNavigation(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.bindLayoutId();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindLeftLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default_left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindCenterLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_default_center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">bindRightLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.layout.navigation_home_right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initLeftLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        ImageView iv_default_left = (ImageView) view.findViewById(R.id.iv_default_left);</span><br><span class=\"line\">        iv_default_left.setImageResource(getParams().leftImageRes);</span><br><span class=\"line\">        iv_default_left.setOnClickListener(getParams().leftOnclickListener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initCenterLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        TextView tv_default_center = (TextView) view.findViewById(R.id.tv_default_center);</span><br><span class=\"line\">        tv_default_center.setText(getString(getParams().centerTitleRes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initRightLayout</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        TextView tv_home_right = (TextView) view.findViewById(R.id.tv_home_right);</span><br><span class=\"line\">        tv_home_right.setText(getString(getParams().rightTextRes));</span><br><span class=\"line\">        tv_home_right.setOnClickListener(getParams().rightOnClickListener);</span><br><span class=\"line\">        ImageView iv_home_right= (ImageView) view.findViewById(R.id.iv_home_right);</span><br><span class=\"line\">        iv_home_right.setImageResource(getParams().rightImageRes);</span><br><span class=\"line\">        <span class=\"comment\">//启动金币动画</span></span><br><span class=\"line\">        AnimationDrawable animationDrawable= (AnimationDrawable) iv_home_right.getBackground();</span><br><span class=\"line\">        animationDrawable.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"gzCTn\"></a></p>\n<h3 id=\"HomeNavigation的调用-即实例化\"><a href=\"#HomeNavigation的调用-即实例化\" class=\"headerlink\" title=\"HomeNavigation的调用,即实例化\"></a>HomeNavigation的调用,即实例化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initNavigation</span><span class=\"params\">(View contentView)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">HomeNavigation.Builder builder=<span class=\"keyword\">new</span> HomeNavigation.Builder</span><br><span class=\"line\">(getActivity(), (ViewGroup) contentView);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.setLeftImageRes(R.mipmap.apk_all_top_nav)</span><br><span class=\"line\">                .setCenterTitleRes(R.string.tabbar_home_text)</span><br><span class=\"line\">                .setRightTextRes(R.string.nav_sign_in)</span><br><span class=\"line\">                .setRightImageRes(R.drawable.anim_sign_coin)</span><br><span class=\"line\">                .setLeftOnclickListener(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t     ToastUtil .showToast(getActivity(),</span><br><span class=\"line\">\t\t\t\t     <span class=\"string\">\"点击了菜单\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setRightOnClickListener</span><br><span class=\"line\">                (<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                        ToastUtil.showToast(getActivity(),</span><br><span class=\"line\">                        <span class=\"string\">\"点击了签到\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .create().build();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"bmmNN\"></a></p>\n<h3 id=\"主页toolbar实现效果\"><a href=\"#主页toolbar实现效果\" class=\"headerlink\" title=\"主页toolbar实现效果\"></a>主页toolbar实现效果</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560594037506-246261ac-6c1a-4a07-a2f5-10904d4e47a7.png#align=left&amp;display=inline&amp;height=217&amp;originHeight=217&amp;originWidth=321&amp;size=0&amp;status=done&amp;width=321\" alt=\"\"></p>\n<p><a name=\"cp07W\"></a></p>\n<h2 id=\"布局代码就不给了\"><a href=\"#布局代码就不给了\" class=\"headerlink\" title=\"布局代码就不给了\"></a>布局代码就不给了</h2>"},{"title":"语雀之语雀+serverless+travis CI+hexo+github搭建云写作博客","urlname":"ovhm8r","date":"2019-01-27T06:02:59.000Z","_content":"\n\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  <br />[如何在github上创建个人博客——图片链接失效了，我后面会再更新](https://iszengmh.github.io/2017/01/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/)  <br />[手把手教你使用Travis CI自动部署你的Hexo博客到Github上——简书@SmileUsers](https://www.jianshu.com/p/e22c13d85659)  \n\n<a name=\"58378f0d\"></a>\n# 正文\n<a name=\"7118d588\"></a>\n## 注意：语雀触发Webhook调用serverless，我配置失败了\n\n1. 语雀触发Webhook调用serverless，我也不明白为什么失败，语雀更新了文档没有自动触发webhook，所以如果想要完整实现的朋友不用继续往下看，可以到参考链接上看，大神可能已经实现，可以到评论区咨询他。\n1. 由于我是完成之后再可能有部分示例不完整\n<a name=\"VnktN\"></a>\n## serverless原来没有配置错（时间201906151835）\n2019年6月15日，发现无服务云函数可以触发了，serverless无服务云函数原来没有配置错，travis-ci网站推送邮箱通过提示构建成功，可能是语雀的bug，现在语雀修复好了，之前一直是手动在travis-ci手动执行自动构建的。<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560595105965-049a7a9c-02bb-437c-b9ad-eaa891c5bf36.png#align=left&display=inline&height=510&name=%E5%9B%BE%E7%89%87.png&originHeight=510&originWidth=1263&size=35278&status=done&width=1263)\n\n<!--more-->\n<a name=\"494d782c\"></a>\n## hexo+github\n这是我以之前有写此类教程，这里就不再赘述了，网上教程也很多\n<a name=\"98a4d905\"></a>\n## travis CI自动构建部署github博客\n> 请看下面这张图，引用[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  \n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1548570430080-765faf89-daf4-47e3-9390-2d5248c8f03c.png#align=left&display=inline&height=262&originHeight=281&originWidth=800&size=0&status=done&width=746)<br />travis的配置其实很简单，虽然我之前一直失败，原因都是语法或者是命令错误\n\n <br /><!--more-->\n\n<a name=\"0c12471c\"></a>\n### 首先需要配置一个新仓库，或者一个新分支\n我这里选择创建一个新分支**blog**进行配置，**blog**这个分支是用于存放未进行构建的源码，而**master**分支为作为构建后输出目录，等下我们在**travis.yml**会配置跟踪**blog**这个分支，一旦**blog**有新提交，travis会立即拉取**blog**分支进行构建，并推送github的**master**分支，剩下就靠你已经部署好的**hexo+github**自动部署\n\n1. **master**分支为输出目录，可以查看我仓库[iszengmh.github.io](https://github.com/iszengmh/iszengmh.github.io)这个仓库![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548571962065-2887ec31-fe23-4b1d-922e-11b0be8d1dff.png#align=left&display=inline&height=594&name=image.png&originHeight=594&originWidth=930&size=75111&status=done&width=930)\n1. **blog**分支为输出目录，可以查看我仓库[iszengmh.github.io](https://github.com/iszengmh/iszengmh.github.io)这个仓库\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548572128842-d7f15a4f-ab97-451e-ace8-066621ca9ce6.png#align=left&display=inline&height=557&name=image.png&originHeight=557&originWidth=933&size=82045&status=done&width=933)\n<a name=\"d2f92a63\"></a>\n### 在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行\n至于如何将blog的代码更换为源码，其实只需将blog分支克隆下来，删除原文件，再将源码提交，并push到远程分支即可，**需要先在源码分目录下创建.travis.yml**， 以下是我的配置文件，travis后台会跟踪**blog**分支，并读取**.travis.yml**中的命令执行\n\n\n```yaml\n #设置语言\nlanguage: node_js  \n# 指定需要sudo权限\nsudo: required\n#设置相应的版本\nnode_js: \n  - 10.15.0\n# 指定缓存模块，可选。缓存可加快编译速度。\ncache:\n    directories:\n        - node_modules    \nbefore_install:\n  - npm install -g hexo-cli\n#安装hexo及插件\ninstall:\n  - npm install   \n  - npm install hexo-deployer-git --save\n  - npm i -g yuque-hexo\n# yuque-hexo clean 清除语雀文章,并清除“yuque-hexo”的json文件“yuque.json”\n# yuque-hexo sync 同步语雀的文章，并创建json文件“yuque.json”\n# hexo clean 清理文章\n# hexo generate 重新发布文章\nscript:\n  - yuque-hexo clean\n  - yuque-hexo sync\n  - hexo clean\n  - hexo generate\n\n# iszengmh修改成自己的github用户名\n# iszengmh@qq.com修改成自己的GitHub邮箱\n# GH_token就是在travis中设置的token，等下会告诉大家怎么配置\n# GH_REF 是下面仓库地址\nafter_script:\n  - cd ./public\n  - git init\n  - git config user.name \"iszengmh\"   \n  - git config user.email \"iszengmh@qq.com\"   \n  - git add .\n  - git commit -m \"update by Travis-CI\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master \n #只监测这个分支，一有动静就开始构建\nbranches:\n  only:\n  - blog \n# GH_REF 仓库地址\nenv:\n    global:\n        - GH_REF: github.com/iszengmh/iszengmh.github.io.git\n```\n<a name=\"7cdf68eb\"></a>\n### 修改_config.yml中的发布设置\n修改仓库地址，增加gh_token\n```yaml\n\n#发布设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  ## 修改仓库地址，增加gh_token\n  repo: https://gh_token@github.com/iszengmh/iszengmh.github.io.git\n  branch: master\n  message: 我的博客\n#头像\navatar: /blog_head.jpg\n```\n\n- push到远程origin的blog分支，一定要注意push远程分支blog，我之前一直提交错误\n\n```bash\ngit push origin blog\n```\n\n<a name=\"7e044a76\"></a>\n### 配置travis后台同步,跟踪\n[travis网站](https://travis-ci.org/)\n\n- 去github官网先配置一个token，并复制token，用于其他用户作提交\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574333248-0cc50f8e-5045-4139-8eaf-3d086ed930cf.png#align=left&display=inline&height=378&name=image.png&originHeight=378&originWidth=1022&size=41927&status=done&width=1022)\n\n- 勾选同步，并进入setting \n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574028361-9bea90c6-b1e0-4dbd-8e2a-ce197f6c70c7.png#align=left&display=inline&height=577&name=image.png&originHeight=577&originWidth=1180&size=66727&status=done&width=1180)\n\n- 配置变更GH_TOKEN，value那里请输入github的token\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574251748-8dfe579d-601a-434f-a138-0f154b6cb74c.png#align=left&display=inline&height=231&name=image.png&originHeight=231&originWidth=1060&size=19010&status=done&width=1060)\n\n<a name=\"70f6f3c2\"></a>\n### travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建 \n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574498837-6fd3d668-101f-468e-8723-db0edcbd33ba.png#align=left&display=inline&height=323&name=image.png&originHeight=323&originWidth=1026&size=32717&status=done&width=1026)\n<a name=\"d4c6d8c7\"></a>\n## 语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\n<a name=\"98d0e9c2\"></a>\n### 先需要腾讯云无服务云函数\n腾讯云或者阿里云都可以，我是选择腾讯云，在控制台新建函数<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548580798367-54082aeb-2989-47c5-9583-e6cf107fcbdb.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=681&size=27779&status=done&width=681)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548580946060-3a407941-963e-4e78-b090-150a8959217e.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=897&size=31517&status=done&width=897)\n<a name=\"9b67166a\"></a>\n### 输入函数代码\n此函数来自[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  \n\n```php\n<?php\nfunction main_handler($event, $context) {\n    // 解析语雀post的数据\n    $update_title = '';\n    if($event->body){\n        $yuque_data= json_decode($event->body);\n        $update_title .= $yuque_data->data->title;\n    }\n    // default params\n    $repos = 'xxxx';  // 你的仓库id 或 slug\n    $token = 'xxxxxx'; // 你的登录token\n    $message = date(\"Y/m/d\").':yuque update:'.$update_title;\n    $branch = 'master';\n    // post params\n    $queryString = $event->queryString;\n    $q_token = $queryString->token ? $queryString->token : $token;\n    $q_repos = $queryString->repos ? $queryString->repos : $repos;\n    $q_message = $queryString->message ? $queryString->message : $message;\n    $q_branch = $queryString->branch ? $queryString->branch : 'master';\n    echo($q_token);\n    echo('===');\n    echo ($q_repos);\n    echo ('===');\n    echo ($q_message);\n    echo ('===');\n    echo ($q_branch);\n    echo ('===');\n    //request travis ci\n    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);\n\n    $res_code = 0;\n    $res_message = '未知';\n    if($res_info['http_code']){\n        $res_code = $res_info['http_code'];\n        switch($res_info['http_code']){\n            case 200:\n            case 202:\n                $res_message = 'success';\n            break;\n            default:\n                $res_message = 'faild';\n            break;\n        }\n    }\n    $res = array(\n        'status'=>$res_code,\n        'message'=>$res_message\n    );\n    return $res;\n}\n\n/*\n* @description  travis api , trigger a build\n* @param $repos string 仓库ID、slug\n* @param $token string 登录验证token\n* @param $message string 触发信息\n* @param $branch string 分支\n* @return $info array 回包信息\n*/\nfunction triggerTravisCI ($repos, $token, $message='yuque update', $branch='master') {\n    //初始化\n    $curl = curl_init();\n    //设置抓取的url\n    curl_setopt($curl, CURLOPT_URL, 'https://api.travis-ci.org/repo/'.$repos.'/requests');\n    //设置获取的信息以文件流的形式返回，而不是直接输出。\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    //设置post方式提交\n    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n    //设置post数据\n    $post_data = json_encode(array(\n        \"request\"=> array(\n            \"message\"=>$message,\n            \"branch\"=>$branch\n        )\n    ));\n    $header = array(\n      'Content-Type: application/json',\n      'Travis-API-Version: 3',\n      'Authorization:token '.$token,\n      'Content-Length:' . strlen($post_data)\n    );\n    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);\n    //执行命令\n    $data = curl_exec($curl);\n    $info = curl_getinfo($curl);\n    //关闭URL请求\n    curl_close($curl);\n    return $info;\n}\n?>\n```\n<a name=\"b96d88cb\"></a>\n### 查看repo的id和token\n\n- travis登录token，在travis-ci.org 中设置界面获取：\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548581610483-75a884f9-2810-4176-b739-655c803c4121.png#align=left&display=inline&height=409&name=image.png&originHeight=409&originWidth=1236&size=46342&status=done&width=1236)\n\n- 获取travis的仓库ID\n\n在后台进入对应在仓库，travis会请求仓库地址，所以直接找到相似链接，链接路径名就仓库ID，路径像这个https://api.travis-ci.org/repo/<你的仓库ID>\n参考链接中说需要请求API，但是我操作了半天不知道为什么一直提示方法不可用，所以投机取巧找这个方法\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548585058267-ef4c79df-3e21-47df-b5d5-9c3166dd3774.png#align=left&display=inline&height=508&name=image.png&originHeight=508&originWidth=1146&size=179654&status=done&width=1146)\n\n<a name=\"a2169335\"></a>\n### 在语雀中新建知识库，然后设置开发者\n最好先看一下[语雀开发文档](https://www.yuque.com/yuque/developer)\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548581236420-c369b9fe-501f-4ede-bcc1-098d55efb2f0.png#align=left&display=inline&height=544&name=image.png&originHeight=544&originWidth=1148&size=49627&status=done&width=1148)\n\n其中“所有更新触发”是指，有文档新增或者变更时，自动触发，而“仅主动推送更新触发”是指在勾选“文档有较大更新时，推送给关注的人”时，才会触发Webhook，具体请看文档[WebHook 说明](https://www.yuque.com/yuque/developer/doc-webhook#wooqpi)\n无服务函数（请到对应云平台去复制，并加入参数）示例：\n\n```http\nhttps://service-<…………>.ap-guangzhou.apigateway.myqcloud.com/release/main_handler?repos=<your travis's repo ID>&token=<your travis token>&message=语雀自动提交&branch=blog\n```\n\n\n<a name=\"8f1d0c76\"></a>\n## yuque-hexo开源项目用于同步语雀\n<a name=\"b173dbb6\"></a>\n### 需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置\n\n```\nscript:\n  - yuque-hexo clean\n  - yuque-hexo sync\n  - hexo clean\n  - hexo generate\n```\n<a name=\"7dee264f\"></a>\n### 配置package.json\n以下注释，一定要删除，json文件不能使用注释，这里只作说明，[开源项目地址](https://github.com/x-cold/yuque-hexo)\n> login————这里是你语雀的个人主页链接的路径名，例如[https://www.yuque.com/iszengmh/](https://www.yuque.com/iszengmh/p)\n> repo————这里是你语雀的个人主页知识库的路径名，例如[https://www.yuque.com/iszengmh/personalblog](https://www.yuque.com/iszengmh/p)\n> mdNameFormat 生成的 Markdown 文件的文件名，可以选择 \"title\" 或者 \"slug\"，默认 \"title\"，slug 是语雀的永久链接名，一般是几个随机字母。\n> postPath 存放从语雀下载的 Markdown 文件的文件夹，除了 Hexo ，理论上可以支持其他支持 Front-matter 的 Markdown 静态博客\n\n\n```json\n  //………………………………\n  },//注意补上逗号哦，不然后会报错\n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"iszengmh\",\n    \"repo\": \"personalblog\",\n    \"mdNameFormat\": \"title\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n  \"scripts\": {\n    \"clean\": \"hexo clean\",\n    \"clean:yuque\": \"DEBUG=yuque-hexo.* yuque-hexo clean\",\n    \"deploy\": \"hexo deploy\",\n    \"publish\": \"npm run clean && npm run deploy\",\n    \"dev\": \"hexo s\",\n    \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\",\n    \"reset\": \"npm run clean:yuque && npm run sync\"\n  }\n```\n\n<a name=\"b688a7aa\"></a>\n### 将修改的文件全部提交github的blog分支\n\n```bash\ngit add .\ngit commmit -m \"修改\"\ngit push -u origin blog\n```\n\n由于travis自动构建会自动发布到github的master分支\n<a name=\"eaf5275a\"></a>\n## 手动触发自动构建\n由于我的语雀配置没有自动触发travis更新，所以我自己去travis后台点击“restart build”可以同步并自动构建，这样也是可以的，本篇文章就是这样同步过去的\n<a name=\"d291dcca\"></a>\n## 语雀编写hexo的front-matter\n<a name=\"c902bb32\"></a>\n### 分类和标签，这样写\n\n```\ntags: [语雀,travis,serverless]\ncategories: 语雀\n---\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548591626703-f9f13701-5638-41c0-9b62-58838d3e7b9b.png#align=left&display=inline&height=310&name=image.png&originHeight=310&originWidth=751&size=33911&status=done&width=751)\n<a name=\"b18e6125\"></a>\n### 隐藏文章内容\n\n```\n<!--more-->\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548591735536-f1fb4021-44fa-4cc0-80c6-4758718b2fd7.png#align=left&display=inline&height=436&name=image.png&originHeight=436&originWidth=813&size=68156&status=done&width=813)\n\n<a name=\"0d881386\"></a>\n## 以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\n\n","source":"_posts/yuque/语雀之语雀+serverless+travis CI+hexo+github搭建云写作博客.md","raw":"\n---\n\ntitle: 语雀之语雀+serverless+travis CI+hexo+github搭建云写作博客\n\nurlname: ovhm8r\n\ndate: 2019-01-27 14:02:59 +0800\n\ntags: [语雀,travis,serverless]\n\ncategories: 语雀\n\n---\n\n\n<a name=\"ea6f3b87\"></a>\n# 参考链接\n[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  <br />[如何在github上创建个人博客——图片链接失效了，我后面会再更新](https://iszengmh.github.io/2017/01/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/)  <br />[手把手教你使用Travis CI自动部署你的Hexo博客到Github上——简书@SmileUsers](https://www.jianshu.com/p/e22c13d85659)  \n\n<a name=\"58378f0d\"></a>\n# 正文\n<a name=\"7118d588\"></a>\n## 注意：语雀触发Webhook调用serverless，我配置失败了\n\n1. 语雀触发Webhook调用serverless，我也不明白为什么失败，语雀更新了文档没有自动触发webhook，所以如果想要完整实现的朋友不用继续往下看，可以到参考链接上看，大神可能已经实现，可以到评论区咨询他。\n1. 由于我是完成之后再可能有部分示例不完整\n<a name=\"VnktN\"></a>\n## serverless原来没有配置错（时间201906151835）\n2019年6月15日，发现无服务云函数可以触发了，serverless无服务云函数原来没有配置错，travis-ci网站推送邮箱通过提示构建成功，可能是语雀的bug，现在语雀修复好了，之前一直是手动在travis-ci手动执行自动构建的。<br />![图片.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1560595105965-049a7a9c-02bb-437c-b9ad-eaa891c5bf36.png#align=left&display=inline&height=510&name=%E5%9B%BE%E7%89%87.png&originHeight=510&originWidth=1263&size=35278&status=done&width=1263)\n\n<!--more-->\n<a name=\"494d782c\"></a>\n## hexo+github\n这是我以之前有写此类教程，这里就不再赘述了，网上教程也很多\n<a name=\"98a4d905\"></a>\n## travis CI自动构建部署github博客\n> 请看下面这张图，引用[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  \n\n![](https://cdn.nlark.com/yuque/0/2019/png/244275/1548570430080-765faf89-daf4-47e3-9390-2d5248c8f03c.png#align=left&display=inline&height=262&originHeight=281&originWidth=800&size=0&status=done&width=746)<br />travis的配置其实很简单，虽然我之前一直失败，原因都是语法或者是命令错误\n\n <br /><!--more-->\n\n<a name=\"0c12471c\"></a>\n### 首先需要配置一个新仓库，或者一个新分支\n我这里选择创建一个新分支**blog**进行配置，**blog**这个分支是用于存放未进行构建的源码，而**master**分支为作为构建后输出目录，等下我们在**travis.yml**会配置跟踪**blog**这个分支，一旦**blog**有新提交，travis会立即拉取**blog**分支进行构建，并推送github的**master**分支，剩下就靠你已经部署好的**hexo+github**自动部署\n\n1. **master**分支为输出目录，可以查看我仓库[iszengmh.github.io](https://github.com/iszengmh/iszengmh.github.io)这个仓库![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548571962065-2887ec31-fe23-4b1d-922e-11b0be8d1dff.png#align=left&display=inline&height=594&name=image.png&originHeight=594&originWidth=930&size=75111&status=done&width=930)\n1. **blog**分支为输出目录，可以查看我仓库[iszengmh.github.io](https://github.com/iszengmh/iszengmh.github.io)这个仓库\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548572128842-d7f15a4f-ab97-451e-ace8-066621ca9ce6.png#align=left&display=inline&height=557&name=image.png&originHeight=557&originWidth=933&size=82045&status=done&width=933)\n<a name=\"d2f92a63\"></a>\n### 在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行\n至于如何将blog的代码更换为源码，其实只需将blog分支克隆下来，删除原文件，再将源码提交，并push到远程分支即可，**需要先在源码分目录下创建.travis.yml**， 以下是我的配置文件，travis后台会跟踪**blog**分支，并读取**.travis.yml**中的命令执行\n\n\n```yaml\n #设置语言\nlanguage: node_js  \n# 指定需要sudo权限\nsudo: required\n#设置相应的版本\nnode_js: \n  - 10.15.0\n# 指定缓存模块，可选。缓存可加快编译速度。\ncache:\n    directories:\n        - node_modules    \nbefore_install:\n  - npm install -g hexo-cli\n#安装hexo及插件\ninstall:\n  - npm install   \n  - npm install hexo-deployer-git --save\n  - npm i -g yuque-hexo\n# yuque-hexo clean 清除语雀文章,并清除“yuque-hexo”的json文件“yuque.json”\n# yuque-hexo sync 同步语雀的文章，并创建json文件“yuque.json”\n# hexo clean 清理文章\n# hexo generate 重新发布文章\nscript:\n  - yuque-hexo clean\n  - yuque-hexo sync\n  - hexo clean\n  - hexo generate\n\n# iszengmh修改成自己的github用户名\n# iszengmh@qq.com修改成自己的GitHub邮箱\n# GH_token就是在travis中设置的token，等下会告诉大家怎么配置\n# GH_REF 是下面仓库地址\nafter_script:\n  - cd ./public\n  - git init\n  - git config user.name \"iszengmh\"   \n  - git config user.email \"iszengmh@qq.com\"   \n  - git add .\n  - git commit -m \"update by Travis-CI\"\n  - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master \n #只监测这个分支，一有动静就开始构建\nbranches:\n  only:\n  - blog \n# GH_REF 仓库地址\nenv:\n    global:\n        - GH_REF: github.com/iszengmh/iszengmh.github.io.git\n```\n<a name=\"7cdf68eb\"></a>\n### 修改_config.yml中的发布设置\n修改仓库地址，增加gh_token\n```yaml\n\n#发布设置\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  ## 修改仓库地址，增加gh_token\n  repo: https://gh_token@github.com/iszengmh/iszengmh.github.io.git\n  branch: master\n  message: 我的博客\n#头像\navatar: /blog_head.jpg\n```\n\n- push到远程origin的blog分支，一定要注意push远程分支blog，我之前一直提交错误\n\n```bash\ngit push origin blog\n```\n\n<a name=\"7e044a76\"></a>\n### 配置travis后台同步,跟踪\n[travis网站](https://travis-ci.org/)\n\n- 去github官网先配置一个token，并复制token，用于其他用户作提交\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574333248-0cc50f8e-5045-4139-8eaf-3d086ed930cf.png#align=left&display=inline&height=378&name=image.png&originHeight=378&originWidth=1022&size=41927&status=done&width=1022)\n\n- 勾选同步，并进入setting \n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574028361-9bea90c6-b1e0-4dbd-8e2a-ce197f6c70c7.png#align=left&display=inline&height=577&name=image.png&originHeight=577&originWidth=1180&size=66727&status=done&width=1180)\n\n- 配置变更GH_TOKEN，value那里请输入github的token\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574251748-8dfe579d-601a-434f-a138-0f154b6cb74c.png#align=left&display=inline&height=231&name=image.png&originHeight=231&originWidth=1060&size=19010&status=done&width=1060)\n\n<a name=\"70f6f3c2\"></a>\n### travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建 \n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548574498837-6fd3d668-101f-468e-8723-db0edcbd33ba.png#align=left&display=inline&height=323&name=image.png&originHeight=323&originWidth=1026&size=32717&status=done&width=1026)\n<a name=\"d4c6d8c7\"></a>\n## 语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\n<a name=\"98d0e9c2\"></a>\n### 先需要腾讯云无服务云函数\n腾讯云或者阿里云都可以，我是选择腾讯云，在控制台新建函数<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548580798367-54082aeb-2989-47c5-9583-e6cf107fcbdb.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=681&size=27779&status=done&width=681)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548580946060-3a407941-963e-4e78-b090-150a8959217e.png#align=left&display=inline&height=503&name=image.png&originHeight=503&originWidth=897&size=31517&status=done&width=897)\n<a name=\"9b67166a\"></a>\n### 输入函数代码\n此函数来自[Hexo 博客终极玩法：云端写作，自动部署——segmentFault@](https://segmentfault.com/a/1190000017797561)[Nero](https://segmentfault.com/u/nerohua)  \n\n```php\n<?php\nfunction main_handler($event, $context) {\n    // 解析语雀post的数据\n    $update_title = '';\n    if($event->body){\n        $yuque_data= json_decode($event->body);\n        $update_title .= $yuque_data->data->title;\n    }\n    // default params\n    $repos = 'xxxx';  // 你的仓库id 或 slug\n    $token = 'xxxxxx'; // 你的登录token\n    $message = date(\"Y/m/d\").':yuque update:'.$update_title;\n    $branch = 'master';\n    // post params\n    $queryString = $event->queryString;\n    $q_token = $queryString->token ? $queryString->token : $token;\n    $q_repos = $queryString->repos ? $queryString->repos : $repos;\n    $q_message = $queryString->message ? $queryString->message : $message;\n    $q_branch = $queryString->branch ? $queryString->branch : 'master';\n    echo($q_token);\n    echo('===');\n    echo ($q_repos);\n    echo ('===');\n    echo ($q_message);\n    echo ('===');\n    echo ($q_branch);\n    echo ('===');\n    //request travis ci\n    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);\n\n    $res_code = 0;\n    $res_message = '未知';\n    if($res_info['http_code']){\n        $res_code = $res_info['http_code'];\n        switch($res_info['http_code']){\n            case 200:\n            case 202:\n                $res_message = 'success';\n            break;\n            default:\n                $res_message = 'faild';\n            break;\n        }\n    }\n    $res = array(\n        'status'=>$res_code,\n        'message'=>$res_message\n    );\n    return $res;\n}\n\n/*\n* @description  travis api , trigger a build\n* @param $repos string 仓库ID、slug\n* @param $token string 登录验证token\n* @param $message string 触发信息\n* @param $branch string 分支\n* @return $info array 回包信息\n*/\nfunction triggerTravisCI ($repos, $token, $message='yuque update', $branch='master') {\n    //初始化\n    $curl = curl_init();\n    //设置抓取的url\n    curl_setopt($curl, CURLOPT_URL, 'https://api.travis-ci.org/repo/'.$repos.'/requests');\n    //设置获取的信息以文件流的形式返回，而不是直接输出。\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    //设置post方式提交\n    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n    //设置post数据\n    $post_data = json_encode(array(\n        \"request\"=> array(\n            \"message\"=>$message,\n            \"branch\"=>$branch\n        )\n    ));\n    $header = array(\n      'Content-Type: application/json',\n      'Travis-API-Version: 3',\n      'Authorization:token '.$token,\n      'Content-Length:' . strlen($post_data)\n    );\n    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);\n    //执行命令\n    $data = curl_exec($curl);\n    $info = curl_getinfo($curl);\n    //关闭URL请求\n    curl_close($curl);\n    return $info;\n}\n?>\n```\n<a name=\"b96d88cb\"></a>\n### 查看repo的id和token\n\n- travis登录token，在travis-ci.org 中设置界面获取：\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548581610483-75a884f9-2810-4176-b739-655c803c4121.png#align=left&display=inline&height=409&name=image.png&originHeight=409&originWidth=1236&size=46342&status=done&width=1236)\n\n- 获取travis的仓库ID\n\n在后台进入对应在仓库，travis会请求仓库地址，所以直接找到相似链接，链接路径名就仓库ID，路径像这个https://api.travis-ci.org/repo/<你的仓库ID>\n参考链接中说需要请求API，但是我操作了半天不知道为什么一直提示方法不可用，所以投机取巧找这个方法\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548585058267-ef4c79df-3e21-47df-b5d5-9c3166dd3774.png#align=left&display=inline&height=508&name=image.png&originHeight=508&originWidth=1146&size=179654&status=done&width=1146)\n\n<a name=\"a2169335\"></a>\n### 在语雀中新建知识库，然后设置开发者\n最好先看一下[语雀开发文档](https://www.yuque.com/yuque/developer)\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548581236420-c369b9fe-501f-4ede-bcc1-098d55efb2f0.png#align=left&display=inline&height=544&name=image.png&originHeight=544&originWidth=1148&size=49627&status=done&width=1148)\n\n其中“所有更新触发”是指，有文档新增或者变更时，自动触发，而“仅主动推送更新触发”是指在勾选“文档有较大更新时，推送给关注的人”时，才会触发Webhook，具体请看文档[WebHook 说明](https://www.yuque.com/yuque/developer/doc-webhook#wooqpi)\n无服务函数（请到对应云平台去复制，并加入参数）示例：\n\n```http\nhttps://service-<…………>.ap-guangzhou.apigateway.myqcloud.com/release/main_handler?repos=<your travis's repo ID>&token=<your travis token>&message=语雀自动提交&branch=blog\n```\n\n\n<a name=\"8f1d0c76\"></a>\n## yuque-hexo开源项目用于同步语雀\n<a name=\"b173dbb6\"></a>\n### 需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置\n\n```\nscript:\n  - yuque-hexo clean\n  - yuque-hexo sync\n  - hexo clean\n  - hexo generate\n```\n<a name=\"7dee264f\"></a>\n### 配置package.json\n以下注释，一定要删除，json文件不能使用注释，这里只作说明，[开源项目地址](https://github.com/x-cold/yuque-hexo)\n> login————这里是你语雀的个人主页链接的路径名，例如[https://www.yuque.com/iszengmh/](https://www.yuque.com/iszengmh/p)\n> repo————这里是你语雀的个人主页知识库的路径名，例如[https://www.yuque.com/iszengmh/personalblog](https://www.yuque.com/iszengmh/p)\n> mdNameFormat 生成的 Markdown 文件的文件名，可以选择 \"title\" 或者 \"slug\"，默认 \"title\"，slug 是语雀的永久链接名，一般是几个随机字母。\n> postPath 存放从语雀下载的 Markdown 文件的文件夹，除了 Hexo ，理论上可以支持其他支持 Front-matter 的 Markdown 静态博客\n\n\n```json\n  //………………………………\n  },//注意补上逗号哦，不然后会报错\n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",\n    \"login\": \"iszengmh\",\n    \"repo\": \"personalblog\",\n    \"mdNameFormat\": \"title\",\n    \"postPath\": \"source/_posts/yuque\"\n  },\n  \"scripts\": {\n    \"clean\": \"hexo clean\",\n    \"clean:yuque\": \"DEBUG=yuque-hexo.* yuque-hexo clean\",\n    \"deploy\": \"hexo deploy\",\n    \"publish\": \"npm run clean && npm run deploy\",\n    \"dev\": \"hexo s\",\n    \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\",\n    \"reset\": \"npm run clean:yuque && npm run sync\"\n  }\n```\n\n<a name=\"b688a7aa\"></a>\n### 将修改的文件全部提交github的blog分支\n\n```bash\ngit add .\ngit commmit -m \"修改\"\ngit push -u origin blog\n```\n\n由于travis自动构建会自动发布到github的master分支\n<a name=\"eaf5275a\"></a>\n## 手动触发自动构建\n由于我的语雀配置没有自动触发travis更新，所以我自己去travis后台点击“restart build”可以同步并自动构建，这样也是可以的，本篇文章就是这样同步过去的\n<a name=\"d291dcca\"></a>\n## 语雀编写hexo的front-matter\n<a name=\"c902bb32\"></a>\n### 分类和标签，这样写\n\n```\ntags: [语雀,travis,serverless]\ncategories: 语雀\n---\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548591626703-f9f13701-5638-41c0-9b62-58838d3e7b9b.png#align=left&display=inline&height=310&name=image.png&originHeight=310&originWidth=751&size=33911&status=done&width=751)\n<a name=\"b18e6125\"></a>\n### 隐藏文章内容\n\n```\n<!--more-->\n```\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1548591735536-f1fb4021-44fa-4cc0-80c6-4758718b2fd7.png#align=left&display=inline&height=436&name=image.png&originHeight=436&originWidth=813&size=68156&status=done&width=813)\n\n<a name=\"0d881386\"></a>\n## 以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\n\n","slug":"yuque/语雀之语雀+serverless+travis CI+hexo+github搭建云写作博客","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncioh0082y8usnkg3nfw7","content":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  <br><a href=\"https://iszengmh.github.io/2017/01/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/\">如何在github上创建个人博客——图片链接失效了，我后面会再更新</a>  <br><a href=\"https://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上——简书@SmileUsers</a>  </p>\n<p><a name=\"58378f0d\"></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><a name=\"7118d588\"></a></p>\n<h2 id=\"注意：语雀触发Webhook调用serverless，我配置失败了\"><a href=\"#注意：语雀触发Webhook调用serverless，我配置失败了\" class=\"headerlink\" title=\"注意：语雀触发Webhook调用serverless，我配置失败了\"></a>注意：语雀触发Webhook调用serverless，我配置失败了</h2><ol>\n<li>语雀触发Webhook调用serverless，我也不明白为什么失败，语雀更新了文档没有自动触发webhook，所以如果想要完整实现的朋友不用继续往下看，可以到参考链接上看，大神可能已经实现，可以到评论区咨询他。</li>\n<li>由于我是完成之后再可能有部分示例不完整<br><a name=\"VnktN\"></a><h2 id=\"serverless原来没有配置错（时间201906151835）\"><a href=\"#serverless原来没有配置错（时间201906151835）\" class=\"headerlink\" title=\"serverless原来没有配置错（时间201906151835）\"></a>serverless原来没有配置错（时间201906151835）</h2>2019年6月15日，发现无服务云函数可以触发了，serverless无服务云函数原来没有配置错，travis-ci网站推送邮箱通过提示构建成功，可能是语雀的bug，现在语雀修复好了，之前一直是手动在travis-ci手动执行自动构建的。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560595105965-049a7a9c-02bb-437c-b9ad-eaa891c5bf36.png#align=left&amp;display=inline&amp;height=510&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=510&amp;originWidth=1263&amp;size=35278&amp;status=done&amp;width=1263\" alt=\"图片.png\"></li>\n</ol>\n<a id=\"more\"></a>\n<p><a name=\"494d782c\"></a></p>\n<h2 id=\"hexo-github\"><a href=\"#hexo-github\" class=\"headerlink\" title=\"hexo+github\"></a>hexo+github</h2><p>这是我以之前有写此类教程，这里就不再赘述了，网上教程也很多<br><a name=\"98a4d905\"></a></p>\n<h2 id=\"travis-CI自动构建部署github博客\"><a href=\"#travis-CI自动构建部署github博客\" class=\"headerlink\" title=\"travis CI自动构建部署github博客\"></a>travis CI自动构建部署github博客</h2><blockquote>\n<p>请看下面这张图，引用<a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  </p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548570430080-765faf89-daf4-47e3-9390-2d5248c8f03c.png#align=left&amp;display=inline&amp;height=262&amp;originHeight=281&amp;originWidth=800&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br>travis的配置其实很简单，虽然我之前一直失败，原因都是语法或者是命令错误</p>\n<p> <br><!--more--></p>\n<p><a name=\"0c12471c\"></a></p>\n<h3 id=\"首先需要配置一个新仓库，或者一个新分支\"><a href=\"#首先需要配置一个新仓库，或者一个新分支\" class=\"headerlink\" title=\"首先需要配置一个新仓库，或者一个新分支\"></a>首先需要配置一个新仓库，或者一个新分支</h3><p>我这里选择创建一个新分支<strong>blog</strong>进行配置，<strong>blog</strong>这个分支是用于存放未进行构建的源码，而<strong>master</strong>分支为作为构建后输出目录，等下我们在<strong>travis.yml</strong>会配置跟踪<strong>blog</strong>这个分支，一旦<strong>blog</strong>有新提交，travis会立即拉取<strong>blog</strong>分支进行构建，并推送github的<strong>master</strong>分支，剩下就靠你已经部署好的<strong>hexo+github</strong>自动部署</p>\n<ol>\n<li><strong>master</strong>分支为输出目录，可以查看我仓库<a href=\"https://github.com/iszengmh/iszengmh.github.io\" target=\"_blank\" rel=\"noopener\">iszengmh.github.io</a>这个仓库<img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548571962065-2887ec31-fe23-4b1d-922e-11b0be8d1dff.png#align=left&amp;display=inline&amp;height=594&amp;name=image.png&amp;originHeight=594&amp;originWidth=930&amp;size=75111&amp;status=done&amp;width=930\" alt=\"image.png\"></li>\n<li><strong>blog</strong>分支为输出目录，可以查看我仓库<a href=\"https://github.com/iszengmh/iszengmh.github.io\" target=\"_blank\" rel=\"noopener\">iszengmh.github.io</a>这个仓库</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548572128842-d7f15a4f-ab97-451e-ace8-066621ca9ce6.png#align=left&amp;display=inline&amp;height=557&amp;name=image.png&amp;originHeight=557&amp;originWidth=933&amp;size=82045&amp;status=done&amp;width=933\" alt=\"image.png\"><br><a name=\"d2f92a63\"></a></p>\n<h3 id=\"在源码分目录下创建-travis-yml，-travis后台会跟踪blog分支，并读取-travis-yml中的命令执行\"><a href=\"#在源码分目录下创建-travis-yml，-travis后台会跟踪blog分支，并读取-travis-yml中的命令执行\" class=\"headerlink\" title=\"在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行\"></a>在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行</h3><p>至于如何将blog的代码更换为源码，其实只需将blog分支克隆下来，删除原文件，再将源码提交，并push到远程分支即可，<strong>需要先在源码分目录下创建.travis.yml</strong>， 以下是我的配置文件，travis后台会跟踪<strong>blog</strong>分支，并读取<strong>.travis.yml</strong>中的命令执行</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#设置语言</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span>  </span><br><span class=\"line\"><span class=\"comment\"># 指定需要sudo权限</span></span><br><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"string\">required</span></span><br><span class=\"line\"><span class=\"comment\">#设置相应的版本</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">10.15</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"comment\"># 指定缓存模块，可选。缓存可加快编译速度。</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">directories:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">node_modules</span>    </span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">hexo-cli</span></span><br><span class=\"line\"><span class=\"comment\">#安装hexo及插件</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-deployer-git</span> <span class=\"string\">--save</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">i</span> <span class=\"string\">-g</span> <span class=\"string\">yuque-hexo</span></span><br><span class=\"line\"><span class=\"comment\"># yuque-hexo clean 清除语雀文章,并清除“yuque-hexo”的json文件“yuque.json”</span></span><br><span class=\"line\"><span class=\"comment\"># yuque-hexo sync 同步语雀的文章，并创建json文件“yuque.json”</span></span><br><span class=\"line\"><span class=\"comment\"># hexo clean 清理文章</span></span><br><span class=\"line\"><span class=\"comment\"># hexo generate 重新发布文章</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">yuque-hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">yuque-hexo</span> <span class=\"string\">sync</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iszengmh修改成自己的github用户名</span></span><br><span class=\"line\"><span class=\"comment\"># iszengmh@qq.com修改成自己的GitHub邮箱</span></span><br><span class=\"line\"><span class=\"comment\"># GH_token就是在travis中设置的token，等下会告诉大家怎么配置</span></span><br><span class=\"line\"><span class=\"comment\"># GH_REF 是下面仓库地址</span></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iszengmh\"</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"iszengmh@qq.com\"</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"update by Travis-CI\"</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">--force</span> <span class=\"string\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"string\">master:master</span> </span><br><span class=\"line\"> <span class=\"comment\">#只监测这个分支，一有动静就开始构建</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">blog</span> </span><br><span class=\"line\"><span class=\"comment\"># GH_REF 仓库地址</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"attr\">global:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">GH_REF:</span> <span class=\"string\">github.com/iszengmh/iszengmh.github.io.git</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"7cdf68eb\"></a></p>\n<h3 id=\"修改-config-yml中的发布设置\"><a href=\"#修改-config-yml中的发布设置\" class=\"headerlink\" title=\"修改_config.yml中的发布设置\"></a>修改_config.yml中的发布设置</h3><p>修改仓库地址，增加gh_token<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#发布设置</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">## 修改仓库地址，增加gh_token</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://gh_token@github.com/iszengmh/iszengmh.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">我的博客</span></span><br><span class=\"line\"><span class=\"comment\">#头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/blog_head.jpg</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>push到远程origin的blog分支，一定要注意push远程分支blog，我之前一直提交错误</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin blog</span><br></pre></td></tr></table></figure>\n<p><a name=\"7e044a76\"></a></p>\n<h3 id=\"配置travis后台同步-跟踪\"><a href=\"#配置travis后台同步-跟踪\" class=\"headerlink\" title=\"配置travis后台同步,跟踪\"></a>配置travis后台同步,跟踪</h3><p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">travis网站</a></p>\n<ul>\n<li>去github官网先配置一个token，并复制token，用于其他用户作提交</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574333248-0cc50f8e-5045-4139-8eaf-3d086ed930cf.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=378&amp;originWidth=1022&amp;size=41927&amp;status=done&amp;width=1022\" alt=\"image.png\"></p>\n<ul>\n<li>勾选同步，并进入setting </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574028361-9bea90c6-b1e0-4dbd-8e2a-ce197f6c70c7.png#align=left&amp;display=inline&amp;height=577&amp;name=image.png&amp;originHeight=577&amp;originWidth=1180&amp;size=66727&amp;status=done&amp;width=1180\" alt=\"image.png\"></p>\n<ul>\n<li>配置变更GH_TOKEN，value那里请输入github的token</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574251748-8dfe579d-601a-434f-a138-0f154b6cb74c.png#align=left&amp;display=inline&amp;height=231&amp;name=image.png&amp;originHeight=231&amp;originWidth=1060&amp;size=19010&amp;status=done&amp;width=1060\" alt=\"image.png\"></p>\n<p><a name=\"70f6f3c2\"></a></p>\n<h3 id=\"travis-配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart-build”自动构建\"><a href=\"#travis-配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart-build”自动构建\" class=\"headerlink\" title=\"travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建\"></a>travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574498837-6fd3d668-101f-468e-8723-db0edcbd33ba.png#align=left&amp;display=inline&amp;height=323&amp;name=image.png&amp;originHeight=323&amp;originWidth=1026&amp;size=32717&amp;status=done&amp;width=1026\" alt=\"image.png\"><br><a name=\"d4c6d8c7\"></a></p>\n<h2 id=\"语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\"><a href=\"#语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\" class=\"headerlink\" title=\"语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\"></a>语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）</h2><p><a name=\"98d0e9c2\"></a></p>\n<h3 id=\"先需要腾讯云无服务云函数\"><a href=\"#先需要腾讯云无服务云函数\" class=\"headerlink\" title=\"先需要腾讯云无服务云函数\"></a>先需要腾讯云无服务云函数</h3><p>腾讯云或者阿里云都可以，我是选择腾讯云，在控制台新建函数<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548580798367-54082aeb-2989-47c5-9583-e6cf107fcbdb.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=681&amp;size=27779&amp;status=done&amp;width=681\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548580946060-3a407941-963e-4e78-b090-150a8959217e.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=897&amp;size=31517&amp;status=done&amp;width=897\" alt=\"image.png\"><br><a name=\"9b67166a\"></a></p>\n<h3 id=\"输入函数代码\"><a href=\"#输入函数代码\" class=\"headerlink\" title=\"输入函数代码\"></a>输入函数代码</h3><p>此函数来自<a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main_handler</span><span class=\"params\">($event, $context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析语雀post的数据</span></span><br><span class=\"line\">    $update_title = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($event-&gt;body)&#123;</span><br><span class=\"line\">        $yuque_data= json_decode($event-&gt;body);</span><br><span class=\"line\">        $update_title .= $yuque_data-&gt;data-&gt;title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// default params</span></span><br><span class=\"line\">    $repos = <span class=\"string\">'xxxx'</span>;  <span class=\"comment\">// 你的仓库id 或 slug</span></span><br><span class=\"line\">    $token = <span class=\"string\">'xxxxxx'</span>; <span class=\"comment\">// 你的登录token</span></span><br><span class=\"line\">    $message = date(<span class=\"string\">\"Y/m/d\"</span>).<span class=\"string\">':yuque update:'</span>.$update_title;</span><br><span class=\"line\">    $branch = <span class=\"string\">'master'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// post params</span></span><br><span class=\"line\">    $queryString = $event-&gt;queryString;</span><br><span class=\"line\">    $q_token = $queryString-&gt;token ? $queryString-&gt;token : $token;</span><br><span class=\"line\">    $q_repos = $queryString-&gt;repos ? $queryString-&gt;repos : $repos;</span><br><span class=\"line\">    $q_message = $queryString-&gt;message ? $queryString-&gt;message : $message;</span><br><span class=\"line\">    $q_branch = $queryString-&gt;branch ? $queryString-&gt;branch : <span class=\"string\">'master'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>($q_token);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_repos);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_message);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_branch);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"comment\">//request travis ci</span></span><br><span class=\"line\">    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);</span><br><span class=\"line\"></span><br><span class=\"line\">    $res_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $res_message = <span class=\"string\">'未知'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($res_info[<span class=\"string\">'http_code'</span>])&#123;</span><br><span class=\"line\">        $res_code = $res_info[<span class=\"string\">'http_code'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>($res_info[<span class=\"string\">'http_code'</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">200</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">202</span>:</span><br><span class=\"line\">                $res_message = <span class=\"string\">'success'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                $res_message = <span class=\"string\">'faild'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $res = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'status'</span>=&gt;$res_code,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>=&gt;$res_message</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@description</span>  travis api , trigger a build</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $repos string 仓库ID、slug</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $token string 登录验证token</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $message string 触发信息</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $branch string 分支</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> $info array 回包信息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">triggerTravisCI</span> <span class=\"params\">($repos, $token, $message=<span class=\"string\">'yuque update'</span>, $branch=<span class=\"string\">'master'</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    $curl = curl_init();</span><br><span class=\"line\">    <span class=\"comment\">//设置抓取的url</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'https://api.travis-ci.org/repo/'</span>.$repos.<span class=\"string\">'/requests'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置post方式提交</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, <span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置post数据</span></span><br><span class=\"line\">    $post_data = json_encode(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">\"request\"</span>=&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">\"message\"</span>=&gt;$message,</span><br><span class=\"line\">            <span class=\"string\">\"branch\"</span>=&gt;$branch</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ));</span><br><span class=\"line\">    $header = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">      <span class=\"string\">'Content-Type: application/json'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Travis-API-Version: 3'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Authorization:token '</span>.$token,</span><br><span class=\"line\">      <span class=\"string\">'Content-Length:'</span> . strlen($post_data)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);</span><br><span class=\"line\">    <span class=\"comment\">//执行命令</span></span><br><span class=\"line\">    $data = curl_exec($curl);</span><br><span class=\"line\">    $info = curl_getinfo($curl);</span><br><span class=\"line\">    <span class=\"comment\">//关闭URL请求</span></span><br><span class=\"line\">    curl_close($curl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b96d88cb\"></a></p>\n<h3 id=\"查看repo的id和token\"><a href=\"#查看repo的id和token\" class=\"headerlink\" title=\"查看repo的id和token\"></a>查看repo的id和token</h3><ul>\n<li>travis登录token，在travis-ci.org 中设置界面获取：</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548581610483-75a884f9-2810-4176-b739-655c803c4121.png#align=left&amp;display=inline&amp;height=409&amp;name=image.png&amp;originHeight=409&amp;originWidth=1236&amp;size=46342&amp;status=done&amp;width=1236\" alt=\"image.png\"></p>\n<ul>\n<li>获取travis的仓库ID</li>\n</ul>\n<p>在后台进入对应在仓库，travis会请求仓库地址，所以直接找到相似链接，链接路径名就仓库ID，路径像这个<a href=\"https://api.travis-ci.org/repo/\" target=\"_blank\" rel=\"noopener\">https://api.travis-ci.org/repo/</a>&lt;你的仓库ID&gt;<br>参考链接中说需要请求API，但是我操作了半天不知道为什么一直提示方法不可用，所以投机取巧找这个方法<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548585058267-ef4c79df-3e21-47df-b5d5-9c3166dd3774.png#align=left&amp;display=inline&amp;height=508&amp;name=image.png&amp;originHeight=508&amp;originWidth=1146&amp;size=179654&amp;status=done&amp;width=1146\" alt=\"image.png\"></p>\n<p><a name=\"a2169335\"></a></p>\n<h3 id=\"在语雀中新建知识库，然后设置开发者\"><a href=\"#在语雀中新建知识库，然后设置开发者\" class=\"headerlink\" title=\"在语雀中新建知识库，然后设置开发者\"></a>在语雀中新建知识库，然后设置开发者</h3><p>最好先看一下<a href=\"https://www.yuque.com/yuque/developer\" target=\"_blank\" rel=\"noopener\">语雀开发文档</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548581236420-c369b9fe-501f-4ede-bcc1-098d55efb2f0.png#align=left&amp;display=inline&amp;height=544&amp;name=image.png&amp;originHeight=544&amp;originWidth=1148&amp;size=49627&amp;status=done&amp;width=1148\" alt=\"image.png\"></p>\n<p>其中“所有更新触发”是指，有文档新增或者变更时，自动触发，而“仅主动推送更新触发”是指在勾选“文档有较大更新时，推送给关注的人”时，才会触发Webhook，具体请看文档<a href=\"https://www.yuque.com/yuque/developer/doc-webhook#wooqpi\" target=\"_blank\" rel=\"noopener\">WebHook 说明</a><br>无服务函数（请到对应云平台去复制，并加入参数）示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://service-&lt;…………&gt;.ap-guangzhou.apigateway.myqcloud.com/release/main_handler?repos=&lt;your travis's repo ID&gt;&amp;token=&lt;your travis token&gt;&amp;message=语雀自动提交&amp;branch=blog</span><br></pre></td></tr></table></figure>\n<p><a name=\"8f1d0c76\"></a></p>\n<h2 id=\"yuque-hexo开源项目用于同步语雀\"><a href=\"#yuque-hexo开源项目用于同步语雀\" class=\"headerlink\" title=\"yuque-hexo开源项目用于同步语雀\"></a>yuque-hexo开源项目用于同步语雀</h2><p><a name=\"b173dbb6\"></a></p>\n<h3 id=\"需要在-travis-yml中配置如下，如果已经copy上文的配置，则无需再配置\"><a href=\"#需要在-travis-yml中配置如下，如果已经copy上文的配置，则无需再配置\" class=\"headerlink\" title=\"需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置\"></a>需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span><br><span class=\"line\">  - yuque-hexo clean</span><br><span class=\"line\">  - yuque-hexo sync</span><br><span class=\"line\">  - hexo clean</span><br><span class=\"line\">  - hexo generate</span><br></pre></td></tr></table></figure>\n<p><a name=\"7dee264f\"></a></p>\n<h3 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h3><p>以下注释，一定要删除，json文件不能使用注释，这里只作说明，<a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener\">开源项目地址</a></p>\n<blockquote>\n<p>login————这里是你语雀的个人主页链接的路径名，例如<a href=\"https://www.yuque.com/iszengmh/p\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/iszengmh/</a><br>repo————这里是你语雀的个人主页知识库的路径名，例如<a href=\"https://www.yuque.com/iszengmh/p\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/iszengmh/personalblog</a><br>mdNameFormat 生成的 Markdown 文件的文件名，可以选择 “title” 或者 “slug”，默认 “title”，slug 是语雀的永久链接名，一般是几个随机字母。<br>postPath 存放从语雀下载的 Markdown 文件的文件夹，除了 Hexo ，理论上可以支持其他支持 Front-matter 的 Markdown 静态博客</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//………………………………</span></span><br><span class=\"line\">&#125;,//注意补上逗号哦，不然后会报错</span><br><span class=\"line\">\"yuqueConfig\": &#123;</span><br><span class=\"line\">  \"baseUrl\": \"https://www.yuque.com/api/v2\",</span><br><span class=\"line\">  \"login\": \"iszengmh\",</span><br><span class=\"line\">  \"repo\": \"personalblog\",</span><br><span class=\"line\">  \"mdNameFormat\": \"title\",</span><br><span class=\"line\">  \"postPath\": \"source/_posts/yuque\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"clean\": \"hexo clean\",</span><br><span class=\"line\">  \"clean:yuque\": \"DEBUG=yuque-hexo.* yuque-hexo clean\",</span><br><span class=\"line\">  \"deploy\": \"hexo deploy\",</span><br><span class=\"line\">  \"publish\": \"npm run clean &amp;&amp; npm run deploy\",</span><br><span class=\"line\">  \"dev\": \"hexo s\",</span><br><span class=\"line\">  \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\",</span><br><span class=\"line\">  \"reset\": \"npm run clean:yuque &amp;&amp; npm run sync\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"b688a7aa\"></a></p>\n<h3 id=\"将修改的文件全部提交github的blog分支\"><a href=\"#将修改的文件全部提交github的blog分支\" class=\"headerlink\" title=\"将修改的文件全部提交github的blog分支\"></a>将修改的文件全部提交github的blog分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commmit -m <span class=\"string\">\"修改\"</span></span><br><span class=\"line\">git push -u origin blog</span><br></pre></td></tr></table></figure>\n<p>由于travis自动构建会自动发布到github的master分支<br><a name=\"eaf5275a\"></a></p>\n<h2 id=\"手动触发自动构建\"><a href=\"#手动触发自动构建\" class=\"headerlink\" title=\"手动触发自动构建\"></a>手动触发自动构建</h2><p>由于我的语雀配置没有自动触发travis更新，所以我自己去travis后台点击“restart build”可以同步并自动构建，这样也是可以的，本篇文章就是这样同步过去的<br><a name=\"d291dcca\"></a></p>\n<h2 id=\"语雀编写hexo的front-matter\"><a href=\"#语雀编写hexo的front-matter\" class=\"headerlink\" title=\"语雀编写hexo的front-matter\"></a>语雀编写hexo的front-matter</h2><p><a name=\"c902bb32\"></a></p>\n<h3 id=\"分类和标签，这样写\"><a href=\"#分类和标签，这样写\" class=\"headerlink\" title=\"分类和标签，这样写\"></a>分类和标签，这样写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [语雀,travis,serverless]</span><br><span class=\"line\">categories: 语雀</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548591626703-f9f13701-5638-41c0-9b62-58838d3e7b9b.png#align=left&amp;display=inline&amp;height=310&amp;name=image.png&amp;originHeight=310&amp;originWidth=751&amp;size=33911&amp;status=done&amp;width=751\" alt=\"image.png\"><br><a name=\"b18e6125\"></a></p>\n<h3 id=\"隐藏文章内容\"><a href=\"#隐藏文章内容\" class=\"headerlink\" title=\"隐藏文章内容\"></a>隐藏文章内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548591735536-f1fb4021-44fa-4cc0-80c6-4758718b2fd7.png#align=left&amp;display=inline&amp;height=436&amp;name=image.png&amp;originHeight=436&amp;originWidth=813&amp;size=68156&amp;status=done&amp;width=813\" alt=\"image.png\"></p>\n<p><a name=\"0d881386\"></a></p>\n<h2 id=\"以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\"><a href=\"#以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\" class=\"headerlink\" title=\"以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\"></a>以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人</h2>","site":{"data":{}},"excerpt":"<p><a name=\"ea6f3b87\"></a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  <br><a href=\"https://iszengmh.github.io/2017/01/27/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F/\">如何在github上创建个人博客——图片链接失效了，我后面会再更新</a>  <br><a href=\"https://www.jianshu.com/p/e22c13d85659\" target=\"_blank\" rel=\"noopener\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上——简书@SmileUsers</a>  </p>\n<p><a name=\"58378f0d\"></a></p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><a name=\"7118d588\"></a></p>\n<h2 id=\"注意：语雀触发Webhook调用serverless，我配置失败了\"><a href=\"#注意：语雀触发Webhook调用serverless，我配置失败了\" class=\"headerlink\" title=\"注意：语雀触发Webhook调用serverless，我配置失败了\"></a>注意：语雀触发Webhook调用serverless，我配置失败了</h2><ol>\n<li>语雀触发Webhook调用serverless，我也不明白为什么失败，语雀更新了文档没有自动触发webhook，所以如果想要完整实现的朋友不用继续往下看，可以到参考链接上看，大神可能已经实现，可以到评论区咨询他。</li>\n<li>由于我是完成之后再可能有部分示例不完整<br><a name=\"VnktN\"></a><h2 id=\"serverless原来没有配置错（时间201906151835）\"><a href=\"#serverless原来没有配置错（时间201906151835）\" class=\"headerlink\" title=\"serverless原来没有配置错（时间201906151835）\"></a>serverless原来没有配置错（时间201906151835）</h2>2019年6月15日，发现无服务云函数可以触发了，serverless无服务云函数原来没有配置错，travis-ci网站推送邮箱通过提示构建成功，可能是语雀的bug，现在语雀修复好了，之前一直是手动在travis-ci手动执行自动构建的。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1560595105965-049a7a9c-02bb-437c-b9ad-eaa891c5bf36.png#align=left&amp;display=inline&amp;height=510&amp;name=%E5%9B%BE%E7%89%87.png&amp;originHeight=510&amp;originWidth=1263&amp;size=35278&amp;status=done&amp;width=1263\" alt=\"图片.png\"></li>\n</ol>","more":"<p><a name=\"494d782c\"></a></p>\n<h2 id=\"hexo-github\"><a href=\"#hexo-github\" class=\"headerlink\" title=\"hexo+github\"></a>hexo+github</h2><p>这是我以之前有写此类教程，这里就不再赘述了，网上教程也很多<br><a name=\"98a4d905\"></a></p>\n<h2 id=\"travis-CI自动构建部署github博客\"><a href=\"#travis-CI自动构建部署github博客\" class=\"headerlink\" title=\"travis CI自动构建部署github博客\"></a>travis CI自动构建部署github博客</h2><blockquote>\n<p>请看下面这张图，引用<a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  </p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548570430080-765faf89-daf4-47e3-9390-2d5248c8f03c.png#align=left&amp;display=inline&amp;height=262&amp;originHeight=281&amp;originWidth=800&amp;size=0&amp;status=done&amp;width=746\" alt=\"\"><br>travis的配置其实很简单，虽然我之前一直失败，原因都是语法或者是命令错误</p>\n<p> <br><!--more--></p>\n<p><a name=\"0c12471c\"></a></p>\n<h3 id=\"首先需要配置一个新仓库，或者一个新分支\"><a href=\"#首先需要配置一个新仓库，或者一个新分支\" class=\"headerlink\" title=\"首先需要配置一个新仓库，或者一个新分支\"></a>首先需要配置一个新仓库，或者一个新分支</h3><p>我这里选择创建一个新分支<strong>blog</strong>进行配置，<strong>blog</strong>这个分支是用于存放未进行构建的源码，而<strong>master</strong>分支为作为构建后输出目录，等下我们在<strong>travis.yml</strong>会配置跟踪<strong>blog</strong>这个分支，一旦<strong>blog</strong>有新提交，travis会立即拉取<strong>blog</strong>分支进行构建，并推送github的<strong>master</strong>分支，剩下就靠你已经部署好的<strong>hexo+github</strong>自动部署</p>\n<ol>\n<li><strong>master</strong>分支为输出目录，可以查看我仓库<a href=\"https://github.com/iszengmh/iszengmh.github.io\" target=\"_blank\" rel=\"noopener\">iszengmh.github.io</a>这个仓库<img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548571962065-2887ec31-fe23-4b1d-922e-11b0be8d1dff.png#align=left&amp;display=inline&amp;height=594&amp;name=image.png&amp;originHeight=594&amp;originWidth=930&amp;size=75111&amp;status=done&amp;width=930\" alt=\"image.png\"></li>\n<li><strong>blog</strong>分支为输出目录，可以查看我仓库<a href=\"https://github.com/iszengmh/iszengmh.github.io\" target=\"_blank\" rel=\"noopener\">iszengmh.github.io</a>这个仓库</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548572128842-d7f15a4f-ab97-451e-ace8-066621ca9ce6.png#align=left&amp;display=inline&amp;height=557&amp;name=image.png&amp;originHeight=557&amp;originWidth=933&amp;size=82045&amp;status=done&amp;width=933\" alt=\"image.png\"><br><a name=\"d2f92a63\"></a></p>\n<h3 id=\"在源码分目录下创建-travis-yml，-travis后台会跟踪blog分支，并读取-travis-yml中的命令执行\"><a href=\"#在源码分目录下创建-travis-yml，-travis后台会跟踪blog分支，并读取-travis-yml中的命令执行\" class=\"headerlink\" title=\"在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行\"></a>在源码分目录下创建.travis.yml， travis后台会跟踪blog分支，并读取.travis.yml中的命令执行</h3><p>至于如何将blog的代码更换为源码，其实只需将blog分支克隆下来，删除原文件，再将源码提交，并push到远程分支即可，<strong>需要先在源码分目录下创建.travis.yml</strong>， 以下是我的配置文件，travis后台会跟踪<strong>blog</strong>分支，并读取<strong>.travis.yml</strong>中的命令执行</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#设置语言</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span>  </span><br><span class=\"line\"><span class=\"comment\"># 指定需要sudo权限</span></span><br><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"string\">required</span></span><br><span class=\"line\"><span class=\"comment\">#设置相应的版本</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"number\">10.15</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"comment\"># 指定缓存模块，可选。缓存可加快编译速度。</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">directories:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">node_modules</span>    </span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">hexo-cli</span></span><br><span class=\"line\"><span class=\"comment\">#安装hexo及插件</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-deployer-git</span> <span class=\"string\">--save</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">i</span> <span class=\"string\">-g</span> <span class=\"string\">yuque-hexo</span></span><br><span class=\"line\"><span class=\"comment\"># yuque-hexo clean 清除语雀文章,并清除“yuque-hexo”的json文件“yuque.json”</span></span><br><span class=\"line\"><span class=\"comment\"># yuque-hexo sync 同步语雀的文章，并创建json文件“yuque.json”</span></span><br><span class=\"line\"><span class=\"comment\"># hexo clean 清理文章</span></span><br><span class=\"line\"><span class=\"comment\"># hexo generate 重新发布文章</span></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">yuque-hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">yuque-hexo</span> <span class=\"string\">sync</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iszengmh修改成自己的github用户名</span></span><br><span class=\"line\"><span class=\"comment\"># iszengmh@qq.com修改成自己的GitHub邮箱</span></span><br><span class=\"line\"><span class=\"comment\"># GH_token就是在travis中设置的token，等下会告诉大家怎么配置</span></span><br><span class=\"line\"><span class=\"comment\"># GH_REF 是下面仓库地址</span></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iszengmh\"</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"iszengmh@qq.com\"</span>   </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"update by Travis-CI\"</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">--force</span> <span class=\"string\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"string\">master:master</span> </span><br><span class=\"line\"> <span class=\"comment\">#只监测这个分支，一有动静就开始构建</span></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">blog</span> </span><br><span class=\"line\"><span class=\"comment\"># GH_REF 仓库地址</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"attr\">global:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">GH_REF:</span> <span class=\"string\">github.com/iszengmh/iszengmh.github.io.git</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"7cdf68eb\"></a></p>\n<h3 id=\"修改-config-yml中的发布设置\"><a href=\"#修改-config-yml中的发布设置\" class=\"headerlink\" title=\"修改_config.yml中的发布设置\"></a>修改_config.yml中的发布设置</h3><p>修改仓库地址，增加gh_token<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#发布设置</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"comment\">## 修改仓库地址，增加gh_token</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://gh_token@github.com/iszengmh/iszengmh.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">我的博客</span></span><br><span class=\"line\"><span class=\"comment\">#头像</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/blog_head.jpg</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>push到远程origin的blog分支，一定要注意push远程分支blog，我之前一直提交错误</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin blog</span><br></pre></td></tr></table></figure>\n<p><a name=\"7e044a76\"></a></p>\n<h3 id=\"配置travis后台同步-跟踪\"><a href=\"#配置travis后台同步-跟踪\" class=\"headerlink\" title=\"配置travis后台同步,跟踪\"></a>配置travis后台同步,跟踪</h3><p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">travis网站</a></p>\n<ul>\n<li>去github官网先配置一个token，并复制token，用于其他用户作提交</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574333248-0cc50f8e-5045-4139-8eaf-3d086ed930cf.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=378&amp;originWidth=1022&amp;size=41927&amp;status=done&amp;width=1022\" alt=\"image.png\"></p>\n<ul>\n<li>勾选同步，并进入setting </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574028361-9bea90c6-b1e0-4dbd-8e2a-ce197f6c70c7.png#align=left&amp;display=inline&amp;height=577&amp;name=image.png&amp;originHeight=577&amp;originWidth=1180&amp;size=66727&amp;status=done&amp;width=1180\" alt=\"image.png\"></p>\n<ul>\n<li>配置变更GH_TOKEN，value那里请输入github的token</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574251748-8dfe579d-601a-434f-a138-0f154b6cb74c.png#align=left&amp;display=inline&amp;height=231&amp;name=image.png&amp;originHeight=231&amp;originWidth=1060&amp;size=19010&amp;status=done&amp;width=1060\" alt=\"image.png\"></p>\n<p><a name=\"70f6f3c2\"></a></p>\n<h3 id=\"travis-配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart-build”自动构建\"><a href=\"#travis-配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart-build”自动构建\" class=\"headerlink\" title=\"travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建\"></a>travis 配置完璧，接下来可以通过将源码提交到blog，或者到travis的后台点击“restart build”自动构建</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548574498837-6fd3d668-101f-468e-8723-db0edcbd33ba.png#align=left&amp;display=inline&amp;height=323&amp;name=image.png&amp;originHeight=323&amp;originWidth=1026&amp;size=32717&amp;status=done&amp;width=1026\" alt=\"image.png\"><br><a name=\"d4c6d8c7\"></a></p>\n<h2 id=\"语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\"><a href=\"#语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\" class=\"headerlink\" title=\"语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）\"></a>语雀配置Webhook和serverless（此步骤失败了，语雀没有触发webhook）</h2><p><a name=\"98d0e9c2\"></a></p>\n<h3 id=\"先需要腾讯云无服务云函数\"><a href=\"#先需要腾讯云无服务云函数\" class=\"headerlink\" title=\"先需要腾讯云无服务云函数\"></a>先需要腾讯云无服务云函数</h3><p>腾讯云或者阿里云都可以，我是选择腾讯云，在控制台新建函数<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548580798367-54082aeb-2989-47c5-9583-e6cf107fcbdb.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=681&amp;size=27779&amp;status=done&amp;width=681\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548580946060-3a407941-963e-4e78-b090-150a8959217e.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=503&amp;originWidth=897&amp;size=31517&amp;status=done&amp;width=897\" alt=\"image.png\"><br><a name=\"9b67166a\"></a></p>\n<h3 id=\"输入函数代码\"><a href=\"#输入函数代码\" class=\"headerlink\" title=\"输入函数代码\"></a>输入函数代码</h3><p>此函数来自<a href=\"https://segmentfault.com/a/1190000017797561\" target=\"_blank\" rel=\"noopener\">Hexo 博客终极玩法：云端写作，自动部署——segmentFault@</a><a href=\"https://segmentfault.com/u/nerohua\" target=\"_blank\" rel=\"noopener\">Nero</a>  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main_handler</span><span class=\"params\">($event, $context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析语雀post的数据</span></span><br><span class=\"line\">    $update_title = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($event-&gt;body)&#123;</span><br><span class=\"line\">        $yuque_data= json_decode($event-&gt;body);</span><br><span class=\"line\">        $update_title .= $yuque_data-&gt;data-&gt;title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// default params</span></span><br><span class=\"line\">    $repos = <span class=\"string\">'xxxx'</span>;  <span class=\"comment\">// 你的仓库id 或 slug</span></span><br><span class=\"line\">    $token = <span class=\"string\">'xxxxxx'</span>; <span class=\"comment\">// 你的登录token</span></span><br><span class=\"line\">    $message = date(<span class=\"string\">\"Y/m/d\"</span>).<span class=\"string\">':yuque update:'</span>.$update_title;</span><br><span class=\"line\">    $branch = <span class=\"string\">'master'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// post params</span></span><br><span class=\"line\">    $queryString = $event-&gt;queryString;</span><br><span class=\"line\">    $q_token = $queryString-&gt;token ? $queryString-&gt;token : $token;</span><br><span class=\"line\">    $q_repos = $queryString-&gt;repos ? $queryString-&gt;repos : $repos;</span><br><span class=\"line\">    $q_message = $queryString-&gt;message ? $queryString-&gt;message : $message;</span><br><span class=\"line\">    $q_branch = $queryString-&gt;branch ? $queryString-&gt;branch : <span class=\"string\">'master'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>($q_token);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_repos);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_message);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> ($q_branch);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> (<span class=\"string\">'==='</span>);</span><br><span class=\"line\">    <span class=\"comment\">//request travis ci</span></span><br><span class=\"line\">    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);</span><br><span class=\"line\"></span><br><span class=\"line\">    $res_code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $res_message = <span class=\"string\">'未知'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($res_info[<span class=\"string\">'http_code'</span>])&#123;</span><br><span class=\"line\">        $res_code = $res_info[<span class=\"string\">'http_code'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>($res_info[<span class=\"string\">'http_code'</span>])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">200</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">202</span>:</span><br><span class=\"line\">                $res_message = <span class=\"string\">'success'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                $res_message = <span class=\"string\">'faild'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $res = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'status'</span>=&gt;$res_code,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>=&gt;$res_message</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@description</span>  travis api , trigger a build</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $repos string 仓库ID、slug</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $token string 登录验证token</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $message string 触发信息</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> $branch string 分支</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> $info array 回包信息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">triggerTravisCI</span> <span class=\"params\">($repos, $token, $message=<span class=\"string\">'yuque update'</span>, $branch=<span class=\"string\">'master'</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    $curl = curl_init();</span><br><span class=\"line\">    <span class=\"comment\">//设置抓取的url</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'https://api.travis-ci.org/repo/'</span>.$repos.<span class=\"string\">'/requests'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置post方式提交</span></span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, <span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置post数据</span></span><br><span class=\"line\">    $post_data = json_encode(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">\"request\"</span>=&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">\"message\"</span>=&gt;$message,</span><br><span class=\"line\">            <span class=\"string\">\"branch\"</span>=&gt;$branch</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ));</span><br><span class=\"line\">    $header = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">      <span class=\"string\">'Content-Type: application/json'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Travis-API-Version: 3'</span>,</span><br><span class=\"line\">      <span class=\"string\">'Authorization:token '</span>.$token,</span><br><span class=\"line\">      <span class=\"string\">'Content-Length:'</span> . strlen($post_data)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);</span><br><span class=\"line\">    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);</span><br><span class=\"line\">    <span class=\"comment\">//执行命令</span></span><br><span class=\"line\">    $data = curl_exec($curl);</span><br><span class=\"line\">    $info = curl_getinfo($curl);</span><br><span class=\"line\">    <span class=\"comment\">//关闭URL请求</span></span><br><span class=\"line\">    curl_close($curl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"b96d88cb\"></a></p>\n<h3 id=\"查看repo的id和token\"><a href=\"#查看repo的id和token\" class=\"headerlink\" title=\"查看repo的id和token\"></a>查看repo的id和token</h3><ul>\n<li>travis登录token，在travis-ci.org 中设置界面获取：</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548581610483-75a884f9-2810-4176-b739-655c803c4121.png#align=left&amp;display=inline&amp;height=409&amp;name=image.png&amp;originHeight=409&amp;originWidth=1236&amp;size=46342&amp;status=done&amp;width=1236\" alt=\"image.png\"></p>\n<ul>\n<li>获取travis的仓库ID</li>\n</ul>\n<p>在后台进入对应在仓库，travis会请求仓库地址，所以直接找到相似链接，链接路径名就仓库ID，路径像这个<a href=\"https://api.travis-ci.org/repo/\" target=\"_blank\" rel=\"noopener\">https://api.travis-ci.org/repo/</a>&lt;你的仓库ID&gt;<br>参考链接中说需要请求API，但是我操作了半天不知道为什么一直提示方法不可用，所以投机取巧找这个方法<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548585058267-ef4c79df-3e21-47df-b5d5-9c3166dd3774.png#align=left&amp;display=inline&amp;height=508&amp;name=image.png&amp;originHeight=508&amp;originWidth=1146&amp;size=179654&amp;status=done&amp;width=1146\" alt=\"image.png\"></p>\n<p><a name=\"a2169335\"></a></p>\n<h3 id=\"在语雀中新建知识库，然后设置开发者\"><a href=\"#在语雀中新建知识库，然后设置开发者\" class=\"headerlink\" title=\"在语雀中新建知识库，然后设置开发者\"></a>在语雀中新建知识库，然后设置开发者</h3><p>最好先看一下<a href=\"https://www.yuque.com/yuque/developer\" target=\"_blank\" rel=\"noopener\">语雀开发文档</a><br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548581236420-c369b9fe-501f-4ede-bcc1-098d55efb2f0.png#align=left&amp;display=inline&amp;height=544&amp;name=image.png&amp;originHeight=544&amp;originWidth=1148&amp;size=49627&amp;status=done&amp;width=1148\" alt=\"image.png\"></p>\n<p>其中“所有更新触发”是指，有文档新增或者变更时，自动触发，而“仅主动推送更新触发”是指在勾选“文档有较大更新时，推送给关注的人”时，才会触发Webhook，具体请看文档<a href=\"https://www.yuque.com/yuque/developer/doc-webhook#wooqpi\" target=\"_blank\" rel=\"noopener\">WebHook 说明</a><br>无服务函数（请到对应云平台去复制，并加入参数）示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://service-&lt;…………&gt;.ap-guangzhou.apigateway.myqcloud.com/release/main_handler?repos=&lt;your travis's repo ID&gt;&amp;token=&lt;your travis token&gt;&amp;message=语雀自动提交&amp;branch=blog</span><br></pre></td></tr></table></figure>\n<p><a name=\"8f1d0c76\"></a></p>\n<h2 id=\"yuque-hexo开源项目用于同步语雀\"><a href=\"#yuque-hexo开源项目用于同步语雀\" class=\"headerlink\" title=\"yuque-hexo开源项目用于同步语雀\"></a>yuque-hexo开源项目用于同步语雀</h2><p><a name=\"b173dbb6\"></a></p>\n<h3 id=\"需要在-travis-yml中配置如下，如果已经copy上文的配置，则无需再配置\"><a href=\"#需要在-travis-yml中配置如下，如果已经copy上文的配置，则无需再配置\" class=\"headerlink\" title=\"需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置\"></a>需要在.travis.yml中配置如下，如果已经copy上文的配置，则无需再配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span><br><span class=\"line\">  - yuque-hexo clean</span><br><span class=\"line\">  - yuque-hexo sync</span><br><span class=\"line\">  - hexo clean</span><br><span class=\"line\">  - hexo generate</span><br></pre></td></tr></table></figure>\n<p><a name=\"7dee264f\"></a></p>\n<h3 id=\"配置package-json\"><a href=\"#配置package-json\" class=\"headerlink\" title=\"配置package.json\"></a>配置package.json</h3><p>以下注释，一定要删除，json文件不能使用注释，这里只作说明，<a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener\">开源项目地址</a></p>\n<blockquote>\n<p>login————这里是你语雀的个人主页链接的路径名，例如<a href=\"https://www.yuque.com/iszengmh/p\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/iszengmh/</a><br>repo————这里是你语雀的个人主页知识库的路径名，例如<a href=\"https://www.yuque.com/iszengmh/p\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/iszengmh/personalblog</a><br>mdNameFormat 生成的 Markdown 文件的文件名，可以选择 “title” 或者 “slug”，默认 “title”，slug 是语雀的永久链接名，一般是几个随机字母。<br>postPath 存放从语雀下载的 Markdown 文件的文件夹，除了 Hexo ，理论上可以支持其他支持 Front-matter 的 Markdown 静态博客</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//………………………………</span></span><br><span class=\"line\">&#125;,//注意补上逗号哦，不然后会报错</span><br><span class=\"line\">\"yuqueConfig\": &#123;</span><br><span class=\"line\">  \"baseUrl\": \"https://www.yuque.com/api/v2\",</span><br><span class=\"line\">  \"login\": \"iszengmh\",</span><br><span class=\"line\">  \"repo\": \"personalblog\",</span><br><span class=\"line\">  \"mdNameFormat\": \"title\",</span><br><span class=\"line\">  \"postPath\": \"source/_posts/yuque\"</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"clean\": \"hexo clean\",</span><br><span class=\"line\">  \"clean:yuque\": \"DEBUG=yuque-hexo.* yuque-hexo clean\",</span><br><span class=\"line\">  \"deploy\": \"hexo deploy\",</span><br><span class=\"line\">  \"publish\": \"npm run clean &amp;&amp; npm run deploy\",</span><br><span class=\"line\">  \"dev\": \"hexo s\",</span><br><span class=\"line\">  \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\",</span><br><span class=\"line\">  \"reset\": \"npm run clean:yuque &amp;&amp; npm run sync\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"b688a7aa\"></a></p>\n<h3 id=\"将修改的文件全部提交github的blog分支\"><a href=\"#将修改的文件全部提交github的blog分支\" class=\"headerlink\" title=\"将修改的文件全部提交github的blog分支\"></a>将修改的文件全部提交github的blog分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commmit -m <span class=\"string\">\"修改\"</span></span><br><span class=\"line\">git push -u origin blog</span><br></pre></td></tr></table></figure>\n<p>由于travis自动构建会自动发布到github的master分支<br><a name=\"eaf5275a\"></a></p>\n<h2 id=\"手动触发自动构建\"><a href=\"#手动触发自动构建\" class=\"headerlink\" title=\"手动触发自动构建\"></a>手动触发自动构建</h2><p>由于我的语雀配置没有自动触发travis更新，所以我自己去travis后台点击“restart build”可以同步并自动构建，这样也是可以的，本篇文章就是这样同步过去的<br><a name=\"d291dcca\"></a></p>\n<h2 id=\"语雀编写hexo的front-matter\"><a href=\"#语雀编写hexo的front-matter\" class=\"headerlink\" title=\"语雀编写hexo的front-matter\"></a>语雀编写hexo的front-matter</h2><p><a name=\"c902bb32\"></a></p>\n<h3 id=\"分类和标签，这样写\"><a href=\"#分类和标签，这样写\" class=\"headerlink\" title=\"分类和标签，这样写\"></a>分类和标签，这样写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: [语雀,travis,serverless]</span><br><span class=\"line\">categories: 语雀</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548591626703-f9f13701-5638-41c0-9b62-58838d3e7b9b.png#align=left&amp;display=inline&amp;height=310&amp;name=image.png&amp;originHeight=310&amp;originWidth=751&amp;size=33911&amp;status=done&amp;width=751\" alt=\"image.png\"><br><a name=\"b18e6125\"></a></p>\n<h3 id=\"隐藏文章内容\"><a href=\"#隐藏文章内容\" class=\"headerlink\" title=\"隐藏文章内容\"></a>隐藏文章内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1548591735536-f1fb4021-44fa-4cc0-80c6-4758718b2fd7.png#align=left&amp;display=inline&amp;height=436&amp;name=image.png&amp;originHeight=436&amp;originWidth=813&amp;size=68156&amp;status=done&amp;width=813\" alt=\"image.png\"></p>\n<p><a name=\"0d881386\"></a></p>\n<h2 id=\"以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\"><a href=\"#以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\" class=\"headerlink\" title=\"以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人\"></a>以上就是全部配置，如果你语雀可以触发webhook，请告诉怎么搞，搞死人</h2>"},{"title":"Java面试宝典","date":"2017-02-20T01:40:15.000Z","_content":"文章转自：\n[java面试题](http://blog.csdn.net/dd864140130/article/details/55833087)\n\n# Java面试宝典\n\n\n# 相关概念\n## 面向对象的三个特征\n封装,继承,多态.这个应该是人人皆知.有时候也会加上抽象.\n\n\n## 多态的好处\n允许不同类对象对同一消息做出响应,即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用).主要有以下优点:\n\n1. 可替换性:多态对已存在代码具有可替换性.\n2. 可扩充性:增加新的子类不影响已经存在的类结构.\n3. 接口性:多态是超累通过方法签名,想子类提供一个公共接口,由子类来完善或者重写它来实现的.\n4. 灵活性:\n5. 简化性:\n\n### 代码中如何实现多态\n实现多态主要有以下三种方式:\n1. 接口实现\n2. 继承父类重写方法\n3. 同一类中进行方法重载\n<!--more-->\n### 虚拟机是如何实现多态的\n动态绑定技术(dynamic binding),执行期间判断所引用对象的实际类型,根据实际类型调用对应的方法.\n\n\n## 接口的意义\n接口的意义用三个词就可以概括:规范,扩展,回调.\n## 抽象类的意义\n抽象类的意义可以用三句话来概括:\n\n 1. 为其他子类提供一个公共的类型\n 2. 封装子类中重复定义的内容\n 3. 定义抽象方法,子类虽然有不同的实现,但是定义时一致的\n## 接口和抽象类的区别\n\n|比较|抽象类|接口|\n|----|------|----|\n|默认方法|抽象类可以有默认的方法实现|,java 8之前,接口中不存在方法的实现.|\n|实现方式|子类使用extends关键字来继承抽象类.如果子类不是抽象类,子类需要提供抽象类中所声明方法的实现.|子类使用implements来实现接口,需要提供接口中所有声明的实现.\n|构造器|抽象类中可以有构造器,|接口中不能|\n|和正常类区别|抽象类不能被实例化|接口则是完全不同的类型\n|访问修饰符|抽象方法可以有public,protected和default等修饰|接口默认是public,不能使用其他修饰符\n|多继承|一个子类只能存在一个父类|一个子类可以存在多个接口\n|添加新方法|想抽象类中添加新方法,可以提供默认的实现,因此可以不修改子类现有的代码|如果往接口中添加新方法,则子类中需要实现该方法.\n|\n## 父类的静态方法能否被子类重写\n不能.子类继承父类后,有相同的静态方法和非静态,这是非静态方法覆盖父类中的方法(即方法重写),父类的该静态方法被隐藏(如果对象是父类则调用该隐藏的方法),另外子类可集成父类的静态与非静态方法,至于方法重载我觉得它其中一要素就是在同一类中,不能说父类中的什么方法与子类里的什么方法是方法重载的体现.\n\n## 什么是不可变对象\n不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。\n\n## 能否创建一个包含可变对象的不可变对象?\n当然可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用.\n\n## java 创建对象的几种方式\n1. 采用new\n2. 通过反射\n3. 采用clone\n4. 通过序列化机制\n\n前2者都需要显式地调用构造方法.   造成耦合性最高的恰好是第一种,因此你发现无论什么框架,只要涉及到解耦必先减少new的使用.\n\n\n## switch中能否使用string做参数\n在idk 1.7之前,switch只能支持byte,short,char,int或者其对应的封装类以及Enum类型。从idk 1.7之后switch开始支持String.\n\n## Object中有哪些公共方法?\n1. `equals()`\n2. `clone()`\n3. `getClass()`\n4. `notify(),notifyAll(),wait()`\n\n\n## java当中的四种引用\n强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:\n\n 1. 强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象\n 2. 软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。\n 3. 弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象\n 4. 虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。\n\n更多了解参见[深入对象引用](http://blog.csdn.net/dd864140130/article/details/49885811)\n\n\n## WeakReference与SoftReference的区别?\n这点在四种引用类型中已经做了解释,这里简单说明一下即可:\n虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。\n\n## 为什么要有不同的引用类型\n不像C语言,我们可以控制内存的申请和释放,在Java中有时候我们需要适当的控制对象被回收的时机,因此就诞生了不同的引用类型,可以说不同的引用类型实则是对GC回收时机不可控的妥协.有以下几个使用场景可以充分的说明:\n\n 1. 利用软引用和弱引用解决OOM问题：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题.\n 2. 通过软引用实现Java对象的高速缓存:比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。此时,通过软引用和 HashMap 的结合可以构建高速缓存,提供性能.\n\n\n## java中==和`eqauls()`的区别,`equals()`和`hashcode的区别\n==是运算符,用于比较两个变量是否相等,而equals是Object类的方法,用于比较两个对象是否相等.默认Object类的equals方法是比较两个对象的地址,此时和==的结果一样.换句话说:基本类型比较用==,比较的是他们的值.默认下,对象用==比较时,比较的是内存地址,如果需要比较对象内容,需要重写equal方法\n##`equals()`和`hashcode()`的联系\n`hashCode()`是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值.\n如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等(碰撞的情况下还是会相等的.)\n\n## a.hashCode()有什么用?与a.equals(b)有什么关系\nhashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hashcode。\n\n将对象放入到集合中时,首先判断要放入对象的hashcode是否已经在集合中存在,不存在则直接放入集合.如果hashcode相等,然后通过equal()方法判断要放入对象与集合中的任意对象是否相等:如果equal()判断不相等,直接将该元素放入集合中,否则不放入.\n\n## 有没有可能两个不相等的对象有相同的hashcode\n有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。\n\n\n## 可以在hashcode中使用随机数字吗?\n不行，因为同一对象的 hashcode 值必须是相同的\n\n## “a==b”与a.equals(b)有什么区别\n如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。\n\n##  `3*0.1==0.3`返回值是什么\nfalse，因为有些浮点数不能完全精确的表示出来。\n\n## a=a+b与a+=b有什么区别吗?\n隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：\nbyte a = 127;\nbyte b = 127;\nb = a + b; // error : cannot convert from int to byte\nb += a; // ok\n（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）\n\n## 内部类的作用\n内部类可以用多个实例,每个实例都有自己的状态信息,并且与其他外围对象的信息相互独立.在单个外围类当中,可以让多个内部类以不同的方式实现同一接口,或者继承同一个类.创建内部类对象的时刻病不依赖于外部类对象的创建.内部类并没有令人疑惑的”is-a”关系,它就像是一个独立的实体.\n\n内部类提供了更好的封装,除了该外围类,其他类都不能访问\n\n\n## final,finalize和finally的不同之处\nfinal 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。\n\n## clone()是哪个类型的方法?\njava.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。\n\n## 深拷贝和浅拷贝的区别是什么?\n浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。\n\n深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。\n\n## static都有哪些用法?\n几乎所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.\n\n除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作:\n```java\npublic calss PreCache{\n    static{\n        //执行相关操作\n    }\n}\n```\n此外static也多用于修饰内部类,此时称之为静态内部类.\n\n最后一种用法就是静态导包,即`import static`.import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名.资源名,可以直接使用资源名,比如:\n```java\nimport static java.lang.Math.*;\n\npublic class Test{\n\n    public static void main(String[] args){\n        //System.out.println(Math.sin(20));传统做法\n        System.out.println(sin(20));\n    }\n}\n\n```\n\n## final有哪些用法\nfinal也是很多面试喜欢问的地方,能回答下以下三点就不错了:\n1.被final修饰的类不可以被继承\n2.被final修饰的方法不可以被重写\n3.被final修饰的变量不可以被改变.如果修饰的引用,那么表示引用不可变,引用指向的内容可变.\n4.被final修饰的方法,JVM会尝试将其内联,以提高运行效率\n5.被final修饰的常量,在编译阶段会存入常量池中.\n\n当前回答出编译器对final域要遵守的两个重排序规则更好:\n1.在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序.\n2.初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不能重排序.\n\n\n\n\n----------\n\n\n#数据类型相关\n## java中int char,long各占多少字节?\n|类型|位数|字节数|\n|-|-|-|\n|short|2|16|\n|int|4|32|\n|long|8|64|\n|float|4|32\n|double|8|64|\n|char|2|16|\n\n## 64位的JVM当中,int的长度是多少?\nJava 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。\n\n## java int和Integer的区别\nInteger是int的包装类型,在拆箱和装箱中,而知自动转换.int是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象.\n\n## int 和Integer谁占用的内存更多?\nInteger 对象会占用更多的内存。Integer是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。\n\n## String,StringBuffer和StringBuilder区别\nString是字符串常量,final修饰;StringBuffer字符串变量(线程安全);\nStringBuilder 字符串变量(线程不安全).\n\n\n### String和StringBuffer\nString和StringBuffer主要区别是性能:String是不可变对象,每次对String类型进行操作都等同于产生了一个新的String对象,然后指向新的String对象.所以尽量不在对String进行大量的拼接操作,否则会产生很多临时对象,导致GC开始工作,影响系统性能.\n\nStringBuffer是对对象本身操作,而不是产生新的对象,因此在通常在有大量拼接的情况下我们建议使用StringBuffer.\n\n但是需要注意现在JVM会对String拼接做一定的优化:\n`String s=“This is only ”+”simple”+”test”`会被虚拟机直接优化成`String s=“This is only simple test”`,此时就不存在拼接过程.\n \n### StringBuffer和StringBuilder\nStringBuffer是线程安全的可变字符串,其内部实现是可变数组.StringBuilder是java 5.0新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.\n\n\n\n## 什么是编译器常量?使用它有什么风险?\n公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。\n## java当中使用什么类型表示价格比较好?\n如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。\n\n## 如何将byte转为String\n可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。\n\n\n## 可以将int强转为byte类型么?会产生什么问题?\n我们可以做强制转换，但是Java中int是32位的而byte是8 位的，所以,如果强制转化int类型的高24位将会被丢弃，byte 类型的范围是从-128.到128\n\n\n----------\n\n## 关于垃圾回收\n\n## 你知道哪些垃圾回收算法?\n垃圾回收从理论上非常容易理解,具体的方法有以下几种:\n 1. 标记-清除\n 2. 标记-复制\n 3. 标记-整理\n 4. 分代回收\n 更详细的内容参见[深入理解垃圾回收算法](http://blog.csdn.net/dd864140130/article/details/50084471)\n\n##如何判断一个对象是否应该被回收\n这就是所谓的对象存活性判断,常用的方法有两种:1.引用计数法;2:对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.\n\n##简单的解释一下垃圾回收\nJava 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.\n\n\n\n\n## 调用System.gc()会发生什么?\n通知GC开始工作,但是GC真正开始的时间不确定.\n\n----------\n\n\n# 进程,线程相关\n## 说说进程,线程,协程之间的区别\n简而言之,进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.\n\n## 你了解守护线程吗?它和非守护线程有什么区别\n程序运行完毕,jvm会等待非守护线程完成后关闭,但是jvm不会等待守护线程.守护线程最典型的例子就是GC线程\n## 什么是多线程上下文切换\n多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。\n\n## 创建两种线程的方式?他们有什么区别?\n通过实现java.lang.Runnable或者通过扩展java.lang.Thread类.相比扩展Thread,实现Runnable接口可能更优.原因有二:\n\n 1. Java不支持多继承.因此扩展Thread类就代表这个子类不能扩展其他类.而实现Runnable接口的类还可能扩展另一个类.\n 2. 类可能只要求可执行即可,因此集成整个Thread类的开销过大.\n\n## Runnable和Callable的区别\nRunnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。\n这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。\n\n## 什么导致线程阻塞\n阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。\n\n|方法|说明|\n|---|----|\n|sleep()|sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止|\n|suspend() 和 resume()|两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。|\n|yield() |yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程|\n|wait() 和 notify()|两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.|\n\n## wait(),notify()和suspend(),resume()之间的区别\n初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。上述的核心区别导致了一系列的细节上的区别。\n\n首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。\n\n其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。\n\nwait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。\n\n关于 wait() 和 notify() 方法最后再说明两点：\n第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。\n\n第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。\n\n谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。\n\n以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。\n\n## 为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用\n这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁\n\n## wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别\nwait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。\n\n## wait()与sleep()的区别\n\n 关于这两者已经在上面进行详细的说明,这里就做个概括好了:\n\n - sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁\n - sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU\n - sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用\n\n## synchronized和ReentrantLock的区别\nsynchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：\n（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁\n（2）ReentrantLock可以获取各种锁的信息\n（3）ReentrantLock可以灵活地实现多路通知\n另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word.\n\n## FutureTask是什么\n这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。\n\n## 一个线程如果出现了运行时异常怎么办?\n如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放\n\n\n## 如何在两个线程间共享数据\n通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的\n\n## 如何正确的使用wait()?使用if还是while?\nwait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：\n```\n synchronized (obj) {\n    while (condition does not hold)\n      obj.wait(); // (Releases lock, and reacquires on wakeup)\n      ... // Perform action appropriate to condition\n }\n```\n\n\n## 什么是线程局部变量\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n## ThreadLoal的作用是什么?\n简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.\n\n## 生产者消费者模型的作用是什么?\n（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用\n（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约\n\n## 写一个生产者-消费者队列\n可以通过阻塞队列实现,也可以通过wait-notify来实现.\n\n### 使用阻塞队列来实现\n```\n//消费者\npublic class Producer implements Runnable{\n    private final BlockingQueue<Integer> queue;\n\n    public Producer(BlockingQueue q){\n        this.queue=q;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true){\n                Thread.sleep(1000);//模拟耗时\n                queue.put(produce());\n            }\n        }catch (InterruptedException e){\n\n        }\n    }\n\n    private int produce() {\n        int n=new Random().nextInt(10000);\n        System.out.println(\"Thread:\" + Thread.currentThread().getId() + \" produce:\" + n);\n        return n;\n    }\n}\n//消费者\npublic class Consumer implements Runnable {\n    private final BlockingQueue<Integer> queue;\n\n    public Consumer(BlockingQueue q){\n        this.queue=q;\n    }\n\n    @Override\n    public void run() {\n        while (true){\n            try {\n                Thread.sleep(2000);//模拟耗时\n                consume(queue.take());\n            }catch (InterruptedException e){\n\n            }\n\n        }\n    }\n\n    private void consume(Integer n) {\n        System.out.println(\"Thread:\" + Thread.currentThread().getId() + \" consume:\" + n);\n\n    }\n}\n//测试\npublic class Main {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue=new ArrayBlockingQueue<Integer>(100);\n        Producer p=new Producer(queue);\n        Consumer c1=new Consumer(queue);\n        Consumer c2=new Consumer(queue);\n\n        new Thread(p).start();\n        new Thread(c1).start();\n        new Thread(c2).start();\n    }\n}\n\n```\n### 使用wait-notify来实现\n该种方式应该最经典,这里就不做说明了\n\n\n## ConcurrentHashMap的并发度是什么?\nConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？\n\n## CyclicBarrier和CountDownLatch区别\n这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：\n\n - CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行\n - CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务\n - CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了\n \n## java中的++操作符线程安全么?\n不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差\n\n## 你有哪些多线程开发良好的实践?\n1. 给线程命名\n2. 最小化同步范围\n3. 优先使用volatile\n4. 尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore\n5. 优先使用并发容器而非同步容器.\n6. 考虑使用线程池\n\n\n----------\n#关于volatile关键字\n## 可以创建Volatile数组吗?\nJava 中可以创建 volatile类型数组，不过只是一个指向数组的引用，而不是整个数组。如果改变引用指向的数组，将会受到volatile 的保护，但是如果多个线程同时改变数组的元素，volatile标示符就不能起到之前的保护作用了\n\n## volatile能使得一个非原子操作变成原子操作吗?\n一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。\n\n一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。\n\n## volatile类型变量提供什么保证?\nvolatile 主要有两方面的作用:1.避免指令重排2.可见性保证.例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的(低32位和高32位)，但 volatile 类型的 double 和 long 就是原子的.\n\n\n----------\n#关于集合\n\n## Java中的集合及其继承关系\n关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的List,Map的原理更该如此.这里我们看这张图即可:\n![这里写图片描述](http://img.blog.csdn.net/20141105193133812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGQ4NjQxNDAxMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n更多内容可见[集合类总结](http://write.blog.csdn.net/postedit/40826423)\n\n## poll()方法和remove()方法区别?\npoll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。\n\n## LinkedHashMap和PriorityQueue的区别\nPriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。\n\n## WeakHashMap与HashMap的区别是什么?\nWeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。\n\n## ArrayList和LinkedList的区别?\n最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。\n\n## ArrayList和HashMap默认大小?\n在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段\n```\nprivate static final int DEFAULT_CAPACITY = 10;\n \n //from HashMap.java JDK 7\n static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n```\n\n## Comparator和Comparable的区别?\nComparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。\n\n## 如何实现集合排序?\n你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。\n\n## 如何打印数组内容\n你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。\n\n## LinkedList的是单向链表还是双向?\n双向循环列表,具体实现自行查阅源码.\n\n## TreeMap是实现原理\n采用红黑树实现,具体实现自行查阅源码.\n\n## 遍历ArrayList时如何正确移除一个元素\n该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。\n\n\n## 什么是ArrayMap?它和HashMap有什么区别?\nArrayMap是Android SDK中提供的,非Android开发者可以略过.\nArrayMap是用两个数组来模拟map,更少的内存占用空间,更高的效率.\n具体参考这篇文章:[ArrayMap VS HashMap](http://lvable.com/?p=217%5D)\n\n\n## HashMap的实现原理\n1   HashMap概述：  HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。\n2   HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n\n当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上.\n\n\n## 你了解Fail-Fast机制吗\nFail-Fast即我们常说的快速失败,更多内容参看[fail-fast机制](http://blog.csdn.net/chenssy/article/details/38151189)\n\n\n----------\n\n\n# 关于日期\n## SimpleDateFormat是线程安全的吗?\n非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。\n\n## 如何格式化日期?\nJava 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。\n\n\n\n----------\n\n\n# 关于异常\n## 简单描述java异常体系\n相比没有人不了解异常体系,关于异常体系的更多信息可以见:[白话异常机制](http://blog.csdn.net/dd864140130/article/details/42504189)\n\n## 什么是异常链\n详情直接参见[白话异常机制](http://blog.csdn.net/dd864140130/article/details/42504189),不做解释了.\n\n## throw和throws的区别\nthrow用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：`throw new IllegalArgumentException(“size must be multiple of 2″)`,\n而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。\n\n\n----------\n\n## 关于序列化\n\n## Java 中，Serializable 与 Externalizable 的区别\nSerializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。\n\n\n----------\n\n#关于JVM\n\n## JVM特性\n平台无关性.\nJava语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。\n\n## 简单解释一下类加载器\n有关类加载器一般会问你四种类加载器的应用场景以及双亲委派模型,更多的内容参看[深入理解JVM加载器](http://blog.csdn.net/dd864140130/article/details/49817357)\n\n## 简述堆和栈的区别\nVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。\n\n## 简述JVM内存分配\n\n 1. 基本数据类型比变量和对象的引用都是在栈分配的\n 2. 堆内存用来存放由new创建的对象和数组\n 3. 类变量（static修饰的变量），程序在一加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中\n 4. 实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的\"物理位置”,实例变量的生命周期--当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存\n 5. 局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放\n\n\n\n----------\n\n\n#其他\n## java当中采用的是大端还是小端?\n\n## XML解析的几种方式和特点\nDOM,SAX,PULL三种解析方式:\n\n - DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机\n - SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。\n - PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。\n \n\n\n## JDK 1.7特性\n然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(\\<\\>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码\n## JDK 1.8特性\njava 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：\nLambda 表达式，允许像对象一样传递匿名函数\nStream API，充分利用现代多核 CPU，可以写出很简洁的代码\nDate 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用\n扩展方法，现在，接口中可以有静态、默认方法。\n重复注解，现在你可以将相同的注解在同一类型上使用多次。\n\n## Maven和ANT有什么区别?\n虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件），Maven 与 ANT 工具更多的不同之处请参见答案。\n这就是所有的面试题，如此之多，是不是？我可以保证，如果你能回答列表中的所有问题，你就可以很轻松的应付任何核心 Java 或者高级 Java 面试。虽然，这里没有涵盖 Servlet、JSP、JSF、JPA，JMS，EJB 及其它 Java EE 技术，也没有包含主流的框架如 spring MVC，Struts 2.0，hibernate，也没有包含 SOAP 和 RESTful web service，但是这份列表对做 Java 开发的、准备应聘 Java web 开发职位的人还是同样有用的，因为所有的 Java 面试，开始的问题都是 Java 基础和 JDK API 相关的。如果你认为我这里有任何应该在这份列表中而被我遗漏了的 Java 流行的问题，你可以自由的给我建议。我的目的是从最近的面试中创建一份最新的、最优的 Java 面试问题列表。\n\n## JDBC最佳实践\n - 优先使用批量操作来插入和更新数据\n - 使用PreparedStatement来避免SQL漏洞\n - 使用数据连接池\n - 通过列名来获取结果集\n \n## IO操作最佳实践\n1. 使用有缓冲的IO类,不要单独读取字节或字符\n2. 使用NIO和NIO 2或者AIO,而非BIO\n3. 在finally中关闭流\n4. 使用内存映射文件获取更快的IO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Java面试宝典.md","raw":"---\ntitle: Java面试宝典\ndate: 2017-02-20 09:40:15\ntags:\n  - 面试\n  - java\ncategories:\n  - 面试\n  - java\n---\n文章转自：\n[java面试题](http://blog.csdn.net/dd864140130/article/details/55833087)\n\n# Java面试宝典\n\n\n# 相关概念\n## 面向对象的三个特征\n封装,继承,多态.这个应该是人人皆知.有时候也会加上抽象.\n\n\n## 多态的好处\n允许不同类对象对同一消息做出响应,即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用).主要有以下优点:\n\n1. 可替换性:多态对已存在代码具有可替换性.\n2. 可扩充性:增加新的子类不影响已经存在的类结构.\n3. 接口性:多态是超累通过方法签名,想子类提供一个公共接口,由子类来完善或者重写它来实现的.\n4. 灵活性:\n5. 简化性:\n\n### 代码中如何实现多态\n实现多态主要有以下三种方式:\n1. 接口实现\n2. 继承父类重写方法\n3. 同一类中进行方法重载\n<!--more-->\n### 虚拟机是如何实现多态的\n动态绑定技术(dynamic binding),执行期间判断所引用对象的实际类型,根据实际类型调用对应的方法.\n\n\n## 接口的意义\n接口的意义用三个词就可以概括:规范,扩展,回调.\n## 抽象类的意义\n抽象类的意义可以用三句话来概括:\n\n 1. 为其他子类提供一个公共的类型\n 2. 封装子类中重复定义的内容\n 3. 定义抽象方法,子类虽然有不同的实现,但是定义时一致的\n## 接口和抽象类的区别\n\n|比较|抽象类|接口|\n|----|------|----|\n|默认方法|抽象类可以有默认的方法实现|,java 8之前,接口中不存在方法的实现.|\n|实现方式|子类使用extends关键字来继承抽象类.如果子类不是抽象类,子类需要提供抽象类中所声明方法的实现.|子类使用implements来实现接口,需要提供接口中所有声明的实现.\n|构造器|抽象类中可以有构造器,|接口中不能|\n|和正常类区别|抽象类不能被实例化|接口则是完全不同的类型\n|访问修饰符|抽象方法可以有public,protected和default等修饰|接口默认是public,不能使用其他修饰符\n|多继承|一个子类只能存在一个父类|一个子类可以存在多个接口\n|添加新方法|想抽象类中添加新方法,可以提供默认的实现,因此可以不修改子类现有的代码|如果往接口中添加新方法,则子类中需要实现该方法.\n|\n## 父类的静态方法能否被子类重写\n不能.子类继承父类后,有相同的静态方法和非静态,这是非静态方法覆盖父类中的方法(即方法重写),父类的该静态方法被隐藏(如果对象是父类则调用该隐藏的方法),另外子类可集成父类的静态与非静态方法,至于方法重载我觉得它其中一要素就是在同一类中,不能说父类中的什么方法与子类里的什么方法是方法重载的体现.\n\n## 什么是不可变对象\n不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。\n\n## 能否创建一个包含可变对象的不可变对象?\n当然可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用.\n\n## java 创建对象的几种方式\n1. 采用new\n2. 通过反射\n3. 采用clone\n4. 通过序列化机制\n\n前2者都需要显式地调用构造方法.   造成耦合性最高的恰好是第一种,因此你发现无论什么框架,只要涉及到解耦必先减少new的使用.\n\n\n## switch中能否使用string做参数\n在idk 1.7之前,switch只能支持byte,short,char,int或者其对应的封装类以及Enum类型。从idk 1.7之后switch开始支持String.\n\n## Object中有哪些公共方法?\n1. `equals()`\n2. `clone()`\n3. `getClass()`\n4. `notify(),notifyAll(),wait()`\n\n\n## java当中的四种引用\n强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:\n\n 1. 强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象\n 2. 软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。\n 3. 弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象\n 4. 虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。\n\n更多了解参见[深入对象引用](http://blog.csdn.net/dd864140130/article/details/49885811)\n\n\n## WeakReference与SoftReference的区别?\n这点在四种引用类型中已经做了解释,这里简单说明一下即可:\n虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。\n\n## 为什么要有不同的引用类型\n不像C语言,我们可以控制内存的申请和释放,在Java中有时候我们需要适当的控制对象被回收的时机,因此就诞生了不同的引用类型,可以说不同的引用类型实则是对GC回收时机不可控的妥协.有以下几个使用场景可以充分的说明:\n\n 1. 利用软引用和弱引用解决OOM问题：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题.\n 2. 通过软引用实现Java对象的高速缓存:比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。此时,通过软引用和 HashMap 的结合可以构建高速缓存,提供性能.\n\n\n## java中==和`eqauls()`的区别,`equals()`和`hashcode的区别\n==是运算符,用于比较两个变量是否相等,而equals是Object类的方法,用于比较两个对象是否相等.默认Object类的equals方法是比较两个对象的地址,此时和==的结果一样.换句话说:基本类型比较用==,比较的是他们的值.默认下,对象用==比较时,比较的是内存地址,如果需要比较对象内容,需要重写equal方法\n##`equals()`和`hashcode()`的联系\n`hashCode()`是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值.\n如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等(碰撞的情况下还是会相等的.)\n\n## a.hashCode()有什么用?与a.equals(b)有什么关系\nhashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hashcode。\n\n将对象放入到集合中时,首先判断要放入对象的hashcode是否已经在集合中存在,不存在则直接放入集合.如果hashcode相等,然后通过equal()方法判断要放入对象与集合中的任意对象是否相等:如果equal()判断不相等,直接将该元素放入集合中,否则不放入.\n\n## 有没有可能两个不相等的对象有相同的hashcode\n有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。\n\n\n## 可以在hashcode中使用随机数字吗?\n不行，因为同一对象的 hashcode 值必须是相同的\n\n## “a==b”与a.equals(b)有什么区别\n如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。\n\n##  `3*0.1==0.3`返回值是什么\nfalse，因为有些浮点数不能完全精确的表示出来。\n\n## a=a+b与a+=b有什么区别吗?\n隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：\nbyte a = 127;\nbyte b = 127;\nb = a + b; // error : cannot convert from int to byte\nb += a; // ok\n（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）\n\n## 内部类的作用\n内部类可以用多个实例,每个实例都有自己的状态信息,并且与其他外围对象的信息相互独立.在单个外围类当中,可以让多个内部类以不同的方式实现同一接口,或者继承同一个类.创建内部类对象的时刻病不依赖于外部类对象的创建.内部类并没有令人疑惑的”is-a”关系,它就像是一个独立的实体.\n\n内部类提供了更好的封装,除了该外围类,其他类都不能访问\n\n\n## final,finalize和finally的不同之处\nfinal 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。\n\n## clone()是哪个类型的方法?\njava.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。\n\n## 深拷贝和浅拷贝的区别是什么?\n浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。\n\n深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。\n\n## static都有哪些用法?\n几乎所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.\n\n除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作:\n```java\npublic calss PreCache{\n    static{\n        //执行相关操作\n    }\n}\n```\n此外static也多用于修饰内部类,此时称之为静态内部类.\n\n最后一种用法就是静态导包,即`import static`.import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名.资源名,可以直接使用资源名,比如:\n```java\nimport static java.lang.Math.*;\n\npublic class Test{\n\n    public static void main(String[] args){\n        //System.out.println(Math.sin(20));传统做法\n        System.out.println(sin(20));\n    }\n}\n\n```\n\n## final有哪些用法\nfinal也是很多面试喜欢问的地方,能回答下以下三点就不错了:\n1.被final修饰的类不可以被继承\n2.被final修饰的方法不可以被重写\n3.被final修饰的变量不可以被改变.如果修饰的引用,那么表示引用不可变,引用指向的内容可变.\n4.被final修饰的方法,JVM会尝试将其内联,以提高运行效率\n5.被final修饰的常量,在编译阶段会存入常量池中.\n\n当前回答出编译器对final域要遵守的两个重排序规则更好:\n1.在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序.\n2.初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不能重排序.\n\n\n\n\n----------\n\n\n#数据类型相关\n## java中int char,long各占多少字节?\n|类型|位数|字节数|\n|-|-|-|\n|short|2|16|\n|int|4|32|\n|long|8|64|\n|float|4|32\n|double|8|64|\n|char|2|16|\n\n## 64位的JVM当中,int的长度是多少?\nJava 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。\n\n## java int和Integer的区别\nInteger是int的包装类型,在拆箱和装箱中,而知自动转换.int是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象.\n\n## int 和Integer谁占用的内存更多?\nInteger 对象会占用更多的内存。Integer是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。\n\n## String,StringBuffer和StringBuilder区别\nString是字符串常量,final修饰;StringBuffer字符串变量(线程安全);\nStringBuilder 字符串变量(线程不安全).\n\n\n### String和StringBuffer\nString和StringBuffer主要区别是性能:String是不可变对象,每次对String类型进行操作都等同于产生了一个新的String对象,然后指向新的String对象.所以尽量不在对String进行大量的拼接操作,否则会产生很多临时对象,导致GC开始工作,影响系统性能.\n\nStringBuffer是对对象本身操作,而不是产生新的对象,因此在通常在有大量拼接的情况下我们建议使用StringBuffer.\n\n但是需要注意现在JVM会对String拼接做一定的优化:\n`String s=“This is only ”+”simple”+”test”`会被虚拟机直接优化成`String s=“This is only simple test”`,此时就不存在拼接过程.\n \n### StringBuffer和StringBuilder\nStringBuffer是线程安全的可变字符串,其内部实现是可变数组.StringBuilder是java 5.0新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.\n\n\n\n## 什么是编译器常量?使用它有什么风险?\n公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。\n## java当中使用什么类型表示价格比较好?\n如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。\n\n## 如何将byte转为String\n可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。\n\n\n## 可以将int强转为byte类型么?会产生什么问题?\n我们可以做强制转换，但是Java中int是32位的而byte是8 位的，所以,如果强制转化int类型的高24位将会被丢弃，byte 类型的范围是从-128.到128\n\n\n----------\n\n## 关于垃圾回收\n\n## 你知道哪些垃圾回收算法?\n垃圾回收从理论上非常容易理解,具体的方法有以下几种:\n 1. 标记-清除\n 2. 标记-复制\n 3. 标记-整理\n 4. 分代回收\n 更详细的内容参见[深入理解垃圾回收算法](http://blog.csdn.net/dd864140130/article/details/50084471)\n\n##如何判断一个对象是否应该被回收\n这就是所谓的对象存活性判断,常用的方法有两种:1.引用计数法;2:对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.\n\n##简单的解释一下垃圾回收\nJava 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.\n\n\n\n\n## 调用System.gc()会发生什么?\n通知GC开始工作,但是GC真正开始的时间不确定.\n\n----------\n\n\n# 进程,线程相关\n## 说说进程,线程,协程之间的区别\n简而言之,进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.\n\n## 你了解守护线程吗?它和非守护线程有什么区别\n程序运行完毕,jvm会等待非守护线程完成后关闭,但是jvm不会等待守护线程.守护线程最典型的例子就是GC线程\n## 什么是多线程上下文切换\n多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。\n\n## 创建两种线程的方式?他们有什么区别?\n通过实现java.lang.Runnable或者通过扩展java.lang.Thread类.相比扩展Thread,实现Runnable接口可能更优.原因有二:\n\n 1. Java不支持多继承.因此扩展Thread类就代表这个子类不能扩展其他类.而实现Runnable接口的类还可能扩展另一个类.\n 2. 类可能只要求可执行即可,因此集成整个Thread类的开销过大.\n\n## Runnable和Callable的区别\nRunnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。\n这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。\n\n## 什么导致线程阻塞\n阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。\n\n|方法|说明|\n|---|----|\n|sleep()|sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止|\n|suspend() 和 resume()|两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。|\n|yield() |yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程|\n|wait() 和 notify()|两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.|\n\n## wait(),notify()和suspend(),resume()之间的区别\n初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。上述的核心区别导致了一系列的细节上的区别。\n\n首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。\n\n其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。\n\nwait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。\n\n关于 wait() 和 notify() 方法最后再说明两点：\n第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。\n\n第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。\n\n谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。\n\n以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。\n\n## 为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用\n这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁\n\n## wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别\nwait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。\n\n## wait()与sleep()的区别\n\n 关于这两者已经在上面进行详细的说明,这里就做个概括好了:\n\n - sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁\n - sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU\n - sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用\n\n## synchronized和ReentrantLock的区别\nsynchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：\n（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁\n（2）ReentrantLock可以获取各种锁的信息\n（3）ReentrantLock可以灵活地实现多路通知\n另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word.\n\n## FutureTask是什么\n这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。\n\n## 一个线程如果出现了运行时异常怎么办?\n如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放\n\n\n## 如何在两个线程间共享数据\n通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的\n\n## 如何正确的使用wait()?使用if还是while?\nwait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：\n```\n synchronized (obj) {\n    while (condition does not hold)\n      obj.wait(); // (Releases lock, and reacquires on wakeup)\n      ... // Perform action appropriate to condition\n }\n```\n\n\n## 什么是线程局部变量\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n## ThreadLoal的作用是什么?\n简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.\n\n## 生产者消费者模型的作用是什么?\n（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用\n（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约\n\n## 写一个生产者-消费者队列\n可以通过阻塞队列实现,也可以通过wait-notify来实现.\n\n### 使用阻塞队列来实现\n```\n//消费者\npublic class Producer implements Runnable{\n    private final BlockingQueue<Integer> queue;\n\n    public Producer(BlockingQueue q){\n        this.queue=q;\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true){\n                Thread.sleep(1000);//模拟耗时\n                queue.put(produce());\n            }\n        }catch (InterruptedException e){\n\n        }\n    }\n\n    private int produce() {\n        int n=new Random().nextInt(10000);\n        System.out.println(\"Thread:\" + Thread.currentThread().getId() + \" produce:\" + n);\n        return n;\n    }\n}\n//消费者\npublic class Consumer implements Runnable {\n    private final BlockingQueue<Integer> queue;\n\n    public Consumer(BlockingQueue q){\n        this.queue=q;\n    }\n\n    @Override\n    public void run() {\n        while (true){\n            try {\n                Thread.sleep(2000);//模拟耗时\n                consume(queue.take());\n            }catch (InterruptedException e){\n\n            }\n\n        }\n    }\n\n    private void consume(Integer n) {\n        System.out.println(\"Thread:\" + Thread.currentThread().getId() + \" consume:\" + n);\n\n    }\n}\n//测试\npublic class Main {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue=new ArrayBlockingQueue<Integer>(100);\n        Producer p=new Producer(queue);\n        Consumer c1=new Consumer(queue);\n        Consumer c2=new Consumer(queue);\n\n        new Thread(p).start();\n        new Thread(c1).start();\n        new Thread(c2).start();\n    }\n}\n\n```\n### 使用wait-notify来实现\n该种方式应该最经典,这里就不做说明了\n\n\n## ConcurrentHashMap的并发度是什么?\nConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？\n\n## CyclicBarrier和CountDownLatch区别\n这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：\n\n - CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行\n - CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务\n - CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了\n \n## java中的++操作符线程安全么?\n不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差\n\n## 你有哪些多线程开发良好的实践?\n1. 给线程命名\n2. 最小化同步范围\n3. 优先使用volatile\n4. 尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore\n5. 优先使用并发容器而非同步容器.\n6. 考虑使用线程池\n\n\n----------\n#关于volatile关键字\n## 可以创建Volatile数组吗?\nJava 中可以创建 volatile类型数组，不过只是一个指向数组的引用，而不是整个数组。如果改变引用指向的数组，将会受到volatile 的保护，但是如果多个线程同时改变数组的元素，volatile标示符就不能起到之前的保护作用了\n\n## volatile能使得一个非原子操作变成原子操作吗?\n一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。\n\n一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。\n\n## volatile类型变量提供什么保证?\nvolatile 主要有两方面的作用:1.避免指令重排2.可见性保证.例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的(低32位和高32位)，但 volatile 类型的 double 和 long 就是原子的.\n\n\n----------\n#关于集合\n\n## Java中的集合及其继承关系\n关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的List,Map的原理更该如此.这里我们看这张图即可:\n![这里写图片描述](http://img.blog.csdn.net/20141105193133812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGQ4NjQxNDAxMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n更多内容可见[集合类总结](http://write.blog.csdn.net/postedit/40826423)\n\n## poll()方法和remove()方法区别?\npoll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。\n\n## LinkedHashMap和PriorityQueue的区别\nPriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。\n\n## WeakHashMap与HashMap的区别是什么?\nWeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。\n\n## ArrayList和LinkedList的区别?\n最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。\n\n## ArrayList和HashMap默认大小?\n在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段\n```\nprivate static final int DEFAULT_CAPACITY = 10;\n \n //from HashMap.java JDK 7\n static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n```\n\n## Comparator和Comparable的区别?\nComparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。\n\n## 如何实现集合排序?\n你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。\n\n## 如何打印数组内容\n你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。\n\n## LinkedList的是单向链表还是双向?\n双向循环列表,具体实现自行查阅源码.\n\n## TreeMap是实现原理\n采用红黑树实现,具体实现自行查阅源码.\n\n## 遍历ArrayList时如何正确移除一个元素\n该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。\n\n\n## 什么是ArrayMap?它和HashMap有什么区别?\nArrayMap是Android SDK中提供的,非Android开发者可以略过.\nArrayMap是用两个数组来模拟map,更少的内存占用空间,更高的效率.\n具体参考这篇文章:[ArrayMap VS HashMap](http://lvable.com/?p=217%5D)\n\n\n## HashMap的实现原理\n1   HashMap概述：  HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。\n2   HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n\n当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上.\n\n\n## 你了解Fail-Fast机制吗\nFail-Fast即我们常说的快速失败,更多内容参看[fail-fast机制](http://blog.csdn.net/chenssy/article/details/38151189)\n\n\n----------\n\n\n# 关于日期\n## SimpleDateFormat是线程安全的吗?\n非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。\n\n## 如何格式化日期?\nJava 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。\n\n\n\n----------\n\n\n# 关于异常\n## 简单描述java异常体系\n相比没有人不了解异常体系,关于异常体系的更多信息可以见:[白话异常机制](http://blog.csdn.net/dd864140130/article/details/42504189)\n\n## 什么是异常链\n详情直接参见[白话异常机制](http://blog.csdn.net/dd864140130/article/details/42504189),不做解释了.\n\n## throw和throws的区别\nthrow用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：`throw new IllegalArgumentException(“size must be multiple of 2″)`,\n而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。\n\n\n----------\n\n## 关于序列化\n\n## Java 中，Serializable 与 Externalizable 的区别\nSerializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。\n\n\n----------\n\n#关于JVM\n\n## JVM特性\n平台无关性.\nJava语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。\n\n## 简单解释一下类加载器\n有关类加载器一般会问你四种类加载器的应用场景以及双亲委派模型,更多的内容参看[深入理解JVM加载器](http://blog.csdn.net/dd864140130/article/details/49817357)\n\n## 简述堆和栈的区别\nVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。\n\n## 简述JVM内存分配\n\n 1. 基本数据类型比变量和对象的引用都是在栈分配的\n 2. 堆内存用来存放由new创建的对象和数组\n 3. 类变量（static修饰的变量），程序在一加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中\n 4. 实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的\"物理位置”,实例变量的生命周期--当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存\n 5. 局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放\n\n\n\n----------\n\n\n#其他\n## java当中采用的是大端还是小端?\n\n## XML解析的几种方式和特点\nDOM,SAX,PULL三种解析方式:\n\n - DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机\n - SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。\n - PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。\n \n\n\n## JDK 1.7特性\n然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(\\<\\>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码\n## JDK 1.8特性\njava 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：\nLambda 表达式，允许像对象一样传递匿名函数\nStream API，充分利用现代多核 CPU，可以写出很简洁的代码\nDate 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用\n扩展方法，现在，接口中可以有静态、默认方法。\n重复注解，现在你可以将相同的注解在同一类型上使用多次。\n\n## Maven和ANT有什么区别?\n虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件），Maven 与 ANT 工具更多的不同之处请参见答案。\n这就是所有的面试题，如此之多，是不是？我可以保证，如果你能回答列表中的所有问题，你就可以很轻松的应付任何核心 Java 或者高级 Java 面试。虽然，这里没有涵盖 Servlet、JSP、JSF、JPA，JMS，EJB 及其它 Java EE 技术，也没有包含主流的框架如 spring MVC，Struts 2.0，hibernate，也没有包含 SOAP 和 RESTful web service，但是这份列表对做 Java 开发的、准备应聘 Java web 开发职位的人还是同样有用的，因为所有的 Java 面试，开始的问题都是 Java 基础和 JDK API 相关的。如果你认为我这里有任何应该在这份列表中而被我遗漏了的 Java 流行的问题，你可以自由的给我建议。我的目的是从最近的面试中创建一份最新的、最优的 Java 面试问题列表。\n\n## JDBC最佳实践\n - 优先使用批量操作来插入和更新数据\n - 使用PreparedStatement来避免SQL漏洞\n - 使用数据连接池\n - 通过列名来获取结果集\n \n## IO操作最佳实践\n1. 使用有缓冲的IO类,不要单独读取字节或字符\n2. 使用NIO和NIO 2或者AIO,而非BIO\n3. 在finally中关闭流\n4. 使用内存映射文件获取更快的IO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Java面试宝典","published":1,"updated":"2019-05-05T09:43:38.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncipa008ny8us1syubsqi","content":"<p>文章转自：<br><a href=\"http://blog.csdn.net/dd864140130/article/details/55833087\" target=\"_blank\" rel=\"noopener\">java面试题</a></p>\n<h1 id=\"Java面试宝典\"><a href=\"#Java面试宝典\" class=\"headerlink\" title=\"Java面试宝典\"></a>Java面试宝典</h1><h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><h2 id=\"面向对象的三个特征\"><a href=\"#面向对象的三个特征\" class=\"headerlink\" title=\"面向对象的三个特征\"></a>面向对象的三个特征</h2><p>封装,继承,多态.这个应该是人人皆知.有时候也会加上抽象.</p>\n<h2 id=\"多态的好处\"><a href=\"#多态的好处\" class=\"headerlink\" title=\"多态的好处\"></a>多态的好处</h2><p>允许不同类对象对同一消息做出响应,即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用).主要有以下优点:</p>\n<ol>\n<li>可替换性:多态对已存在代码具有可替换性.</li>\n<li>可扩充性:增加新的子类不影响已经存在的类结构.</li>\n<li>接口性:多态是超累通过方法签名,想子类提供一个公共接口,由子类来完善或者重写它来实现的.</li>\n<li>灵活性:</li>\n<li>简化性:</li>\n</ol>\n<h3 id=\"代码中如何实现多态\"><a href=\"#代码中如何实现多态\" class=\"headerlink\" title=\"代码中如何实现多态\"></a>代码中如何实现多态</h3><p>实现多态主要有以下三种方式:</p>\n<ol>\n<li>接口实现</li>\n<li>继承父类重写方法</li>\n<li>同一类中进行方法重载<a id=\"more\"></a>\n<h3 id=\"虚拟机是如何实现多态的\"><a href=\"#虚拟机是如何实现多态的\" class=\"headerlink\" title=\"虚拟机是如何实现多态的\"></a>虚拟机是如何实现多态的</h3>动态绑定技术(dynamic binding),执行期间判断所引用对象的实际类型,根据实际类型调用对应的方法.</li>\n</ol>\n<h2 id=\"接口的意义\"><a href=\"#接口的意义\" class=\"headerlink\" title=\"接口的意义\"></a>接口的意义</h2><p>接口的意义用三个词就可以概括:规范,扩展,回调.</p>\n<h2 id=\"抽象类的意义\"><a href=\"#抽象类的意义\" class=\"headerlink\" title=\"抽象类的意义\"></a>抽象类的意义</h2><p>抽象类的意义可以用三句话来概括:</p>\n<ol>\n<li>为其他子类提供一个公共的类型</li>\n<li>封装子类中重复定义的内容</li>\n<li>定义抽象方法,子类虽然有不同的实现,但是定义时一致的<h2 id=\"接口和抽象类的区别\"><a href=\"#接口和抽象类的区别\" class=\"headerlink\" title=\"接口和抽象类的区别\"></a>接口和抽象类的区别</h2></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th>抽象类</th>\n<th>接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认方法</td>\n<td>抽象类可以有默认的方法实现</td>\n<td>,java 8之前,接口中不存在方法的实现.</td>\n</tr>\n<tr>\n<td>实现方式</td>\n<td>子类使用extends关键字来继承抽象类.如果子类不是抽象类,子类需要提供抽象类中所声明方法的实现.</td>\n<td>子类使用implements来实现接口,需要提供接口中所有声明的实现.</td>\n</tr>\n<tr>\n<td>构造器</td>\n<td>抽象类中可以有构造器,</td>\n<td>接口中不能</td>\n</tr>\n<tr>\n<td>和正常类区别</td>\n<td>抽象类不能被实例化</td>\n<td>接口则是完全不同的类型</td>\n</tr>\n<tr>\n<td>访问修饰符</td>\n<td>抽象方法可以有public,protected和default等修饰</td>\n<td>接口默认是public,不能使用其他修饰符</td>\n</tr>\n<tr>\n<td>多继承</td>\n<td>一个子类只能存在一个父类</td>\n<td>一个子类可以存在多个接口</td>\n</tr>\n<tr>\n<td>添加新方法</td>\n<td>想抽象类中添加新方法,可以提供默认的实现,因此可以不修改子类现有的代码</td>\n<td>如果往接口中添加新方法,则子类中需要实现该方法.</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"父类的静态方法能否被子类重写\"><a href=\"#父类的静态方法能否被子类重写\" class=\"headerlink\" title=\"父类的静态方法能否被子类重写\"></a>父类的静态方法能否被子类重写</h2><p>不能.子类继承父类后,有相同的静态方法和非静态,这是非静态方法覆盖父类中的方法(即方法重写),父类的该静态方法被隐藏(如果对象是父类则调用该隐藏的方法),另外子类可集成父类的静态与非静态方法,至于方法重载我觉得它其中一要素就是在同一类中,不能说父类中的什么方法与子类里的什么方法是方法重载的体现.</p>\n<h2 id=\"什么是不可变对象\"><a href=\"#什么是不可变对象\" class=\"headerlink\" title=\"什么是不可变对象\"></a>什么是不可变对象</h2><p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p>\n<h2 id=\"能否创建一个包含可变对象的不可变对象\"><a href=\"#能否创建一个包含可变对象的不可变对象\" class=\"headerlink\" title=\"能否创建一个包含可变对象的不可变对象?\"></a>能否创建一个包含可变对象的不可变对象?</h2><p>当然可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用.</p>\n<h2 id=\"java-创建对象的几种方式\"><a href=\"#java-创建对象的几种方式\" class=\"headerlink\" title=\"java 创建对象的几种方式\"></a>java 创建对象的几种方式</h2><ol>\n<li>采用new</li>\n<li>通过反射</li>\n<li>采用clone</li>\n<li>通过序列化机制</li>\n</ol>\n<p>前2者都需要显式地调用构造方法.   造成耦合性最高的恰好是第一种,因此你发现无论什么框架,只要涉及到解耦必先减少new的使用.</p>\n<h2 id=\"switch中能否使用string做参数\"><a href=\"#switch中能否使用string做参数\" class=\"headerlink\" title=\"switch中能否使用string做参数\"></a>switch中能否使用string做参数</h2><p>在idk 1.7之前,switch只能支持byte,short,char,int或者其对应的封装类以及Enum类型。从idk 1.7之后switch开始支持String.</p>\n<h2 id=\"Object中有哪些公共方法\"><a href=\"#Object中有哪些公共方法\" class=\"headerlink\" title=\"Object中有哪些公共方法?\"></a>Object中有哪些公共方法?</h2><ol>\n<li><code>equals()</code></li>\n<li><code>clone()</code></li>\n<li><code>getClass()</code></li>\n<li><code>notify(),notifyAll(),wait()</code></li>\n</ol>\n<h2 id=\"java当中的四种引用\"><a href=\"#java当中的四种引用\" class=\"headerlink\" title=\"java当中的四种引用\"></a>java当中的四种引用</h2><p>强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:</p>\n<ol>\n<li>强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象</li>\n<li>软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。</li>\n<li>弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</li>\n<li>虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。</li>\n</ol>\n<p>更多了解参见<a href=\"http://blog.csdn.net/dd864140130/article/details/49885811\" target=\"_blank\" rel=\"noopener\">深入对象引用</a></p>\n<h2 id=\"WeakReference与SoftReference的区别\"><a href=\"#WeakReference与SoftReference的区别\" class=\"headerlink\" title=\"WeakReference与SoftReference的区别?\"></a>WeakReference与SoftReference的区别?</h2><p>这点在四种引用类型中已经做了解释,这里简单说明一下即可:<br>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。</p>\n<h2 id=\"为什么要有不同的引用类型\"><a href=\"#为什么要有不同的引用类型\" class=\"headerlink\" title=\"为什么要有不同的引用类型\"></a>为什么要有不同的引用类型</h2><p>不像C语言,我们可以控制内存的申请和释放,在Java中有时候我们需要适当的控制对象被回收的时机,因此就诞生了不同的引用类型,可以说不同的引用类型实则是对GC回收时机不可控的妥协.有以下几个使用场景可以充分的说明:</p>\n<ol>\n<li>利用软引用和弱引用解决OOM问题：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题.</li>\n<li>通过软引用实现Java对象的高速缓存:比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。此时,通过软引用和 HashMap 的结合可以构建高速缓存,提供性能.</li>\n</ol>\n<h2 id=\"java中-和eqauls-的区别-equals-和-hashcode的区别\"><a href=\"#java中-和eqauls-的区别-equals-和-hashcode的区别\" class=\"headerlink\" title=\"java中==和eqauls()的区别,equals()和`hashcode的区别\"></a>java中==和<code>eqauls()</code>的区别,<code>equals()</code>和`hashcode的区别</h2><p>==是运算符,用于比较两个变量是否相等,而equals是Object类的方法,用于比较两个对象是否相等.默认Object类的equals方法是比较两个对象的地址,此时和==的结果一样.换句话说:基本类型比较用==,比较的是他们的值.默认下,对象用==比较时,比较的是内存地址,如果需要比较对象内容,需要重写equal方法</p>\n<p>##<code>equals()</code>和<code>hashcode()</code>的联系<br><code>hashCode()</code>是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值.<br>如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等(碰撞的情况下还是会相等的.)</p>\n<h2 id=\"a-hashCode-有什么用-与a-equals-b-有什么关系\"><a href=\"#a-hashCode-有什么用-与a-equals-b-有什么关系\" class=\"headerlink\" title=\"a.hashCode()有什么用?与a.equals(b)有什么关系\"></a>a.hashCode()有什么用?与a.equals(b)有什么关系</h2><p>hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hashcode。</p>\n<p>将对象放入到集合中时,首先判断要放入对象的hashcode是否已经在集合中存在,不存在则直接放入集合.如果hashcode相等,然后通过equal()方法判断要放入对象与集合中的任意对象是否相等:如果equal()判断不相等,直接将该元素放入集合中,否则不放入.</p>\n<h2 id=\"有没有可能两个不相等的对象有相同的hashcode\"><a href=\"#有没有可能两个不相等的对象有相同的hashcode\" class=\"headerlink\" title=\"有没有可能两个不相等的对象有相同的hashcode\"></a>有没有可能两个不相等的对象有相同的hashcode</h2><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p>\n<h2 id=\"可以在hashcode中使用随机数字吗\"><a href=\"#可以在hashcode中使用随机数字吗\" class=\"headerlink\" title=\"可以在hashcode中使用随机数字吗?\"></a>可以在hashcode中使用随机数字吗?</h2><p>不行，因为同一对象的 hashcode 值必须是相同的</p>\n<h2 id=\"“a-b”与a-equals-b-有什么区别\"><a href=\"#“a-b”与a-equals-b-有什么区别\" class=\"headerlink\" title=\"“a==b”与a.equals(b)有什么区别\"></a>“a==b”与a.equals(b)有什么区别</h2><p>如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p>\n<h2 id=\"3-0-1-0-3返回值是什么\"><a href=\"#3-0-1-0-3返回值是什么\" class=\"headerlink\" title=\"3*0.1==0.3返回值是什么\"></a><code>3*0.1==0.3</code>返回值是什么</h2><p>false，因为有些浮点数不能完全精确的表示出来。</p>\n<h2 id=\"a-a-b与a-b有什么区别吗\"><a href=\"#a-a-b与a-b有什么区别吗\" class=\"headerlink\" title=\"a=a+b与a+=b有什么区别吗?\"></a>a=a+b与a+=b有什么区别吗?</h2><p>隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：<br>byte a = 127;<br>byte b = 127;<br>b = a + b; // error : cannot convert from int to byte<br>b += a; // ok<br>（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）</p>\n<h2 id=\"内部类的作用\"><a href=\"#内部类的作用\" class=\"headerlink\" title=\"内部类的作用\"></a>内部类的作用</h2><p>内部类可以用多个实例,每个实例都有自己的状态信息,并且与其他外围对象的信息相互独立.在单个外围类当中,可以让多个内部类以不同的方式实现同一接口,或者继承同一个类.创建内部类对象的时刻病不依赖于外部类对象的创建.内部类并没有令人疑惑的”is-a”关系,它就像是一个独立的实体.</p>\n<p>内部类提供了更好的封装,除了该外围类,其他类都不能访问</p>\n<h2 id=\"final-finalize和finally的不同之处\"><a href=\"#final-finalize和finally的不同之处\" class=\"headerlink\" title=\"final,finalize和finally的不同之处\"></a>final,finalize和finally的不同之处</h2><p>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</p>\n<h2 id=\"clone-是哪个类型的方法\"><a href=\"#clone-是哪个类型的方法\" class=\"headerlink\" title=\"clone()是哪个类型的方法?\"></a>clone()是哪个类型的方法?</h2><p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p>\n<h2 id=\"深拷贝和浅拷贝的区别是什么\"><a href=\"#深拷贝和浅拷贝的区别是什么\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别是什么?\"></a>深拷贝和浅拷贝的区别是什么?</h2><p>浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。</p>\n<p>深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。</p>\n<h2 id=\"static都有哪些用法\"><a href=\"#static都有哪些用法\" class=\"headerlink\" title=\"static都有哪些用法?\"></a>static都有哪些用法?</h2><p>几乎所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.</p>\n<p>除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> calss PreCache&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行相关操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>此外static也多用于修饰内部类,此时称之为静态内部类.</p>\n<p>最后一种用法就是静态导包,即<code>import static</code>.import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名.资源名,可以直接使用资源名,比如:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Math.sin(20));传统做法</span></span><br><span class=\"line\">        System.out.println(sin(<span class=\"number\">20</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"final有哪些用法\"><a href=\"#final有哪些用法\" class=\"headerlink\" title=\"final有哪些用法\"></a>final有哪些用法</h2><p>final也是很多面试喜欢问的地方,能回答下以下三点就不错了:<br>1.被final修饰的类不可以被继承<br>2.被final修饰的方法不可以被重写<br>3.被final修饰的变量不可以被改变.如果修饰的引用,那么表示引用不可变,引用指向的内容可变.<br>4.被final修饰的方法,JVM会尝试将其内联,以提高运行效率<br>5.被final修饰的常量,在编译阶段会存入常量池中.</p>\n<p>当前回答出编译器对final域要遵守的两个重排序规则更好:<br>1.在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序.<br>2.初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不能重排序.</p>\n<hr>\n<p>#数据类型相关</p>\n<h2 id=\"java中int-char-long各占多少字节\"><a href=\"#java中int-char-long各占多少字节\" class=\"headerlink\" title=\"java中int char,long各占多少字节?\"></a>java中int char,long各占多少字节?</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>位数</th>\n<th>字节数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"64位的JVM当中-int的长度是多少\"><a href=\"#64位的JVM当中-int的长度是多少\" class=\"headerlink\" title=\"64位的JVM当中,int的长度是多少?\"></a>64位的JVM当中,int的长度是多少?</h2><p>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。</p>\n<h2 id=\"java-int和Integer的区别\"><a href=\"#java-int和Integer的区别\" class=\"headerlink\" title=\"java int和Integer的区别\"></a>java int和Integer的区别</h2><p>Integer是int的包装类型,在拆箱和装箱中,而知自动转换.int是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象.</p>\n<h2 id=\"int-和Integer谁占用的内存更多\"><a href=\"#int-和Integer谁占用的内存更多\" class=\"headerlink\" title=\"int 和Integer谁占用的内存更多?\"></a>int 和Integer谁占用的内存更多?</h2><p>Integer 对象会占用更多的内存。Integer是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p>\n<h2 id=\"String-StringBuffer和StringBuilder区别\"><a href=\"#String-StringBuffer和StringBuilder区别\" class=\"headerlink\" title=\"String,StringBuffer和StringBuilder区别\"></a>String,StringBuffer和StringBuilder区别</h2><p>String是字符串常量,final修饰;StringBuffer字符串变量(线程安全);<br>StringBuilder 字符串变量(线程不安全).</p>\n<h3 id=\"String和StringBuffer\"><a href=\"#String和StringBuffer\" class=\"headerlink\" title=\"String和StringBuffer\"></a>String和StringBuffer</h3><p>String和StringBuffer主要区别是性能:String是不可变对象,每次对String类型进行操作都等同于产生了一个新的String对象,然后指向新的String对象.所以尽量不在对String进行大量的拼接操作,否则会产生很多临时对象,导致GC开始工作,影响系统性能.</p>\n<p>StringBuffer是对对象本身操作,而不是产生新的对象,因此在通常在有大量拼接的情况下我们建议使用StringBuffer.</p>\n<p>但是需要注意现在JVM会对String拼接做一定的优化:<br><code>String s=“This is only ”+”simple”+”test”</code>会被虚拟机直接优化成<code>String s=“This is only simple test”</code>,此时就不存在拼接过程.</p>\n<h3 id=\"StringBuffer和StringBuilder\"><a href=\"#StringBuffer和StringBuilder\" class=\"headerlink\" title=\"StringBuffer和StringBuilder\"></a>StringBuffer和StringBuilder</h3><p>StringBuffer是线程安全的可变字符串,其内部实现是可变数组.StringBuilder是java 5.0新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.</p>\n<h2 id=\"什么是编译器常量-使用它有什么风险\"><a href=\"#什么是编译器常量-使用它有什么风险\" class=\"headerlink\" title=\"什么是编译器常量?使用它有什么风险?\"></a>什么是编译器常量?使用它有什么风险?</h2><p>公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p>\n<h2 id=\"java当中使用什么类型表示价格比较好\"><a href=\"#java当中使用什么类型表示价格比较好\" class=\"headerlink\" title=\"java当中使用什么类型表示价格比较好?\"></a>java当中使用什么类型表示价格比较好?</h2><p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p>\n<h2 id=\"如何将byte转为String\"><a href=\"#如何将byte转为String\" class=\"headerlink\" title=\"如何将byte转为String\"></a>如何将byte转为String</h2><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p>\n<h2 id=\"可以将int强转为byte类型么-会产生什么问题\"><a href=\"#可以将int强转为byte类型么-会产生什么问题\" class=\"headerlink\" title=\"可以将int强转为byte类型么?会产生什么问题?\"></a>可以将int强转为byte类型么?会产生什么问题?</h2><p>我们可以做强制转换，但是Java中int是32位的而byte是8 位的，所以,如果强制转化int类型的高24位将会被丢弃，byte 类型的范围是从-128.到128</p>\n<hr>\n<h2 id=\"关于垃圾回收\"><a href=\"#关于垃圾回收\" class=\"headerlink\" title=\"关于垃圾回收\"></a>关于垃圾回收</h2><h2 id=\"你知道哪些垃圾回收算法\"><a href=\"#你知道哪些垃圾回收算法\" class=\"headerlink\" title=\"你知道哪些垃圾回收算法?\"></a>你知道哪些垃圾回收算法?</h2><p>垃圾回收从理论上非常容易理解,具体的方法有以下几种:</p>\n<ol>\n<li>标记-清除</li>\n<li>标记-复制</li>\n<li>标记-整理</li>\n<li>分代回收<br>更详细的内容参见<a href=\"http://blog.csdn.net/dd864140130/article/details/50084471\" target=\"_blank\" rel=\"noopener\">深入理解垃圾回收算法</a></li>\n</ol>\n<p>##如何判断一个对象是否应该被回收<br>这就是所谓的对象存活性判断,常用的方法有两种:1.引用计数法;2:对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.</p>\n<p>##简单的解释一下垃圾回收<br>Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.</p>\n<h2 id=\"调用System-gc-会发生什么\"><a href=\"#调用System-gc-会发生什么\" class=\"headerlink\" title=\"调用System.gc()会发生什么?\"></a>调用System.gc()会发生什么?</h2><p>通知GC开始工作,但是GC真正开始的时间不确定.</p>\n<hr>\n<h1 id=\"进程-线程相关\"><a href=\"#进程-线程相关\" class=\"headerlink\" title=\"进程,线程相关\"></a>进程,线程相关</h1><h2 id=\"说说进程-线程-协程之间的区别\"><a href=\"#说说进程-线程-协程之间的区别\" class=\"headerlink\" title=\"说说进程,线程,协程之间的区别\"></a>说说进程,线程,协程之间的区别</h2><p>简而言之,进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.</p>\n<h2 id=\"你了解守护线程吗-它和非守护线程有什么区别\"><a href=\"#你了解守护线程吗-它和非守护线程有什么区别\" class=\"headerlink\" title=\"你了解守护线程吗?它和非守护线程有什么区别\"></a>你了解守护线程吗?它和非守护线程有什么区别</h2><p>程序运行完毕,jvm会等待非守护线程完成后关闭,但是jvm不会等待守护线程.守护线程最典型的例子就是GC线程</p>\n<h2 id=\"什么是多线程上下文切换\"><a href=\"#什么是多线程上下文切换\" class=\"headerlink\" title=\"什么是多线程上下文切换\"></a>什么是多线程上下文切换</h2><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p>\n<h2 id=\"创建两种线程的方式-他们有什么区别\"><a href=\"#创建两种线程的方式-他们有什么区别\" class=\"headerlink\" title=\"创建两种线程的方式?他们有什么区别?\"></a>创建两种线程的方式?他们有什么区别?</h2><p>通过实现java.lang.Runnable或者通过扩展java.lang.Thread类.相比扩展Thread,实现Runnable接口可能更优.原因有二:</p>\n<ol>\n<li>Java不支持多继承.因此扩展Thread类就代表这个子类不能扩展其他类.而实现Runnable接口的类还可能扩展另一个类.</li>\n<li>类可能只要求可执行即可,因此集成整个Thread类的开销过大.</li>\n</ol>\n<h2 id=\"Runnable和Callable的区别\"><a href=\"#Runnable和Callable的区别\" class=\"headerlink\" title=\"Runnable和Callable的区别\"></a>Runnable和Callable的区别</h2><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。<br>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p>\n<h2 id=\"什么导致线程阻塞\"><a href=\"#什么导致线程阻塞\" class=\"headerlink\" title=\"什么导致线程阻塞\"></a>什么导致线程阻塞</h2><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sleep()</td>\n<td>sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止</td>\n</tr>\n<tr>\n<td>suspend() 和 resume()</td>\n<td>两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。</td>\n</tr>\n<tr>\n<td>yield()</td>\n<td>yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程</td>\n</tr>\n<tr>\n<td>wait() 和 notify()</td>\n<td>两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wait-notify-和suspend-resume-之间的区别\"><a href=\"#wait-notify-和suspend-resume-之间的区别\" class=\"headerlink\" title=\"wait(),notify()和suspend(),resume()之间的区别\"></a>wait(),notify()和suspend(),resume()之间的区别</h2><p>初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。上述的核心区别导致了一系列的细节上的区别。</p>\n<p>首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。</p>\n<p>其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。</p>\n<p>wait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。</p>\n<p>关于 wait() 和 notify() 方法最后再说明两点：<br>第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</p>\n<p>第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</p>\n<p>谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。</p>\n<p>以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。</p>\n<h2 id=\"为什么wait-方法和notify-notifyAll-方法要在同步块中被调用\"><a href=\"#为什么wait-方法和notify-notifyAll-方法要在同步块中被调用\" class=\"headerlink\" title=\"为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用\"></a>为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h2><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p>\n<h2 id=\"wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别\"><a href=\"#wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别\" class=\"headerlink\" title=\"wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别\"></a>wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h2><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p>\n<h2 id=\"wait-与sleep-的区别\"><a href=\"#wait-与sleep-的区别\" class=\"headerlink\" title=\"wait()与sleep()的区别\"></a>wait()与sleep()的区别</h2><p> 关于这两者已经在上面进行详细的说明,这里就做个概括好了:</p>\n<ul>\n<li>sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁</li>\n<li>sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU</li>\n<li>sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用</li>\n</ul>\n<h2 id=\"synchronized和ReentrantLock的区别\"><a href=\"#synchronized和ReentrantLock的区别\" class=\"headerlink\" title=\"synchronized和ReentrantLock的区别\"></a>synchronized和ReentrantLock的区别</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：<br>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁<br>（2）ReentrantLock可以获取各种锁的信息<br>（3）ReentrantLock可以灵活地实现多路通知<br>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word.</p>\n<h2 id=\"FutureTask是什么\"><a href=\"#FutureTask是什么\" class=\"headerlink\" title=\"FutureTask是什么\"></a>FutureTask是什么</h2><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p>\n<h2 id=\"一个线程如果出现了运行时异常怎么办\"><a href=\"#一个线程如果出现了运行时异常怎么办\" class=\"headerlink\" title=\"一个线程如果出现了运行时异常怎么办?\"></a>一个线程如果出现了运行时异常怎么办?</h2><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p>\n<h2 id=\"如何在两个线程间共享数据\"><a href=\"#如何在两个线程间共享数据\" class=\"headerlink\" title=\"如何在两个线程间共享数据\"></a>如何在两个线程间共享数据</h2><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p>\n<h2 id=\"如何正确的使用wait-使用if还是while\"><a href=\"#如何正确的使用wait-使用if还是while\" class=\"headerlink\" title=\"如何正确的使用wait()?使用if还是while?\"></a>如何正确的使用wait()?使用if还是while?</h2><p>wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (obj) &#123;</span><br><span class=\"line\">   while (condition does not hold)</span><br><span class=\"line\">     obj.wait(); &#x2F;&#x2F; (Releases lock, and reacquires on wakeup)</span><br><span class=\"line\">     ... &#x2F;&#x2F; Perform action appropriate to condition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"什么是线程局部变量\"><a href=\"#什么是线程局部变量\" class=\"headerlink\" title=\"什么是线程局部变量\"></a>什么是线程局部变量</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>\n<h2 id=\"ThreadLoal的作用是什么\"><a href=\"#ThreadLoal的作用是什么\" class=\"headerlink\" title=\"ThreadLoal的作用是什么?\"></a>ThreadLoal的作用是什么?</h2><p>简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.</p>\n<h2 id=\"生产者消费者模型的作用是什么\"><a href=\"#生产者消费者模型的作用是什么\" class=\"headerlink\" title=\"生产者消费者模型的作用是什么?\"></a>生产者消费者模型的作用是什么?</h2><p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用<br>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p>\n<h2 id=\"写一个生产者-消费者队列\"><a href=\"#写一个生产者-消费者队列\" class=\"headerlink\" title=\"写一个生产者-消费者队列\"></a>写一个生产者-消费者队列</h2><p>可以通过阻塞队列实现,也可以通过wait-notify来实现.</p>\n<h3 id=\"使用阻塞队列来实现\"><a href=\"#使用阻塞队列来实现\" class=\"headerlink\" title=\"使用阻塞队列来实现\"></a>使用阻塞队列来实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;消费者</span><br><span class=\"line\">public class Producer implements Runnable&#123;</span><br><span class=\"line\">    private final BlockingQueue&lt;Integer&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Producer(BlockingQueue q)&#123;</span><br><span class=\"line\">        this.queue&#x3D;q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                Thread.sleep(1000);&#x2F;&#x2F;模拟耗时</span><br><span class=\"line\">                queue.put(produce());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (InterruptedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int produce() &#123;</span><br><span class=\"line\">        int n&#x3D;new Random().nextInt(10000);</span><br><span class=\"line\">        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; produce:&quot; + n);</span><br><span class=\"line\">        return n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;消费者</span><br><span class=\"line\">public class Consumer implements Runnable &#123;</span><br><span class=\"line\">    private final BlockingQueue&lt;Integer&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Consumer(BlockingQueue q)&#123;</span><br><span class=\"line\">        this.queue&#x3D;q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2000);&#x2F;&#x2F;模拟耗时</span><br><span class=\"line\">                consume(queue.take());</span><br><span class=\"line\">            &#125;catch (InterruptedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void consume(Integer n) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; consume:&quot; + n);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        BlockingQueue&lt;Integer&gt; queue&#x3D;new ArrayBlockingQueue&lt;Integer&gt;(100);</span><br><span class=\"line\">        Producer p&#x3D;new Producer(queue);</span><br><span class=\"line\">        Consumer c1&#x3D;new Consumer(queue);</span><br><span class=\"line\">        Consumer c2&#x3D;new Consumer(queue);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(p).start();</span><br><span class=\"line\">        new Thread(c1).start();</span><br><span class=\"line\">        new Thread(c2).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用wait-notify来实现\"><a href=\"#使用wait-notify来实现\" class=\"headerlink\" title=\"使用wait-notify来实现\"></a>使用wait-notify来实现</h3><p>该种方式应该最经典,这里就不做说明了</p>\n<h2 id=\"ConcurrentHashMap的并发度是什么\"><a href=\"#ConcurrentHashMap的并发度是什么\" class=\"headerlink\" title=\"ConcurrentHashMap的并发度是什么?\"></a>ConcurrentHashMap的并发度是什么?</h2><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p>\n<h2 id=\"CyclicBarrier和CountDownLatch区别\"><a href=\"#CyclicBarrier和CountDownLatch区别\" class=\"headerlink\" title=\"CyclicBarrier和CountDownLatch区别\"></a>CyclicBarrier和CountDownLatch区别</h2><p>这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p>\n<ul>\n<li>CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</li>\n<li>CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</li>\n<li>CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</li>\n</ul>\n<h2 id=\"java中的-操作符线程安全么\"><a href=\"#java中的-操作符线程安全么\" class=\"headerlink\" title=\"java中的++操作符线程安全么?\"></a>java中的++操作符线程安全么?</h2><p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差</p>\n<h2 id=\"你有哪些多线程开发良好的实践\"><a href=\"#你有哪些多线程开发良好的实践\" class=\"headerlink\" title=\"你有哪些多线程开发良好的实践?\"></a>你有哪些多线程开发良好的实践?</h2><ol>\n<li>给线程命名</li>\n<li>最小化同步范围</li>\n<li>优先使用volatile</li>\n<li>尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore</li>\n<li>优先使用并发容器而非同步容器.</li>\n<li>考虑使用线程池</li>\n</ol>\n<hr>\n<p>#关于volatile关键字</p>\n<h2 id=\"可以创建Volatile数组吗\"><a href=\"#可以创建Volatile数组吗\" class=\"headerlink\" title=\"可以创建Volatile数组吗?\"></a>可以创建Volatile数组吗?</h2><p>Java 中可以创建 volatile类型数组，不过只是一个指向数组的引用，而不是整个数组。如果改变引用指向的数组，将会受到volatile 的保护，但是如果多个线程同时改变数组的元素，volatile标示符就不能起到之前的保护作用了</p>\n<h2 id=\"volatile能使得一个非原子操作变成原子操作吗\"><a href=\"#volatile能使得一个非原子操作变成原子操作吗\" class=\"headerlink\" title=\"volatile能使得一个非原子操作变成原子操作吗?\"></a>volatile能使得一个非原子操作变成原子操作吗?</h2><p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p>\n<p>一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。</p>\n<h2 id=\"volatile类型变量提供什么保证\"><a href=\"#volatile类型变量提供什么保证\" class=\"headerlink\" title=\"volatile类型变量提供什么保证?\"></a>volatile类型变量提供什么保证?</h2><p>volatile 主要有两方面的作用:1.避免指令重排2.可见性保证.例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的(低32位和高32位)，但 volatile 类型的 double 和 long 就是原子的.</p>\n<hr>\n<p>#关于集合</p>\n<h2 id=\"Java中的集合及其继承关系\"><a href=\"#Java中的集合及其继承关系\" class=\"headerlink\" title=\"Java中的集合及其继承关系\"></a>Java中的集合及其继承关系</h2><p>关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的List,Map的原理更该如此.这里我们看这张图即可:<br><img src=\"http://img.blog.csdn.net/20141105193133812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGQ4NjQxNDAxMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p>更多内容可见<a href=\"http://write.blog.csdn.net/postedit/40826423\" target=\"_blank\" rel=\"noopener\">集合类总结</a></p>\n<h2 id=\"poll-方法和remove-方法区别\"><a href=\"#poll-方法和remove-方法区别\" class=\"headerlink\" title=\"poll()方法和remove()方法区别?\"></a>poll()方法和remove()方法区别?</h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p>\n<h2 id=\"LinkedHashMap和PriorityQueue的区别\"><a href=\"#LinkedHashMap和PriorityQueue的区别\" class=\"headerlink\" title=\"LinkedHashMap和PriorityQueue的区别\"></a>LinkedHashMap和PriorityQueue的区别</h2><p>PriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。</p>\n<h2 id=\"WeakHashMap与HashMap的区别是什么\"><a href=\"#WeakHashMap与HashMap的区别是什么\" class=\"headerlink\" title=\"WeakHashMap与HashMap的区别是什么?\"></a>WeakHashMap与HashMap的区别是什么?</h2><p>WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。</p>\n<h2 id=\"ArrayList和LinkedList的区别\"><a href=\"#ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"ArrayList和LinkedList的区别?\"></a>ArrayList和LinkedList的区别?</h2><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p>\n<h2 id=\"ArrayList和HashMap默认大小\"><a href=\"#ArrayList和HashMap默认大小\" class=\"headerlink\" title=\"ArrayList和HashMap默认大小?\"></a>ArrayList和HashMap默认大小?</h2><p>在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final int DEFAULT_CAPACITY &#x3D; 10;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#x2F;&#x2F;from HashMap.java JDK 7</span><br><span class=\"line\"> static final int DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; aka 16</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Comparator和Comparable的区别\"><a href=\"#Comparator和Comparable的区别\" class=\"headerlink\" title=\"Comparator和Comparable的区别?\"></a>Comparator和Comparable的区别?</h2><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p>\n<h2 id=\"如何实现集合排序\"><a href=\"#如何实现集合排序\" class=\"headerlink\" title=\"如何实现集合排序?\"></a>如何实现集合排序?</h2><p>你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。</p>\n<h2 id=\"如何打印数组内容\"><a href=\"#如何打印数组内容\" class=\"headerlink\" title=\"如何打印数组内容\"></a>如何打印数组内容</h2><p>你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。</p>\n<h2 id=\"LinkedList的是单向链表还是双向\"><a href=\"#LinkedList的是单向链表还是双向\" class=\"headerlink\" title=\"LinkedList的是单向链表还是双向?\"></a>LinkedList的是单向链表还是双向?</h2><p>双向循环列表,具体实现自行查阅源码.</p>\n<h2 id=\"TreeMap是实现原理\"><a href=\"#TreeMap是实现原理\" class=\"headerlink\" title=\"TreeMap是实现原理\"></a>TreeMap是实现原理</h2><p>采用红黑树实现,具体实现自行查阅源码.</p>\n<h2 id=\"遍历ArrayList时如何正确移除一个元素\"><a href=\"#遍历ArrayList时如何正确移除一个元素\" class=\"headerlink\" title=\"遍历ArrayList时如何正确移除一个元素\"></a>遍历ArrayList时如何正确移除一个元素</h2><p>该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。</p>\n<h2 id=\"什么是ArrayMap-它和HashMap有什么区别\"><a href=\"#什么是ArrayMap-它和HashMap有什么区别\" class=\"headerlink\" title=\"什么是ArrayMap?它和HashMap有什么区别?\"></a>什么是ArrayMap?它和HashMap有什么区别?</h2><p>ArrayMap是Android SDK中提供的,非Android开发者可以略过.<br>ArrayMap是用两个数组来模拟map,更少的内存占用空间,更高的效率.<br>具体参考这篇文章:<a href=\"http://lvable.com/?p=217%5D\" target=\"_blank\" rel=\"noopener\">ArrayMap VS HashMap</a></p>\n<h2 id=\"HashMap的实现原理\"><a href=\"#HashMap的实现原理\" class=\"headerlink\" title=\"HashMap的实现原理\"></a>HashMap的实现原理</h2><p>1   HashMap概述：  HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>2   HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p>\n<p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上.</p>\n<h2 id=\"你了解Fail-Fast机制吗\"><a href=\"#你了解Fail-Fast机制吗\" class=\"headerlink\" title=\"你了解Fail-Fast机制吗\"></a>你了解Fail-Fast机制吗</h2><p>Fail-Fast即我们常说的快速失败,更多内容参看<a href=\"http://blog.csdn.net/chenssy/article/details/38151189\" target=\"_blank\" rel=\"noopener\">fail-fast机制</a></p>\n<hr>\n<h1 id=\"关于日期\"><a href=\"#关于日期\" class=\"headerlink\" title=\"关于日期\"></a>关于日期</h1><h2 id=\"SimpleDateFormat是线程安全的吗\"><a href=\"#SimpleDateFormat是线程安全的吗\" class=\"headerlink\" title=\"SimpleDateFormat是线程安全的吗?\"></a>SimpleDateFormat是线程安全的吗?</h2><p>非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。</p>\n<h2 id=\"如何格式化日期\"><a href=\"#如何格式化日期\" class=\"headerlink\" title=\"如何格式化日期?\"></a>如何格式化日期?</h2><p>Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。</p>\n<hr>\n<h1 id=\"关于异常\"><a href=\"#关于异常\" class=\"headerlink\" title=\"关于异常\"></a>关于异常</h1><h2 id=\"简单描述java异常体系\"><a href=\"#简单描述java异常体系\" class=\"headerlink\" title=\"简单描述java异常体系\"></a>简单描述java异常体系</h2><p>相比没有人不了解异常体系,关于异常体系的更多信息可以见:<a href=\"http://blog.csdn.net/dd864140130/article/details/42504189\" target=\"_blank\" rel=\"noopener\">白话异常机制</a></p>\n<h2 id=\"什么是异常链\"><a href=\"#什么是异常链\" class=\"headerlink\" title=\"什么是异常链\"></a>什么是异常链</h2><p>详情直接参见<a href=\"http://blog.csdn.net/dd864140130/article/details/42504189\" target=\"_blank\" rel=\"noopener\">白话异常机制</a>,不做解释了.</p>\n<h2 id=\"throw和throws的区别\"><a href=\"#throw和throws的区别\" class=\"headerlink\" title=\"throw和throws的区别\"></a>throw和throws的区别</h2><p>throw用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：<code>throw new IllegalArgumentException(“size must be multiple of 2″)</code>,<br>而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。</p>\n<hr>\n<h2 id=\"关于序列化\"><a href=\"#关于序列化\" class=\"headerlink\" title=\"关于序列化\"></a>关于序列化</h2><h2 id=\"Java-中，Serializable-与-Externalizable-的区别\"><a href=\"#Java-中，Serializable-与-Externalizable-的区别\" class=\"headerlink\" title=\"Java 中，Serializable 与 Externalizable 的区别\"></a>Java 中，Serializable 与 Externalizable 的区别</h2><p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p>\n<hr>\n<p>#关于JVM</p>\n<h2 id=\"JVM特性\"><a href=\"#JVM特性\" class=\"headerlink\" title=\"JVM特性\"></a>JVM特性</h2><p>平台无关性.<br>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p>\n<h2 id=\"简单解释一下类加载器\"><a href=\"#简单解释一下类加载器\" class=\"headerlink\" title=\"简单解释一下类加载器\"></a>简单解释一下类加载器</h2><p>有关类加载器一般会问你四种类加载器的应用场景以及双亲委派模型,更多的内容参看<a href=\"http://blog.csdn.net/dd864140130/article/details/49817357\" target=\"_blank\" rel=\"noopener\">深入理解JVM加载器</a></p>\n<h2 id=\"简述堆和栈的区别\"><a href=\"#简述堆和栈的区别\" class=\"headerlink\" title=\"简述堆和栈的区别\"></a>简述堆和栈的区别</h2><p>VM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。</p>\n<h2 id=\"简述JVM内存分配\"><a href=\"#简述JVM内存分配\" class=\"headerlink\" title=\"简述JVM内存分配\"></a>简述JVM内存分配</h2><ol>\n<li>基本数据类型比变量和对象的引用都是在栈分配的</li>\n<li>堆内存用来存放由new创建的对象和数组</li>\n<li>类变量（static修饰的变量），程序在一加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中</li>\n<li>实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的”物理位置”,实例变量的生命周期–当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存</li>\n<li>局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放</li>\n</ol>\n<hr>\n<p>#其他</p>\n<h2 id=\"java当中采用的是大端还是小端\"><a href=\"#java当中采用的是大端还是小端\" class=\"headerlink\" title=\"java当中采用的是大端还是小端?\"></a>java当中采用的是大端还是小端?</h2><h2 id=\"XML解析的几种方式和特点\"><a href=\"#XML解析的几种方式和特点\" class=\"headerlink\" title=\"XML解析的几种方式和特点\"></a>XML解析的几种方式和特点</h2><p>DOM,SAX,PULL三种解析方式:</p>\n<ul>\n<li>DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机</li>\n<li>SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。</li>\n<li>PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。</li>\n</ul>\n<h2 id=\"JDK-1-7特性\"><a href=\"#JDK-1-7特性\" class=\"headerlink\" title=\"JDK 1.7特性\"></a>JDK 1.7特性</h2><p>然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(\\&lt;>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码</p>\n<h2 id=\"JDK-1-8特性\"><a href=\"#JDK-1-8特性\" class=\"headerlink\" title=\"JDK 1.8特性\"></a>JDK 1.8特性</h2><p>java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：<br>Lambda 表达式，允许像对象一样传递匿名函数<br>Stream API，充分利用现代多核 CPU，可以写出很简洁的代码<br>Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用<br>扩展方法，现在，接口中可以有静态、默认方法。<br>重复注解，现在你可以将相同的注解在同一类型上使用多次。</p>\n<h2 id=\"Maven和ANT有什么区别\"><a href=\"#Maven和ANT有什么区别\" class=\"headerlink\" title=\"Maven和ANT有什么区别?\"></a>Maven和ANT有什么区别?</h2><p>虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件），Maven 与 ANT 工具更多的不同之处请参见答案。<br>这就是所有的面试题，如此之多，是不是？我可以保证，如果你能回答列表中的所有问题，你就可以很轻松的应付任何核心 Java 或者高级 Java 面试。虽然，这里没有涵盖 Servlet、JSP、JSF、JPA，JMS，EJB 及其它 Java EE 技术，也没有包含主流的框架如 spring MVC，Struts 2.0，hibernate，也没有包含 SOAP 和 RESTful web service，但是这份列表对做 Java 开发的、准备应聘 Java web 开发职位的人还是同样有用的，因为所有的 Java 面试，开始的问题都是 Java 基础和 JDK API 相关的。如果你认为我这里有任何应该在这份列表中而被我遗漏了的 Java 流行的问题，你可以自由的给我建议。我的目的是从最近的面试中创建一份最新的、最优的 Java 面试问题列表。</p>\n<h2 id=\"JDBC最佳实践\"><a href=\"#JDBC最佳实践\" class=\"headerlink\" title=\"JDBC最佳实践\"></a>JDBC最佳实践</h2><ul>\n<li>优先使用批量操作来插入和更新数据</li>\n<li>使用PreparedStatement来避免SQL漏洞</li>\n<li>使用数据连接池</li>\n<li>通过列名来获取结果集</li>\n</ul>\n<h2 id=\"IO操作最佳实践\"><a href=\"#IO操作最佳实践\" class=\"headerlink\" title=\"IO操作最佳实践\"></a>IO操作最佳实践</h2><ol>\n<li>使用有缓冲的IO类,不要单独读取字节或字符</li>\n<li>使用NIO和NIO 2或者AIO,而非BIO</li>\n<li>在finally中关闭流</li>\n<li>使用内存映射文件获取更快的IO</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>文章转自：<br><a href=\"http://blog.csdn.net/dd864140130/article/details/55833087\" target=\"_blank\" rel=\"noopener\">java面试题</a></p>\n<h1 id=\"Java面试宝典\"><a href=\"#Java面试宝典\" class=\"headerlink\" title=\"Java面试宝典\"></a>Java面试宝典</h1><h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><h2 id=\"面向对象的三个特征\"><a href=\"#面向对象的三个特征\" class=\"headerlink\" title=\"面向对象的三个特征\"></a>面向对象的三个特征</h2><p>封装,继承,多态.这个应该是人人皆知.有时候也会加上抽象.</p>\n<h2 id=\"多态的好处\"><a href=\"#多态的好处\" class=\"headerlink\" title=\"多态的好处\"></a>多态的好处</h2><p>允许不同类对象对同一消息做出响应,即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用).主要有以下优点:</p>\n<ol>\n<li>可替换性:多态对已存在代码具有可替换性.</li>\n<li>可扩充性:增加新的子类不影响已经存在的类结构.</li>\n<li>接口性:多态是超累通过方法签名,想子类提供一个公共接口,由子类来完善或者重写它来实现的.</li>\n<li>灵活性:</li>\n<li>简化性:</li>\n</ol>\n<h3 id=\"代码中如何实现多态\"><a href=\"#代码中如何实现多态\" class=\"headerlink\" title=\"代码中如何实现多态\"></a>代码中如何实现多态</h3><p>实现多态主要有以下三种方式:</p>\n<ol>\n<li>接口实现</li>\n<li>继承父类重写方法</li>\n<li>同一类中进行方法重载</li></ol>","more":"<h3 id=\"虚拟机是如何实现多态的\"><a href=\"#虚拟机是如何实现多态的\" class=\"headerlink\" title=\"虚拟机是如何实现多态的\"></a>虚拟机是如何实现多态的</h3>动态绑定技术(dynamic binding),执行期间判断所引用对象的实际类型,根据实际类型调用对应的方法.\n\n<h2 id=\"接口的意义\"><a href=\"#接口的意义\" class=\"headerlink\" title=\"接口的意义\"></a>接口的意义</h2><p>接口的意义用三个词就可以概括:规范,扩展,回调.</p>\n<h2 id=\"抽象类的意义\"><a href=\"#抽象类的意义\" class=\"headerlink\" title=\"抽象类的意义\"></a>抽象类的意义</h2><p>抽象类的意义可以用三句话来概括:</p>\n<ol>\n<li>为其他子类提供一个公共的类型</li>\n<li>封装子类中重复定义的内容</li>\n<li>定义抽象方法,子类虽然有不同的实现,但是定义时一致的<h2 id=\"接口和抽象类的区别\"><a href=\"#接口和抽象类的区别\" class=\"headerlink\" title=\"接口和抽象类的区别\"></a>接口和抽象类的区别</h2></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th>抽象类</th>\n<th>接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认方法</td>\n<td>抽象类可以有默认的方法实现</td>\n<td>,java 8之前,接口中不存在方法的实现.</td>\n</tr>\n<tr>\n<td>实现方式</td>\n<td>子类使用extends关键字来继承抽象类.如果子类不是抽象类,子类需要提供抽象类中所声明方法的实现.</td>\n<td>子类使用implements来实现接口,需要提供接口中所有声明的实现.</td>\n</tr>\n<tr>\n<td>构造器</td>\n<td>抽象类中可以有构造器,</td>\n<td>接口中不能</td>\n</tr>\n<tr>\n<td>和正常类区别</td>\n<td>抽象类不能被实例化</td>\n<td>接口则是完全不同的类型</td>\n</tr>\n<tr>\n<td>访问修饰符</td>\n<td>抽象方法可以有public,protected和default等修饰</td>\n<td>接口默认是public,不能使用其他修饰符</td>\n</tr>\n<tr>\n<td>多继承</td>\n<td>一个子类只能存在一个父类</td>\n<td>一个子类可以存在多个接口</td>\n</tr>\n<tr>\n<td>添加新方法</td>\n<td>想抽象类中添加新方法,可以提供默认的实现,因此可以不修改子类现有的代码</td>\n<td>如果往接口中添加新方法,则子类中需要实现该方法.</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"父类的静态方法能否被子类重写\"><a href=\"#父类的静态方法能否被子类重写\" class=\"headerlink\" title=\"父类的静态方法能否被子类重写\"></a>父类的静态方法能否被子类重写</h2><p>不能.子类继承父类后,有相同的静态方法和非静态,这是非静态方法覆盖父类中的方法(即方法重写),父类的该静态方法被隐藏(如果对象是父类则调用该隐藏的方法),另外子类可集成父类的静态与非静态方法,至于方法重载我觉得它其中一要素就是在同一类中,不能说父类中的什么方法与子类里的什么方法是方法重载的体现.</p>\n<h2 id=\"什么是不可变对象\"><a href=\"#什么是不可变对象\" class=\"headerlink\" title=\"什么是不可变对象\"></a>什么是不可变对象</h2><p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p>\n<h2 id=\"能否创建一个包含可变对象的不可变对象\"><a href=\"#能否创建一个包含可变对象的不可变对象\" class=\"headerlink\" title=\"能否创建一个包含可变对象的不可变对象?\"></a>能否创建一个包含可变对象的不可变对象?</h2><p>当然可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用.</p>\n<h2 id=\"java-创建对象的几种方式\"><a href=\"#java-创建对象的几种方式\" class=\"headerlink\" title=\"java 创建对象的几种方式\"></a>java 创建对象的几种方式</h2><ol>\n<li>采用new</li>\n<li>通过反射</li>\n<li>采用clone</li>\n<li>通过序列化机制</li>\n</ol>\n<p>前2者都需要显式地调用构造方法.   造成耦合性最高的恰好是第一种,因此你发现无论什么框架,只要涉及到解耦必先减少new的使用.</p>\n<h2 id=\"switch中能否使用string做参数\"><a href=\"#switch中能否使用string做参数\" class=\"headerlink\" title=\"switch中能否使用string做参数\"></a>switch中能否使用string做参数</h2><p>在idk 1.7之前,switch只能支持byte,short,char,int或者其对应的封装类以及Enum类型。从idk 1.7之后switch开始支持String.</p>\n<h2 id=\"Object中有哪些公共方法\"><a href=\"#Object中有哪些公共方法\" class=\"headerlink\" title=\"Object中有哪些公共方法?\"></a>Object中有哪些公共方法?</h2><ol>\n<li><code>equals()</code></li>\n<li><code>clone()</code></li>\n<li><code>getClass()</code></li>\n<li><code>notify(),notifyAll(),wait()</code></li>\n</ol>\n<h2 id=\"java当中的四种引用\"><a href=\"#java当中的四种引用\" class=\"headerlink\" title=\"java当中的四种引用\"></a>java当中的四种引用</h2><p>强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:</p>\n<ol>\n<li>强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象</li>\n<li>软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。</li>\n<li>弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</li>\n<li>虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。</li>\n</ol>\n<p>更多了解参见<a href=\"http://blog.csdn.net/dd864140130/article/details/49885811\" target=\"_blank\" rel=\"noopener\">深入对象引用</a></p>\n<h2 id=\"WeakReference与SoftReference的区别\"><a href=\"#WeakReference与SoftReference的区别\" class=\"headerlink\" title=\"WeakReference与SoftReference的区别?\"></a>WeakReference与SoftReference的区别?</h2><p>这点在四种引用类型中已经做了解释,这里简单说明一下即可:<br>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。</p>\n<h2 id=\"为什么要有不同的引用类型\"><a href=\"#为什么要有不同的引用类型\" class=\"headerlink\" title=\"为什么要有不同的引用类型\"></a>为什么要有不同的引用类型</h2><p>不像C语言,我们可以控制内存的申请和释放,在Java中有时候我们需要适当的控制对象被回收的时机,因此就诞生了不同的引用类型,可以说不同的引用类型实则是对GC回收时机不可控的妥协.有以下几个使用场景可以充分的说明:</p>\n<ol>\n<li>利用软引用和弱引用解决OOM问题：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效地避免了OOM的问题.</li>\n<li>通过软引用实现Java对象的高速缓存:比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。此时,通过软引用和 HashMap 的结合可以构建高速缓存,提供性能.</li>\n</ol>\n<h2 id=\"java中-和eqauls-的区别-equals-和-hashcode的区别\"><a href=\"#java中-和eqauls-的区别-equals-和-hashcode的区别\" class=\"headerlink\" title=\"java中==和eqauls()的区别,equals()和`hashcode的区别\"></a>java中==和<code>eqauls()</code>的区别,<code>equals()</code>和`hashcode的区别</h2><p>==是运算符,用于比较两个变量是否相等,而equals是Object类的方法,用于比较两个对象是否相等.默认Object类的equals方法是比较两个对象的地址,此时和==的结果一样.换句话说:基本类型比较用==,比较的是他们的值.默认下,对象用==比较时,比较的是内存地址,如果需要比较对象内容,需要重写equal方法</p>\n<p>##<code>equals()</code>和<code>hashcode()</code>的联系<br><code>hashCode()</code>是Object类的一个方法,返回一个哈希值.如果两个对象根据equal()方法比较相等,那么调用这两个对象中任意一个对象的hashCode()方法必须产生相同的哈希值.<br>如果两个对象根据eqaul()方法比较不相等,那么产生的哈希值不一定相等(碰撞的情况下还是会相等的.)</p>\n<h2 id=\"a-hashCode-有什么用-与a-equals-b-有什么关系\"><a href=\"#a-hashCode-有什么用-与a-equals-b-有什么关系\" class=\"headerlink\" title=\"a.hashCode()有什么用?与a.equals(b)有什么关系\"></a>a.hashCode()有什么用?与a.equals(b)有什么关系</h2><p>hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hashcode。</p>\n<p>将对象放入到集合中时,首先判断要放入对象的hashcode是否已经在集合中存在,不存在则直接放入集合.如果hashcode相等,然后通过equal()方法判断要放入对象与集合中的任意对象是否相等:如果equal()判断不相等,直接将该元素放入集合中,否则不放入.</p>\n<h2 id=\"有没有可能两个不相等的对象有相同的hashcode\"><a href=\"#有没有可能两个不相等的对象有相同的hashcode\" class=\"headerlink\" title=\"有没有可能两个不相等的对象有相同的hashcode\"></a>有没有可能两个不相等的对象有相同的hashcode</h2><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p>\n<h2 id=\"可以在hashcode中使用随机数字吗\"><a href=\"#可以在hashcode中使用随机数字吗\" class=\"headerlink\" title=\"可以在hashcode中使用随机数字吗?\"></a>可以在hashcode中使用随机数字吗?</h2><p>不行，因为同一对象的 hashcode 值必须是相同的</p>\n<h2 id=\"“a-b”与a-equals-b-有什么区别\"><a href=\"#“a-b”与a-equals-b-有什么区别\" class=\"headerlink\" title=\"“a==b”与a.equals(b)有什么区别\"></a>“a==b”与a.equals(b)有什么区别</h2><p>如果a 和b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p>\n<h2 id=\"3-0-1-0-3返回值是什么\"><a href=\"#3-0-1-0-3返回值是什么\" class=\"headerlink\" title=\"3*0.1==0.3返回值是什么\"></a><code>3*0.1==0.3</code>返回值是什么</h2><p>false，因为有些浮点数不能完全精确的表示出来。</p>\n<h2 id=\"a-a-b与a-b有什么区别吗\"><a href=\"#a-a-b与a-b有什么区别吗\" class=\"headerlink\" title=\"a=a+b与a+=b有什么区别吗?\"></a>a=a+b与a+=b有什么区别吗?</h2><p>隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：<br>byte a = 127;<br>byte b = 127;<br>b = a + b; // error : cannot convert from int to byte<br>b += a; // ok<br>（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）</p>\n<h2 id=\"内部类的作用\"><a href=\"#内部类的作用\" class=\"headerlink\" title=\"内部类的作用\"></a>内部类的作用</h2><p>内部类可以用多个实例,每个实例都有自己的状态信息,并且与其他外围对象的信息相互独立.在单个外围类当中,可以让多个内部类以不同的方式实现同一接口,或者继承同一个类.创建内部类对象的时刻病不依赖于外部类对象的创建.内部类并没有令人疑惑的”is-a”关系,它就像是一个独立的实体.</p>\n<p>内部类提供了更好的封装,除了该外围类,其他类都不能访问</p>\n<h2 id=\"final-finalize和finally的不同之处\"><a href=\"#final-finalize和finally的不同之处\" class=\"headerlink\" title=\"final,finalize和finally的不同之处\"></a>final,finalize和finally的不同之处</h2><p>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</p>\n<h2 id=\"clone-是哪个类型的方法\"><a href=\"#clone-是哪个类型的方法\" class=\"headerlink\" title=\"clone()是哪个类型的方法?\"></a>clone()是哪个类型的方法?</h2><p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p>\n<h2 id=\"深拷贝和浅拷贝的区别是什么\"><a href=\"#深拷贝和浅拷贝的区别是什么\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别是什么?\"></a>深拷贝和浅拷贝的区别是什么?</h2><p>浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。</p>\n<p>深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。</p>\n<h2 id=\"static都有哪些用法\"><a href=\"#static都有哪些用法\" class=\"headerlink\" title=\"static都有哪些用法?\"></a>static都有哪些用法?</h2><p>几乎所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.</p>\n<p>除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> calss PreCache&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行相关操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>此外static也多用于修饰内部类,此时称之为静态内部类.</p>\n<p>最后一种用法就是静态导包,即<code>import static</code>.import static是在JDK 1.5之后引入的新特性,可以用来指定导入某个类中的静态资源,并且不需要使用类名.资源名,可以直接使用资源名,比如:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Math.sin(20));传统做法</span></span><br><span class=\"line\">        System.out.println(sin(<span class=\"number\">20</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"final有哪些用法\"><a href=\"#final有哪些用法\" class=\"headerlink\" title=\"final有哪些用法\"></a>final有哪些用法</h2><p>final也是很多面试喜欢问的地方,能回答下以下三点就不错了:<br>1.被final修饰的类不可以被继承<br>2.被final修饰的方法不可以被重写<br>3.被final修饰的变量不可以被改变.如果修饰的引用,那么表示引用不可变,引用指向的内容可变.<br>4.被final修饰的方法,JVM会尝试将其内联,以提高运行效率<br>5.被final修饰的常量,在编译阶段会存入常量池中.</p>\n<p>当前回答出编译器对final域要遵守的两个重排序规则更好:<br>1.在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序.<br>2.初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不能重排序.</p>\n<hr>\n<p>#数据类型相关</p>\n<h2 id=\"java中int-char-long各占多少字节\"><a href=\"#java中int-char-long各占多少字节\" class=\"headerlink\" title=\"java中int char,long各占多少字节?\"></a>java中int char,long各占多少字节?</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>位数</th>\n<th>字节数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"64位的JVM当中-int的长度是多少\"><a href=\"#64位的JVM当中-int的长度是多少\" class=\"headerlink\" title=\"64位的JVM当中,int的长度是多少?\"></a>64位的JVM当中,int的长度是多少?</h2><p>Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的Java 虚拟机中，int 类型的长度是相同的。</p>\n<h2 id=\"java-int和Integer的区别\"><a href=\"#java-int和Integer的区别\" class=\"headerlink\" title=\"java int和Integer的区别\"></a>java int和Integer的区别</h2><p>Integer是int的包装类型,在拆箱和装箱中,而知自动转换.int是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象.</p>\n<h2 id=\"int-和Integer谁占用的内存更多\"><a href=\"#int-和Integer谁占用的内存更多\" class=\"headerlink\" title=\"int 和Integer谁占用的内存更多?\"></a>int 和Integer谁占用的内存更多?</h2><p>Integer 对象会占用更多的内存。Integer是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p>\n<h2 id=\"String-StringBuffer和StringBuilder区别\"><a href=\"#String-StringBuffer和StringBuilder区别\" class=\"headerlink\" title=\"String,StringBuffer和StringBuilder区别\"></a>String,StringBuffer和StringBuilder区别</h2><p>String是字符串常量,final修饰;StringBuffer字符串变量(线程安全);<br>StringBuilder 字符串变量(线程不安全).</p>\n<h3 id=\"String和StringBuffer\"><a href=\"#String和StringBuffer\" class=\"headerlink\" title=\"String和StringBuffer\"></a>String和StringBuffer</h3><p>String和StringBuffer主要区别是性能:String是不可变对象,每次对String类型进行操作都等同于产生了一个新的String对象,然后指向新的String对象.所以尽量不在对String进行大量的拼接操作,否则会产生很多临时对象,导致GC开始工作,影响系统性能.</p>\n<p>StringBuffer是对对象本身操作,而不是产生新的对象,因此在通常在有大量拼接的情况下我们建议使用StringBuffer.</p>\n<p>但是需要注意现在JVM会对String拼接做一定的优化:<br><code>String s=“This is only ”+”simple”+”test”</code>会被虚拟机直接优化成<code>String s=“This is only simple test”</code>,此时就不存在拼接过程.</p>\n<h3 id=\"StringBuffer和StringBuilder\"><a href=\"#StringBuffer和StringBuilder\" class=\"headerlink\" title=\"StringBuffer和StringBuilder\"></a>StringBuffer和StringBuilder</h3><p>StringBuffer是线程安全的可变字符串,其内部实现是可变数组.StringBuilder是java 5.0新增的,其功能和StringBuffer类似,但是非线程安全.因此,在没有多线程问题的前提下,使用StringBuilder会取得更好的性能.</p>\n<h2 id=\"什么是编译器常量-使用它有什么风险\"><a href=\"#什么是编译器常量-使用它有什么风险\" class=\"headerlink\" title=\"什么是编译器常量?使用它有什么风险?\"></a>什么是编译器常量?使用它有什么风险?</h2><p>公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p>\n<h2 id=\"java当中使用什么类型表示价格比较好\"><a href=\"#java当中使用什么类型表示价格比较好\" class=\"headerlink\" title=\"java当中使用什么类型表示价格比较好?\"></a>java当中使用什么类型表示价格比较好?</h2><p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p>\n<h2 id=\"如何将byte转为String\"><a href=\"#如何将byte转为String\" class=\"headerlink\" title=\"如何将byte转为String\"></a>如何将byte转为String</h2><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p>\n<h2 id=\"可以将int强转为byte类型么-会产生什么问题\"><a href=\"#可以将int强转为byte类型么-会产生什么问题\" class=\"headerlink\" title=\"可以将int强转为byte类型么?会产生什么问题?\"></a>可以将int强转为byte类型么?会产生什么问题?</h2><p>我们可以做强制转换，但是Java中int是32位的而byte是8 位的，所以,如果强制转化int类型的高24位将会被丢弃，byte 类型的范围是从-128.到128</p>\n<hr>\n<h2 id=\"关于垃圾回收\"><a href=\"#关于垃圾回收\" class=\"headerlink\" title=\"关于垃圾回收\"></a>关于垃圾回收</h2><h2 id=\"你知道哪些垃圾回收算法\"><a href=\"#你知道哪些垃圾回收算法\" class=\"headerlink\" title=\"你知道哪些垃圾回收算法?\"></a>你知道哪些垃圾回收算法?</h2><p>垃圾回收从理论上非常容易理解,具体的方法有以下几种:</p>\n<ol>\n<li>标记-清除</li>\n<li>标记-复制</li>\n<li>标记-整理</li>\n<li>分代回收<br>更详细的内容参见<a href=\"http://blog.csdn.net/dd864140130/article/details/50084471\" target=\"_blank\" rel=\"noopener\">深入理解垃圾回收算法</a></li>\n</ol>\n<p>##如何判断一个对象是否应该被回收<br>这就是所谓的对象存活性判断,常用的方法有两种:1.引用计数法;2:对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法.</p>\n<p>##简单的解释一下垃圾回收<br>Java 垃圾回收机制最基本的做法是分代回收。内存中的区域被划分成不同的世代，对象根据其存活的时间被保存在对应世代的区域中。一般的实现是划分成3个世代：年轻、年老和永久。内存的分配是发生在年轻世代中的。当一个对象存活时间足够长的时候，它就会被复制到年老世代中。对于不同的世代可以使用不同的垃圾回收算法。进行世代划分的出发点是对应用中对象存活时间进行研究之后得出的统计规律。一般来说，一个应用中的大部分对象的存活时间都很短。比如局部变量的存活时间就只在方法的执行过程中。基于这一点，对于年轻世代的垃圾回收算法就可以很有针对性.</p>\n<h2 id=\"调用System-gc-会发生什么\"><a href=\"#调用System-gc-会发生什么\" class=\"headerlink\" title=\"调用System.gc()会发生什么?\"></a>调用System.gc()会发生什么?</h2><p>通知GC开始工作,但是GC真正开始的时间不确定.</p>\n<hr>\n<h1 id=\"进程-线程相关\"><a href=\"#进程-线程相关\" class=\"headerlink\" title=\"进程,线程相关\"></a>进程,线程相关</h1><h2 id=\"说说进程-线程-协程之间的区别\"><a href=\"#说说进程-线程-协程之间的区别\" class=\"headerlink\" title=\"说说进程,线程,协程之间的区别\"></a>说说进程,线程,协程之间的区别</h2><p>简而言之,进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.线程是进程的一个实体,是cpu调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行.</p>\n<h2 id=\"你了解守护线程吗-它和非守护线程有什么区别\"><a href=\"#你了解守护线程吗-它和非守护线程有什么区别\" class=\"headerlink\" title=\"你了解守护线程吗?它和非守护线程有什么区别\"></a>你了解守护线程吗?它和非守护线程有什么区别</h2><p>程序运行完毕,jvm会等待非守护线程完成后关闭,但是jvm不会等待守护线程.守护线程最典型的例子就是GC线程</p>\n<h2 id=\"什么是多线程上下文切换\"><a href=\"#什么是多线程上下文切换\" class=\"headerlink\" title=\"什么是多线程上下文切换\"></a>什么是多线程上下文切换</h2><p>多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。</p>\n<h2 id=\"创建两种线程的方式-他们有什么区别\"><a href=\"#创建两种线程的方式-他们有什么区别\" class=\"headerlink\" title=\"创建两种线程的方式?他们有什么区别?\"></a>创建两种线程的方式?他们有什么区别?</h2><p>通过实现java.lang.Runnable或者通过扩展java.lang.Thread类.相比扩展Thread,实现Runnable接口可能更优.原因有二:</p>\n<ol>\n<li>Java不支持多继承.因此扩展Thread类就代表这个子类不能扩展其他类.而实现Runnable接口的类还可能扩展另一个类.</li>\n<li>类可能只要求可执行即可,因此集成整个Thread类的开销过大.</li>\n</ol>\n<h2 id=\"Runnable和Callable的区别\"><a href=\"#Runnable和Callable的区别\" class=\"headerlink\" title=\"Runnable和Callable的区别\"></a>Runnable和Callable的区别</h2><p>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。<br>这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而Callable+Future/FutureTask却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。</p>\n<h2 id=\"什么导致线程阻塞\"><a href=\"#什么导致线程阻塞\" class=\"headerlink\" title=\"什么导致线程阻塞\"></a>什么导致线程阻塞</h2><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪），学过操作系统的同学对它一定已经很熟悉了。Java 提供了大量方法来支持阻塞，下面让我们逐一分析。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sleep()</td>\n<td>sleep() 允许 指定以毫秒为单位的一段时间作为参数，它使得线程在指定的时间内进入阻塞状态，不能得到CPU 时间，指定的时间一过，线程重新进入可执行状态。 典型地，sleep() 被用在等待某个资源就绪的情形：测试发现条件不满足后，让线程阻塞一段时间后重新测试，直到条件满足为止</td>\n</tr>\n<tr>\n<td>suspend() 和 resume()</td>\n<td>两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。</td>\n</tr>\n<tr>\n<td>yield()</td>\n<td>yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程</td>\n</tr>\n<tr>\n<td>wait() 和 notify()</td>\n<td>两个方法配套使用，wait() 使得线程进入阻塞状态，它有两种形式，一种允许 指定以毫秒为单位的一段时间作为参数，另一种没有参数，前者当对应的 notify() 被调用或者超出指定时间时线程重新进入可执行状态，后者则必须对应的 notify() 被调用.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wait-notify-和suspend-resume-之间的区别\"><a href=\"#wait-notify-和suspend-resume-之间的区别\" class=\"headerlink\" title=\"wait(),notify()和suspend(),resume()之间的区别\"></a>wait(),notify()和suspend(),resume()之间的区别</h2><p>初看起来它们与 suspend() 和 resume() 方法对没有什么分别，但是事实上它们是截然不同的。区别的核心在于，前面叙述的所有方法，阻塞时都不会释放占用的锁（如果占用了的话），而这一对方法则相反。上述的核心区别导致了一系列的细节上的区别。</p>\n<p>首先，前面叙述的所有方法都隶属于 Thread 类，但是这一对却直接隶属于 Object 类，也就是说，所有对象都拥有这一对方法。初看起来这十分不可思议，但是实际上却是很自然的，因为这一对方法阻塞时要释放占用的锁，而锁是任何对象都具有的，调用任意对象的 wait() 方法导致线程阻塞，并且该对象上的锁被释放。而调用 任意对象的notify()方法则导致因调用该对象的 wait() 方法而阻塞的线程中随机选择的一个解除阻塞（但要等到获得锁后才真正可执行）。</p>\n<p>其次，前面叙述的所有方法都可在任何位置调用，但是这一对方法却必须在 synchronized 方法或块中调用，理由也很简单，只有在synchronized 方法或块中当前线程才占有锁，才有锁可以释放。同样的道理，调用这一对方法的对象上的锁必须为当前线程所拥有，这样才有锁可以释放。因此，这一对方法调用必须放置在这样的 synchronized 方法或块中，该方法或块的上锁对象就是调用这一对方法的对象。若不满足这一条件，则程序虽然仍能编译，但在运行时会出现IllegalMonitorStateException 异常。</p>\n<p>wait() 和 notify() 方法的上述特性决定了它们经常和synchronized 方法或块一起使用，将它们和操作系统的进程间通信机制作一个比较就会发现它们的相似性：synchronized方法或块提供了类似于操作系统原语的功能，它们的执行不会受到多线程机制的干扰，而这一对方法则相当于 block 和wakeup 原语（这一对方法均声明为 synchronized）。它们的结合使得我们可以实现操作系统上一系列精妙的进程间通信的算法（如信号量算法），并用于解决各种复杂的线程间通信问题。</p>\n<p>关于 wait() 和 notify() 方法最后再说明两点：<br>第一：调用 notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中随机选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</p>\n<p>第二：除了 notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</p>\n<p>谈到阻塞，就不能不谈一谈死锁，略一分析就能发现，suspend() 方法和不指定超时期限的 wait() 方法的调用都可能产生死锁。遗憾的是，Java 并不在语言级别上支持死锁的避免，我们在编程中必须小心地避免死锁。</p>\n<p>以上我们对 Java 中实现线程阻塞的各种方法作了一番分析，我们重点分析了 wait() 和 notify() 方法，因为它们的功能最强大，使用也最灵活，但是这也导致了它们的效率较低，较容易出错。实际使用中我们应该灵活使用各种方法，以便更好地达到我们的目的。</p>\n<h2 id=\"为什么wait-方法和notify-notifyAll-方法要在同步块中被调用\"><a href=\"#为什么wait-方法和notify-notifyAll-方法要在同步块中被调用\" class=\"headerlink\" title=\"为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用\"></a>为什么wait()方法和notify()/notifyAll()方法要在同步块中被调用</h2><p>这是JDK强制的，wait()方法和notify()/notifyAll()方法在调用前都必须先获得对象的锁</p>\n<h2 id=\"wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别\"><a href=\"#wait-方法和notify-notifyAll-方法在放弃对象监视器时有什么区别\" class=\"headerlink\" title=\"wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别\"></a>wait()方法和notify()/notifyAll()方法在放弃对象监视器时有什么区别</h2><p>wait()方法和notify()/notifyAll()方法在放弃对象监视器的时候的区别在于：wait()方法立即释放对象监视器，notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。</p>\n<h2 id=\"wait-与sleep-的区别\"><a href=\"#wait-与sleep-的区别\" class=\"headerlink\" title=\"wait()与sleep()的区别\"></a>wait()与sleep()的区别</h2><p> 关于这两者已经在上面进行详细的说明,这里就做个概括好了:</p>\n<ul>\n<li>sleep()来自Thread类，和wait()来自Object类.调用sleep()方法的过程中，线程不会释放对象锁。而 调用 wait 方法线程会释放对象锁</li>\n<li>sleep()睡眠后不出让系统资源，wait让其他线程可以占用CPU</li>\n<li>sleep(milliseconds)需要指定一个睡眠时间，时间一到会自动唤醒.而wait()需要配合notify()或者notifyAll()使用</li>\n</ul>\n<h2 id=\"synchronized和ReentrantLock的区别\"><a href=\"#synchronized和ReentrantLock的区别\" class=\"headerlink\" title=\"synchronized和ReentrantLock的区别\"></a>synchronized和ReentrantLock的区别</h2><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：<br>（1）ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁<br>（2）ReentrantLock可以获取各种锁的信息<br>（3）ReentrantLock可以灵活地实现多路通知<br>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word.</p>\n<h2 id=\"FutureTask是什么\"><a href=\"#FutureTask是什么\" class=\"headerlink\" title=\"FutureTask是什么\"></a>FutureTask是什么</h2><p>这个其实前面有提到过，FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。当然，由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。</p>\n<h2 id=\"一个线程如果出现了运行时异常怎么办\"><a href=\"#一个线程如果出现了运行时异常怎么办\" class=\"headerlink\" title=\"一个线程如果出现了运行时异常怎么办?\"></a>一个线程如果出现了运行时异常怎么办?</h2><p>如果这个异常没有被捕获的话，这个线程就停止执行了。另外重要的一点是：如果这个线程持有某个某个对象的监视器，那么这个对象监视器会被立即释放</p>\n<h2 id=\"如何在两个线程间共享数据\"><a href=\"#如何在两个线程间共享数据\" class=\"headerlink\" title=\"如何在两个线程间共享数据\"></a>如何在两个线程间共享数据</h2><p>通过在线程之间共享对象就可以了，然后通过wait/notify/notifyAll、await/signal/signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p>\n<h2 id=\"如何正确的使用wait-使用if还是while\"><a href=\"#如何正确的使用wait-使用if还是while\" class=\"headerlink\" title=\"如何正确的使用wait()?使用if还是while?\"></a>如何正确的使用wait()?使用if还是while?</h2><p>wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (obj) &#123;</span><br><span class=\"line\">   while (condition does not hold)</span><br><span class=\"line\">     obj.wait(); &#x2F;&#x2F; (Releases lock, and reacquires on wakeup)</span><br><span class=\"line\">     ... &#x2F;&#x2F; Perform action appropriate to condition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"什么是线程局部变量\"><a href=\"#什么是线程局部变量\" class=\"headerlink\" title=\"什么是线程局部变量\"></a>什么是线程局部变量</h2><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p>\n<h2 id=\"ThreadLoal的作用是什么\"><a href=\"#ThreadLoal的作用是什么\" class=\"headerlink\" title=\"ThreadLoal的作用是什么?\"></a>ThreadLoal的作用是什么?</h2><p>简单说ThreadLocal就是一种以空间换时间的做法在每个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了.</p>\n<h2 id=\"生产者消费者模型的作用是什么\"><a href=\"#生产者消费者模型的作用是什么\" class=\"headerlink\" title=\"生产者消费者模型的作用是什么?\"></a>生产者消费者模型的作用是什么?</h2><p>（1）通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用<br>（2）解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约</p>\n<h2 id=\"写一个生产者-消费者队列\"><a href=\"#写一个生产者-消费者队列\" class=\"headerlink\" title=\"写一个生产者-消费者队列\"></a>写一个生产者-消费者队列</h2><p>可以通过阻塞队列实现,也可以通过wait-notify来实现.</p>\n<h3 id=\"使用阻塞队列来实现\"><a href=\"#使用阻塞队列来实现\" class=\"headerlink\" title=\"使用阻塞队列来实现\"></a>使用阻塞队列来实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;消费者</span><br><span class=\"line\">public class Producer implements Runnable&#123;</span><br><span class=\"line\">    private final BlockingQueue&lt;Integer&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Producer(BlockingQueue q)&#123;</span><br><span class=\"line\">        this.queue&#x3D;q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                Thread.sleep(1000);&#x2F;&#x2F;模拟耗时</span><br><span class=\"line\">                queue.put(produce());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (InterruptedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int produce() &#123;</span><br><span class=\"line\">        int n&#x3D;new Random().nextInt(10000);</span><br><span class=\"line\">        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; produce:&quot; + n);</span><br><span class=\"line\">        return n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;消费者</span><br><span class=\"line\">public class Consumer implements Runnable &#123;</span><br><span class=\"line\">    private final BlockingQueue&lt;Integer&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Consumer(BlockingQueue q)&#123;</span><br><span class=\"line\">        this.queue&#x3D;q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2000);&#x2F;&#x2F;模拟耗时</span><br><span class=\"line\">                consume(queue.take());</span><br><span class=\"line\">            &#125;catch (InterruptedException e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void consume(Integer n) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Thread:&quot; + Thread.currentThread().getId() + &quot; consume:&quot; + n);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        BlockingQueue&lt;Integer&gt; queue&#x3D;new ArrayBlockingQueue&lt;Integer&gt;(100);</span><br><span class=\"line\">        Producer p&#x3D;new Producer(queue);</span><br><span class=\"line\">        Consumer c1&#x3D;new Consumer(queue);</span><br><span class=\"line\">        Consumer c2&#x3D;new Consumer(queue);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(p).start();</span><br><span class=\"line\">        new Thread(c1).start();</span><br><span class=\"line\">        new Thread(c2).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用wait-notify来实现\"><a href=\"#使用wait-notify来实现\" class=\"headerlink\" title=\"使用wait-notify来实现\"></a>使用wait-notify来实现</h3><p>该种方式应该最经典,这里就不做说明了</p>\n<h2 id=\"ConcurrentHashMap的并发度是什么\"><a href=\"#ConcurrentHashMap的并发度是什么\" class=\"headerlink\" title=\"ConcurrentHashMap的并发度是什么?\"></a>ConcurrentHashMap的并发度是什么?</h2><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势，任何情况下，Hashtable能同时有两条线程获取Hashtable中的数据吗？</p>\n<h2 id=\"CyclicBarrier和CountDownLatch区别\"><a href=\"#CyclicBarrier和CountDownLatch区别\" class=\"headerlink\" title=\"CyclicBarrier和CountDownLatch区别\"></a>CyclicBarrier和CountDownLatch区别</h2><p>这两个类非常类似，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：</p>\n<ul>\n<li>CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</li>\n<li>CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务</li>\n<li>CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</li>\n</ul>\n<h2 id=\"java中的-操作符线程安全么\"><a href=\"#java中的-操作符线程安全么\" class=\"headerlink\" title=\"java中的++操作符线程安全么?\"></a>java中的++操作符线程安全么?</h2><p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差</p>\n<h2 id=\"你有哪些多线程开发良好的实践\"><a href=\"#你有哪些多线程开发良好的实践\" class=\"headerlink\" title=\"你有哪些多线程开发良好的实践?\"></a>你有哪些多线程开发良好的实践?</h2><ol>\n<li>给线程命名</li>\n<li>最小化同步范围</li>\n<li>优先使用volatile</li>\n<li>尽可能使用更高层次的并发工具而非wait和notify()来实现线程通信,如BlockingQueue,Semeaphore</li>\n<li>优先使用并发容器而非同步容器.</li>\n<li>考虑使用线程池</li>\n</ol>\n<hr>\n<p>#关于volatile关键字</p>\n<h2 id=\"可以创建Volatile数组吗\"><a href=\"#可以创建Volatile数组吗\" class=\"headerlink\" title=\"可以创建Volatile数组吗?\"></a>可以创建Volatile数组吗?</h2><p>Java 中可以创建 volatile类型数组，不过只是一个指向数组的引用，而不是整个数组。如果改变引用指向的数组，将会受到volatile 的保护，但是如果多个线程同时改变数组的元素，volatile标示符就不能起到之前的保护作用了</p>\n<h2 id=\"volatile能使得一个非原子操作变成原子操作吗\"><a href=\"#volatile能使得一个非原子操作变成原子操作吗\" class=\"headerlink\" title=\"volatile能使得一个非原子操作变成原子操作吗?\"></a>volatile能使得一个非原子操作变成原子操作吗?</h2><p>一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。</p>\n<p>一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中 volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（write barrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。</p>\n<h2 id=\"volatile类型变量提供什么保证\"><a href=\"#volatile类型变量提供什么保证\" class=\"headerlink\" title=\"volatile类型变量提供什么保证?\"></a>volatile类型变量提供什么保证?</h2><p>volatile 主要有两方面的作用:1.避免指令重排2.可见性保证.例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的(低32位和高32位)，但 volatile 类型的 double 和 long 就是原子的.</p>\n<hr>\n<p>#关于集合</p>\n<h2 id=\"Java中的集合及其继承关系\"><a href=\"#Java中的集合及其继承关系\" class=\"headerlink\" title=\"Java中的集合及其继承关系\"></a>Java中的集合及其继承关系</h2><p>关于集合的体系是每个人都应该烂熟于心的,尤其是对我们经常使用的List,Map的原理更该如此.这里我们看这张图即可:<br><img src=\"http://img.blog.csdn.net/20141105193133812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGQ4NjQxNDAxMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p>更多内容可见<a href=\"http://write.blog.csdn.net/postedit/40826423\" target=\"_blank\" rel=\"noopener\">集合类总结</a></p>\n<h2 id=\"poll-方法和remove-方法区别\"><a href=\"#poll-方法和remove-方法区别\" class=\"headerlink\" title=\"poll()方法和remove()方法区别?\"></a>poll()方法和remove()方法区别?</h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p>\n<h2 id=\"LinkedHashMap和PriorityQueue的区别\"><a href=\"#LinkedHashMap和PriorityQueue的区别\" class=\"headerlink\" title=\"LinkedHashMap和PriorityQueue的区别\"></a>LinkedHashMap和PriorityQueue的区别</h2><p>PriorityQueue 是一个优先级队列,保证最高或者最低优先级的的元素总是在队列头部，但是 LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue 时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。</p>\n<h2 id=\"WeakHashMap与HashMap的区别是什么\"><a href=\"#WeakHashMap与HashMap的区别是什么\" class=\"headerlink\" title=\"WeakHashMap与HashMap的区别是什么?\"></a>WeakHashMap与HashMap的区别是什么?</h2><p>WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。</p>\n<h2 id=\"ArrayList和LinkedList的区别\"><a href=\"#ArrayList和LinkedList的区别\" class=\"headerlink\" title=\"ArrayList和LinkedList的区别?\"></a>ArrayList和LinkedList的区别?</h2><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p>\n<h2 id=\"ArrayList和HashMap默认大小\"><a href=\"#ArrayList和HashMap默认大小\" class=\"headerlink\" title=\"ArrayList和HashMap默认大小?\"></a>ArrayList和HashMap默认大小?</h2><p>在 Java 7 中，ArrayList 的默认大小是 10 个元素，HashMap 的默认大小是16个元素（必须是2的幂）。这就是 Java 7 中 ArrayList 和 HashMap 类的代码片段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final int DEFAULT_CAPACITY &#x3D; 10;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#x2F;&#x2F;from HashMap.java JDK 7</span><br><span class=\"line\"> static final int DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; aka 16</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Comparator和Comparable的区别\"><a href=\"#Comparator和Comparable的区别\" class=\"headerlink\" title=\"Comparator和Comparable的区别?\"></a>Comparator和Comparable的区别?</h2><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p>\n<h2 id=\"如何实现集合排序\"><a href=\"#如何实现集合排序\" class=\"headerlink\" title=\"如何实现集合排序?\"></a>如何实现集合排序?</h2><p>你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。</p>\n<h2 id=\"如何打印数组内容\"><a href=\"#如何打印数组内容\" class=\"headerlink\" title=\"如何打印数组内容\"></a>如何打印数组内容</h2><p>你可以使用 Arrays.toString() 和 Arrays.deepToString() 方法来打印数组。由于数组没有实现 toString() 方法，所以如果将数组传递给 System.out.println() 方法，将无法打印出数组的内容，但是 Arrays.toString() 可以打印每个元素。</p>\n<h2 id=\"LinkedList的是单向链表还是双向\"><a href=\"#LinkedList的是单向链表还是双向\" class=\"headerlink\" title=\"LinkedList的是单向链表还是双向?\"></a>LinkedList的是单向链表还是双向?</h2><p>双向循环列表,具体实现自行查阅源码.</p>\n<h2 id=\"TreeMap是实现原理\"><a href=\"#TreeMap是实现原理\" class=\"headerlink\" title=\"TreeMap是实现原理\"></a>TreeMap是实现原理</h2><p>采用红黑树实现,具体实现自行查阅源码.</p>\n<h2 id=\"遍历ArrayList时如何正确移除一个元素\"><a href=\"#遍历ArrayList时如何正确移除一个元素\" class=\"headerlink\" title=\"遍历ArrayList时如何正确移除一个元素\"></a>遍历ArrayList时如何正确移除一个元素</h2><p>该问题的关键在于面试者使用的是 ArrayList 的 remove() 还是 Iterator 的 remove()方法。这有一段示例代码，是使用正确的方式来实现在遍历的过程中移除元素，而不会出现 ConcurrentModificationException 异常的示例代码。</p>\n<h2 id=\"什么是ArrayMap-它和HashMap有什么区别\"><a href=\"#什么是ArrayMap-它和HashMap有什么区别\" class=\"headerlink\" title=\"什么是ArrayMap?它和HashMap有什么区别?\"></a>什么是ArrayMap?它和HashMap有什么区别?</h2><p>ArrayMap是Android SDK中提供的,非Android开发者可以略过.<br>ArrayMap是用两个数组来模拟map,更少的内存占用空间,更高的效率.<br>具体参考这篇文章:<a href=\"http://lvable.com/?p=217%5D\" target=\"_blank\" rel=\"noopener\">ArrayMap VS HashMap</a></p>\n<h2 id=\"HashMap的实现原理\"><a href=\"#HashMap的实现原理\" class=\"headerlink\" title=\"HashMap的实现原理\"></a>HashMap的实现原理</h2><p>1   HashMap概述：  HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>2   HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p>\n<p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上.</p>\n<h2 id=\"你了解Fail-Fast机制吗\"><a href=\"#你了解Fail-Fast机制吗\" class=\"headerlink\" title=\"你了解Fail-Fast机制吗\"></a>你了解Fail-Fast机制吗</h2><p>Fail-Fast即我们常说的快速失败,更多内容参看<a href=\"http://blog.csdn.net/chenssy/article/details/38151189\" target=\"_blank\" rel=\"noopener\">fail-fast机制</a></p>\n<hr>\n<h1 id=\"关于日期\"><a href=\"#关于日期\" class=\"headerlink\" title=\"关于日期\"></a>关于日期</h1><h2 id=\"SimpleDateFormat是线程安全的吗\"><a href=\"#SimpleDateFormat是线程安全的吗\" class=\"headerlink\" title=\"SimpleDateFormat是线程安全的吗?\"></a>SimpleDateFormat是线程安全的吗?</h2><p>非常不幸，DateFormat 的所有实现，包括 SimpleDateFormat 都不是线程安全的，因此你不应该在多线程序中使用，除非是在对外线程安全的环境中使用，如 将 SimpleDateFormat 限制在 ThreadLocal 中。如果你不这么做，在解析或者格式化日期的时候，可能会获取到一个不正确的结果。因此，从日期、时间处理的所有实践来说，我强力推荐 joda-time 库。</p>\n<h2 id=\"如何格式化日期\"><a href=\"#如何格式化日期\" class=\"headerlink\" title=\"如何格式化日期?\"></a>如何格式化日期?</h2><p>Java 中，可以使用 SimpleDateFormat 类或者 joda-time 库来格式日期。DateFormat 类允许你使用多种流行的格式来格式化日期。参见答案中的示例代码，代码中演示了将日期格式化成不同的格式，如 dd-MM-yyyy 或 ddMMyyyy。</p>\n<hr>\n<h1 id=\"关于异常\"><a href=\"#关于异常\" class=\"headerlink\" title=\"关于异常\"></a>关于异常</h1><h2 id=\"简单描述java异常体系\"><a href=\"#简单描述java异常体系\" class=\"headerlink\" title=\"简单描述java异常体系\"></a>简单描述java异常体系</h2><p>相比没有人不了解异常体系,关于异常体系的更多信息可以见:<a href=\"http://blog.csdn.net/dd864140130/article/details/42504189\" target=\"_blank\" rel=\"noopener\">白话异常机制</a></p>\n<h2 id=\"什么是异常链\"><a href=\"#什么是异常链\" class=\"headerlink\" title=\"什么是异常链\"></a>什么是异常链</h2><p>详情直接参见<a href=\"http://blog.csdn.net/dd864140130/article/details/42504189\" target=\"_blank\" rel=\"noopener\">白话异常机制</a>,不做解释了.</p>\n<h2 id=\"throw和throws的区别\"><a href=\"#throw和throws的区别\" class=\"headerlink\" title=\"throw和throws的区别\"></a>throw和throws的区别</h2><p>throw用于主动抛出java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个Exception，如：<code>throw new IllegalArgumentException(“size must be multiple of 2″)</code>,<br>而throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。</p>\n<hr>\n<h2 id=\"关于序列化\"><a href=\"#关于序列化\" class=\"headerlink\" title=\"关于序列化\"></a>关于序列化</h2><h2 id=\"Java-中，Serializable-与-Externalizable-的区别\"><a href=\"#Java-中，Serializable-与-Externalizable-的区别\" class=\"headerlink\" title=\"Java 中，Serializable 与 Externalizable 的区别\"></a>Java 中，Serializable 与 Externalizable 的区别</h2><p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p>\n<hr>\n<p>#关于JVM</p>\n<h2 id=\"JVM特性\"><a href=\"#JVM特性\" class=\"headerlink\" title=\"JVM特性\"></a>JVM特性</h2><p>平台无关性.<br>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。</p>\n<h2 id=\"简单解释一下类加载器\"><a href=\"#简单解释一下类加载器\" class=\"headerlink\" title=\"简单解释一下类加载器\"></a>简单解释一下类加载器</h2><p>有关类加载器一般会问你四种类加载器的应用场景以及双亲委派模型,更多的内容参看<a href=\"http://blog.csdn.net/dd864140130/article/details/49817357\" target=\"_blank\" rel=\"noopener\">深入理解JVM加载器</a></p>\n<h2 id=\"简述堆和栈的区别\"><a href=\"#简述堆和栈的区别\" class=\"headerlink\" title=\"简述堆和栈的区别\"></a>简述堆和栈的区别</h2><p>VM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。</p>\n<h2 id=\"简述JVM内存分配\"><a href=\"#简述JVM内存分配\" class=\"headerlink\" title=\"简述JVM内存分配\"></a>简述JVM内存分配</h2><ol>\n<li>基本数据类型比变量和对象的引用都是在栈分配的</li>\n<li>堆内存用来存放由new创建的对象和数组</li>\n<li>类变量（static修饰的变量），程序在一加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中</li>\n<li>实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的”物理位置”,实例变量的生命周期–当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存</li>\n<li>局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放</li>\n</ol>\n<hr>\n<p>#其他</p>\n<h2 id=\"java当中采用的是大端还是小端\"><a href=\"#java当中采用的是大端还是小端\" class=\"headerlink\" title=\"java当中采用的是大端还是小端?\"></a>java当中采用的是大端还是小端?</h2><h2 id=\"XML解析的几种方式和特点\"><a href=\"#XML解析的几种方式和特点\" class=\"headerlink\" title=\"XML解析的几种方式和特点\"></a>XML解析的几种方式和特点</h2><p>DOM,SAX,PULL三种解析方式:</p>\n<ul>\n<li>DOM:消耗内存：先把xml文档都读到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存。要是数据过大，手机不够牛逼，可能手机直接死机</li>\n<li>SAX:解析效率高，占用内存少，基于事件驱动的：更加简单地说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束、文档(document)结束等地方时通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直至文档结束。</li>\n<li>PULL:与 SAX 类似，也是基于事件驱动，我们可以调用它的next（）方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签），当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的值，也可调用它的nextText()获取本节点的值。</li>\n</ul>\n<h2 id=\"JDK-1-7特性\"><a href=\"#JDK-1-7特性\" class=\"headerlink\" title=\"JDK 1.7特性\"></a>JDK 1.7特性</h2><p>然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(\\&lt;>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码</p>\n<h2 id=\"JDK-1-8特性\"><a href=\"#JDK-1-8特性\" class=\"headerlink\" title=\"JDK 1.8特性\"></a>JDK 1.8特性</h2><p>java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：<br>Lambda 表达式，允许像对象一样传递匿名函数<br>Stream API，充分利用现代多核 CPU，可以写出很简洁的代码<br>Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用<br>扩展方法，现在，接口中可以有静态、默认方法。<br>重复注解，现在你可以将相同的注解在同一类型上使用多次。</p>\n<h2 id=\"Maven和ANT有什么区别\"><a href=\"#Maven和ANT有什么区别\" class=\"headerlink\" title=\"Maven和ANT有什么区别?\"></a>Maven和ANT有什么区别?</h2><p>虽然两者都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件），Maven 与 ANT 工具更多的不同之处请参见答案。<br>这就是所有的面试题，如此之多，是不是？我可以保证，如果你能回答列表中的所有问题，你就可以很轻松的应付任何核心 Java 或者高级 Java 面试。虽然，这里没有涵盖 Servlet、JSP、JSF、JPA，JMS，EJB 及其它 Java EE 技术，也没有包含主流的框架如 spring MVC，Struts 2.0，hibernate，也没有包含 SOAP 和 RESTful web service，但是这份列表对做 Java 开发的、准备应聘 Java web 开发职位的人还是同样有用的，因为所有的 Java 面试，开始的问题都是 Java 基础和 JDK API 相关的。如果你认为我这里有任何应该在这份列表中而被我遗漏了的 Java 流行的问题，你可以自由的给我建议。我的目的是从最近的面试中创建一份最新的、最优的 Java 面试问题列表。</p>\n<h2 id=\"JDBC最佳实践\"><a href=\"#JDBC最佳实践\" class=\"headerlink\" title=\"JDBC最佳实践\"></a>JDBC最佳实践</h2><ul>\n<li>优先使用批量操作来插入和更新数据</li>\n<li>使用PreparedStatement来避免SQL漏洞</li>\n<li>使用数据连接池</li>\n<li>通过列名来获取结果集</li>\n</ul>\n<h2 id=\"IO操作最佳实践\"><a href=\"#IO操作最佳实践\" class=\"headerlink\" title=\"IO操作最佳实践\"></a>IO操作最佳实践</h2><ol>\n<li>使用有缓冲的IO类,不要单独读取字节或字符</li>\n<li>使用NIO和NIO 2或者AIO,而非BIO</li>\n<li>在finally中关闭流</li>\n<li>使用内存映射文件获取更快的IO</li>\n</ol>"},{"title":"oracle之技术经验","urlname":"yd4suv","date":"2019-02-14T04:05:59.000Z","_content":"<a name=\"f66bd8f4\"></a>\n# ****O****ra****cle****经验****\n \n<a name=\"e9a9187c\"></a>\n## ****申明****\n本文大部分资料来自《深入理解Oracle 12c数据库管理》，但是也有自己的个人观点，大家也去看这本书\n<a name=\"e05dce83\"></a>\n## ****简介****\n\tOracle数据库已经是当今世界技术前沿了，因为它优点突出 <br />有以下优点：<br />(1) 拥有其他数据库系统所没有的表空间概念；<br />(2) 拥有真正的等级锁功能<br />(3) 拥有多版本数据功能，读写操作不会相互等待（我觉得是非常的好特性）<br />(4) 拥有更快的处理速度和更高的安全性；<br />(5) 拥有丰富的数据字典，易于DBA判断数据库的各种情况；<br />(6) 拥有非常简单明了的备份与恢复原理<br />(7) Oracle数据库可以启动到多个阶段，DBA可以在不同的情况下，通过启动到特定的阶段解决一些特殊问题<br />(8) Oracle可以跨越多种软、硬平台。\n\n<a name=\"362eced1\"></a>\n## ****Oracle****安装和创建****(****由于本文作者觉得linux太花费时间，故只有这部分讲解到linux****)****\nOracle安装一般有两种，一种是图形界面的安装，另一种是无界面安装。建议是无界面，因为图形界面在宽带不足情况下，可能出现加载远程界面慢的问题，而且不能自动化。无界面可以依靠应答文件来安装。\n<a name=\"712f5efa\"></a>\n### ****了解OFA标准****\nOFA标准是指oracle的目录结构和文件名，然而大部分DBA（database manager数据库管理员简称DBA）都在一定程度上自定义了，以适应于不同的环境。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117219355-d3c0e3a0-41c9-45c4-ae0c-a89fe13bccb3.png#align=left&display=inline&height=507&name=image.png&originHeight=507&originWidth=835&size=295404&status=done&width=835)<br /><!--more-->\n<a name=\"119c5730\"></a>\n### ****库的高速缓存和数据字典的高速缓存****\n \n<a name=\"a55e5de5\"></a>\n#### ****库的高速缓存****\n是用来存放你实际表的数据块的，如表TAB_A里实际存放的若干条数据记录，一般都存放在用户的表空间里。<br /> <br /> \n<a name=\"773d69a4\"></a>\n#### ****数据字典的高速缓存****\n用来存放表的定义，如表TAB_A，有几个字段，每个字段的类型、长度，表空间等，这类信息在你建表后会存放在系统表里，都是在SYSTEM表空间下，ORACLE运行时，这些信息被装入数据字典高速缓存里。<br /> \n<a name=\"7f04d897\"></a>\n#### ****数据字典的意思是****\n简单的说就和我们小学用的词典的目录一样  要查询个表的数据 首先要确认这个词典（数据库）中有这个词语（表）  吧<br /> \n<a name=\"2655d132\"></a>\n### ****安装oracle****\n \n<a name=\"061f72da\"></a>\n#### ****创建对应的权限的O****S****用户组****\n我们需要linux上创建一些OS用户组，安装完oracle之后就可以为linuxOS用户组分配的相应的数据库操作权限，正常来说OS用户组（注：用户和用户组是不一样的）的创建是属于系统管理员（SA）的工作，但是大部分情况没有SA。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117248391-cbfc23d8-2f3c-4bb5-b862-65300cfb607d.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=822&size=254798&status=done&width=822)<br />不必根据一字不差照搬组名，可以根据不一样环境来配置。<br /> \n<a name=\"657ad920\"></a>\n##### ****运行linux命令，创建组****\n我们只按照简单的功能来分组就好了，oinstall负责安装和卸载权限，dba具有完全操作权限，oper只具有数据库操作权限（包含一些删除表，创建表，修改等待权限 ）<br />groupadd oinstall<br />groupadd dba<br />groupadd oper<br /> \n<a name=\"ccd2979a\"></a>\n###### ****查看创建的OS组****\ncat /etc/group<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117306714-eef5438b-f88e-43d4-9ecb-0d43990fe65f.png#align=left&display=inline&height=386&name=image.png&originHeight=386&originWidth=281&size=12073&status=done&width=281)<br />1000、1001、1002是我们组的ID\n<a name=\"87c9fadb\"></a>\n##### ****创建用户并分配组****\nuseradd -u 500 -g oinstall -G dba , oper oracle<br />将组ID设置500(其他同事可能需要人执行相同的组ID来执行所有安装)<br />创建主属组为oinstall，创建副属组为dba,oper<br />-g 和-G，分别是分配主属组和附属组的意思。\n<a name=\"d82e410e\"></a>\n###### ****查看用户信息****\ncat /etc/passwd<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117322832-e84ea737-28ec-450b-9087-7f6f9c5272ea.png#align=left&display=inline&height=385&name=image.png&originHeight=385&originWidth=827&size=30460&status=done&width=827)<br /> \n<a name=\"e7d20343\"></a>\n###### ****删除修改用户，或者用户组****\n修改删除用户组：groupmod、groupdel<br />修改删除用户：usermod、userdel<br />以上命令需要使用系统管理员登录\n<a name=\"11c5905d\"></a>\n#### ****查看linux环境信息****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117345109-376aba41-14b7-46f6-9e38-8141c9886cfb.png#align=left&display=inline&height=401&name=image.png&originHeight=401&originWidth=860&size=45732&status=done&width=860)以下为我本人系统的信息<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117364504-14c00655-46d0-4c60-a248-84661ea1cb04.png#align=left&display=inline&height=452&name=image.png&originHeight=452&originWidth=666&size=29951&status=done&width=666)<br />grep MemTotal  /proc/meminfo<br />free –t<br />df –h /tmp<br />df –h<br />cat /proc/version<br />uname –r<br /> <br />rpm –q <package name> 查询是否已经安装必须的软件包\n<a name=\"fdd1ae5b\"></a>\n## ****管理数据库****\n \n<a name=\"dfc119cb\"></a>\n### ****S****ysdba数据库账号****\n这个账号可拥有除了关闭数据库以外的所有操作权限<br />as sysdba作为系统管理员登录\n<a name=\"6aee7bf5\"></a>\n### ****第一次操作数据库****\nstartup onmount 启动后台进程并分配内存，此命令执行后，sql*plus会读取ORACLE_HOME/dbs中的初始化文件，会使后台进程和内存区域初始化，这样你就拥有了oracle的实例，但是还没有数据库<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117384566-27b7d3ce-0863-4a79-ac04-4ec4bfc56b98.png#align=left&display=inline&height=228&name=image.png&originHeight=228&originWidth=603&size=11983&status=done&width=603)<br />oracle实例是指后台进程和内存区域，oracle数据库是指磁盘上的物理文件（数据文件、控制文件、联机重做日志文件）\n<a name=\"187ec332\"></a>\n### ****表空间****\n<a name=\"fcf86c6f\"></a>\n#### ****查询TEMP临时表空间****\nselect*from database_properties where property_name='DEFAULT_TEMP_TABLESPACE';<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117405819-4e8691dc-3239-445c-b58e-e77a25fa45f4.png#align=left&display=inline&height=202&name=image.png&originHeight=202&originWidth=620&size=7894&status=done&width=620)\n<a name=\"5d4d5693\"></a>\n#### ****USER表空间****\nselect*from database_properties<br />where roperty_name='DEFAULT_PERMANENT_TABLESPACE';<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117417926-a850da9d-5066-484f-9f27-e1aedcadea79.png#align=left&display=inline&height=172&name=image.png&originHeight=172&originWidth=632&size=7080&status=done&width=632)\n<a name=\"00caab79\"></a>\n### ****连接标识****\n<a name=\"8d258c38\"></a>\n#### ****Oracle 的OCI Driver 和 Thin Driver的区别****\n有以下两种标识方式：<br /> <br />jdbc:oracle:oci8:@shdb<br /> <br />1）从使用上来说，oci必须在客户机上安装oracle客户端或才能连接，而thin就不需要，因此从使用上来讲thin还是更加方便，这也是thin比较常见的原因。 <br />2）原理上来看，thin是纯java实现tcp/ip的c/s通讯；而oci方式,客户端通过native java method调用c library访问服务端，而这个c library就是oci(oracle called interface)，因此这个oci总是需要随着oracle客户端安装（从oracle10.1.0开始，单独提供OCI Instant Client，不用再完整的安装client） <br />3）它们分别是不同的驱动类别，oci是二类驱动， thin是四类驱动，但它们在功能上并无差异。<br /> \n<a name=\"3a0f1856\"></a>\n### ****查询实例名（SID）****\nsqlplus / as sysdba<br />show parameter instance_name<br /> \n<a name=\"f858894c\"></a>\n## ****配置用户和数据库对象****\n<a name=\"f8876e5d\"></a>\n## ****创建和维护大型数据库对象、分区和索引****\n<a name=\"d2adec7f\"></a>\n## ****备份和恢复****\n<a name=\"01a62dbc\"></a>\n## ****数据库自动化及常见问题解决方法****\n<a name=\"9d2f273a\"></a>\n## ****管理窗口和可插入数据库****\n<a name=\"d579eb7d\"></a>\n## ****Oracle 导入导出及连接****\n<a name=\"ea6f3b87\"></a>\n### ****参考链接****\n[Oracle数据库导入导出命令总结](http://blog.itpub.net/21614165/viewspace-766937/)<br />[sqlplus连接远程数据库](http://blog.csdn.net/wildin/article/details/5850252)<br />[ORACLE的impdp和expdp命令](http://www.cnblogs.com/wanghongyun/p/6307652.html)<br />[oracle expdp——红黑联盟](https://www.2cto.com/database/201304/203709.html)\n<a name=\"02babed4\"></a>\n### ****exp 和imp导入导出****\n<a name=\"f77e0e7c\"></a>\n#### ****导出命令 (exp)****\n****格式：****\n\n```\nexp [用户名]/[密码]@[主机ip]:[端口号]/[SID/service] file=d:\\zhpt.dmp full=n\n```\n\nfile是导出路径full=n,表示是否导出主机数据库上全部用户，n表示否，y表示是<br />exp abc/abc@183.233.179.165:1521/orcl file=d:\\zhpt.dmp full=y<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117435502-1497acdc-62e6-4f06-bcb2-86eb61c72693.png#align=left&display=inline&height=34&name=image.png&originHeight=34&originWidth=625&size=2889&status=done&width=625)<br />如果密码出特殊符号，使用`\"\"\"`包裹，如果其他地址有特殊符号，需要用`\\`转义，需要指定用户导出可以使用`owner`\n\n```powershell\nexp grz/\"\"\"g2011*)\"\"\"@19.129.180.19:1521/oracle file=gr20190410.dmp owner in \\(\\'gr\\',\\'jzs'\\) full=n\n```\n\n<a name=\"606fd7a7\"></a>\n#### ****导入数据库（imp）****\n\n```powershell\n# full 表示是否导出全部数据，一定要设置\n# log 输出日志文件# fromuser 从哪一个用户导入\n# touser 导入到哪个用户\n# ignore=y buffer=100000000; 修改缓冲区大小，有时sql语句过长，会造成缓冲区空间不足\nimp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y\n# 或者\nimp username/pwd@orcl file=E:\\20171108.dmp fromuser=username touser= username log=D:\\webBackend\\kingzheng\\住房保障系统\\fszfbz201711191635.log full=n\n# 或者\nimp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y ignore=y buffer=100000000;\n```\n \n<a name=\"69a49bc6\"></a>\n### ****expdp和impdp创建数据泵导入导出**** ****\n<a name=\"f0c6d9cb\"></a>\n#### ****需要先创建数据泵****\n数据泵，说白了就是指定一个目录给oracle，但是oracle不会帮你创建的，需要自己先实际地创建\n\n```sql\n#  查看所有数据泵地址\nselect * from dba_directories;# 创建数据泵，数据泵地址即为你的导出导入地址文件地址\ncreate directory myname as 'D:\\temp\\数据泵地址';# 授予权限 sshe这个用户可读可写\ngrant read,write on directory dpdata1 to sshe;\n\nsql>--可以使用以下语句查看目录操作权限\nsql>  SELECT privilege, directory_name, DIRECTORY_PATH FROM user_tab_privs t, all_directories d WHERE t.table_name(+) = d.directory_name ORDER BY 2, 1; \n```\n\n**注意：** 数据泵地址以及文件dmp需要自己创建\n<a name=\"837cb31c\"></a>\n#### ****导出数据（expdp）****\n这种数据泵效率非常高，但是使用这种数据泵导出的数据，****一般情况下只在本机导出****，需要用impdp导入\n\n```\nrem my_dir是数据泵名称\n\nrem exclude table:\"in(表名,列名2，……)\"不导出某些表\n\nexpdp test/test@orcl directory=my_dir dumpfile=my.dmp exclude=table:\\\"in \\(\\'DEPT\\',\\'EMP\\'\\)\\\" SCHEMAS=FSJSCX\n```\n\n<a name=\"Impdp\"></a>\n#### ****Impdp****\n跟expdp的语法格式差不多\n\n```\n impdp test/test@orcl DIRECTORY=my_dir  DUMPFILE=my.dmp SCHEMAS=test logfile=%logfile%\n```\n \n<a name=\"d303267a\"></a>\n##### ****问题：****\n<a name=\"29398c59\"></a>\n###### ****这些对象由 FSZJZ 导出, 而不是当前用户****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117805403-46bf4a8c-9f04-4d1a-9def-916cf1fd0a66.png#align=left&display=inline&height=134&name=image.png&originHeight=134&originWidth=517&size=10915&status=done&width=517)<br />导出是哪个用户，导入时用户也要相同，需要自己再创建一个用户<br /> \n<a name=\"2e846665\"></a>\n###### ****只有管理员用户，才可以导入****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117815821-b03a30e3-3157-4e16-8e5d-4cfb4766f698.png#align=left&display=inline&height=80&name=image.png&originHeight=80&originWidth=412&size=4702&status=done&width=412) \n<a name=\"5b692eb8\"></a>\n###### ****ora-28759 无法打开文件****\n以下这两句可能在不同的操作系统，支持不同，不太清楚，我服务器，两个都是sever2008，但是只有一个报这个错误，这个报错确实跟用户连接有关系，****最好是采用second****<br /> \n<a name=\"88e73bd4\"></a>\n### ****sqlplus 远程连接数据库****\n<a name=\"ce1ec2ce\"></a>\n#### ****远程连接****\n\n```\n命令：sqlplus 用户名/密码@ip地址[:端口]/service_name [as sysdba]\n\n示例：sqlplus sys/pwd@ip:1521/test as sysdba\n```\n\n<a name=\"0dfbe902\"></a>\n#### ****常用命令****\n\n```\nSQL>set colsep' ';　　　　 //-域输出分隔符\n\nSQL>set echo off;　　　　 //显示start启动的脚本中的每个sql命令，缺省为on\n\nSQL> set echo on              //设置运行命令是是否显示语句\n\nSQL> set feedback on;       //设置显示“已选择XX行”\n\nSQL>set feedback off;　    //回显本次sql命令处理的记录条数，缺省为on\n\nSQL>set heading off;　　 //输出域标题，缺省为on\n\nSQL>set pagesize 0;　　    //输出每页行数，缺省为24,为了避免分页，可设定为0。\n\nSQL>set linesize 80;　　   //输出一行字符个数，缺省为80\n\nSQL>set numwidth 12;　    //输出number类型域长度，缺省为10\n\nSQL>set termout off;　　   //显示脚本中的命令的执行结果，缺省为on\n\nSQL>set trimout on;　　　//去除标准输出每行的拖尾空格，缺省为off\n\nSQL>set trimspool on;　　//去除重定向（spool）输出每行的拖尾空格，缺省为off\n\nSQL>set serveroutput on; //设置允许显示输出类似dbms_output\n\nSQL> set timing on;          //设置显示“已用时间：XXXX”\n\nSQL> set autotrace on;    //设置允许对执行的sql进行分析\n\nSQL> set verify off;           //可以关闭和打开提示确认信息old 1和new 1的显示.\n```\n\n导出结果到文本：<br />spool<spool_flat_file><br />例如：spool d:\\Spool_flatquery.txt<br />这样，SQL*Plus将把所有的输出以及在屏幕上的命令等都指定给该文件。<br />执行查询输出。此时，系统并没有把结果保存到文件中，而是保存到缓冲区中。<br />查询结束后，关闭文件即可。命令格式为：spool off。\n<a name=\"df0cbcf7\"></a>\n### ****oracle之jdbc连接oracle****\n<a name=\"b5f7449a\"></a>\n#### ****使用sid方式：****\n\n```\njdbc:oracle:thin:@host:port:SID \n\nExample: jdbc:oracle:thin:@localhost:1521:orcl \n```\n\n<a name=\"e0db0567\"></a>\n#### ****使用服务名方式****\n使用服务名的方式，这种格式是Oracle 推荐的格式，因为对于集群来说，每个节点的SID 是不一样的，但是SERVICE_NAME 确可以包含所有节点。\n\n```\njdbc:oracle:thin:@//host:port/service_name\n\nExample:jdbc:oracle:thin:@//localhost:1521/orcl.city.com\n```\n\n<a name=\"859540a4\"></a>\n#### ****使用TNSName ****\n使用[TNSName ]()， 要实现这种连接方式首先要建立tnsnames.ora文件，然后通过System.setProperty指明这个文件路径。再通过上面URL中的@符号指定文件中的要使用到的资源。<br />这种格式我现在水平几乎没见过，对于我来说用得到这种的情况并不多吧。当然既然是通过配置文件来读取指定资源肯定也可以直接将资源拿出来放在URL中，直接放在URL中的URL模版是下面这样的（tnsnames.ora这个文件中放的就是@符号后面的那一段代码，当然用文件的好处就是可以配置多个，便于管理）：\n\n```\njdbc:oracle:thin:@TNSName \n\nExample: jdbc:oracle:thin:@TNS_ALIAS_NAME\n\njdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL= TCP)(HOST=hostA)(PORT= 1522))(ADDRESS=(PROTOCOL=TCP)(HOST=your host)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=your service_name)))\n```\n\n<a name=\"efbc27b9\"></a>\n## ****Oracle obj（plsql中解释为对象）****\n<a name=\"019aaceb\"></a>\n#### ****Function 函数****\n \n<a name=\"d283ab83\"></a>\n#### ****Procedure 存储过程****\n<a name=\"ea6f3b87-1\"></a>\n##### ****参考链接****\n[Oracle创建存储过程、创建函数、创建包——博客园@helong](https://www.cnblogs.com/helong/articles/2093807.html) <br />[ORACLE执行存储过程权限不足——CSDN@He之涅槃](https://blog.csdn.net/u010109335/article/details/60577055)<br /> \n<a name=\"e3127cc1\"></a>\n##### ****格式****\n\n```\ncreate or replace procedure procedure_name(Name in out type, Name in out type, ...) isbegin\n\n  end procedure_name;\n```\n\n<a name=\"1a63ac23\"></a>\n##### ****示例****\n\n```sql\n--自动创建表格，并update数据\n\n--dbms_output.put_line()需要先在command（命令行界面）“set serverout on ”打开输出\n\ncreate or replace procedure update_qylxid_of_null_for_rygx\n\nAuthid Current_User\n\nis\n\n  v_date varchar2(8);--定义日期变量\n\n  v_sql varchar2(2000);--定义动态sql\n\n  v_tablename varchar2(20);--定义动态表名\n\n  begin\n\n   select to_char(sysdate,'yyyymmdd') into v_date from dual;--取日期变量\n\n   v_tablename := 'T_'||v_date;--为动态表命名\n\n   v_sql := 'create table '||v_tablename||'as select*from t_qy';--为动态sql赋值\n\n   dbms_output.put_line(v_sql);--打印sql语句\n\n   execute immediate v_sql;--执行动态sql\n\n   v_sql:='update t_qy t set t.LXID=(select LXID from t_qy_qy lx where lx.bh=t.bh and lx.LX =t.dm) where  t.lxid is null';\n\n   dbms_output.put_line(v_sql);--打印sql语句\n\n   execute immediate v_sql;--执行动态sql\n\nend update_qylxid_of_null_for_rygx;\n```\n\n<a name=\"50d52dd9\"></a>\n##### ****常见问题****\n<a name=\"1fc98647\"></a>\n###### ****ORACLE执行存储过程权限不足****\n[ORACLE执行存储过程权限不足——CSDN@He之涅槃](https://blog.csdn.net/u010109335/article/details/60577055)\n\n```\n--需要增加Authid Current_User\n\n--AUTHID DEFINER （定义者权限）：指编译存储对象的所有者。也是默认权限模式。\n\n--AUTHID CURRENT_USER（调用者权限）：指拥有当前会话权限的模式，这可能和当前登录用户相同或不同(alter session set current_schema 可以改变调用者Schema)create or replace PROCEDURE 存储过程名称\n\nAuthid Current_User\n\nIS \n\nBEGIN\n\n \n\n……；\n\nEND;\n\n \n```\n\n<a name=\"618d4aaf\"></a>\n#### ****Database link 数据库链接****\n即在需要在两个不同的数据库中连接表或者查询数据时，可创建数据库链接\n<a name=\"481feccf\"></a>\n##### ****如何使用****\n\n```\n--user_tables 是DBLINK_test所链接的用户的表\n\nselect * from user_tables@DBLINK_test;\n\n--链接可以方便于多个数据库用户关联查询数据，非常方便,mytable 是你当前登录用户的表\n\nselect * from user_tables@DBLINK_test t,mytable t2 where t2.id=t.id;\n```\n\n<a name=\"ea6f3b87-2\"></a>\n##### ****参考链接****\n[oracle中的database link如何使用——百度经验@wangzhiqing999](#best-answer-746405041)\n<a name=\"345cd1b6\"></a>\n##### ****oracle sql创建****\n\n```\n\n-- Drop existing old  database link --DBLINK_test是database link的名称drop database link DBLINK_test;-- Create new database link -- other_db 为用户名 pwd为密码create database link DBLINK_test\n\n  connect to other_db IDENTIFIED BY  pwd\n\n  using '(DESCRIPTION =\n\n(ADDRESS_LIST =\n\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n\n)\n\n(CONNECT_DATA =\n\n(SERVICE_NAME = orcl)\n\n)\n\n)';--查询 database link select * from dba_db_links;\n```\n\n如果创建全局dblink，必须使用systm或sys用户，在database前加public\n\n```\ncreate  public  database link DBLINK_test\n\n  connect to other_db IDENTIFIED BY  pwd\n\n  using '(DESCRIPTION =\n\n(ADDRESS_LIST =\n\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n\n)\n\n(CONNECT_DATA =\n\n(SERVICE_NAME = orcl)\n\n)\n\n)';\n```\n\n<a name=\"5f005e3c\"></a>\n##### ****通过plsql创建****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118003862-eccf0b6e-7132-4106-aa23-e2b350ce0b5b.png#align=left&display=inline&height=408&name=image.png&originHeight=408&originWidth=327&size=22765&status=done&width=327) <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118072979-b08dec8d-fd6a-4d8f-99cc-50fbc1e4e75c.png#align=left&display=inline&height=376&name=image.png&originHeight=376&originWidth=971&size=30163&status=done&width=971) <br /> \n<a name=\"146704a5\"></a>\n## ****常用函数及sql实例****\n<a name=\"ea6f3b87-3\"></a>\n### ****参考链接****\n[Oracle中replace函数的使用](http://www.cnblogs.com/harvey888/p/5957656.html)<br />[Oracle round函数是什么意思?怎么运用?](https://zhidao.baidu.com/question/14756835.html)<br />[oracle的nvl](https://zhidao.baidu.com/question/552089573.html)<br />[Oracle 中 decode 函数用法](http://www.cnblogs.com/vinsonLu/p/3512526.html)<br />[[oracle] to_date() 与 to_char() 日期和字符串转换](http://www.cnblogs.com/gaojing/archive/2008/11/07/1328657.html)<br />[Oracle的Cast的用法](http://blog.csdn.net/ziwen00/article/details/8685858) <br />[Oracle 大小写转换函数——博客园@Twang](https://www.cnblogs.com/wangfuyou/p/6605166.html)\n<a name=\"ca48b68b\"></a>\n### ****常用函数****\n<a name=\"2a18f8a8\"></a>\n#### ****判断是否为数字****\n\n```\n# 注意只能判断纯数字，不带小数,判断带小数方式请查看下文“常用sql”创建函数\n\nSELECT nvl2(translate('123','/1234567890','/'),'CHAR','NUMBER')   \n\nFROM   dual ;\n```\n\n<a name=\"da5a6765\"></a>\n#### ****add_months()日期增加，以月为单位****\n\n```\nadd_months(sysdate,12)--增加一年\n\nadd_months(sysdate,-12)--减去一年\n\nsysdate+1 --加一天\n```\n\n<a name=\"c79a4a1b\"></a>\n#### ****to_date()****\n\n```\nto_date(\"要转换的字符串\",\"转换的格式\")\n\nto_date(t.access_date,'yyyy-mm-dd hh24:mi:ss')--2005-12-25 13:25:59\n\nTO_DATE('17-DEC-1980', 'DD-MON-YYYY','NLS_DATE_LANGUAGE=American')--日期语言\n```\n\n<a name=\"b0a57818\"></a>\n#### ****replace替换字符****\n\n```\nreplace(原字段，'原字段旧内容','原字段新内容')--替换字符串\n```\n\n<a name=\"fecd35a6\"></a>\n#### ****round四舍五入****\n\n```\n`round(number)``round(number, decimal_places )`\n\n \n\nnumber ---需要四舍五入的数字\n\ndecimal_places ---从哪里开始四舍五入，此参数是下标，预设为0\n\n \n\nselect round(123.456, 0) from dual;     --- 123 \n```\n\n<a name=\"2510b668\"></a>\n#### ****nvl如果为空返回新值****\n \n```\nnvl(字段名，'新的返回的值')\n\n如果提供的字段的值为空，则将返回这个新值，注意：只是返回了这个值，并不是update到表中\n\n \n\n nvl(name,'小明')---name为空，返回小明\n```\n\n<a name=\"d623ee97\"></a>\n#### ****decode逻辑判断简化****\n\n```\ndecode(条件,值1,返回值1,值2,返回值2,...值n,返回值n,缺省值)\n\n \n\n该函数的含义如下：IF 条件=值1 THEN\n\n　　　　RETURN(翻译值1)\n\nELSIF 条件=值2 THEN\n\n　　　　RETURN(翻译值2)\n\n　　　　......\n\nELSIF 条件=值n THEN\n\n　　　　RETURN(翻译值n)ELSE\n\n　　　　RETURN(缺省值)\n\nEND IF\n\ndecode(字段或字段的运算，值1，值2，值3）\n\n \n\n该函数的含义如下：\n\n 这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回值3\n\n 当然值1，值2，值3也可以是表达式，这个函数使得某些sql语句简单了许多\n 注意：值2和值3的数据类型必须一致\n```\n\n\n\n<a name=\"4e7db3ce\"></a>\n#### ****sys_guid()生成唯一32位字符串****\n\n```\nsys_guid()\n```\n\n<a name=\"774534e1\"></a>\n#### ****CAST(expr AS type_name) 数值类型转换****\n\n```\n--例\n\ncast(R.MONTH as int)--将月份转换为整型类型\n```\n\n<a name=\"5b106349\"></a>\n#### ****大小写转换****\n\n```\nselect UPPER('Test') as u from dual; --转大写\n\nselect LOWER('Test') as l from dual;--转小写\n```\n\n<a name=\"7db7c5f3\"></a>\n#### ****截取字符串****\n\n```\n--截取身份证出生日期\n\nto_date(substr('XXXXXXXXXXXXXXXXX',7,8),'YYYYMMDD')\n```\n\n<a name=\"425d8a49\"></a>\n#### ****删除左右字符、添加左右字符****\n\n```\nltrim(原字符,'需要删除的字符')--删除左边字符\n\nrtrim(原字符,'需要删除的字符')--删除右边字符\n\nLPAD(原字符,'需要添加的字符') --添加字符在左边\n\nRPAD(原字符,'需要添加的字符') --添加字符在右边--例\n\nltrim('abcdefg','abc')--删除左边abc，输出defg\n\nltrim('abqwert','abc')--删除左边ab，输出qwert\n\n \n\n \n\n \n\n \n\n \n```\n\n<a name=\"349ddcfc\"></a>\n### ****Sql实例****\n<a name=\"89f6884e\"></a>\n#### ****判断数字****（****创建函数****）****\n\n```\ncreate or replace function isNumber(p in varchar2)return number\n\nis\n\nresult number;begin\n\nresult := to_number(p);return 1;\n\nexceptionwhen VALUE_ERROR then return 0;end;\n```\n\n导出表结构\n\n```\nSELECT B.TABLE_NAME     AS \"表名\",\n\n       C.COMMENTS       AS \"表说明\",\n\n       B.COLUMN_ID      AS \"字段序号\",\n\n       B.COLUMN_NAME    AS \"字段名\",\n\n       B.DATA_TYPE      AS \"字段数据类型\",\n\n       B.DATA_LENGTH    AS \"数据长度\",\n\n       B.DATA_PRECISION AS \"整数位\",\n\n       B.DATA_SCALE     AS \"小数位\",\n\n       A.COMMENTS       AS \"字段说明\"\n\n  FROM ALL_COL_COMMENTS A, ALL_TAB_COLUMNS B, ALL_TAB_COMMENTS C\n\nWHERE A.TABLE_NAME IN (SELECT U.TABLE_NAME FROM USER_ALL_TABLES U)\n\n   AND A.OWNER = B.OWNER\n\n   AND A.TABLE_NAME = B.TABLE_NAME\n\n   AND A.COLUMN_NAME = B.COLUMN_NAME\n\n   AND C.TABLE_NAME = A.TABLE_NAME\n\n   AND C.OWNER = A.OWNER\n\n   AND A.OWNER = 'PYE'ORDER BY A.TABLE_NAME, B.COLUMN_ID;\n```\n\n<a name=\"abcdb7f1\"></a>\n#### ****修改不符合的时间，修改年份和月份**\n-\n\n```\n-更新有/的时间、有两个/的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))),substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime)),(length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/',''))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/','')))=2\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/','')))=2\n\n--更新有/的时间、有两个/的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'/','')))=1\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'/','')))=1\n\n \n\n--更新有/的时间、有两个-的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'-','')))=2\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'-','')))=2\n\n--更新有-的时间、有两个-的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'-','')))=1\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'-','')))=1\n\n \n\n \n```\n\n<a name=\"37a3a350\"></a>\n#### 查看所有表空间及容量\n\n```\nSELECT DBF.TABLESPACE_NAME,\n       DBF.TOTALSPACE \"总量(M)\",\n       DBF.TOTALBLOCKS AS 总块数,\n       DBF.TOTALSPACE-DFS.FREESPACE \"使用量(M)\",\n       DBF.TOTALBLOCKS-DFS.FREEBLOCKS AS 使用块数,      \n       DFS.FREESPACE \"剩余总量(M)\",\n       DFS.FREEBLOCKS \"剩余块数\",\n       (DFS.FREESPACE / DBF.TOTALSPACE) * 100 \"空闲比例\"\n  FROM (SELECT T.TABLESPACE_NAME,\n               SUM(T.BYTES) / 1024 / 1024 TOTALSPACE,\n               SUM(T.BLOCKS) TOTALBLOCKS\n          FROM DBA_DATA_FILES T\n         GROUP BY T.TABLESPACE_NAME) DBF,\n       (SELECT TT.TABLESPACE_NAME,\n               SUM(TT.BYTES) / 1024 / 1024 FREESPACE,\n               SUM(TT.BLOCKS) FREEBLOCKS\n          FROM DBA_FREE_SPACE TT\n         GROUP BY TT.TABLESPACE_NAME) DFS\n WHERE TRIM(DBF.TABLESPACE_NAME) = TRIM(DFS.TABLESPACE_NAME);\n```\n\n<a name=\"c60f6138\"></a>\n#### oracle表空间不足时处理\n表空间数据文件最大是32G，也就是说扩容最大为32G \n<a name=\"e7a0542d\"></a>\n##### 参考链接： \n[oracle 11g 导入数据库，表空间超过32G的解决办法——CSDN@冷静cc](https://blog.csdn.net/love_java_cc/article/details/52857363)  <br />[oracle 表空间不足解决办法大全——百度经验@javababy5](https://jingyan.baidu.com/article/48b37f8d6ca1eb1a646488dc.html)\n\n<a name=\"b7cc6308\"></a>\n##### 第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\n\n```\n--修改数据文件内存50m为当前数据文件的内存大小\nalter database datafile 'D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF' resize 50m;\n--增加数据文件自动扩容功能,每次扩容为50m，最大不会超过32G\nalterdatabase datafile 'D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF' autoextend onnext 50m maxsize 32767m; \n```\n<a name=\"e3470cfa\"></a>\n##### 第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\n\n```\n--USERS是你的表空间名，H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf可以改为你的任意地址，最好放在一起方便，\n--每次扩容50m，最大32G\nalter tablespace USERS  \nadd datafile 'H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf' size 50m \nautoextend on next 50m maxsize 32767m;\n```\n\n\n<a name=\"5dc99f6e\"></a>\n## ****问题****\n<a name=\"122f6443\"></a>\n### ****oracle之违反唯一约束条件****\n出现这个原因，除了自己手动新增ID的情况外，还有就是引用自己创建的sequance，导入新表数据后，没有将新的sequance导入进来，可以将新sequance导入进来，也可以自动手动修改<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118277133-fbbfbc99-569b-4a1e-ad5a-cf655ef6f786.png#align=left&display=inline&height=199&name=image.png&originHeight=199&originWidth=822&size=21888&status=done&width=822) <br /> \n<a name=\"e2d3e6c0\"></a>\n### ****修改字符集****\n<a name=\"ea6f3b87-4\"></a>\n#### ****参考链接****\n[如何改oracle AL16UTF16为AL32UTF8——百度知道](https://link.jianshu.com/?t=https://zhidao.baidu.com/question/134444813.html)<br />[建库时AL16UTF16字符集怎么设置？——出处: ITPUB论坛－中国最专业的IT技术社区](https://link.jianshu.com/?t=http://www.itpub.net/thread-505857-1-1.html%23pid3728655)<br />****操作：****\n\n```\nMicrosoft Windows [版本 6.1.7601]\n\n版权所有 (c) 2009 Microsoft Corporation。保留所有权利。\n\n \n\nC:\\Users\\Administrator>sqlplus / as sysdba\n\n \n\nSQL*Plus: Release 11.2.0.1.0 Production on 星期四 1月 11 12:00:49 2018\n\n \n\nCopyright (c) 1982, 2010, Oracle.  All rights reserved.\n\n \n\n \n\n连接到:\n\nOracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production\n\nWith the Partitioning, OLAP, Data Mining and Real Application Testing options\n\n \n\nSQL> shutdown immediate\n\n数据库已经关闭。\n\n已经卸载数据库。\n\nORACLE 例程已经关闭。\n\nSQL> startup mount\n\nORACLE 例程已经启动。\n\n \n\nTotal System Global Area 3290345472 bytes\n\nFixed Size                  2180224 bytes\n\nVariable Size            2164263808 bytes\n\nDatabase Buffers         1107296256 bytes\n\nRedo Buffers               16605184 bytes\n\n数据库装载完毕。\n\nSQL> ALTER SYSTEM ENABLE RESTRICTED SESSION;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER SYSTEM SET AQ_TM_PROCESSES=0;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER DATABASE OPEN;\n\n \n\n数据库已更改。\n\n \n\nSQL> ALTER DATABASE CHARACTER SET AL32UTF8;\n\nALTER DATABASE CHARACTER SET AL32UTF8\n\n*\n\n第 1 行出现错误:\n\nORA-12712: 新字符集必须为旧字符集的超集\n\n \n\n \n\nSQL> ALTER DATABASE CHARACTER SET AL16UTF16;\n\nALTER DATABASE CHARACTER SET AL16UTF16\n\n*\n\n第 1 行出现错误:\n\nORA-12712: 新字符集必须为旧字符集的超集# ALTER DATABASE national CHARACTER SET AL16UTF16;\n\n \n\nSQL> ALTER DATABASE character set INTERNAL_USE AL32UTF8;\n\n \n\n数据库已更改。\n\n \n\nSQL> SHUTDOWN IMMEDIATE;\n\n数据库已经关闭。\n\n已经卸载数据库。\n\nORACLE 例程已经关闭。\n\nSQL> STARTUP\n\nORACLE 例程已经启动。\n\n \n\nTotal System Global Area 3290345472 bytes\n\nFixed Size                  2180224 bytes\n\nVariable Size            2164263808 bytes\n\nDatabase Buffers         1107296256 bytes\n\nRedo Buffers               16605184 bytes\n\n数据库装载完毕。\n\n数据库已经打开。\n\nSQL>\n```\n\nALTER DATABASE character set INTERNAL_USE AL32UTF8;<br />INTERNAL_USE有点像是强制修改，其他用户角色可能会报错\n<a name=\"bf52b411\"></a>\n#### ****其他问题****\n<a name=\"3e2e31b2\"></a>\n##### ****AL16UTF16不能作为character set****\nAL16UTF16 不能用做数据库的character set，只能用做national character set 。<br />character set必须是single byte 7-bit ASCII或是单字节EBCDIC的子集，因此fixed width的多字节字符集(AL16UTF16)就不能做为character set。<br /> <br />你可以用如下这样用的：\n\n```\nCHARACTER SET US7ASCII NATIONAL CHARACTER SET AL16UTF16\n\n或是\n\nCHARACTER SET zhs16cgb231280  NATIONAL CHARACTER SET AL16UTF16\n\n \n\n \n\n \n\n \n```\n\n<a name=\"46b308ed\"></a>\n### ****如何修改服务名service_name****\n<a name=\"bd1bf7e7\"></a>\n##### ****转载链接****\n[如何修改 service_name](https://link.jianshu.com/?t=https://www.2cto.com/kf/201311/259856.html)\n<a name=\"d48898d5\"></a>\n##### ****例：****\n<a name=\"64162c1b\"></a>\n###### ****service_name原有环境：****\n\n```\nsid： mynewdb\n\nglobal_name：mynewdb\n\nservice_names： MYNEWDB\n\ndb_domain  ：\n\ndb_name：mynewdb\n```\n\n<a name=\"f0740534\"></a>\n###### ****需要修改如下：****\n\n```\nglobal_name：mynewdb\n\nservice_names： test\n\ndb_domain  ：\n\ndb_name：mynewdb\n```\n\n<a name=\"568a025c\"></a>\n##### ****方法：****\n服务器端：<br />alter system set service_names='test';<br />这里采用静态注册，同时还要修改下 listener.ora\n\n```\nSID_LIST_LISTENER =\n\n  (SID_LIST =\n\n    (SID_DESC =\n\n      (SID_NAME = PLSExtProc)\n\n      (ORACLE_HOME =/u01/app/oracle/product/11.2.0/dbhome_1)\n\n      (PROGRAM = extproc)\n\n    )\n\n        (SID_DESC=\n\n        (GLOBAL_DBNAME = mynewdb)\n\n        (ORALCE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)\n\n        (SID_NAME = mynewdb)\n\n        )\n\n        (SID_DESC=\n\n        (GLOBAL_DBNAME = test)  -------这个是需要添加\n\n        (ORALCE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)\n\n        (SID_NAME = mynewdb)    ------这个还是原来的实例名\n\n        )\n\n  )\n```\n\ncmd下执行命令lsnrctl reload<br />查看监听状态lsnrctl status<br />L\n\n```\nSNRCTL>\n\nConnecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=10.80.11.202)(PORT=1521)))\n\nSTATUS of the LISTENER\n\n------------------------\n\nAlias                     LISTENER\n\nVersion                   TNSLSNR for [Linux](https://www.2cto.com/os/linux/): Version 11.2.0.1.0 - Production\n\nStart Date                21-NOV-2013 00:09:35\n\nUptime                    0 days 20 hr. 30 min. 55 sec\n\nTrace Level               off\n\nSecurity                  ON: Local OS Authentication\n\nSNMP                      OFF\n\nListener Parameter File   /u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora\n\nListener Log File         /u01/app/oracle/diag/tnslsnr/oracle11g/listener/alert/log.xml\n\nListening Endpoints Summary...\n\n  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=10.80.11.202)(PORT=1521)))\n\nServices Summary...\n\nService \"PLSExtProc\" has 1 instance(s).\n\n  Instance \"PLSExtProc\", status UNKNOWN, has 1 handler(s) for this service...\n\nService \"mynewdb\" has 1 instance(s).\n\n  Instance \"mynewdb\", status UNKNOWN, has 1 handler(s) for this service...\n\nService \"test\" has 1 instance(s).\n\n  Instance \"mynewdb\", status UNKNOWN, has 1 handler(s) for this service...\n\nThe command completed successfully\n```\n\n可以看到新的 Service \"test\" 已经可以使用了<br />客户端配置：<br />net manager 配置 服务名为 test ，ip为数据库服务器主机ip，相应端口。<br />测试连接：\n\n```\nSQL>  conn sys/oracle@test as sysdba\n\n已连接。\n\nSQL>\n```\n\n当然不使用静态注册，动态注册也可以<br /> \n<a name=\"3158f60d\"></a>\n### ****警告日志文件****\n不知道日志文件在哪的，可以使用这个命令<br />select value from v$diag_info where name='Diag Trace';<br />以下是我的输出地址\n\n```\nSQL> select value from v$diag_info where name='Diag Trace';\n\n \n\nVALUE\n\n--------------------------------------------------------------------------------\n\nD:\\FLYINGCLOUD\\diag\\rdbms\\odb\\odb\\trace\n\n \n\n \n```\n\n<a name=\"9e2e81b7\"></a>\n## ****开发工具配置及问题****\n<a name=\"Plsql\"></a>\n### ****Plsql****\n<a name=\"d672874c\"></a>\n#### ****plsql设置可显示的查询记录条数****\ntools->prifereces->window types->sql window->records per page<br />查询所有记录<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118425257-e4d6330a-e5f6-4e7e-932c-fb25cf372fd2.png#align=left&display=inline&height=591&name=image.png&originHeight=591&originWidth=564&size=92527&status=done&width=564) \n<a name=\"5c094ab1\"></a>\n#### ****plsql如何查询sql执行计划****\n[怎么使用plsql查看执行计划](https://link.jianshu.com/?t=https://jingyan.baidu.com/article/ab69b270bffc2e2ca7189fee.html)<br />执行计划可以用计划sql执行的性能<br />选中需要执行的sql语句，然后按F5，或者直接点击\"执行计划\"\n<a name=\"e33957e7\"></a>\n#### ****PLSQL工具如何远程连接数据库****\n<a name=\"ea6f3b87-5\"></a>\n##### ****参考链接****\n[如何配置pl/sql 连接远程oracle服务器——百度知道](https://link.jianshu.com/?t=https://zhidao.baidu.com/question/333852172.html)\n<a name=\"d7ecf9b4\"></a>\n##### ****方法1：****\n找到oracle的安装目录。如：C:\\oracle\\product\\10.2.0\\db_1\\network\\ADMIN<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118449158-f157887f-799b-4b90-a947-2218b90f25ac.png#align=left&display=inline&height=30&name=image.png&originHeight=30&originWidth=311&size=2681&status=done&width=311) <br />添加如下内容<br />其中中文部分是需要修改的部分，除第一个“本地实例名”外，其他需要跟远程数据库管理员咨询，本地实例名就是方便自己识别数据库的一个名字，可以自定义。\n\n```\n本地实例名 =\n\n  (DESCRIPTION =\n\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 远程数据库IP地址)(PORT = 远程服务器端口号))\n\n    (CONNECT_DATA =\n\n      (SERVER = DEDICATED)\n\n      (SERVICE_NAME = 远程数据库服务名)\n\n    )\n\n  )\n```\n\n然后打开pl/sql就能看到自己创建的链接，如图：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118496776-446fbbd8-7f17-4ec9-be0b-219d248b2910.png#align=left&display=inline&height=204&name=image.png&originHeight=204&originWidth=392&size=17502&status=done&width=392) <br />方法2：<br /> <br /> \n<a name=\"5d64018c\"></a>\n##### ****方法2：****\n<a name=\"ef35ed63\"></a>\n###### ****格式：****\nip:端口/sid\n<a name=\"614fc656\"></a>\n###### ****示例：****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118525263-c7c6ad21-d3fb-4563-9154-f8bc23c3f375.png#align=left&display=inline&height=209&name=image.png&originHeight=209&originWidth=393&size=10049&status=done&width=393) \n\n","source":"_posts/yuque/oracle之技术经验.md","raw":"\n---\n\ntitle: oracle之技术经验\n\nurlname: yd4suv\n\ndate: 2019-02-14 12:05:59 +0800\n\ntags: []\n\n---\n<a name=\"f66bd8f4\"></a>\n# ****O****ra****cle****经验****\n \n<a name=\"e9a9187c\"></a>\n## ****申明****\n本文大部分资料来自《深入理解Oracle 12c数据库管理》，但是也有自己的个人观点，大家也去看这本书\n<a name=\"e05dce83\"></a>\n## ****简介****\n\tOracle数据库已经是当今世界技术前沿了，因为它优点突出 <br />有以下优点：<br />(1) 拥有其他数据库系统所没有的表空间概念；<br />(2) 拥有真正的等级锁功能<br />(3) 拥有多版本数据功能，读写操作不会相互等待（我觉得是非常的好特性）<br />(4) 拥有更快的处理速度和更高的安全性；<br />(5) 拥有丰富的数据字典，易于DBA判断数据库的各种情况；<br />(6) 拥有非常简单明了的备份与恢复原理<br />(7) Oracle数据库可以启动到多个阶段，DBA可以在不同的情况下，通过启动到特定的阶段解决一些特殊问题<br />(8) Oracle可以跨越多种软、硬平台。\n\n<a name=\"362eced1\"></a>\n## ****Oracle****安装和创建****(****由于本文作者觉得linux太花费时间，故只有这部分讲解到linux****)****\nOracle安装一般有两种，一种是图形界面的安装，另一种是无界面安装。建议是无界面，因为图形界面在宽带不足情况下，可能出现加载远程界面慢的问题，而且不能自动化。无界面可以依靠应答文件来安装。\n<a name=\"712f5efa\"></a>\n### ****了解OFA标准****\nOFA标准是指oracle的目录结构和文件名，然而大部分DBA（database manager数据库管理员简称DBA）都在一定程度上自定义了，以适应于不同的环境。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117219355-d3c0e3a0-41c9-45c4-ae0c-a89fe13bccb3.png#align=left&display=inline&height=507&name=image.png&originHeight=507&originWidth=835&size=295404&status=done&width=835)<br /><!--more-->\n<a name=\"119c5730\"></a>\n### ****库的高速缓存和数据字典的高速缓存****\n \n<a name=\"a55e5de5\"></a>\n#### ****库的高速缓存****\n是用来存放你实际表的数据块的，如表TAB_A里实际存放的若干条数据记录，一般都存放在用户的表空间里。<br /> <br /> \n<a name=\"773d69a4\"></a>\n#### ****数据字典的高速缓存****\n用来存放表的定义，如表TAB_A，有几个字段，每个字段的类型、长度，表空间等，这类信息在你建表后会存放在系统表里，都是在SYSTEM表空间下，ORACLE运行时，这些信息被装入数据字典高速缓存里。<br /> \n<a name=\"7f04d897\"></a>\n#### ****数据字典的意思是****\n简单的说就和我们小学用的词典的目录一样  要查询个表的数据 首先要确认这个词典（数据库）中有这个词语（表）  吧<br /> \n<a name=\"2655d132\"></a>\n### ****安装oracle****\n \n<a name=\"061f72da\"></a>\n#### ****创建对应的权限的O****S****用户组****\n我们需要linux上创建一些OS用户组，安装完oracle之后就可以为linuxOS用户组分配的相应的数据库操作权限，正常来说OS用户组（注：用户和用户组是不一样的）的创建是属于系统管理员（SA）的工作，但是大部分情况没有SA。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117248391-cbfc23d8-2f3c-4bb5-b862-65300cfb607d.png#align=left&display=inline&height=488&name=image.png&originHeight=488&originWidth=822&size=254798&status=done&width=822)<br />不必根据一字不差照搬组名，可以根据不一样环境来配置。<br /> \n<a name=\"657ad920\"></a>\n##### ****运行linux命令，创建组****\n我们只按照简单的功能来分组就好了，oinstall负责安装和卸载权限，dba具有完全操作权限，oper只具有数据库操作权限（包含一些删除表，创建表，修改等待权限 ）<br />groupadd oinstall<br />groupadd dba<br />groupadd oper<br /> \n<a name=\"ccd2979a\"></a>\n###### ****查看创建的OS组****\ncat /etc/group<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117306714-eef5438b-f88e-43d4-9ecb-0d43990fe65f.png#align=left&display=inline&height=386&name=image.png&originHeight=386&originWidth=281&size=12073&status=done&width=281)<br />1000、1001、1002是我们组的ID\n<a name=\"87c9fadb\"></a>\n##### ****创建用户并分配组****\nuseradd -u 500 -g oinstall -G dba , oper oracle<br />将组ID设置500(其他同事可能需要人执行相同的组ID来执行所有安装)<br />创建主属组为oinstall，创建副属组为dba,oper<br />-g 和-G，分别是分配主属组和附属组的意思。\n<a name=\"d82e410e\"></a>\n###### ****查看用户信息****\ncat /etc/passwd<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117322832-e84ea737-28ec-450b-9087-7f6f9c5272ea.png#align=left&display=inline&height=385&name=image.png&originHeight=385&originWidth=827&size=30460&status=done&width=827)<br /> \n<a name=\"e7d20343\"></a>\n###### ****删除修改用户，或者用户组****\n修改删除用户组：groupmod、groupdel<br />修改删除用户：usermod、userdel<br />以上命令需要使用系统管理员登录\n<a name=\"11c5905d\"></a>\n#### ****查看linux环境信息****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117345109-376aba41-14b7-46f6-9e38-8141c9886cfb.png#align=left&display=inline&height=401&name=image.png&originHeight=401&originWidth=860&size=45732&status=done&width=860)以下为我本人系统的信息<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117364504-14c00655-46d0-4c60-a248-84661ea1cb04.png#align=left&display=inline&height=452&name=image.png&originHeight=452&originWidth=666&size=29951&status=done&width=666)<br />grep MemTotal  /proc/meminfo<br />free –t<br />df –h /tmp<br />df –h<br />cat /proc/version<br />uname –r<br /> <br />rpm –q <package name> 查询是否已经安装必须的软件包\n<a name=\"fdd1ae5b\"></a>\n## ****管理数据库****\n \n<a name=\"dfc119cb\"></a>\n### ****S****ysdba数据库账号****\n这个账号可拥有除了关闭数据库以外的所有操作权限<br />as sysdba作为系统管理员登录\n<a name=\"6aee7bf5\"></a>\n### ****第一次操作数据库****\nstartup onmount 启动后台进程并分配内存，此命令执行后，sql*plus会读取ORACLE_HOME/dbs中的初始化文件，会使后台进程和内存区域初始化，这样你就拥有了oracle的实例，但是还没有数据库<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117384566-27b7d3ce-0863-4a79-ac04-4ec4bfc56b98.png#align=left&display=inline&height=228&name=image.png&originHeight=228&originWidth=603&size=11983&status=done&width=603)<br />oracle实例是指后台进程和内存区域，oracle数据库是指磁盘上的物理文件（数据文件、控制文件、联机重做日志文件）\n<a name=\"187ec332\"></a>\n### ****表空间****\n<a name=\"fcf86c6f\"></a>\n#### ****查询TEMP临时表空间****\nselect*from database_properties where property_name='DEFAULT_TEMP_TABLESPACE';<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117405819-4e8691dc-3239-445c-b58e-e77a25fa45f4.png#align=left&display=inline&height=202&name=image.png&originHeight=202&originWidth=620&size=7894&status=done&width=620)\n<a name=\"5d4d5693\"></a>\n#### ****USER表空间****\nselect*from database_properties<br />where roperty_name='DEFAULT_PERMANENT_TABLESPACE';<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117417926-a850da9d-5066-484f-9f27-e1aedcadea79.png#align=left&display=inline&height=172&name=image.png&originHeight=172&originWidth=632&size=7080&status=done&width=632)\n<a name=\"00caab79\"></a>\n### ****连接标识****\n<a name=\"8d258c38\"></a>\n#### ****Oracle 的OCI Driver 和 Thin Driver的区别****\n有以下两种标识方式：<br /> <br />jdbc:oracle:oci8:@shdb<br /> <br />1）从使用上来说，oci必须在客户机上安装oracle客户端或才能连接，而thin就不需要，因此从使用上来讲thin还是更加方便，这也是thin比较常见的原因。 <br />2）原理上来看，thin是纯java实现tcp/ip的c/s通讯；而oci方式,客户端通过native java method调用c library访问服务端，而这个c library就是oci(oracle called interface)，因此这个oci总是需要随着oracle客户端安装（从oracle10.1.0开始，单独提供OCI Instant Client，不用再完整的安装client） <br />3）它们分别是不同的驱动类别，oci是二类驱动， thin是四类驱动，但它们在功能上并无差异。<br /> \n<a name=\"3a0f1856\"></a>\n### ****查询实例名（SID）****\nsqlplus / as sysdba<br />show parameter instance_name<br /> \n<a name=\"f858894c\"></a>\n## ****配置用户和数据库对象****\n<a name=\"f8876e5d\"></a>\n## ****创建和维护大型数据库对象、分区和索引****\n<a name=\"d2adec7f\"></a>\n## ****备份和恢复****\n<a name=\"01a62dbc\"></a>\n## ****数据库自动化及常见问题解决方法****\n<a name=\"9d2f273a\"></a>\n## ****管理窗口和可插入数据库****\n<a name=\"d579eb7d\"></a>\n## ****Oracle 导入导出及连接****\n<a name=\"ea6f3b87\"></a>\n### ****参考链接****\n[Oracle数据库导入导出命令总结](http://blog.itpub.net/21614165/viewspace-766937/)<br />[sqlplus连接远程数据库](http://blog.csdn.net/wildin/article/details/5850252)<br />[ORACLE的impdp和expdp命令](http://www.cnblogs.com/wanghongyun/p/6307652.html)<br />[oracle expdp——红黑联盟](https://www.2cto.com/database/201304/203709.html)\n<a name=\"02babed4\"></a>\n### ****exp 和imp导入导出****\n<a name=\"f77e0e7c\"></a>\n#### ****导出命令 (exp)****\n****格式：****\n\n```\nexp [用户名]/[密码]@[主机ip]:[端口号]/[SID/service] file=d:\\zhpt.dmp full=n\n```\n\nfile是导出路径full=n,表示是否导出主机数据库上全部用户，n表示否，y表示是<br />exp abc/abc@183.233.179.165:1521/orcl file=d:\\zhpt.dmp full=y<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117435502-1497acdc-62e6-4f06-bcb2-86eb61c72693.png#align=left&display=inline&height=34&name=image.png&originHeight=34&originWidth=625&size=2889&status=done&width=625)<br />如果密码出特殊符号，使用`\"\"\"`包裹，如果其他地址有特殊符号，需要用`\\`转义，需要指定用户导出可以使用`owner`\n\n```powershell\nexp grz/\"\"\"g2011*)\"\"\"@19.129.180.19:1521/oracle file=gr20190410.dmp owner in \\(\\'gr\\',\\'jzs'\\) full=n\n```\n\n<a name=\"606fd7a7\"></a>\n#### ****导入数据库（imp）****\n\n```powershell\n# full 表示是否导出全部数据，一定要设置\n# log 输出日志文件# fromuser 从哪一个用户导入\n# touser 导入到哪个用户\n# ignore=y buffer=100000000; 修改缓冲区大小，有时sql语句过长，会造成缓冲区空间不足\nimp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y\n# 或者\nimp username/pwd@orcl file=E:\\20171108.dmp fromuser=username touser= username log=D:\\webBackend\\kingzheng\\住房保障系统\\fszfbz201711191635.log full=n\n# 或者\nimp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y ignore=y buffer=100000000;\n```\n \n<a name=\"69a49bc6\"></a>\n### ****expdp和impdp创建数据泵导入导出**** ****\n<a name=\"f0c6d9cb\"></a>\n#### ****需要先创建数据泵****\n数据泵，说白了就是指定一个目录给oracle，但是oracle不会帮你创建的，需要自己先实际地创建\n\n```sql\n#  查看所有数据泵地址\nselect * from dba_directories;# 创建数据泵，数据泵地址即为你的导出导入地址文件地址\ncreate directory myname as 'D:\\temp\\数据泵地址';# 授予权限 sshe这个用户可读可写\ngrant read,write on directory dpdata1 to sshe;\n\nsql>--可以使用以下语句查看目录操作权限\nsql>  SELECT privilege, directory_name, DIRECTORY_PATH FROM user_tab_privs t, all_directories d WHERE t.table_name(+) = d.directory_name ORDER BY 2, 1; \n```\n\n**注意：** 数据泵地址以及文件dmp需要自己创建\n<a name=\"837cb31c\"></a>\n#### ****导出数据（expdp）****\n这种数据泵效率非常高，但是使用这种数据泵导出的数据，****一般情况下只在本机导出****，需要用impdp导入\n\n```\nrem my_dir是数据泵名称\n\nrem exclude table:\"in(表名,列名2，……)\"不导出某些表\n\nexpdp test/test@orcl directory=my_dir dumpfile=my.dmp exclude=table:\\\"in \\(\\'DEPT\\',\\'EMP\\'\\)\\\" SCHEMAS=FSJSCX\n```\n\n<a name=\"Impdp\"></a>\n#### ****Impdp****\n跟expdp的语法格式差不多\n\n```\n impdp test/test@orcl DIRECTORY=my_dir  DUMPFILE=my.dmp SCHEMAS=test logfile=%logfile%\n```\n \n<a name=\"d303267a\"></a>\n##### ****问题：****\n<a name=\"29398c59\"></a>\n###### ****这些对象由 FSZJZ 导出, 而不是当前用户****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117805403-46bf4a8c-9f04-4d1a-9def-916cf1fd0a66.png#align=left&display=inline&height=134&name=image.png&originHeight=134&originWidth=517&size=10915&status=done&width=517)<br />导出是哪个用户，导入时用户也要相同，需要自己再创建一个用户<br /> \n<a name=\"2e846665\"></a>\n###### ****只有管理员用户，才可以导入****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550117815821-b03a30e3-3157-4e16-8e5d-4cfb4766f698.png#align=left&display=inline&height=80&name=image.png&originHeight=80&originWidth=412&size=4702&status=done&width=412) \n<a name=\"5b692eb8\"></a>\n###### ****ora-28759 无法打开文件****\n以下这两句可能在不同的操作系统，支持不同，不太清楚，我服务器，两个都是sever2008，但是只有一个报这个错误，这个报错确实跟用户连接有关系，****最好是采用second****<br /> \n<a name=\"88e73bd4\"></a>\n### ****sqlplus 远程连接数据库****\n<a name=\"ce1ec2ce\"></a>\n#### ****远程连接****\n\n```\n命令：sqlplus 用户名/密码@ip地址[:端口]/service_name [as sysdba]\n\n示例：sqlplus sys/pwd@ip:1521/test as sysdba\n```\n\n<a name=\"0dfbe902\"></a>\n#### ****常用命令****\n\n```\nSQL>set colsep' ';　　　　 //-域输出分隔符\n\nSQL>set echo off;　　　　 //显示start启动的脚本中的每个sql命令，缺省为on\n\nSQL> set echo on              //设置运行命令是是否显示语句\n\nSQL> set feedback on;       //设置显示“已选择XX行”\n\nSQL>set feedback off;　    //回显本次sql命令处理的记录条数，缺省为on\n\nSQL>set heading off;　　 //输出域标题，缺省为on\n\nSQL>set pagesize 0;　　    //输出每页行数，缺省为24,为了避免分页，可设定为0。\n\nSQL>set linesize 80;　　   //输出一行字符个数，缺省为80\n\nSQL>set numwidth 12;　    //输出number类型域长度，缺省为10\n\nSQL>set termout off;　　   //显示脚本中的命令的执行结果，缺省为on\n\nSQL>set trimout on;　　　//去除标准输出每行的拖尾空格，缺省为off\n\nSQL>set trimspool on;　　//去除重定向（spool）输出每行的拖尾空格，缺省为off\n\nSQL>set serveroutput on; //设置允许显示输出类似dbms_output\n\nSQL> set timing on;          //设置显示“已用时间：XXXX”\n\nSQL> set autotrace on;    //设置允许对执行的sql进行分析\n\nSQL> set verify off;           //可以关闭和打开提示确认信息old 1和new 1的显示.\n```\n\n导出结果到文本：<br />spool<spool_flat_file><br />例如：spool d:\\Spool_flatquery.txt<br />这样，SQL*Plus将把所有的输出以及在屏幕上的命令等都指定给该文件。<br />执行查询输出。此时，系统并没有把结果保存到文件中，而是保存到缓冲区中。<br />查询结束后，关闭文件即可。命令格式为：spool off。\n<a name=\"df0cbcf7\"></a>\n### ****oracle之jdbc连接oracle****\n<a name=\"b5f7449a\"></a>\n#### ****使用sid方式：****\n\n```\njdbc:oracle:thin:@host:port:SID \n\nExample: jdbc:oracle:thin:@localhost:1521:orcl \n```\n\n<a name=\"e0db0567\"></a>\n#### ****使用服务名方式****\n使用服务名的方式，这种格式是Oracle 推荐的格式，因为对于集群来说，每个节点的SID 是不一样的，但是SERVICE_NAME 确可以包含所有节点。\n\n```\njdbc:oracle:thin:@//host:port/service_name\n\nExample:jdbc:oracle:thin:@//localhost:1521/orcl.city.com\n```\n\n<a name=\"859540a4\"></a>\n#### ****使用TNSName ****\n使用[TNSName ]()， 要实现这种连接方式首先要建立tnsnames.ora文件，然后通过System.setProperty指明这个文件路径。再通过上面URL中的@符号指定文件中的要使用到的资源。<br />这种格式我现在水平几乎没见过，对于我来说用得到这种的情况并不多吧。当然既然是通过配置文件来读取指定资源肯定也可以直接将资源拿出来放在URL中，直接放在URL中的URL模版是下面这样的（tnsnames.ora这个文件中放的就是@符号后面的那一段代码，当然用文件的好处就是可以配置多个，便于管理）：\n\n```\njdbc:oracle:thin:@TNSName \n\nExample: jdbc:oracle:thin:@TNS_ALIAS_NAME\n\njdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL= TCP)(HOST=hostA)(PORT= 1522))(ADDRESS=(PROTOCOL=TCP)(HOST=your host)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=your service_name)))\n```\n\n<a name=\"efbc27b9\"></a>\n## ****Oracle obj（plsql中解释为对象）****\n<a name=\"019aaceb\"></a>\n#### ****Function 函数****\n \n<a name=\"d283ab83\"></a>\n#### ****Procedure 存储过程****\n<a name=\"ea6f3b87-1\"></a>\n##### ****参考链接****\n[Oracle创建存储过程、创建函数、创建包——博客园@helong](https://www.cnblogs.com/helong/articles/2093807.html) <br />[ORACLE执行存储过程权限不足——CSDN@He之涅槃](https://blog.csdn.net/u010109335/article/details/60577055)<br /> \n<a name=\"e3127cc1\"></a>\n##### ****格式****\n\n```\ncreate or replace procedure procedure_name(Name in out type, Name in out type, ...) isbegin\n\n  end procedure_name;\n```\n\n<a name=\"1a63ac23\"></a>\n##### ****示例****\n\n```sql\n--自动创建表格，并update数据\n\n--dbms_output.put_line()需要先在command（命令行界面）“set serverout on ”打开输出\n\ncreate or replace procedure update_qylxid_of_null_for_rygx\n\nAuthid Current_User\n\nis\n\n  v_date varchar2(8);--定义日期变量\n\n  v_sql varchar2(2000);--定义动态sql\n\n  v_tablename varchar2(20);--定义动态表名\n\n  begin\n\n   select to_char(sysdate,'yyyymmdd') into v_date from dual;--取日期变量\n\n   v_tablename := 'T_'||v_date;--为动态表命名\n\n   v_sql := 'create table '||v_tablename||'as select*from t_qy';--为动态sql赋值\n\n   dbms_output.put_line(v_sql);--打印sql语句\n\n   execute immediate v_sql;--执行动态sql\n\n   v_sql:='update t_qy t set t.LXID=(select LXID from t_qy_qy lx where lx.bh=t.bh and lx.LX =t.dm) where  t.lxid is null';\n\n   dbms_output.put_line(v_sql);--打印sql语句\n\n   execute immediate v_sql;--执行动态sql\n\nend update_qylxid_of_null_for_rygx;\n```\n\n<a name=\"50d52dd9\"></a>\n##### ****常见问题****\n<a name=\"1fc98647\"></a>\n###### ****ORACLE执行存储过程权限不足****\n[ORACLE执行存储过程权限不足——CSDN@He之涅槃](https://blog.csdn.net/u010109335/article/details/60577055)\n\n```\n--需要增加Authid Current_User\n\n--AUTHID DEFINER （定义者权限）：指编译存储对象的所有者。也是默认权限模式。\n\n--AUTHID CURRENT_USER（调用者权限）：指拥有当前会话权限的模式，这可能和当前登录用户相同或不同(alter session set current_schema 可以改变调用者Schema)create or replace PROCEDURE 存储过程名称\n\nAuthid Current_User\n\nIS \n\nBEGIN\n\n \n\n……；\n\nEND;\n\n \n```\n\n<a name=\"618d4aaf\"></a>\n#### ****Database link 数据库链接****\n即在需要在两个不同的数据库中连接表或者查询数据时，可创建数据库链接\n<a name=\"481feccf\"></a>\n##### ****如何使用****\n\n```\n--user_tables 是DBLINK_test所链接的用户的表\n\nselect * from user_tables@DBLINK_test;\n\n--链接可以方便于多个数据库用户关联查询数据，非常方便,mytable 是你当前登录用户的表\n\nselect * from user_tables@DBLINK_test t,mytable t2 where t2.id=t.id;\n```\n\n<a name=\"ea6f3b87-2\"></a>\n##### ****参考链接****\n[oracle中的database link如何使用——百度经验@wangzhiqing999](#best-answer-746405041)\n<a name=\"345cd1b6\"></a>\n##### ****oracle sql创建****\n\n```\n\n-- Drop existing old  database link --DBLINK_test是database link的名称drop database link DBLINK_test;-- Create new database link -- other_db 为用户名 pwd为密码create database link DBLINK_test\n\n  connect to other_db IDENTIFIED BY  pwd\n\n  using '(DESCRIPTION =\n\n(ADDRESS_LIST =\n\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n\n)\n\n(CONNECT_DATA =\n\n(SERVICE_NAME = orcl)\n\n)\n\n)';--查询 database link select * from dba_db_links;\n```\n\n如果创建全局dblink，必须使用systm或sys用户，在database前加public\n\n```\ncreate  public  database link DBLINK_test\n\n  connect to other_db IDENTIFIED BY  pwd\n\n  using '(DESCRIPTION =\n\n(ADDRESS_LIST =\n\n(ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))\n\n)\n\n(CONNECT_DATA =\n\n(SERVICE_NAME = orcl)\n\n)\n\n)';\n```\n\n<a name=\"5f005e3c\"></a>\n##### ****通过plsql创建****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118003862-eccf0b6e-7132-4106-aa23-e2b350ce0b5b.png#align=left&display=inline&height=408&name=image.png&originHeight=408&originWidth=327&size=22765&status=done&width=327) <br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118072979-b08dec8d-fd6a-4d8f-99cc-50fbc1e4e75c.png#align=left&display=inline&height=376&name=image.png&originHeight=376&originWidth=971&size=30163&status=done&width=971) <br /> \n<a name=\"146704a5\"></a>\n## ****常用函数及sql实例****\n<a name=\"ea6f3b87-3\"></a>\n### ****参考链接****\n[Oracle中replace函数的使用](http://www.cnblogs.com/harvey888/p/5957656.html)<br />[Oracle round函数是什么意思?怎么运用?](https://zhidao.baidu.com/question/14756835.html)<br />[oracle的nvl](https://zhidao.baidu.com/question/552089573.html)<br />[Oracle 中 decode 函数用法](http://www.cnblogs.com/vinsonLu/p/3512526.html)<br />[[oracle] to_date() 与 to_char() 日期和字符串转换](http://www.cnblogs.com/gaojing/archive/2008/11/07/1328657.html)<br />[Oracle的Cast的用法](http://blog.csdn.net/ziwen00/article/details/8685858) <br />[Oracle 大小写转换函数——博客园@Twang](https://www.cnblogs.com/wangfuyou/p/6605166.html)\n<a name=\"ca48b68b\"></a>\n### ****常用函数****\n<a name=\"2a18f8a8\"></a>\n#### ****判断是否为数字****\n\n```\n# 注意只能判断纯数字，不带小数,判断带小数方式请查看下文“常用sql”创建函数\n\nSELECT nvl2(translate('123','/1234567890','/'),'CHAR','NUMBER')   \n\nFROM   dual ;\n```\n\n<a name=\"da5a6765\"></a>\n#### ****add_months()日期增加，以月为单位****\n\n```\nadd_months(sysdate,12)--增加一年\n\nadd_months(sysdate,-12)--减去一年\n\nsysdate+1 --加一天\n```\n\n<a name=\"c79a4a1b\"></a>\n#### ****to_date()****\n\n```\nto_date(\"要转换的字符串\",\"转换的格式\")\n\nto_date(t.access_date,'yyyy-mm-dd hh24:mi:ss')--2005-12-25 13:25:59\n\nTO_DATE('17-DEC-1980', 'DD-MON-YYYY','NLS_DATE_LANGUAGE=American')--日期语言\n```\n\n<a name=\"b0a57818\"></a>\n#### ****replace替换字符****\n\n```\nreplace(原字段，'原字段旧内容','原字段新内容')--替换字符串\n```\n\n<a name=\"fecd35a6\"></a>\n#### ****round四舍五入****\n\n```\n`round(number)``round(number, decimal_places )`\n\n \n\nnumber ---需要四舍五入的数字\n\ndecimal_places ---从哪里开始四舍五入，此参数是下标，预设为0\n\n \n\nselect round(123.456, 0) from dual;     --- 123 \n```\n\n<a name=\"2510b668\"></a>\n#### ****nvl如果为空返回新值****\n \n```\nnvl(字段名，'新的返回的值')\n\n如果提供的字段的值为空，则将返回这个新值，注意：只是返回了这个值，并不是update到表中\n\n \n\n nvl(name,'小明')---name为空，返回小明\n```\n\n<a name=\"d623ee97\"></a>\n#### ****decode逻辑判断简化****\n\n```\ndecode(条件,值1,返回值1,值2,返回值2,...值n,返回值n,缺省值)\n\n \n\n该函数的含义如下：IF 条件=值1 THEN\n\n　　　　RETURN(翻译值1)\n\nELSIF 条件=值2 THEN\n\n　　　　RETURN(翻译值2)\n\n　　　　......\n\nELSIF 条件=值n THEN\n\n　　　　RETURN(翻译值n)ELSE\n\n　　　　RETURN(缺省值)\n\nEND IF\n\ndecode(字段或字段的运算，值1，值2，值3）\n\n \n\n该函数的含义如下：\n\n 这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回值3\n\n 当然值1，值2，值3也可以是表达式，这个函数使得某些sql语句简单了许多\n 注意：值2和值3的数据类型必须一致\n```\n\n\n\n<a name=\"4e7db3ce\"></a>\n#### ****sys_guid()生成唯一32位字符串****\n\n```\nsys_guid()\n```\n\n<a name=\"774534e1\"></a>\n#### ****CAST(expr AS type_name) 数值类型转换****\n\n```\n--例\n\ncast(R.MONTH as int)--将月份转换为整型类型\n```\n\n<a name=\"5b106349\"></a>\n#### ****大小写转换****\n\n```\nselect UPPER('Test') as u from dual; --转大写\n\nselect LOWER('Test') as l from dual;--转小写\n```\n\n<a name=\"7db7c5f3\"></a>\n#### ****截取字符串****\n\n```\n--截取身份证出生日期\n\nto_date(substr('XXXXXXXXXXXXXXXXX',7,8),'YYYYMMDD')\n```\n\n<a name=\"425d8a49\"></a>\n#### ****删除左右字符、添加左右字符****\n\n```\nltrim(原字符,'需要删除的字符')--删除左边字符\n\nrtrim(原字符,'需要删除的字符')--删除右边字符\n\nLPAD(原字符,'需要添加的字符') --添加字符在左边\n\nRPAD(原字符,'需要添加的字符') --添加字符在右边--例\n\nltrim('abcdefg','abc')--删除左边abc，输出defg\n\nltrim('abqwert','abc')--删除左边ab，输出qwert\n\n \n\n \n\n \n\n \n\n \n```\n\n<a name=\"349ddcfc\"></a>\n### ****Sql实例****\n<a name=\"89f6884e\"></a>\n#### ****判断数字****（****创建函数****）****\n\n```\ncreate or replace function isNumber(p in varchar2)return number\n\nis\n\nresult number;begin\n\nresult := to_number(p);return 1;\n\nexceptionwhen VALUE_ERROR then return 0;end;\n```\n\n导出表结构\n\n```\nSELECT B.TABLE_NAME     AS \"表名\",\n\n       C.COMMENTS       AS \"表说明\",\n\n       B.COLUMN_ID      AS \"字段序号\",\n\n       B.COLUMN_NAME    AS \"字段名\",\n\n       B.DATA_TYPE      AS \"字段数据类型\",\n\n       B.DATA_LENGTH    AS \"数据长度\",\n\n       B.DATA_PRECISION AS \"整数位\",\n\n       B.DATA_SCALE     AS \"小数位\",\n\n       A.COMMENTS       AS \"字段说明\"\n\n  FROM ALL_COL_COMMENTS A, ALL_TAB_COLUMNS B, ALL_TAB_COMMENTS C\n\nWHERE A.TABLE_NAME IN (SELECT U.TABLE_NAME FROM USER_ALL_TABLES U)\n\n   AND A.OWNER = B.OWNER\n\n   AND A.TABLE_NAME = B.TABLE_NAME\n\n   AND A.COLUMN_NAME = B.COLUMN_NAME\n\n   AND C.TABLE_NAME = A.TABLE_NAME\n\n   AND C.OWNER = A.OWNER\n\n   AND A.OWNER = 'PYE'ORDER BY A.TABLE_NAME, B.COLUMN_ID;\n```\n\n<a name=\"abcdb7f1\"></a>\n#### ****修改不符合的时间，修改年份和月份**\n-\n\n```\n-更新有/的时间、有两个/的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))),substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime)),(length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/',''))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/','')))=2\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'/','')))=2\n\n--更新有/的时间、有两个/的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'/','')))=1\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'/','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'/','')))=1\n\n \n\n--更新有/的时间、有两个-的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'-','')))=2\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,5)||'0'||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),'-','')))=2\n\n--更新有-的时间、有两个-的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)='-'WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'-','')))=1\n\nupdate  t_test_cc_all_b20181212 t set t.stime=(substr(t.stime,1,length(t.stime)-1)||'0'|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,'-',''))) =1WHERE length(t.stime)<10 and  (length(t.stime)-length(replace(t.stime,'-','')))>=2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),'-','')))=1\n\n \n\n \n```\n\n<a name=\"37a3a350\"></a>\n#### 查看所有表空间及容量\n\n```\nSELECT DBF.TABLESPACE_NAME,\n       DBF.TOTALSPACE \"总量(M)\",\n       DBF.TOTALBLOCKS AS 总块数,\n       DBF.TOTALSPACE-DFS.FREESPACE \"使用量(M)\",\n       DBF.TOTALBLOCKS-DFS.FREEBLOCKS AS 使用块数,      \n       DFS.FREESPACE \"剩余总量(M)\",\n       DFS.FREEBLOCKS \"剩余块数\",\n       (DFS.FREESPACE / DBF.TOTALSPACE) * 100 \"空闲比例\"\n  FROM (SELECT T.TABLESPACE_NAME,\n               SUM(T.BYTES) / 1024 / 1024 TOTALSPACE,\n               SUM(T.BLOCKS) TOTALBLOCKS\n          FROM DBA_DATA_FILES T\n         GROUP BY T.TABLESPACE_NAME) DBF,\n       (SELECT TT.TABLESPACE_NAME,\n               SUM(TT.BYTES) / 1024 / 1024 FREESPACE,\n               SUM(TT.BLOCKS) FREEBLOCKS\n          FROM DBA_FREE_SPACE TT\n         GROUP BY TT.TABLESPACE_NAME) DFS\n WHERE TRIM(DBF.TABLESPACE_NAME) = TRIM(DFS.TABLESPACE_NAME);\n```\n\n<a name=\"c60f6138\"></a>\n#### oracle表空间不足时处理\n表空间数据文件最大是32G，也就是说扩容最大为32G \n<a name=\"e7a0542d\"></a>\n##### 参考链接： \n[oracle 11g 导入数据库，表空间超过32G的解决办法——CSDN@冷静cc](https://blog.csdn.net/love_java_cc/article/details/52857363)  <br />[oracle 表空间不足解决办法大全——百度经验@javababy5](https://jingyan.baidu.com/article/48b37f8d6ca1eb1a646488dc.html)\n\n<a name=\"b7cc6308\"></a>\n##### 第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\n\n```\n--修改数据文件内存50m为当前数据文件的内存大小\nalter database datafile 'D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF' resize 50m;\n--增加数据文件自动扩容功能,每次扩容为50m，最大不会超过32G\nalterdatabase datafile 'D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF' autoextend onnext 50m maxsize 32767m; \n```\n<a name=\"e3470cfa\"></a>\n##### 第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\n\n```\n--USERS是你的表空间名，H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf可以改为你的任意地址，最好放在一起方便，\n--每次扩容50m，最大32G\nalter tablespace USERS  \nadd datafile 'H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf' size 50m \nautoextend on next 50m maxsize 32767m;\n```\n\n\n<a name=\"5dc99f6e\"></a>\n## ****问题****\n<a name=\"122f6443\"></a>\n### ****oracle之违反唯一约束条件****\n出现这个原因，除了自己手动新增ID的情况外，还有就是引用自己创建的sequance，导入新表数据后，没有将新的sequance导入进来，可以将新sequance导入进来，也可以自动手动修改<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118277133-fbbfbc99-569b-4a1e-ad5a-cf655ef6f786.png#align=left&display=inline&height=199&name=image.png&originHeight=199&originWidth=822&size=21888&status=done&width=822) <br /> \n<a name=\"e2d3e6c0\"></a>\n### ****修改字符集****\n<a name=\"ea6f3b87-4\"></a>\n#### ****参考链接****\n[如何改oracle AL16UTF16为AL32UTF8——百度知道](https://link.jianshu.com/?t=https://zhidao.baidu.com/question/134444813.html)<br />[建库时AL16UTF16字符集怎么设置？——出处: ITPUB论坛－中国最专业的IT技术社区](https://link.jianshu.com/?t=http://www.itpub.net/thread-505857-1-1.html%23pid3728655)<br />****操作：****\n\n```\nMicrosoft Windows [版本 6.1.7601]\n\n版权所有 (c) 2009 Microsoft Corporation。保留所有权利。\n\n \n\nC:\\Users\\Administrator>sqlplus / as sysdba\n\n \n\nSQL*Plus: Release 11.2.0.1.0 Production on 星期四 1月 11 12:00:49 2018\n\n \n\nCopyright (c) 1982, 2010, Oracle.  All rights reserved.\n\n \n\n \n\n连接到:\n\nOracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production\n\nWith the Partitioning, OLAP, Data Mining and Real Application Testing options\n\n \n\nSQL> shutdown immediate\n\n数据库已经关闭。\n\n已经卸载数据库。\n\nORACLE 例程已经关闭。\n\nSQL> startup mount\n\nORACLE 例程已经启动。\n\n \n\nTotal System Global Area 3290345472 bytes\n\nFixed Size                  2180224 bytes\n\nVariable Size            2164263808 bytes\n\nDatabase Buffers         1107296256 bytes\n\nRedo Buffers               16605184 bytes\n\n数据库装载完毕。\n\nSQL> ALTER SYSTEM ENABLE RESTRICTED SESSION;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER SYSTEM SET AQ_TM_PROCESSES=0;\n\n \n\n系统已更改。\n\n \n\nSQL> ALTER DATABASE OPEN;\n\n \n\n数据库已更改。\n\n \n\nSQL> ALTER DATABASE CHARACTER SET AL32UTF8;\n\nALTER DATABASE CHARACTER SET AL32UTF8\n\n*\n\n第 1 行出现错误:\n\nORA-12712: 新字符集必须为旧字符集的超集\n\n \n\n \n\nSQL> ALTER DATABASE CHARACTER SET AL16UTF16;\n\nALTER DATABASE CHARACTER SET AL16UTF16\n\n*\n\n第 1 行出现错误:\n\nORA-12712: 新字符集必须为旧字符集的超集# ALTER DATABASE national CHARACTER SET AL16UTF16;\n\n \n\nSQL> ALTER DATABASE character set INTERNAL_USE AL32UTF8;\n\n \n\n数据库已更改。\n\n \n\nSQL> SHUTDOWN IMMEDIATE;\n\n数据库已经关闭。\n\n已经卸载数据库。\n\nORACLE 例程已经关闭。\n\nSQL> STARTUP\n\nORACLE 例程已经启动。\n\n \n\nTotal System Global Area 3290345472 bytes\n\nFixed Size                  2180224 bytes\n\nVariable Size            2164263808 bytes\n\nDatabase Buffers         1107296256 bytes\n\nRedo Buffers               16605184 bytes\n\n数据库装载完毕。\n\n数据库已经打开。\n\nSQL>\n```\n\nALTER DATABASE character set INTERNAL_USE AL32UTF8;<br />INTERNAL_USE有点像是强制修改，其他用户角色可能会报错\n<a name=\"bf52b411\"></a>\n#### ****其他问题****\n<a name=\"3e2e31b2\"></a>\n##### ****AL16UTF16不能作为character set****\nAL16UTF16 不能用做数据库的character set，只能用做national character set 。<br />character set必须是single byte 7-bit ASCII或是单字节EBCDIC的子集，因此fixed width的多字节字符集(AL16UTF16)就不能做为character set。<br /> <br />你可以用如下这样用的：\n\n```\nCHARACTER SET US7ASCII NATIONAL CHARACTER SET AL16UTF16\n\n或是\n\nCHARACTER SET zhs16cgb231280  NATIONAL CHARACTER SET AL16UTF16\n\n \n\n \n\n \n\n \n```\n\n<a name=\"46b308ed\"></a>\n### ****如何修改服务名service_name****\n<a name=\"bd1bf7e7\"></a>\n##### ****转载链接****\n[如何修改 service_name](https://link.jianshu.com/?t=https://www.2cto.com/kf/201311/259856.html)\n<a name=\"d48898d5\"></a>\n##### ****例：****\n<a name=\"64162c1b\"></a>\n###### ****service_name原有环境：****\n\n```\nsid： mynewdb\n\nglobal_name：mynewdb\n\nservice_names： MYNEWDB\n\ndb_domain  ：\n\ndb_name：mynewdb\n```\n\n<a name=\"f0740534\"></a>\n###### ****需要修改如下：****\n\n```\nglobal_name：mynewdb\n\nservice_names： test\n\ndb_domain  ：\n\ndb_name：mynewdb\n```\n\n<a name=\"568a025c\"></a>\n##### ****方法：****\n服务器端：<br />alter system set service_names='test';<br />这里采用静态注册，同时还要修改下 listener.ora\n\n```\nSID_LIST_LISTENER =\n\n  (SID_LIST =\n\n    (SID_DESC =\n\n      (SID_NAME = PLSExtProc)\n\n      (ORACLE_HOME =/u01/app/oracle/product/11.2.0/dbhome_1)\n\n      (PROGRAM = extproc)\n\n    )\n\n        (SID_DESC=\n\n        (GLOBAL_DBNAME = mynewdb)\n\n        (ORALCE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)\n\n        (SID_NAME = mynewdb)\n\n        )\n\n        (SID_DESC=\n\n        (GLOBAL_DBNAME = test)  -------这个是需要添加\n\n        (ORALCE_HOME = /u01/app/oracle/product/11.2.0/dbhome_1)\n\n        (SID_NAME = mynewdb)    ------这个还是原来的实例名\n\n        )\n\n  )\n```\n\ncmd下执行命令lsnrctl reload<br />查看监听状态lsnrctl status<br />L\n\n```\nSNRCTL>\n\nConnecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=10.80.11.202)(PORT=1521)))\n\nSTATUS of the LISTENER\n\n------------------------\n\nAlias                     LISTENER\n\nVersion                   TNSLSNR for [Linux](https://www.2cto.com/os/linux/): Version 11.2.0.1.0 - Production\n\nStart Date                21-NOV-2013 00:09:35\n\nUptime                    0 days 20 hr. 30 min. 55 sec\n\nTrace Level               off\n\nSecurity                  ON: Local OS Authentication\n\nSNMP                      OFF\n\nListener Parameter File   /u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora\n\nListener Log File         /u01/app/oracle/diag/tnslsnr/oracle11g/listener/alert/log.xml\n\nListening Endpoints Summary...\n\n  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=10.80.11.202)(PORT=1521)))\n\nServices Summary...\n\nService \"PLSExtProc\" has 1 instance(s).\n\n  Instance \"PLSExtProc\", status UNKNOWN, has 1 handler(s) for this service...\n\nService \"mynewdb\" has 1 instance(s).\n\n  Instance \"mynewdb\", status UNKNOWN, has 1 handler(s) for this service...\n\nService \"test\" has 1 instance(s).\n\n  Instance \"mynewdb\", status UNKNOWN, has 1 handler(s) for this service...\n\nThe command completed successfully\n```\n\n可以看到新的 Service \"test\" 已经可以使用了<br />客户端配置：<br />net manager 配置 服务名为 test ，ip为数据库服务器主机ip，相应端口。<br />测试连接：\n\n```\nSQL>  conn sys/oracle@test as sysdba\n\n已连接。\n\nSQL>\n```\n\n当然不使用静态注册，动态注册也可以<br /> \n<a name=\"3158f60d\"></a>\n### ****警告日志文件****\n不知道日志文件在哪的，可以使用这个命令<br />select value from v$diag_info where name='Diag Trace';<br />以下是我的输出地址\n\n```\nSQL> select value from v$diag_info where name='Diag Trace';\n\n \n\nVALUE\n\n--------------------------------------------------------------------------------\n\nD:\\FLYINGCLOUD\\diag\\rdbms\\odb\\odb\\trace\n\n \n\n \n```\n\n<a name=\"9e2e81b7\"></a>\n## ****开发工具配置及问题****\n<a name=\"Plsql\"></a>\n### ****Plsql****\n<a name=\"d672874c\"></a>\n#### ****plsql设置可显示的查询记录条数****\ntools->prifereces->window types->sql window->records per page<br />查询所有记录<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118425257-e4d6330a-e5f6-4e7e-932c-fb25cf372fd2.png#align=left&display=inline&height=591&name=image.png&originHeight=591&originWidth=564&size=92527&status=done&width=564) \n<a name=\"5c094ab1\"></a>\n#### ****plsql如何查询sql执行计划****\n[怎么使用plsql查看执行计划](https://link.jianshu.com/?t=https://jingyan.baidu.com/article/ab69b270bffc2e2ca7189fee.html)<br />执行计划可以用计划sql执行的性能<br />选中需要执行的sql语句，然后按F5，或者直接点击\"执行计划\"\n<a name=\"e33957e7\"></a>\n#### ****PLSQL工具如何远程连接数据库****\n<a name=\"ea6f3b87-5\"></a>\n##### ****参考链接****\n[如何配置pl/sql 连接远程oracle服务器——百度知道](https://link.jianshu.com/?t=https://zhidao.baidu.com/question/333852172.html)\n<a name=\"d7ecf9b4\"></a>\n##### ****方法1：****\n找到oracle的安装目录。如：C:\\oracle\\product\\10.2.0\\db_1\\network\\ADMIN<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118449158-f157887f-799b-4b90-a947-2218b90f25ac.png#align=left&display=inline&height=30&name=image.png&originHeight=30&originWidth=311&size=2681&status=done&width=311) <br />添加如下内容<br />其中中文部分是需要修改的部分，除第一个“本地实例名”外，其他需要跟远程数据库管理员咨询，本地实例名就是方便自己识别数据库的一个名字，可以自定义。\n\n```\n本地实例名 =\n\n  (DESCRIPTION =\n\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 远程数据库IP地址)(PORT = 远程服务器端口号))\n\n    (CONNECT_DATA =\n\n      (SERVER = DEDICATED)\n\n      (SERVICE_NAME = 远程数据库服务名)\n\n    )\n\n  )\n```\n\n然后打开pl/sql就能看到自己创建的链接，如图：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118496776-446fbbd8-7f17-4ec9-be0b-219d248b2910.png#align=left&display=inline&height=204&name=image.png&originHeight=204&originWidth=392&size=17502&status=done&width=392) <br />方法2：<br /> <br /> \n<a name=\"5d64018c\"></a>\n##### ****方法2：****\n<a name=\"ef35ed63\"></a>\n###### ****格式：****\nip:端口/sid\n<a name=\"614fc656\"></a>\n###### ****示例：****\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/244275/1550118525263-c7c6ad21-d3fb-4563-9154-f8bc23c3f375.png#align=left&display=inline&height=209&name=image.png&originHeight=209&originWidth=393&size=10049&status=done&width=393) \n\n","slug":"yuque/oracle之技术经验","published":1,"updated":"2020-02-29T07:15:14.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck77ncirg009ty8us8i0ljkpl","content":"<p><a name=\"f66bd8f4\"></a></p>\n<h1 id=\"Oracle经验\"><a href=\"#Oracle经验\" class=\"headerlink\" title=\"Oracle经验**\"></a><strong><strong>O</strong></strong>ra<strong><strong>cle</strong></strong>经验<em>**</em></h1><p><a name=\"e9a9187c\"></a></p>\n<h2 id=\"申明\"><a href=\"#申明\" class=\"headerlink\" title=\"申明\"></a><strong><strong>申明</strong></strong></h2><p>本文大部分资料来自《深入理解Oracle 12c数据库管理》，但是也有自己的个人观点，大家也去看这本书<br><a name=\"e05dce83\"></a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><strong><strong>简介</strong></strong></h2><pre><code>Oracle数据库已经是当今世界技术前沿了，因为它优点突出 &lt;br /&gt;有以下优点：&lt;br /&gt;(1) 拥有其他数据库系统所没有的表空间概念；&lt;br /&gt;(2) 拥有真正的等级锁功能&lt;br /&gt;(3) 拥有多版本数据功能，读写操作不会相互等待（我觉得是非常的好特性）&lt;br /&gt;(4) 拥有更快的处理速度和更高的安全性；&lt;br /&gt;(5) 拥有丰富的数据字典，易于DBA判断数据库的各种情况；&lt;br /&gt;(6) 拥有非常简单明了的备份与恢复原理&lt;br /&gt;(7) Oracle数据库可以启动到多个阶段，DBA可以在不同的情况下，通过启动到特定的阶段解决一些特殊问题&lt;br /&gt;(8) Oracle可以跨越多种软、硬平台。\n</code></pre><p><a name=\"362eced1\"></a></p>\n<h2 id=\"Oracle安装和创建-由于本文作者觉得linux太花费时间，故只有这部分讲解到linux\"><a href=\"#Oracle安装和创建-由于本文作者觉得linux太花费时间，故只有这部分讲解到linux\" class=\"headerlink\" title=\"Oracle安装和创建(由于本文作者觉得linux太花费时间，故只有这部分讲解到linux)\"></a><strong><strong>Oracle</strong></strong>安装和创建<strong><strong>(</strong></strong>由于本文作者觉得linux太花费时间，故只有这部分讲解到linux<strong><strong>)</strong></strong></h2><p>Oracle安装一般有两种，一种是图形界面的安装，另一种是无界面安装。建议是无界面，因为图形界面在宽带不足情况下，可能出现加载远程界面慢的问题，而且不能自动化。无界面可以依靠应答文件来安装。<br><a name=\"712f5efa\"></a></p>\n<h3 id=\"了解OFA标准\"><a href=\"#了解OFA标准\" class=\"headerlink\" title=\"了解OFA标准\"></a><strong><strong>了解OFA标准</strong></strong></h3><p>OFA标准是指oracle的目录结构和文件名，然而大部分DBA（database manager数据库管理员简称DBA）都在一定程度上自定义了，以适应于不同的环境。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117219355-d3c0e3a0-41c9-45c4-ae0c-a89fe13bccb3.png#align=left&amp;display=inline&amp;height=507&amp;name=image.png&amp;originHeight=507&amp;originWidth=835&amp;size=295404&amp;status=done&amp;width=835\" alt=\"image.png\"><br><a id=\"more\"></a><br><a name=\"119c5730\"></a></p>\n<h3 id=\"库的高速缓存和数据字典的高速缓存\"><a href=\"#库的高速缓存和数据字典的高速缓存\" class=\"headerlink\" title=\"库的高速缓存和数据字典的高速缓存\"></a><strong><strong>库的高速缓存和数据字典的高速缓存</strong></strong></h3><p><a name=\"a55e5de5\"></a></p>\n<h4 id=\"库的高速缓存\"><a href=\"#库的高速缓存\" class=\"headerlink\" title=\"库的高速缓存\"></a><strong><strong>库的高速缓存</strong></strong></h4><p>是用来存放你实际表的数据块的，如表TAB_A里实际存放的若干条数据记录，一般都存放在用户的表空间里。<br> <br><br><a name=\"773d69a4\"></a></p>\n<h4 id=\"数据字典的高速缓存\"><a href=\"#数据字典的高速缓存\" class=\"headerlink\" title=\"数据字典的高速缓存\"></a><strong><strong>数据字典的高速缓存</strong></strong></h4><p>用来存放表的定义，如表TAB_A，有几个字段，每个字段的类型、长度，表空间等，这类信息在你建表后会存放在系统表里，都是在SYSTEM表空间下，ORACLE运行时，这些信息被装入数据字典高速缓存里。<br><br><a name=\"7f04d897\"></a></p>\n<h4 id=\"数据字典的意思是\"><a href=\"#数据字典的意思是\" class=\"headerlink\" title=\"数据字典的意思是\"></a><strong><strong>数据字典的意思是</strong></strong></h4><p>简单的说就和我们小学用的词典的目录一样  要查询个表的数据 首先要确认这个词典（数据库）中有这个词语（表）  吧<br><br><a name=\"2655d132\"></a></p>\n<h3 id=\"安装oracle\"><a href=\"#安装oracle\" class=\"headerlink\" title=\"安装oracle\"></a><strong><strong>安装oracle</strong></strong></h3><p><a name=\"061f72da\"></a></p>\n<h4 id=\"创建对应的权限的OS用户组\"><a href=\"#创建对应的权限的OS用户组\" class=\"headerlink\" title=\"创建对应的权限的OS用户组\"></a><strong><strong>创建对应的权限的O</strong></strong>S<strong><strong>用户组</strong></strong></h4><p>我们需要linux上创建一些OS用户组，安装完oracle之后就可以为linuxOS用户组分配的相应的数据库操作权限，正常来说OS用户组（注：用户和用户组是不一样的）的创建是属于系统管理员（SA）的工作，但是大部分情况没有SA。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117248391-cbfc23d8-2f3c-4bb5-b862-65300cfb607d.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=822&amp;size=254798&amp;status=done&amp;width=822\" alt=\"image.png\"><br>不必根据一字不差照搬组名，可以根据不一样环境来配置。<br><br><a name=\"657ad920\"></a></p>\n<h5 id=\"运行linux命令，创建组\"><a href=\"#运行linux命令，创建组\" class=\"headerlink\" title=\"运行linux命令，创建组\"></a><strong><strong>运行linux命令，创建组</strong></strong></h5><p>我们只按照简单的功能来分组就好了，oinstall负责安装和卸载权限，dba具有完全操作权限，oper只具有数据库操作权限（包含一些删除表，创建表，修改等待权限 ）<br>groupadd oinstall<br>groupadd dba<br>groupadd oper<br><br><a name=\"ccd2979a\"></a></p>\n<h6 id=\"查看创建的OS组\"><a href=\"#查看创建的OS组\" class=\"headerlink\" title=\"查看创建的OS组\"></a><strong><strong>查看创建的OS组</strong></strong></h6><p>cat /etc/group<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117306714-eef5438b-f88e-43d4-9ecb-0d43990fe65f.png#align=left&amp;display=inline&amp;height=386&amp;name=image.png&amp;originHeight=386&amp;originWidth=281&amp;size=12073&amp;status=done&amp;width=281\" alt=\"image.png\"><br>1000、1001、1002是我们组的ID<br><a name=\"87c9fadb\"></a></p>\n<h5 id=\"创建用户并分配组\"><a href=\"#创建用户并分配组\" class=\"headerlink\" title=\"创建用户并分配组\"></a><strong><strong>创建用户并分配组</strong></strong></h5><p>useradd -u 500 -g oinstall -G dba , oper oracle<br>将组ID设置500(其他同事可能需要人执行相同的组ID来执行所有安装)<br>创建主属组为oinstall，创建副属组为dba,oper<br>-g 和-G，分别是分配主属组和附属组的意思。<br><a name=\"d82e410e\"></a></p>\n<h6 id=\"查看用户信息\"><a href=\"#查看用户信息\" class=\"headerlink\" title=\"查看用户信息\"></a><strong><strong>查看用户信息</strong></strong></h6><p>cat /etc/passwd<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117322832-e84ea737-28ec-450b-9087-7f6f9c5272ea.png#align=left&amp;display=inline&amp;height=385&amp;name=image.png&amp;originHeight=385&amp;originWidth=827&amp;size=30460&amp;status=done&amp;width=827\" alt=\"image.png\"><br><br><a name=\"e7d20343\"></a></p>\n<h6 id=\"删除修改用户，或者用户组\"><a href=\"#删除修改用户，或者用户组\" class=\"headerlink\" title=\"删除修改用户，或者用户组\"></a><strong><strong>删除修改用户，或者用户组</strong></strong></h6><p>修改删除用户组：groupmod、groupdel<br>修改删除用户：usermod、userdel<br>以上命令需要使用系统管理员登录<br><a name=\"11c5905d\"></a></p>\n<h4 id=\"查看linux环境信息\"><a href=\"#查看linux环境信息\" class=\"headerlink\" title=\"查看linux环境信息\"></a><strong><strong>查看linux环境信息</strong></strong></h4><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117345109-376aba41-14b7-46f6-9e38-8141c9886cfb.png#align=left&amp;display=inline&amp;height=401&amp;name=image.png&amp;originHeight=401&amp;originWidth=860&amp;size=45732&amp;status=done&amp;width=860\" alt=\"image.png\">以下为我本人系统的信息<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117364504-14c00655-46d0-4c60-a248-84661ea1cb04.png#align=left&amp;display=inline&amp;height=452&amp;name=image.png&amp;originHeight=452&amp;originWidth=666&amp;size=29951&amp;status=done&amp;width=666\" alt=\"image.png\"><br>grep MemTotal  /proc/meminfo<br>free –t<br>df –h /tmp<br>df –h<br>cat /proc/version<br>uname –r<br> <br>rpm –q <package name=\"\"> 查询是否已经安装必须的软件包<br><a name=\"fdd1ae5b\"></a></package></p>\n<h2 id=\"管理数据库\"><a href=\"#管理数据库\" class=\"headerlink\" title=\"管理数据库\"></a><strong><strong>管理数据库</strong></strong></h2><p><a name=\"dfc119cb\"></a></p>\n<h3 id=\"Sysdba数据库账号\"><a href=\"#Sysdba数据库账号\" class=\"headerlink\" title=\"Sysdba数据库账号**\"></a><strong><strong>S</strong></strong>ysdba数据库账号<em>**</em></h3><p>这个账号可拥有除了关闭数据库以外的所有操作权限<br>as sysdba作为系统管理员登录<br><a name=\"6aee7bf5\"></a></p>\n<h3 id=\"第一次操作数据库\"><a href=\"#第一次操作数据库\" class=\"headerlink\" title=\"第一次操作数据库\"></a><strong><strong>第一次操作数据库</strong></strong></h3><p>startup onmount 启动后台进程并分配内存，此命令执行后，sql*plus会读取ORACLE_HOME/dbs中的初始化文件，会使后台进程和内存区域初始化，这样你就拥有了oracle的实例，但是还没有数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117384566-27b7d3ce-0863-4a79-ac04-4ec4bfc56b98.png#align=left&amp;display=inline&amp;height=228&amp;name=image.png&amp;originHeight=228&amp;originWidth=603&amp;size=11983&amp;status=done&amp;width=603\" alt=\"image.png\"><br>oracle实例是指后台进程和内存区域，oracle数据库是指磁盘上的物理文件（数据文件、控制文件、联机重做日志文件）<br><a name=\"187ec332\"></a></p>\n<h3 id=\"表空间\"><a href=\"#表空间\" class=\"headerlink\" title=\"表空间\"></a><strong><strong>表空间</strong></strong></h3><p><a name=\"fcf86c6f\"></a></p>\n<h4 id=\"查询TEMP临时表空间\"><a href=\"#查询TEMP临时表空间\" class=\"headerlink\" title=\"查询TEMP临时表空间\"></a><strong><strong>查询TEMP临时表空间</strong></strong></h4><p>select*from database_properties where property_name=’DEFAULT_TEMP_TABLESPACE’;<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117405819-4e8691dc-3239-445c-b58e-e77a25fa45f4.png#align=left&amp;display=inline&amp;height=202&amp;name=image.png&amp;originHeight=202&amp;originWidth=620&amp;size=7894&amp;status=done&amp;width=620\" alt=\"image.png\"><br><a name=\"5d4d5693\"></a></p>\n<h4 id=\"USER表空间\"><a href=\"#USER表空间\" class=\"headerlink\" title=\"USER表空间\"></a><strong><strong>USER表空间</strong></strong></h4><p>select*from database_properties<br>where roperty_name=’DEFAULT_PERMANENT_TABLESPACE’;<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117417926-a850da9d-5066-484f-9f27-e1aedcadea79.png#align=left&amp;display=inline&amp;height=172&amp;name=image.png&amp;originHeight=172&amp;originWidth=632&amp;size=7080&amp;status=done&amp;width=632\" alt=\"image.png\"><br><a name=\"00caab79\"></a></p>\n<h3 id=\"连接标识\"><a href=\"#连接标识\" class=\"headerlink\" title=\"连接标识\"></a><strong><strong>连接标识</strong></strong></h3><p><a name=\"8d258c38\"></a></p>\n<h4 id=\"Oracle-的OCI-Driver-和-Thin-Driver的区别\"><a href=\"#Oracle-的OCI-Driver-和-Thin-Driver的区别\" class=\"headerlink\" title=\"Oracle 的OCI Driver 和 Thin Driver的区别\"></a><strong><strong>Oracle 的OCI Driver 和 Thin Driver的区别</strong></strong></h4><p>有以下两种标识方式：<br> <br>jdbc:oracle:oci8:@shdb<br> <br>1）从使用上来说，oci必须在客户机上安装oracle客户端或才能连接，而thin就不需要，因此从使用上来讲thin还是更加方便，这也是thin比较常见的原因。 <br>2）原理上来看，thin是纯java实现tcp/ip的c/s通讯；而oci方式,客户端通过native java method调用c library访问服务端，而这个c library就是oci(oracle called interface)，因此这个oci总是需要随着oracle客户端安装（从oracle10.1.0开始，单独提供OCI Instant Client，不用再完整的安装client） <br>3）它们分别是不同的驱动类别，oci是二类驱动， thin是四类驱动，但它们在功能上并无差异。<br><br><a name=\"3a0f1856\"></a></p>\n<h3 id=\"查询实例名（SID）\"><a href=\"#查询实例名（SID）\" class=\"headerlink\" title=\"查询实例名（SID）\"></a><strong><strong>查询实例名（SID）</strong></strong></h3><p>sqlplus / as sysdba<br>show parameter instance_name<br><br><a name=\"f858894c\"></a></p>\n<h2 id=\"配置用户和数据库对象\"><a href=\"#配置用户和数据库对象\" class=\"headerlink\" title=\"配置用户和数据库对象\"></a><strong><strong>配置用户和数据库对象</strong></strong></h2><p><a name=\"f8876e5d\"></a></p>\n<h2 id=\"创建和维护大型数据库对象、分区和索引\"><a href=\"#创建和维护大型数据库对象、分区和索引\" class=\"headerlink\" title=\"创建和维护大型数据库对象、分区和索引\"></a><strong><strong>创建和维护大型数据库对象、分区和索引</strong></strong></h2><p><a name=\"d2adec7f\"></a></p>\n<h2 id=\"备份和恢复\"><a href=\"#备份和恢复\" class=\"headerlink\" title=\"备份和恢复\"></a><strong><strong>备份和恢复</strong></strong></h2><p><a name=\"01a62dbc\"></a></p>\n<h2 id=\"数据库自动化及常见问题解决方法\"><a href=\"#数据库自动化及常见问题解决方法\" class=\"headerlink\" title=\"数据库自动化及常见问题解决方法\"></a><strong><strong>数据库自动化及常见问题解决方法</strong></strong></h2><p><a name=\"9d2f273a\"></a></p>\n<h2 id=\"管理窗口和可插入数据库\"><a href=\"#管理窗口和可插入数据库\" class=\"headerlink\" title=\"管理窗口和可插入数据库\"></a><strong><strong>管理窗口和可插入数据库</strong></strong></h2><p><a name=\"d579eb7d\"></a></p>\n<h2 id=\"Oracle-导入导出及连接\"><a href=\"#Oracle-导入导出及连接\" class=\"headerlink\" title=\"Oracle 导入导出及连接\"></a><strong><strong>Oracle 导入导出及连接</strong></strong></h2><p><a name=\"ea6f3b87\"></a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h3><p><a href=\"http://blog.itpub.net/21614165/viewspace-766937/\" target=\"_blank\" rel=\"noopener\">Oracle数据库导入导出命令总结</a><br><a href=\"http://blog.csdn.net/wildin/article/details/5850252\" target=\"_blank\" rel=\"noopener\">sqlplus连接远程数据库</a><br><a href=\"http://www.cnblogs.com/wanghongyun/p/6307652.html\" target=\"_blank\" rel=\"noopener\">ORACLE的impdp和expdp命令</a><br><a href=\"https://www.2cto.com/database/201304/203709.html\" target=\"_blank\" rel=\"noopener\">oracle expdp——红黑联盟</a><br><a name=\"02babed4\"></a></p>\n<h3 id=\"exp-和imp导入导出\"><a href=\"#exp-和imp导入导出\" class=\"headerlink\" title=\"exp 和imp导入导出\"></a><strong><strong>exp 和imp导入导出</strong></strong></h3><p><a name=\"f77e0e7c\"></a></p>\n<h4 id=\"导出命令-exp\"><a href=\"#导出命令-exp\" class=\"headerlink\" title=\"导出命令 (exp)\"></a><strong><strong>导出命令 (exp)</strong></strong></h4><p><strong><strong>格式：</strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp [用户名]&#x2F;[密码]@[主机ip]:[端口号]&#x2F;[SID&#x2F;service] file&#x3D;d:\\zhpt.dmp full&#x3D;n</span><br></pre></td></tr></table></figure>\n<p>file是导出路径full=n,表示是否导出主机数据库上全部用户，n表示否，y表示是<br>exp abc/abc@183.233.179.165:1521/orcl file=d:\\zhpt.dmp full=y<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117435502-1497acdc-62e6-4f06-bcb2-86eb61c72693.png#align=left&amp;display=inline&amp;height=34&amp;name=image.png&amp;originHeight=34&amp;originWidth=625&amp;size=2889&amp;status=done&amp;width=625\" alt=\"image.png\"><br>如果密码出特殊符号，使用<code>&quot;&quot;&quot;</code>包裹，如果其他地址有特殊符号，需要用<code>\\</code>转义，需要指定用户导出可以使用<code>owner</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp grz/<span class=\"string\">\"\"</span><span class=\"string\">\"g2011*)\"</span><span class=\"string\">\"\"</span>@<span class=\"number\">19.129</span>.<span class=\"number\">180.19</span>:<span class=\"number\">1521</span>/oracle file=gr20190410.dmp owner <span class=\"keyword\">in</span> \\(\\<span class=\"string\">'gr\\'</span>,\\<span class=\"string\">'jzs'</span>\\) full=n</span><br></pre></td></tr></table></figure>\n<p><a name=\"606fd7a7\"></a></p>\n<h4 id=\"导入数据库（imp）\"><a href=\"#导入数据库（imp）\" class=\"headerlink\" title=\"导入数据库（imp）\"></a><strong><strong>导入数据库（imp）</strong></strong></h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># full 表示是否导出全部数据，一定要设置</span></span><br><span class=\"line\"><span class=\"comment\"># log 输出日志文件# fromuser 从哪一个用户导入</span></span><br><span class=\"line\"><span class=\"comment\"># touser 导入到哪个用户</span></span><br><span class=\"line\"><span class=\"comment\"># ignore=y buffer=100000000; 修改缓冲区大小，有时sql语句过长，会造成缓冲区空间不足</span></span><br><span class=\"line\">imp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">imp username/pwd@orcl file=E:\\<span class=\"number\">20171108</span>.dmp fromuser=username touser= username log=D:\\webBackend\\kingzheng\\住房保障系统\\fszfbz201711191635.log full=n</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">imp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y ignore=y buffer=<span class=\"number\">100000000</span>;</span><br></pre></td></tr></table></figure>\n<p><a name=\"69a49bc6\"></a></p>\n<h3 id=\"expdp和impdp创建数据泵导入导出\"><a href=\"#expdp和impdp创建数据泵导入导出\" class=\"headerlink\" title=\"expdp和impdp创建数据泵导入导出 **\"></a><strong><strong>expdp和impdp创建数据泵导入导出</strong></strong> <em>**</em></h3><p><a name=\"f0c6d9cb\"></a></p>\n<h4 id=\"需要先创建数据泵\"><a href=\"#需要先创建数据泵\" class=\"headerlink\" title=\"需要先创建数据泵\"></a><strong><strong>需要先创建数据泵</strong></strong></h4><p>数据泵，说白了就是指定一个目录给oracle，但是oracle不会帮你创建的，需要自己先实际地创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  查看所有数据泵地址</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dba_directories;<span class=\"comment\"># 创建数据泵，数据泵地址即为你的导出导入地址文件地址</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">directory</span> myname <span class=\"keyword\">as</span> <span class=\"string\">'D:\\temp\\数据泵地址'</span>;<span class=\"comment\"># 授予权限 sshe这个用户可读可写</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">read</span>,write <span class=\"keyword\">on</span> <span class=\"keyword\">directory</span> dpdata1 <span class=\"keyword\">to</span> sshe;</span><br><span class=\"line\"></span><br><span class=\"line\">sql&gt;--可以使用以下语句查看目录操作权限</span><br><span class=\"line\">sql&gt;  SELECT privilege, directory_name, DIRECTORY_PATH FROM user_tab_privs t, all_directories d WHERE t.table_name(+) = d.directory_name ORDER BY 2, 1;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 数据泵地址以及文件dmp需要自己创建<br><a name=\"837cb31c\"></a></p>\n<h4 id=\"导出数据（expdp）\"><a href=\"#导出数据（expdp）\" class=\"headerlink\" title=\"导出数据（expdp）\"></a><strong><strong>导出数据（expdp）</strong></strong></h4><p>这种数据泵效率非常高，但是使用这种数据泵导出的数据，<strong><strong>一般情况下只在本机导出</strong></strong>，需要用impdp导入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem my_dir是数据泵名称</span><br><span class=\"line\"></span><br><span class=\"line\">rem exclude table:&quot;in(表名,列名2，……)&quot;不导出某些表</span><br><span class=\"line\"></span><br><span class=\"line\">expdp test&#x2F;test@orcl directory&#x3D;my_dir dumpfile&#x3D;my.dmp exclude&#x3D;table:\\&quot;in \\(\\&#39;DEPT\\&#39;,\\&#39;EMP\\&#39;\\)\\&quot; SCHEMAS&#x3D;FSJSCX</span><br></pre></td></tr></table></figure>\n<p><a name=\"Impdp\"></a></p>\n<h4 id=\"Impdp\"><a href=\"#Impdp\" class=\"headerlink\" title=\"Impdp\"></a><strong><strong>Impdp</strong></strong></h4><p>跟expdp的语法格式差不多</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impdp test&#x2F;test@orcl DIRECTORY&#x3D;my_dir  DUMPFILE&#x3D;my.dmp SCHEMAS&#x3D;test logfile&#x3D;%logfile%</span><br></pre></td></tr></table></figure>\n<p><a name=\"d303267a\"></a></p>\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a><strong><strong>问题：</strong></strong></h5><p><a name=\"29398c59\"></a></p>\n<h6 id=\"这些对象由-FSZJZ-导出-而不是当前用户\"><a href=\"#这些对象由-FSZJZ-导出-而不是当前用户\" class=\"headerlink\" title=\"这些对象由 FSZJZ 导出, 而不是当前用户\"></a><strong><strong>这些对象由 FSZJZ 导出, 而不是当前用户</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117805403-46bf4a8c-9f04-4d1a-9def-916cf1fd0a66.png#align=left&amp;display=inline&amp;height=134&amp;name=image.png&amp;originHeight=134&amp;originWidth=517&amp;size=10915&amp;status=done&amp;width=517\" alt=\"image.png\"><br>导出是哪个用户，导入时用户也要相同，需要自己再创建一个用户<br><br><a name=\"2e846665\"></a></p>\n<h6 id=\"只有管理员用户，才可以导入\"><a href=\"#只有管理员用户，才可以导入\" class=\"headerlink\" title=\"只有管理员用户，才可以导入\"></a><strong><strong>只有管理员用户，才可以导入</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117815821-b03a30e3-3157-4e16-8e5d-4cfb4766f698.png#align=left&amp;display=inline&amp;height=80&amp;name=image.png&amp;originHeight=80&amp;originWidth=412&amp;size=4702&amp;status=done&amp;width=412\" alt=\"image.png\"><br><a name=\"5b692eb8\"></a></p>\n<h6 id=\"ora-28759-无法打开文件\"><a href=\"#ora-28759-无法打开文件\" class=\"headerlink\" title=\"ora-28759 无法打开文件\"></a><strong><strong>ora-28759 无法打开文件</strong></strong></h6><p>以下这两句可能在不同的操作系统，支持不同，不太清楚，我服务器，两个都是sever2008，但是只有一个报这个错误，这个报错确实跟用户连接有关系，<strong><strong>最好是采用second</strong></strong><br><br><a name=\"88e73bd4\"></a></p>\n<h3 id=\"sqlplus-远程连接数据库\"><a href=\"#sqlplus-远程连接数据库\" class=\"headerlink\" title=\"sqlplus 远程连接数据库\"></a><strong><strong>sqlplus 远程连接数据库</strong></strong></h3><p><a name=\"ce1ec2ce\"></a></p>\n<h4 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a><strong><strong>远程连接</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：sqlplus 用户名&#x2F;密码@ip地址[:端口]&#x2F;service_name [as sysdba]</span><br><span class=\"line\"></span><br><span class=\"line\">示例：sqlplus sys&#x2F;pwd@ip:1521&#x2F;test as sysdba</span><br></pre></td></tr></table></figure>\n<p><a name=\"0dfbe902\"></a></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong><strong>常用命令</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt;set colsep&#39; &#39;;　　　　 &#x2F;&#x2F;-域输出分隔符</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set echo off;　　　　 &#x2F;&#x2F;显示start启动的脚本中的每个sql命令，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set echo on              &#x2F;&#x2F;设置运行命令是是否显示语句</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set feedback on;       &#x2F;&#x2F;设置显示“已选择XX行”</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set feedback off;　    &#x2F;&#x2F;回显本次sql命令处理的记录条数，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set heading off;　　 &#x2F;&#x2F;输出域标题，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set pagesize 0;　　    &#x2F;&#x2F;输出每页行数，缺省为24,为了避免分页，可设定为0。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set linesize 80;　　   &#x2F;&#x2F;输出一行字符个数，缺省为80</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set numwidth 12;　    &#x2F;&#x2F;输出number类型域长度，缺省为10</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set termout off;　　   &#x2F;&#x2F;显示脚本中的命令的执行结果，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set trimout on;　　　&#x2F;&#x2F;去除标准输出每行的拖尾空格，缺省为off</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set trimspool on;　　&#x2F;&#x2F;去除重定向（spool）输出每行的拖尾空格，缺省为off</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set serveroutput on; &#x2F;&#x2F;设置允许显示输出类似dbms_output</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set timing on;          &#x2F;&#x2F;设置显示“已用时间：XXXX”</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set autotrace on;    &#x2F;&#x2F;设置允许对执行的sql进行分析</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set verify off;           &#x2F;&#x2F;可以关闭和打开提示确认信息old 1和new 1的显示.</span><br></pre></td></tr></table></figure>\n<p>导出结果到文本：<br>spool<spool_flat_file><br>例如：spool d:\\Spool_flatquery.txt<br>这样，SQL*Plus将把所有的输出以及在屏幕上的命令等都指定给该文件。<br>执行查询输出。此时，系统并没有把结果保存到文件中，而是保存到缓冲区中。<br>查询结束后，关闭文件即可。命令格式为：spool off。<br><a name=\"df0cbcf7\"></a></spool_flat_file></p>\n<h3 id=\"oracle之jdbc连接oracle\"><a href=\"#oracle之jdbc连接oracle\" class=\"headerlink\" title=\"oracle之jdbc连接oracle\"></a><strong><strong>oracle之jdbc连接oracle</strong></strong></h3><p><a name=\"b5f7449a\"></a></p>\n<h4 id=\"使用sid方式：\"><a href=\"#使用sid方式：\" class=\"headerlink\" title=\"使用sid方式：\"></a><strong><strong>使用sid方式：</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@host:port:SID </span><br><span class=\"line\"></span><br><span class=\"line\">Example: jdbc:oracle:thin:@localhost:1521:orcl</span><br></pre></td></tr></table></figure>\n<p><a name=\"e0db0567\"></a></p>\n<h4 id=\"使用服务名方式\"><a href=\"#使用服务名方式\" class=\"headerlink\" title=\"使用服务名方式\"></a><strong><strong>使用服务名方式</strong></strong></h4><p>使用服务名的方式，这种格式是Oracle 推荐的格式，因为对于集群来说，每个节点的SID 是不一样的，但是SERVICE_NAME 确可以包含所有节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@&#x2F;&#x2F;host:port&#x2F;service_name</span><br><span class=\"line\"></span><br><span class=\"line\">Example:jdbc:oracle:thin:@&#x2F;&#x2F;localhost:1521&#x2F;orcl.city.com</span><br></pre></td></tr></table></figure>\n<p><a name=\"859540a4\"></a></p>\n<h4 id=\"使用TNSName\"><a href=\"#使用TNSName\" class=\"headerlink\" title=\"使用TNSName \"></a><strong><strong>使用TNSName </strong></strong></h4><p>使用<a href=\"\">TNSName </a>， 要实现这种连接方式首先要建立tnsnames.ora文件，然后通过System.setProperty指明这个文件路径。再通过上面URL中的@符号指定文件中的要使用到的资源。<br>这种格式我现在水平几乎没见过，对于我来说用得到这种的情况并不多吧。当然既然是通过配置文件来读取指定资源肯定也可以直接将资源拿出来放在URL中，直接放在URL中的URL模版是下面这样的（tnsnames.ora这个文件中放的就是@符号后面的那一段代码，当然用文件的好处就是可以配置多个，便于管理）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@TNSName </span><br><span class=\"line\"></span><br><span class=\"line\">Example: jdbc:oracle:thin:@TNS_ALIAS_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">jdbc:oracle:thin:@(DESCRIPTION&#x3D;(ADDRESS_LIST&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D; TCP)(HOST&#x3D;hostA)(PORT&#x3D; 1522))(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;your host)(PORT&#x3D;1521)))(SOURCE_ROUTE&#x3D;yes)(CONNECT_DATA&#x3D;(SERVICE_NAME&#x3D;your service_name)))</span><br></pre></td></tr></table></figure>\n<p><a name=\"efbc27b9\"></a></p>\n<h2 id=\"Oracle-obj（plsql中解释为对象）\"><a href=\"#Oracle-obj（plsql中解释为对象）\" class=\"headerlink\" title=\"Oracle obj（plsql中解释为对象）\"></a><strong><strong>Oracle obj（plsql中解释为对象）</strong></strong></h2><p><a name=\"019aaceb\"></a></p>\n<h4 id=\"Function-函数\"><a href=\"#Function-函数\" class=\"headerlink\" title=\"Function 函数\"></a><strong><strong>Function 函数</strong></strong></h4><p><a name=\"d283ab83\"></a></p>\n<h4 id=\"Procedure-存储过程\"><a href=\"#Procedure-存储过程\" class=\"headerlink\" title=\"Procedure 存储过程\"></a><strong><strong>Procedure 存储过程</strong></strong></h4><p><a name=\"ea6f3b87-1\"></a></p>\n<h5 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"https://www.cnblogs.com/helong/articles/2093807.html\" target=\"_blank\" rel=\"noopener\">Oracle创建存储过程、创建函数、创建包——博客园@helong</a> <br><a href=\"https://blog.csdn.net/u010109335/article/details/60577055\" target=\"_blank\" rel=\"noopener\">ORACLE执行存储过程权限不足——CSDN@He之涅槃</a><br><br><a name=\"e3127cc1\"></a></p>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><strong><strong>格式</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure procedure_name(Name in out type, Name in out type, ...) isbegin</span><br><span class=\"line\"></span><br><span class=\"line\">  end procedure_name;</span><br></pre></td></tr></table></figure>\n<p><a name=\"1a63ac23\"></a></p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong><strong>示例</strong></strong></h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--自动创建表格，并update数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dbms_output.put_line()需要先在command（命令行界面）“set serverout on ”打开输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">procedure</span> update_qylxid_of_null_for_rygx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Authid</span> <span class=\"keyword\">Current_User</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">is</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_date <span class=\"built_in\">varchar2</span>(<span class=\"number\">8</span>);<span class=\"comment\">--定义日期变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_sql varchar2(2000);<span class=\"comment\">--定义动态sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_tablename varchar2(20);<span class=\"comment\">--定义动态表名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">select</span> to_char(<span class=\"keyword\">sysdate</span>,<span class=\"string\">'yyyymmdd'</span>) <span class=\"keyword\">into</span> v_date <span class=\"keyword\">from</span> dual;<span class=\"comment\">--取日期变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">   v_tablename := 'T_'||v_date;<span class=\"comment\">--为动态表命名</span></span><br><span class=\"line\"></span><br><span class=\"line\">   v_sql := '<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">'||v_tablename||'</span><span class=\"keyword\">as</span> <span class=\"keyword\">select</span>*<span class=\"keyword\">from</span> t_qy<span class=\"string\">';--为动态sql赋值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   dbms_output.put_line(v_sql);--打印sql语句</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   execute immediate v_sql;--执行动态sql</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   v_sql:='</span><span class=\"keyword\">update</span> t_qy t <span class=\"keyword\">set</span> t.LXID=(<span class=\"keyword\">select</span> LXID <span class=\"keyword\">from</span> t_qy_qy lx <span class=\"keyword\">where</span> lx.bh=t.bh <span class=\"keyword\">and</span> lx.LX =t.dm) <span class=\"keyword\">where</span>  t.lxid <span class=\"keyword\">is</span> <span class=\"literal\">null</span><span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   dbms_output.put_line(v_sql);--打印sql语句</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   execute immediate v_sql;--执行动态sql</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">end update_qylxid_of_null_for_rygx;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"50d52dd9\"></a></p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a><strong><strong>常见问题</strong></strong></h5><p><a name=\"1fc98647\"></a></p>\n<h6 id=\"ORACLE执行存储过程权限不足\"><a href=\"#ORACLE执行存储过程权限不足\" class=\"headerlink\" title=\"ORACLE执行存储过程权限不足\"></a><strong><strong>ORACLE执行存储过程权限不足</strong></strong></h6><p><a href=\"https://blog.csdn.net/u010109335/article/details/60577055\" target=\"_blank\" rel=\"noopener\">ORACLE执行存储过程权限不足——CSDN@He之涅槃</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--需要增加Authid Current_User</span><br><span class=\"line\"></span><br><span class=\"line\">--AUTHID DEFINER （定义者权限）：指编译存储对象的所有者。也是默认权限模式。</span><br><span class=\"line\"></span><br><span class=\"line\">--AUTHID CURRENT_USER（调用者权限）：指拥有当前会话权限的模式，这可能和当前登录用户相同或不同(alter session set current_schema 可以改变调用者Schema)create or replace PROCEDURE 存储过程名称</span><br><span class=\"line\"></span><br><span class=\"line\">Authid Current_User</span><br><span class=\"line\"></span><br><span class=\"line\">IS </span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">……；</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></figure>\n<p><a name=\"618d4aaf\"></a></p>\n<h4 id=\"Database-link-数据库链接\"><a href=\"#Database-link-数据库链接\" class=\"headerlink\" title=\"Database link 数据库链接\"></a><strong><strong>Database link 数据库链接</strong></strong></h4><p>即在需要在两个不同的数据库中连接表或者查询数据时，可创建数据库链接<br><a name=\"481feccf\"></a></p>\n<h5 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a><strong><strong>如何使用</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--user_tables 是DBLINK_test所链接的用户的表</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user_tables@DBLINK_test;</span><br><span class=\"line\"></span><br><span class=\"line\">--链接可以方便于多个数据库用户关联查询数据，非常方便,mytable 是你当前登录用户的表</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user_tables@DBLINK_test t,mytable t2 where t2.id&#x3D;t.id;</span><br></pre></td></tr></table></figure>\n<p><a name=\"ea6f3b87-2\"></a></p>\n<h5 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"#best-answer-746405041\">oracle中的database link如何使用——百度经验@wangzhiqing999</a><br><a name=\"345cd1b6\"></a></p>\n<h5 id=\"oracle-sql创建\"><a href=\"#oracle-sql创建\" class=\"headerlink\" title=\"oracle sql创建\"></a><strong><strong>oracle sql创建</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- Drop existing old  database link --DBLINK_test是database link的名称drop database link DBLINK_test;-- Create new database link -- other_db 为用户名 pwd为密码create database link DBLINK_test</span><br><span class=\"line\"></span><br><span class=\"line\">  connect to other_db IDENTIFIED BY  pwd</span><br><span class=\"line\"></span><br><span class=\"line\">  using &#39;(DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">(CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(SERVICE_NAME &#x3D; orcl)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">)&#39;;--查询 database link select * from dba_db_links;</span><br></pre></td></tr></table></figure>\n<p>如果创建全局dblink，必须使用systm或sys用户，在database前加public</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  public  database link DBLINK_test</span><br><span class=\"line\"></span><br><span class=\"line\">  connect to other_db IDENTIFIED BY  pwd</span><br><span class=\"line\"></span><br><span class=\"line\">  using &#39;(DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">(CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(SERVICE_NAME &#x3D; orcl)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">)&#39;;</span><br></pre></td></tr></table></figure>\n<p><a name=\"5f005e3c\"></a></p>\n<h5 id=\"通过plsql创建\"><a href=\"#通过plsql创建\" class=\"headerlink\" title=\"通过plsql创建\"></a><strong><strong>通过plsql创建</strong></strong></h5><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118003862-eccf0b6e-7132-4106-aa23-e2b350ce0b5b.png#align=left&amp;display=inline&amp;height=408&amp;name=image.png&amp;originHeight=408&amp;originWidth=327&amp;size=22765&amp;status=done&amp;width=327\" alt=\"image.png\"> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118072979-b08dec8d-fd6a-4d8f-99cc-50fbc1e4e75c.png#align=left&amp;display=inline&amp;height=376&amp;name=image.png&amp;originHeight=376&amp;originWidth=971&amp;size=30163&amp;status=done&amp;width=971\" alt=\"image.png\"> <br><br><a name=\"146704a5\"></a></p>\n<h2 id=\"常用函数及sql实例\"><a href=\"#常用函数及sql实例\" class=\"headerlink\" title=\"常用函数及sql实例\"></a><strong><strong>常用函数及sql实例</strong></strong></h2><p><a name=\"ea6f3b87-3\"></a></p>\n<h3 id=\"参考链接-3\"><a href=\"#参考链接-3\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h3><p><a href=\"http://www.cnblogs.com/harvey888/p/5957656.html\" target=\"_blank\" rel=\"noopener\">Oracle中replace函数的使用</a><br><a href=\"https://zhidao.baidu.com/question/14756835.html\" target=\"_blank\" rel=\"noopener\">Oracle round函数是什么意思?怎么运用?</a><br><a href=\"https://zhidao.baidu.com/question/552089573.html\" target=\"_blank\" rel=\"noopener\">oracle的nvl</a><br><a href=\"http://www.cnblogs.com/vinsonLu/p/3512526.html\" target=\"_blank\" rel=\"noopener\">Oracle 中 decode 函数用法</a><br><a href=\"http://www.cnblogs.com/gaojing/archive/2008/11/07/1328657.html\" target=\"_blank\" rel=\"noopener\">[oracle] to_date() 与 to_char() 日期和字符串转换</a><br><a href=\"http://blog.csdn.net/ziwen00/article/details/8685858\" target=\"_blank\" rel=\"noopener\">Oracle的Cast的用法</a> <br><a href=\"https://www.cnblogs.com/wangfuyou/p/6605166.html\" target=\"_blank\" rel=\"noopener\">Oracle 大小写转换函数——博客园@Twang</a><br><a name=\"ca48b68b\"></a></p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a><strong><strong>常用函数</strong></strong></h3><p><a name=\"2a18f8a8\"></a></p>\n<h4 id=\"判断是否为数字\"><a href=\"#判断是否为数字\" class=\"headerlink\" title=\"判断是否为数字\"></a><strong><strong>判断是否为数字</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注意只能判断纯数字，不带小数,判断带小数方式请查看下文“常用sql”创建函数</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT nvl2(translate(&#39;123&#39;,&#39;&#x2F;1234567890&#39;,&#39;&#x2F;&#39;),&#39;CHAR&#39;,&#39;NUMBER&#39;)   </span><br><span class=\"line\"></span><br><span class=\"line\">FROM   dual ;</span><br></pre></td></tr></table></figure>\n<p><a name=\"da5a6765\"></a></p>\n<h4 id=\"add-months-日期增加，以月为单位\"><a href=\"#add-months-日期增加，以月为单位\" class=\"headerlink\" title=\"add_months()日期增加，以月为单位\"></a><strong><strong>add_months()日期增加，以月为单位</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_months(sysdate,12)--增加一年</span><br><span class=\"line\"></span><br><span class=\"line\">add_months(sysdate,-12)--减去一年</span><br><span class=\"line\"></span><br><span class=\"line\">sysdate+1 --加一天</span><br></pre></td></tr></table></figure>\n<p><a name=\"c79a4a1b\"></a></p>\n<h4 id=\"to-date\"><a href=\"#to-date\" class=\"headerlink\" title=\"to_date()\"></a><strong><strong>to_date()</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">to_date(&quot;要转换的字符串&quot;,&quot;转换的格式&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">to_date(t.access_date,&#39;yyyy-mm-dd hh24:mi:ss&#39;)--2005-12-25 13:25:59</span><br><span class=\"line\"></span><br><span class=\"line\">TO_DATE(&#39;17-DEC-1980&#39;, &#39;DD-MON-YYYY&#39;,&#39;NLS_DATE_LANGUAGE&#x3D;American&#39;)--日期语言</span><br></pre></td></tr></table></figure>\n<p><a name=\"b0a57818\"></a></p>\n<h4 id=\"replace替换字符\"><a href=\"#replace替换字符\" class=\"headerlink\" title=\"replace替换字符\"></a><strong><strong>replace替换字符</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(原字段，&#39;原字段旧内容&#39;,&#39;原字段新内容&#39;)--替换字符串</span><br></pre></td></tr></table></figure>\n<p><a name=\"fecd35a6\"></a></p>\n<h4 id=\"round四舍五入\"><a href=\"#round四舍五入\" class=\"headerlink\" title=\"round四舍五入\"></a><strong><strong>round四舍五入</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;round(number)&#96;&#96;round(number, decimal_places )&#96;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">number ---需要四舍五入的数字</span><br><span class=\"line\"></span><br><span class=\"line\">decimal_places ---从哪里开始四舍五入，此参数是下标，预设为0</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">select round(123.456, 0) from dual;     --- 123</span><br></pre></td></tr></table></figure>\n<p><a name=\"2510b668\"></a></p>\n<h4 id=\"nvl如果为空返回新值\"><a href=\"#nvl如果为空返回新值\" class=\"headerlink\" title=\"nvl如果为空返回新值\"></a><strong><strong>nvl如果为空返回新值</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvl(字段名，&#39;新的返回的值&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">如果提供的字段的值为空，则将返回这个新值，注意：只是返回了这个值，并不是update到表中</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> nvl(name,&#39;小明&#39;)---name为空，返回小明</span><br></pre></td></tr></table></figure>\n<p><a name=\"d623ee97\"></a></p>\n<h4 id=\"decode逻辑判断简化\"><a href=\"#decode逻辑判断简化\" class=\"headerlink\" title=\"decode逻辑判断简化\"></a><strong><strong>decode逻辑判断简化</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode(条件,值1,返回值1,值2,返回值2,...值n,返回值n,缺省值)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">该函数的含义如下：IF 条件&#x3D;值1 THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值1)</span><br><span class=\"line\"></span><br><span class=\"line\">ELSIF 条件&#x3D;值2 THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值2)</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　......</span><br><span class=\"line\"></span><br><span class=\"line\">ELSIF 条件&#x3D;值n THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值n)ELSE</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(缺省值)</span><br><span class=\"line\"></span><br><span class=\"line\">END IF</span><br><span class=\"line\"></span><br><span class=\"line\">decode(字段或字段的运算，值1，值2，值3）</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">该函数的含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\"> 这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回值3</span><br><span class=\"line\"></span><br><span class=\"line\"> 当然值1，值2，值3也可以是表达式，这个函数使得某些sql语句简单了许多</span><br><span class=\"line\"> 注意：值2和值3的数据类型必须一致</span><br></pre></td></tr></table></figure>\n<p><a name=\"4e7db3ce\"></a></p>\n<h4 id=\"sys-guid-生成唯一32位字符串\"><a href=\"#sys-guid-生成唯一32位字符串\" class=\"headerlink\" title=\"sys_guid()生成唯一32位字符串\"></a><strong><strong>sys_guid()生成唯一32位字符串</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys_guid()</span><br></pre></td></tr></table></figure>\n<p><a name=\"774534e1\"></a></p>\n<h4 id=\"CAST-expr-AS-type-name-数值类型转换\"><a href=\"#CAST-expr-AS-type-name-数值类型转换\" class=\"headerlink\" title=\"CAST(expr AS type_name) 数值类型转换\"></a><strong><strong>CAST(expr AS type_name) 数值类型转换</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--例</span><br><span class=\"line\"></span><br><span class=\"line\">cast(R.MONTH as int)--将月份转换为整型类型</span><br></pre></td></tr></table></figure>\n<p><a name=\"5b106349\"></a></p>\n<h4 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a><strong><strong>大小写转换</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select UPPER(&#39;Test&#39;) as u from dual; --转大写</span><br><span class=\"line\"></span><br><span class=\"line\">select LOWER(&#39;Test&#39;) as l from dual;--转小写</span><br></pre></td></tr></table></figure>\n<p><a name=\"7db7c5f3\"></a></p>\n<h4 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a><strong><strong>截取字符串</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--截取身份证出生日期</span><br><span class=\"line\"></span><br><span class=\"line\">to_date(substr(&#39;XXXXXXXXXXXXXXXXX&#39;,7,8),&#39;YYYYMMDD&#39;)</span><br></pre></td></tr></table></figure>\n<p><a name=\"425d8a49\"></a></p>\n<h4 id=\"删除左右字符、添加左右字符\"><a href=\"#删除左右字符、添加左右字符\" class=\"headerlink\" title=\"删除左右字符、添加左右字符\"></a><strong><strong>删除左右字符、添加左右字符</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ltrim(原字符,&#39;需要删除的字符&#39;)--删除左边字符</span><br><span class=\"line\"></span><br><span class=\"line\">rtrim(原字符,&#39;需要删除的字符&#39;)--删除右边字符</span><br><span class=\"line\"></span><br><span class=\"line\">LPAD(原字符,&#39;需要添加的字符&#39;) --添加字符在左边</span><br><span class=\"line\"></span><br><span class=\"line\">RPAD(原字符,&#39;需要添加的字符&#39;) --添加字符在右边--例</span><br><span class=\"line\"></span><br><span class=\"line\">ltrim(&#39;abcdefg&#39;,&#39;abc&#39;)--删除左边abc，输出defg</span><br><span class=\"line\"></span><br><span class=\"line\">ltrim(&#39;abqwert&#39;,&#39;abc&#39;)--删除左边ab，输出qwert</span><br></pre></td></tr></table></figure>\n<p><a name=\"349ddcfc\"></a></p>\n<h3 id=\"Sql实例\"><a href=\"#Sql实例\" class=\"headerlink\" title=\"Sql实例\"></a><strong><strong>Sql实例</strong></strong></h3><p><a name=\"89f6884e\"></a></p>\n<h4 id=\"判断数字（创建函数）\"><a href=\"#判断数字（创建函数）\" class=\"headerlink\" title=\"判断数字（创建函数）**\"></a><strong><strong>判断数字</strong></strong>（<strong><strong>创建函数</strong></strong>）<em>**</em></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace function isNumber(p in varchar2)return number</span><br><span class=\"line\"></span><br><span class=\"line\">is</span><br><span class=\"line\"></span><br><span class=\"line\">result number;begin</span><br><span class=\"line\"></span><br><span class=\"line\">result :&#x3D; to_number(p);return 1;</span><br><span class=\"line\"></span><br><span class=\"line\">exceptionwhen VALUE_ERROR then return 0;end;</span><br></pre></td></tr></table></figure>\n<p>导出表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT B.TABLE_NAME     AS &quot;表名&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       C.COMMENTS       AS &quot;表说明&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.COLUMN_ID      AS &quot;字段序号&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.COLUMN_NAME    AS &quot;字段名&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_TYPE      AS &quot;字段数据类型&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_LENGTH    AS &quot;数据长度&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_PRECISION AS &quot;整数位&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_SCALE     AS &quot;小数位&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       A.COMMENTS       AS &quot;字段说明&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  FROM ALL_COL_COMMENTS A, ALL_TAB_COLUMNS B, ALL_TAB_COMMENTS C</span><br><span class=\"line\"></span><br><span class=\"line\">WHERE A.TABLE_NAME IN (SELECT U.TABLE_NAME FROM USER_ALL_TABLES U)</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.OWNER &#x3D; B.OWNER</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.TABLE_NAME &#x3D; B.TABLE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.COLUMN_NAME &#x3D; B.COLUMN_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND C.TABLE_NAME &#x3D; A.TABLE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND C.OWNER &#x3D; A.OWNER</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.OWNER &#x3D; &#39;PYE&#39;ORDER BY A.TABLE_NAME, B.COLUMN_ID;</span><br></pre></td></tr></table></figure>\n<p><a name=\"abcdb7f1\"></a></p>\n<h4 id=\"修改不符合的时间，修改年份和月份\"><a href=\"#修改不符合的时间，修改年份和月份\" class=\"headerlink\" title=\"**修改不符合的时间，修改年份和月份\"></a><strong>**修改不符合的时间，修改年份和月份</strong></h4><p>-</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-更新有&#x2F;的时间、有两个&#x2F;的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))),substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime)),(length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">--更新有&#x2F;的时间、有两个&#x2F;的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">--更新有&#x2F;的时间、有两个-的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;-&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;-&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">--更新有-的时间、有两个-的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;-&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;-&#39;,&#39;&#39;)))&#x3D;1</span><br></pre></td></tr></table></figure>\n<p><a name=\"37a3a350\"></a></p>\n<h4 id=\"查看所有表空间及容量\"><a href=\"#查看所有表空间及容量\" class=\"headerlink\" title=\"查看所有表空间及容量\"></a>查看所有表空间及容量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DBF.TABLESPACE_NAME,</span><br><span class=\"line\">       DBF.TOTALSPACE &quot;总量(M)&quot;,</span><br><span class=\"line\">       DBF.TOTALBLOCKS AS 总块数,</span><br><span class=\"line\">       DBF.TOTALSPACE-DFS.FREESPACE &quot;使用量(M)&quot;,</span><br><span class=\"line\">       DBF.TOTALBLOCKS-DFS.FREEBLOCKS AS 使用块数,      </span><br><span class=\"line\">       DFS.FREESPACE &quot;剩余总量(M)&quot;,</span><br><span class=\"line\">       DFS.FREEBLOCKS &quot;剩余块数&quot;,</span><br><span class=\"line\">       (DFS.FREESPACE &#x2F; DBF.TOTALSPACE) * 100 &quot;空闲比例&quot;</span><br><span class=\"line\">  FROM (SELECT T.TABLESPACE_NAME,</span><br><span class=\"line\">               SUM(T.BYTES) &#x2F; 1024 &#x2F; 1024 TOTALSPACE,</span><br><span class=\"line\">               SUM(T.BLOCKS) TOTALBLOCKS</span><br><span class=\"line\">          FROM DBA_DATA_FILES T</span><br><span class=\"line\">         GROUP BY T.TABLESPACE_NAME) DBF,</span><br><span class=\"line\">       (SELECT TT.TABLESPACE_NAME,</span><br><span class=\"line\">               SUM(TT.BYTES) &#x2F; 1024 &#x2F; 1024 FREESPACE,</span><br><span class=\"line\">               SUM(TT.BLOCKS) FREEBLOCKS</span><br><span class=\"line\">          FROM DBA_FREE_SPACE TT</span><br><span class=\"line\">         GROUP BY TT.TABLESPACE_NAME) DFS</span><br><span class=\"line\"> WHERE TRIM(DBF.TABLESPACE_NAME) &#x3D; TRIM(DFS.TABLESPACE_NAME);</span><br></pre></td></tr></table></figure>\n<p><a name=\"c60f6138\"></a></p>\n<h4 id=\"oracle表空间不足时处理\"><a href=\"#oracle表空间不足时处理\" class=\"headerlink\" title=\"oracle表空间不足时处理\"></a>oracle表空间不足时处理</h4><p>表空间数据文件最大是32G，也就是说扩容最大为32G<br><a name=\"e7a0542d\"></a></p>\n<h5 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h5><p><a href=\"https://blog.csdn.net/love_java_cc/article/details/52857363\" target=\"_blank\" rel=\"noopener\">oracle 11g 导入数据库，表空间超过32G的解决办法——CSDN@冷静cc</a>  <br><a href=\"https://jingyan.baidu.com/article/48b37f8d6ca1eb1a646488dc.html\" target=\"_blank\" rel=\"noopener\">oracle 表空间不足解决办法大全——百度经验@javababy5</a></p>\n<p><a name=\"b7cc6308\"></a></p>\n<h5 id=\"第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\"><a href=\"#第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\" class=\"headerlink\" title=\"第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\"></a>第一，可能表空间还未达到最大扩容内存，但未设置自动扩容</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--修改数据文件内存50m为当前数据文件的内存大小</span><br><span class=\"line\">alter database datafile &#39;D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF&#39; resize 50m;</span><br><span class=\"line\">--增加数据文件自动扩容功能,每次扩容为50m，最大不会超过32G</span><br><span class=\"line\">alterdatabase datafile &#39;D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF&#39; autoextend onnext 50m maxsize 32767m;</span><br></pre></td></tr></table></figure>\n<p><a name=\"e3470cfa\"></a></p>\n<h5 id=\"第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\"><a href=\"#第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\" class=\"headerlink\" title=\"第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\"></a>第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--USERS是你的表空间名，H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf可以改为你的任意地址，最好放在一起方便，</span><br><span class=\"line\">--每次扩容50m，最大32G</span><br><span class=\"line\">alter tablespace USERS  </span><br><span class=\"line\">add datafile &#39;H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf&#39; size 50m </span><br><span class=\"line\">autoextend on next 50m maxsize 32767m;</span><br></pre></td></tr></table></figure>\n<p><a name=\"5dc99f6e\"></a></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a><strong><strong>问题</strong></strong></h2><p><a name=\"122f6443\"></a></p>\n<h3 id=\"oracle之违反唯一约束条件\"><a href=\"#oracle之违反唯一约束条件\" class=\"headerlink\" title=\"oracle之违反唯一约束条件\"></a><strong><strong>oracle之违反唯一约束条件</strong></strong></h3><p>出现这个原因，除了自己手动新增ID的情况外，还有就是引用自己创建的sequance，导入新表数据后，没有将新的sequance导入进来，可以将新sequance导入进来，也可以自动手动修改<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118277133-fbbfbc99-569b-4a1e-ad5a-cf655ef6f786.png#align=left&amp;display=inline&amp;height=199&amp;name=image.png&amp;originHeight=199&amp;originWidth=822&amp;size=21888&amp;status=done&amp;width=822\" alt=\"image.png\"> <br><br><a name=\"e2d3e6c0\"></a></p>\n<h3 id=\"修改字符集\"><a href=\"#修改字符集\" class=\"headerlink\" title=\"修改字符集\"></a><strong><strong>修改字符集</strong></strong></h3><p><a name=\"ea6f3b87-4\"></a></p>\n<h4 id=\"参考链接-4\"><a href=\"#参考链接-4\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h4><p><a href=\"https://link.jianshu.com/?t=https://zhidao.baidu.com/question/134444813.html\" target=\"_blank\" rel=\"noopener\">如何改oracle AL16UTF16为AL32UTF8——百度知道</a><br><a href=\"https://link.jianshu.com/?t=http://www.itpub.net/thread-505857-1-1.html%23pid3728655\" target=\"_blank\" rel=\"noopener\">建库时AL16UTF16字符集怎么设置？——出处: ITPUB论坛－中国最专业的IT技术社区</a><br><strong><strong>操作：</strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Microsoft Windows [版本 6.1.7601]</span><br><span class=\"line\"></span><br><span class=\"line\">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\Administrator&gt;sqlplus &#x2F; as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 11.2.0.1.0 Production on 星期四 1月 11 12:00:49 2018</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2010, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">连接到:</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class=\"line\"></span><br><span class=\"line\">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; shutdown immediate</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">已经卸载数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; startup mount</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经启动。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Total System Global Area 3290345472 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Fixed Size                  2180224 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Variable Size            2164263808 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Database Buffers         1107296256 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Redo Buffers               16605184 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">数据库装载完毕。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM ENABLE RESTRICTED SESSION;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES&#x3D;0;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM SET AQ_TM_PROCESSES&#x3D;0;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE OPEN;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">数据库已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE CHARACTER SET AL32UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE CHARACTER SET AL32UTF8</span><br><span class=\"line\"></span><br><span class=\"line\">*</span><br><span class=\"line\"></span><br><span class=\"line\">第 1 行出现错误:</span><br><span class=\"line\"></span><br><span class=\"line\">ORA-12712: 新字符集必须为旧字符集的超集</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE CHARACTER SET AL16UTF16;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE CHARACTER SET AL16UTF16</span><br><span class=\"line\"></span><br><span class=\"line\">*</span><br><span class=\"line\"></span><br><span class=\"line\">第 1 行出现错误:</span><br><span class=\"line\"></span><br><span class=\"line\">ORA-12712: 新字符集必须为旧字符集的超集# ALTER DATABASE national CHARACTER SET AL16UTF16;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE character set INTERNAL_USE AL32UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">数据库已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; SHUTDOWN IMMEDIATE;</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">已经卸载数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; STARTUP</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经启动。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Total System Global Area 3290345472 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Fixed Size                  2180224 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Variable Size            2164263808 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Database Buffers         1107296256 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Redo Buffers               16605184 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">数据库装载完毕。</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经打开。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;</span><br></pre></td></tr></table></figure>\n<p>ALTER DATABASE character set INTERNAL_USE AL32UTF8;<br>INTERNAL_USE有点像是强制修改，其他用户角色可能会报错<br><a name=\"bf52b411\"></a></p>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a><strong><strong>其他问题</strong></strong></h4><p><a name=\"3e2e31b2\"></a></p>\n<h5 id=\"AL16UTF16不能作为character-set\"><a href=\"#AL16UTF16不能作为character-set\" class=\"headerlink\" title=\"AL16UTF16不能作为character set\"></a><strong><strong>AL16UTF16不能作为character set</strong></strong></h5><p>AL16UTF16 不能用做数据库的character set，只能用做national character set 。<br>character set必须是single byte 7-bit ASCII或是单字节EBCDIC的子集，因此fixed width的多字节字符集(AL16UTF16)就不能做为character set。<br> <br>你可以用如下这样用的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHARACTER SET US7ASCII NATIONAL CHARACTER SET AL16UTF16</span><br><span class=\"line\"></span><br><span class=\"line\">或是</span><br><span class=\"line\"></span><br><span class=\"line\">CHARACTER SET zhs16cgb231280  NATIONAL CHARACTER SET AL16UTF16</span><br></pre></td></tr></table></figure>\n<p><a name=\"46b308ed\"></a></p>\n<h3 id=\"如何修改服务名service-name\"><a href=\"#如何修改服务名service-name\" class=\"headerlink\" title=\"如何修改服务名service_name\"></a><strong><strong>如何修改服务名service_name</strong></strong></h3><p><a name=\"bd1bf7e7\"></a></p>\n<h5 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a><strong><strong>转载链接</strong></strong></h5><p><a href=\"https://link.jianshu.com/?t=https://www.2cto.com/kf/201311/259856.html\" target=\"_blank\" rel=\"noopener\">如何修改 service_name</a><br><a name=\"d48898d5\"></a></p>\n<h5 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a><strong><strong>例：</strong></strong></h5><p><a name=\"64162c1b\"></a></p>\n<h6 id=\"service-name原有环境：\"><a href=\"#service-name原有环境：\" class=\"headerlink\" title=\"service_name原有环境：\"></a><strong><strong>service_name原有环境：</strong></strong></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sid： mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">global_name：mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">service_names： MYNEWDB</span><br><span class=\"line\"></span><br><span class=\"line\">db_domain  ：</span><br><span class=\"line\"></span><br><span class=\"line\">db_name：mynewdb</span><br></pre></td></tr></table></figure>\n<p><a name=\"f0740534\"></a></p>\n<h6 id=\"需要修改如下：\"><a href=\"#需要修改如下：\" class=\"headerlink\" title=\"需要修改如下：\"></a><strong><strong>需要修改如下：</strong></strong></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global_name：mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">service_names： test</span><br><span class=\"line\"></span><br><span class=\"line\">db_domain  ：</span><br><span class=\"line\"></span><br><span class=\"line\">db_name：mynewdb</span><br></pre></td></tr></table></figure>\n<p><a name=\"568a025c\"></a></p>\n<h5 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a><strong><strong>方法：</strong></strong></h5><p>服务器端：<br>alter system set service_names=’test’;<br>这里采用静态注册，同时还要修改下 listener.ora</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SID_LIST_LISTENER &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">  (SID_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">    (SID_DESC &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">      (SID_NAME &#x3D; PLSExtProc)</span><br><span class=\"line\"></span><br><span class=\"line\">      (ORACLE_HOME &#x3D;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">      (PROGRAM &#x3D; extproc)</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_DESC&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">        (GLOBAL_DBNAME &#x3D; mynewdb)</span><br><span class=\"line\"></span><br><span class=\"line\">        (ORALCE_HOME &#x3D; &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_NAME &#x3D; mynewdb)</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_DESC&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">        (GLOBAL_DBNAME &#x3D; test)  -------这个是需要添加</span><br><span class=\"line\"></span><br><span class=\"line\">        (ORALCE_HOME &#x3D; &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_NAME &#x3D; mynewdb)    ------这个还是原来的实例名</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>cmd下执行命令lsnrctl reload<br>查看监听状态lsnrctl status<br>L</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SNRCTL&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Connecting to (DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;10.80.11.202)(PORT&#x3D;1521)))</span><br><span class=\"line\"></span><br><span class=\"line\">STATUS of the LISTENER</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Alias                     LISTENER</span><br><span class=\"line\"></span><br><span class=\"line\">Version                   TNSLSNR for [Linux](https:&#x2F;&#x2F;www.2cto.com&#x2F;os&#x2F;linux&#x2F;): Version 11.2.0.1.0 - Production</span><br><span class=\"line\"></span><br><span class=\"line\">Start Date                21-NOV-2013 00:09:35</span><br><span class=\"line\"></span><br><span class=\"line\">Uptime                    0 days 20 hr. 30 min. 55 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Trace Level               off</span><br><span class=\"line\"></span><br><span class=\"line\">Security                  ON: Local OS Authentication</span><br><span class=\"line\"></span><br><span class=\"line\">SNMP                      OFF</span><br><span class=\"line\"></span><br><span class=\"line\">Listener Parameter File   &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1&#x2F;network&#x2F;admin&#x2F;listener.ora</span><br><span class=\"line\"></span><br><span class=\"line\">Listener Log File         &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;diag&#x2F;tnslsnr&#x2F;oracle11g&#x2F;listener&#x2F;alert&#x2F;log.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Listening Endpoints Summary...</span><br><span class=\"line\"></span><br><span class=\"line\">  (DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;tcp)(HOST&#x3D;10.80.11.202)(PORT&#x3D;1521)))</span><br><span class=\"line\"></span><br><span class=\"line\">Services Summary...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;PLSExtProc&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;PLSExtProc&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;mynewdb&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;mynewdb&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;test&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;mynewdb&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">The command completed successfully</span><br></pre></td></tr></table></figure>\n<p>可以看到新的 Service “test” 已经可以使用了<br>客户端配置：<br>net manager 配置 服务名为 test ，ip为数据库服务器主机ip，相应端口。<br>测试连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt;  conn sys&#x2F;oracle@test as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\">已连接。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;</span><br></pre></td></tr></table></figure>\n<p>当然不使用静态注册，动态注册也可以<br><br><a name=\"3158f60d\"></a></p>\n<h3 id=\"警告日志文件\"><a href=\"#警告日志文件\" class=\"headerlink\" title=\"警告日志文件\"></a><strong><strong>警告日志文件</strong></strong></h3><p>不知道日志文件在哪的，可以使用这个命令<br>select value from v$diag_info where name=’Diag Trace’;<br>以下是我的输出地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt; select value from v$diag_info where name&#x3D;&#39;Diag Trace&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\FLYINGCLOUD\\diag\\rdbms\\odb\\odb\\trace</span><br></pre></td></tr></table></figure>\n<p><a name=\"9e2e81b7\"></a></p>\n<h2 id=\"开发工具配置及问题\"><a href=\"#开发工具配置及问题\" class=\"headerlink\" title=\"开发工具配置及问题\"></a><strong><strong>开发工具配置及问题</strong></strong></h2><p><a name=\"Plsql\"></a></p>\n<h3 id=\"Plsql\"><a href=\"#Plsql\" class=\"headerlink\" title=\"Plsql\"></a><strong><strong>Plsql</strong></strong></h3><p><a name=\"d672874c\"></a></p>\n<h4 id=\"plsql设置可显示的查询记录条数\"><a href=\"#plsql设置可显示的查询记录条数\" class=\"headerlink\" title=\"plsql设置可显示的查询记录条数\"></a><strong><strong>plsql设置可显示的查询记录条数</strong></strong></h4><p>tools-&gt;prifereces-&gt;window types-&gt;sql window-&gt;records per page<br>查询所有记录<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118425257-e4d6330a-e5f6-4e7e-932c-fb25cf372fd2.png#align=left&amp;display=inline&amp;height=591&amp;name=image.png&amp;originHeight=591&amp;originWidth=564&amp;size=92527&amp;status=done&amp;width=564\" alt=\"image.png\"><br><a name=\"5c094ab1\"></a></p>\n<h4 id=\"plsql如何查询sql执行计划\"><a href=\"#plsql如何查询sql执行计划\" class=\"headerlink\" title=\"plsql如何查询sql执行计划\"></a><strong><strong>plsql如何查询sql执行计划</strong></strong></h4><p><a href=\"https://link.jianshu.com/?t=https://jingyan.baidu.com/article/ab69b270bffc2e2ca7189fee.html\" target=\"_blank\" rel=\"noopener\">怎么使用plsql查看执行计划</a><br>执行计划可以用计划sql执行的性能<br>选中需要执行的sql语句，然后按F5，或者直接点击”执行计划”<br><a name=\"e33957e7\"></a></p>\n<h4 id=\"PLSQL工具如何远程连接数据库\"><a href=\"#PLSQL工具如何远程连接数据库\" class=\"headerlink\" title=\"PLSQL工具如何远程连接数据库\"></a><strong><strong>PLSQL工具如何远程连接数据库</strong></strong></h4><p><a name=\"ea6f3b87-5\"></a></p>\n<h5 id=\"参考链接-5\"><a href=\"#参考链接-5\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"https://link.jianshu.com/?t=https://zhidao.baidu.com/question/333852172.html\" target=\"_blank\" rel=\"noopener\">如何配置pl/sql 连接远程oracle服务器——百度知道</a><br><a name=\"d7ecf9b4\"></a></p>\n<h5 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a><strong><strong>方法1：</strong></strong></h5><p>找到oracle的安装目录。如：C:\\oracle\\product\\10.2.0\\db_1\\network\\ADMIN<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118449158-f157887f-799b-4b90-a947-2218b90f25ac.png#align=left&amp;display=inline&amp;height=30&amp;name=image.png&amp;originHeight=30&amp;originWidth=311&amp;size=2681&amp;status=done&amp;width=311\" alt=\"image.png\"> <br>添加如下内容<br>其中中文部分是需要修改的部分，除第一个“本地实例名”外，其他需要跟远程数据库管理员咨询，本地实例名就是方便自己识别数据库的一个名字，可以自定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地实例名 &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">  (DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 远程数据库IP地址)(PORT &#x3D; 远程服务器端口号))</span><br><span class=\"line\"></span><br><span class=\"line\">    (CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">      (SERVER &#x3D; DEDICATED)</span><br><span class=\"line\"></span><br><span class=\"line\">      (SERVICE_NAME &#x3D; 远程数据库服务名)</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>然后打开pl/sql就能看到自己创建的链接，如图：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118496776-446fbbd8-7f17-4ec9-be0b-219d248b2910.png#align=left&amp;display=inline&amp;height=204&amp;name=image.png&amp;originHeight=204&amp;originWidth=392&amp;size=17502&amp;status=done&amp;width=392\" alt=\"image.png\"> <br>方法2：<br> <br><br><a name=\"5d64018c\"></a></p>\n<h5 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a><strong><strong>方法2：</strong></strong></h5><p><a name=\"ef35ed63\"></a></p>\n<h6 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a><strong><strong>格式：</strong></strong></h6><p>ip:端口/sid<br><a name=\"614fc656\"></a></p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a><strong><strong>示例：</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118525263-c7c6ad21-d3fb-4563-9154-f8bc23c3f375.png#align=left&amp;display=inline&amp;height=209&amp;name=image.png&amp;originHeight=209&amp;originWidth=393&amp;size=10049&amp;status=done&amp;width=393\" alt=\"image.png\"> </p>\n","site":{"data":{}},"excerpt":"<p><a name=\"f66bd8f4\"></a></p>\n<h1 id=\"Oracle经验\"><a href=\"#Oracle经验\" class=\"headerlink\" title=\"Oracle经验**\"></a><strong><strong>O</strong></strong>ra<strong><strong>cle</strong></strong>经验<em>**</em></h1><p><a name=\"e9a9187c\"></a></p>\n<h2 id=\"申明\"><a href=\"#申明\" class=\"headerlink\" title=\"申明\"></a><strong><strong>申明</strong></strong></h2><p>本文大部分资料来自《深入理解Oracle 12c数据库管理》，但是也有自己的个人观点，大家也去看这本书<br><a name=\"e05dce83\"></a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><strong><strong>简介</strong></strong></h2><pre><code>Oracle数据库已经是当今世界技术前沿了，因为它优点突出 &lt;br /&gt;有以下优点：&lt;br /&gt;(1) 拥有其他数据库系统所没有的表空间概念；&lt;br /&gt;(2) 拥有真正的等级锁功能&lt;br /&gt;(3) 拥有多版本数据功能，读写操作不会相互等待（我觉得是非常的好特性）&lt;br /&gt;(4) 拥有更快的处理速度和更高的安全性；&lt;br /&gt;(5) 拥有丰富的数据字典，易于DBA判断数据库的各种情况；&lt;br /&gt;(6) 拥有非常简单明了的备份与恢复原理&lt;br /&gt;(7) Oracle数据库可以启动到多个阶段，DBA可以在不同的情况下，通过启动到特定的阶段解决一些特殊问题&lt;br /&gt;(8) Oracle可以跨越多种软、硬平台。\n</code></pre><p><a name=\"362eced1\"></a></p>\n<h2 id=\"Oracle安装和创建-由于本文作者觉得linux太花费时间，故只有这部分讲解到linux\"><a href=\"#Oracle安装和创建-由于本文作者觉得linux太花费时间，故只有这部分讲解到linux\" class=\"headerlink\" title=\"Oracle安装和创建(由于本文作者觉得linux太花费时间，故只有这部分讲解到linux)\"></a><strong><strong>Oracle</strong></strong>安装和创建<strong><strong>(</strong></strong>由于本文作者觉得linux太花费时间，故只有这部分讲解到linux<strong><strong>)</strong></strong></h2><p>Oracle安装一般有两种，一种是图形界面的安装，另一种是无界面安装。建议是无界面，因为图形界面在宽带不足情况下，可能出现加载远程界面慢的问题，而且不能自动化。无界面可以依靠应答文件来安装。<br><a name=\"712f5efa\"></a></p>\n<h3 id=\"了解OFA标准\"><a href=\"#了解OFA标准\" class=\"headerlink\" title=\"了解OFA标准\"></a><strong><strong>了解OFA标准</strong></strong></h3><p>OFA标准是指oracle的目录结构和文件名，然而大部分DBA（database manager数据库管理员简称DBA）都在一定程度上自定义了，以适应于不同的环境。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117219355-d3c0e3a0-41c9-45c4-ae0c-a89fe13bccb3.png#align=left&amp;display=inline&amp;height=507&amp;name=image.png&amp;originHeight=507&amp;originWidth=835&amp;size=295404&amp;status=done&amp;width=835\" alt=\"image.png\"><br></p>","more":"<br><a name=\"119c5730\"></a><p></p>\n<h3 id=\"库的高速缓存和数据字典的高速缓存\"><a href=\"#库的高速缓存和数据字典的高速缓存\" class=\"headerlink\" title=\"库的高速缓存和数据字典的高速缓存\"></a><strong><strong>库的高速缓存和数据字典的高速缓存</strong></strong></h3><p><a name=\"a55e5de5\"></a></p>\n<h4 id=\"库的高速缓存\"><a href=\"#库的高速缓存\" class=\"headerlink\" title=\"库的高速缓存\"></a><strong><strong>库的高速缓存</strong></strong></h4><p>是用来存放你实际表的数据块的，如表TAB_A里实际存放的若干条数据记录，一般都存放在用户的表空间里。<br> <br><br><a name=\"773d69a4\"></a></p>\n<h4 id=\"数据字典的高速缓存\"><a href=\"#数据字典的高速缓存\" class=\"headerlink\" title=\"数据字典的高速缓存\"></a><strong><strong>数据字典的高速缓存</strong></strong></h4><p>用来存放表的定义，如表TAB_A，有几个字段，每个字段的类型、长度，表空间等，这类信息在你建表后会存放在系统表里，都是在SYSTEM表空间下，ORACLE运行时，这些信息被装入数据字典高速缓存里。<br><br><a name=\"7f04d897\"></a></p>\n<h4 id=\"数据字典的意思是\"><a href=\"#数据字典的意思是\" class=\"headerlink\" title=\"数据字典的意思是\"></a><strong><strong>数据字典的意思是</strong></strong></h4><p>简单的说就和我们小学用的词典的目录一样  要查询个表的数据 首先要确认这个词典（数据库）中有这个词语（表）  吧<br><br><a name=\"2655d132\"></a></p>\n<h3 id=\"安装oracle\"><a href=\"#安装oracle\" class=\"headerlink\" title=\"安装oracle\"></a><strong><strong>安装oracle</strong></strong></h3><p><a name=\"061f72da\"></a></p>\n<h4 id=\"创建对应的权限的OS用户组\"><a href=\"#创建对应的权限的OS用户组\" class=\"headerlink\" title=\"创建对应的权限的OS用户组\"></a><strong><strong>创建对应的权限的O</strong></strong>S<strong><strong>用户组</strong></strong></h4><p>我们需要linux上创建一些OS用户组，安装完oracle之后就可以为linuxOS用户组分配的相应的数据库操作权限，正常来说OS用户组（注：用户和用户组是不一样的）的创建是属于系统管理员（SA）的工作，但是大部分情况没有SA。<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117248391-cbfc23d8-2f3c-4bb5-b862-65300cfb607d.png#align=left&amp;display=inline&amp;height=488&amp;name=image.png&amp;originHeight=488&amp;originWidth=822&amp;size=254798&amp;status=done&amp;width=822\" alt=\"image.png\"><br>不必根据一字不差照搬组名，可以根据不一样环境来配置。<br><br><a name=\"657ad920\"></a></p>\n<h5 id=\"运行linux命令，创建组\"><a href=\"#运行linux命令，创建组\" class=\"headerlink\" title=\"运行linux命令，创建组\"></a><strong><strong>运行linux命令，创建组</strong></strong></h5><p>我们只按照简单的功能来分组就好了，oinstall负责安装和卸载权限，dba具有完全操作权限，oper只具有数据库操作权限（包含一些删除表，创建表，修改等待权限 ）<br>groupadd oinstall<br>groupadd dba<br>groupadd oper<br><br><a name=\"ccd2979a\"></a></p>\n<h6 id=\"查看创建的OS组\"><a href=\"#查看创建的OS组\" class=\"headerlink\" title=\"查看创建的OS组\"></a><strong><strong>查看创建的OS组</strong></strong></h6><p>cat /etc/group<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117306714-eef5438b-f88e-43d4-9ecb-0d43990fe65f.png#align=left&amp;display=inline&amp;height=386&amp;name=image.png&amp;originHeight=386&amp;originWidth=281&amp;size=12073&amp;status=done&amp;width=281\" alt=\"image.png\"><br>1000、1001、1002是我们组的ID<br><a name=\"87c9fadb\"></a></p>\n<h5 id=\"创建用户并分配组\"><a href=\"#创建用户并分配组\" class=\"headerlink\" title=\"创建用户并分配组\"></a><strong><strong>创建用户并分配组</strong></strong></h5><p>useradd -u 500 -g oinstall -G dba , oper oracle<br>将组ID设置500(其他同事可能需要人执行相同的组ID来执行所有安装)<br>创建主属组为oinstall，创建副属组为dba,oper<br>-g 和-G，分别是分配主属组和附属组的意思。<br><a name=\"d82e410e\"></a></p>\n<h6 id=\"查看用户信息\"><a href=\"#查看用户信息\" class=\"headerlink\" title=\"查看用户信息\"></a><strong><strong>查看用户信息</strong></strong></h6><p>cat /etc/passwd<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117322832-e84ea737-28ec-450b-9087-7f6f9c5272ea.png#align=left&amp;display=inline&amp;height=385&amp;name=image.png&amp;originHeight=385&amp;originWidth=827&amp;size=30460&amp;status=done&amp;width=827\" alt=\"image.png\"><br><br><a name=\"e7d20343\"></a></p>\n<h6 id=\"删除修改用户，或者用户组\"><a href=\"#删除修改用户，或者用户组\" class=\"headerlink\" title=\"删除修改用户，或者用户组\"></a><strong><strong>删除修改用户，或者用户组</strong></strong></h6><p>修改删除用户组：groupmod、groupdel<br>修改删除用户：usermod、userdel<br>以上命令需要使用系统管理员登录<br><a name=\"11c5905d\"></a></p>\n<h4 id=\"查看linux环境信息\"><a href=\"#查看linux环境信息\" class=\"headerlink\" title=\"查看linux环境信息\"></a><strong><strong>查看linux环境信息</strong></strong></h4><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117345109-376aba41-14b7-46f6-9e38-8141c9886cfb.png#align=left&amp;display=inline&amp;height=401&amp;name=image.png&amp;originHeight=401&amp;originWidth=860&amp;size=45732&amp;status=done&amp;width=860\" alt=\"image.png\">以下为我本人系统的信息<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117364504-14c00655-46d0-4c60-a248-84661ea1cb04.png#align=left&amp;display=inline&amp;height=452&amp;name=image.png&amp;originHeight=452&amp;originWidth=666&amp;size=29951&amp;status=done&amp;width=666\" alt=\"image.png\"><br>grep MemTotal  /proc/meminfo<br>free –t<br>df –h /tmp<br>df –h<br>cat /proc/version<br>uname –r<br> <br>rpm –q <package name=\"\"> 查询是否已经安装必须的软件包<br><a name=\"fdd1ae5b\"></a></package></p>\n<h2 id=\"管理数据库\"><a href=\"#管理数据库\" class=\"headerlink\" title=\"管理数据库\"></a><strong><strong>管理数据库</strong></strong></h2><p><a name=\"dfc119cb\"></a></p>\n<h3 id=\"Sysdba数据库账号\"><a href=\"#Sysdba数据库账号\" class=\"headerlink\" title=\"Sysdba数据库账号**\"></a><strong><strong>S</strong></strong>ysdba数据库账号<em>**</em></h3><p>这个账号可拥有除了关闭数据库以外的所有操作权限<br>as sysdba作为系统管理员登录<br><a name=\"6aee7bf5\"></a></p>\n<h3 id=\"第一次操作数据库\"><a href=\"#第一次操作数据库\" class=\"headerlink\" title=\"第一次操作数据库\"></a><strong><strong>第一次操作数据库</strong></strong></h3><p>startup onmount 启动后台进程并分配内存，此命令执行后，sql*plus会读取ORACLE_HOME/dbs中的初始化文件，会使后台进程和内存区域初始化，这样你就拥有了oracle的实例，但是还没有数据库<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117384566-27b7d3ce-0863-4a79-ac04-4ec4bfc56b98.png#align=left&amp;display=inline&amp;height=228&amp;name=image.png&amp;originHeight=228&amp;originWidth=603&amp;size=11983&amp;status=done&amp;width=603\" alt=\"image.png\"><br>oracle实例是指后台进程和内存区域，oracle数据库是指磁盘上的物理文件（数据文件、控制文件、联机重做日志文件）<br><a name=\"187ec332\"></a></p>\n<h3 id=\"表空间\"><a href=\"#表空间\" class=\"headerlink\" title=\"表空间\"></a><strong><strong>表空间</strong></strong></h3><p><a name=\"fcf86c6f\"></a></p>\n<h4 id=\"查询TEMP临时表空间\"><a href=\"#查询TEMP临时表空间\" class=\"headerlink\" title=\"查询TEMP临时表空间\"></a><strong><strong>查询TEMP临时表空间</strong></strong></h4><p>select*from database_properties where property_name=’DEFAULT_TEMP_TABLESPACE’;<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117405819-4e8691dc-3239-445c-b58e-e77a25fa45f4.png#align=left&amp;display=inline&amp;height=202&amp;name=image.png&amp;originHeight=202&amp;originWidth=620&amp;size=7894&amp;status=done&amp;width=620\" alt=\"image.png\"><br><a name=\"5d4d5693\"></a></p>\n<h4 id=\"USER表空间\"><a href=\"#USER表空间\" class=\"headerlink\" title=\"USER表空间\"></a><strong><strong>USER表空间</strong></strong></h4><p>select*from database_properties<br>where roperty_name=’DEFAULT_PERMANENT_TABLESPACE’;<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117417926-a850da9d-5066-484f-9f27-e1aedcadea79.png#align=left&amp;display=inline&amp;height=172&amp;name=image.png&amp;originHeight=172&amp;originWidth=632&amp;size=7080&amp;status=done&amp;width=632\" alt=\"image.png\"><br><a name=\"00caab79\"></a></p>\n<h3 id=\"连接标识\"><a href=\"#连接标识\" class=\"headerlink\" title=\"连接标识\"></a><strong><strong>连接标识</strong></strong></h3><p><a name=\"8d258c38\"></a></p>\n<h4 id=\"Oracle-的OCI-Driver-和-Thin-Driver的区别\"><a href=\"#Oracle-的OCI-Driver-和-Thin-Driver的区别\" class=\"headerlink\" title=\"Oracle 的OCI Driver 和 Thin Driver的区别\"></a><strong><strong>Oracle 的OCI Driver 和 Thin Driver的区别</strong></strong></h4><p>有以下两种标识方式：<br> <br>jdbc:oracle:oci8:@shdb<br> <br>1）从使用上来说，oci必须在客户机上安装oracle客户端或才能连接，而thin就不需要，因此从使用上来讲thin还是更加方便，这也是thin比较常见的原因。 <br>2）原理上来看，thin是纯java实现tcp/ip的c/s通讯；而oci方式,客户端通过native java method调用c library访问服务端，而这个c library就是oci(oracle called interface)，因此这个oci总是需要随着oracle客户端安装（从oracle10.1.0开始，单独提供OCI Instant Client，不用再完整的安装client） <br>3）它们分别是不同的驱动类别，oci是二类驱动， thin是四类驱动，但它们在功能上并无差异。<br><br><a name=\"3a0f1856\"></a></p>\n<h3 id=\"查询实例名（SID）\"><a href=\"#查询实例名（SID）\" class=\"headerlink\" title=\"查询实例名（SID）\"></a><strong><strong>查询实例名（SID）</strong></strong></h3><p>sqlplus / as sysdba<br>show parameter instance_name<br><br><a name=\"f858894c\"></a></p>\n<h2 id=\"配置用户和数据库对象\"><a href=\"#配置用户和数据库对象\" class=\"headerlink\" title=\"配置用户和数据库对象\"></a><strong><strong>配置用户和数据库对象</strong></strong></h2><p><a name=\"f8876e5d\"></a></p>\n<h2 id=\"创建和维护大型数据库对象、分区和索引\"><a href=\"#创建和维护大型数据库对象、分区和索引\" class=\"headerlink\" title=\"创建和维护大型数据库对象、分区和索引\"></a><strong><strong>创建和维护大型数据库对象、分区和索引</strong></strong></h2><p><a name=\"d2adec7f\"></a></p>\n<h2 id=\"备份和恢复\"><a href=\"#备份和恢复\" class=\"headerlink\" title=\"备份和恢复\"></a><strong><strong>备份和恢复</strong></strong></h2><p><a name=\"01a62dbc\"></a></p>\n<h2 id=\"数据库自动化及常见问题解决方法\"><a href=\"#数据库自动化及常见问题解决方法\" class=\"headerlink\" title=\"数据库自动化及常见问题解决方法\"></a><strong><strong>数据库自动化及常见问题解决方法</strong></strong></h2><p><a name=\"9d2f273a\"></a></p>\n<h2 id=\"管理窗口和可插入数据库\"><a href=\"#管理窗口和可插入数据库\" class=\"headerlink\" title=\"管理窗口和可插入数据库\"></a><strong><strong>管理窗口和可插入数据库</strong></strong></h2><p><a name=\"d579eb7d\"></a></p>\n<h2 id=\"Oracle-导入导出及连接\"><a href=\"#Oracle-导入导出及连接\" class=\"headerlink\" title=\"Oracle 导入导出及连接\"></a><strong><strong>Oracle 导入导出及连接</strong></strong></h2><p><a name=\"ea6f3b87\"></a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h3><p><a href=\"http://blog.itpub.net/21614165/viewspace-766937/\" target=\"_blank\" rel=\"noopener\">Oracle数据库导入导出命令总结</a><br><a href=\"http://blog.csdn.net/wildin/article/details/5850252\" target=\"_blank\" rel=\"noopener\">sqlplus连接远程数据库</a><br><a href=\"http://www.cnblogs.com/wanghongyun/p/6307652.html\" target=\"_blank\" rel=\"noopener\">ORACLE的impdp和expdp命令</a><br><a href=\"https://www.2cto.com/database/201304/203709.html\" target=\"_blank\" rel=\"noopener\">oracle expdp——红黑联盟</a><br><a name=\"02babed4\"></a></p>\n<h3 id=\"exp-和imp导入导出\"><a href=\"#exp-和imp导入导出\" class=\"headerlink\" title=\"exp 和imp导入导出\"></a><strong><strong>exp 和imp导入导出</strong></strong></h3><p><a name=\"f77e0e7c\"></a></p>\n<h4 id=\"导出命令-exp\"><a href=\"#导出命令-exp\" class=\"headerlink\" title=\"导出命令 (exp)\"></a><strong><strong>导出命令 (exp)</strong></strong></h4><p><strong><strong>格式：</strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp [用户名]&#x2F;[密码]@[主机ip]:[端口号]&#x2F;[SID&#x2F;service] file&#x3D;d:\\zhpt.dmp full&#x3D;n</span><br></pre></td></tr></table></figure>\n<p>file是导出路径full=n,表示是否导出主机数据库上全部用户，n表示否，y表示是<br>exp abc/abc@183.233.179.165:1521/orcl file=d:\\zhpt.dmp full=y<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117435502-1497acdc-62e6-4f06-bcb2-86eb61c72693.png#align=left&amp;display=inline&amp;height=34&amp;name=image.png&amp;originHeight=34&amp;originWidth=625&amp;size=2889&amp;status=done&amp;width=625\" alt=\"image.png\"><br>如果密码出特殊符号，使用<code>&quot;&quot;&quot;</code>包裹，如果其他地址有特殊符号，需要用<code>\\</code>转义，需要指定用户导出可以使用<code>owner</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exp grz/<span class=\"string\">\"\"</span><span class=\"string\">\"g2011*)\"</span><span class=\"string\">\"\"</span>@<span class=\"number\">19.129</span>.<span class=\"number\">180.19</span>:<span class=\"number\">1521</span>/oracle file=gr20190410.dmp owner <span class=\"keyword\">in</span> \\(\\<span class=\"string\">'gr\\'</span>,\\<span class=\"string\">'jzs'</span>\\) full=n</span><br></pre></td></tr></table></figure>\n<p><a name=\"606fd7a7\"></a></p>\n<h4 id=\"导入数据库（imp）\"><a href=\"#导入数据库（imp）\" class=\"headerlink\" title=\"导入数据库（imp）\"></a><strong><strong>导入数据库（imp）</strong></strong></h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># full 表示是否导出全部数据，一定要设置</span></span><br><span class=\"line\"><span class=\"comment\"># log 输出日志文件# fromuser 从哪一个用户导入</span></span><br><span class=\"line\"><span class=\"comment\"># touser 导入到哪个用户</span></span><br><span class=\"line\"><span class=\"comment\"># ignore=y buffer=100000000; 修改缓冲区大小，有时sql语句过长，会造成缓冲区空间不足</span></span><br><span class=\"line\">imp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">imp username/pwd@orcl file=E:\\<span class=\"number\">20171108</span>.dmp fromuser=username touser= username log=D:\\webBackend\\kingzheng\\住房保障系统\\fszfbz201711191635.log full=n</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">imp username/pwd@orcl file=d:\\zhpt.dmp log=C:\\data\\logname.log full=y ignore=y buffer=<span class=\"number\">100000000</span>;</span><br></pre></td></tr></table></figure>\n<p><a name=\"69a49bc6\"></a></p>\n<h3 id=\"expdp和impdp创建数据泵导入导出\"><a href=\"#expdp和impdp创建数据泵导入导出\" class=\"headerlink\" title=\"expdp和impdp创建数据泵导入导出 **\"></a><strong><strong>expdp和impdp创建数据泵导入导出</strong></strong> <em>**</em></h3><p><a name=\"f0c6d9cb\"></a></p>\n<h4 id=\"需要先创建数据泵\"><a href=\"#需要先创建数据泵\" class=\"headerlink\" title=\"需要先创建数据泵\"></a><strong><strong>需要先创建数据泵</strong></strong></h4><p>数据泵，说白了就是指定一个目录给oracle，但是oracle不会帮你创建的，需要自己先实际地创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  查看所有数据泵地址</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dba_directories;<span class=\"comment\"># 创建数据泵，数据泵地址即为你的导出导入地址文件地址</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">directory</span> myname <span class=\"keyword\">as</span> <span class=\"string\">'D:\\temp\\数据泵地址'</span>;<span class=\"comment\"># 授予权限 sshe这个用户可读可写</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">read</span>,write <span class=\"keyword\">on</span> <span class=\"keyword\">directory</span> dpdata1 <span class=\"keyword\">to</span> sshe;</span><br><span class=\"line\"></span><br><span class=\"line\">sql&gt;--可以使用以下语句查看目录操作权限</span><br><span class=\"line\">sql&gt;  SELECT privilege, directory_name, DIRECTORY_PATH FROM user_tab_privs t, all_directories d WHERE t.table_name(+) = d.directory_name ORDER BY 2, 1;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 数据泵地址以及文件dmp需要自己创建<br><a name=\"837cb31c\"></a></p>\n<h4 id=\"导出数据（expdp）\"><a href=\"#导出数据（expdp）\" class=\"headerlink\" title=\"导出数据（expdp）\"></a><strong><strong>导出数据（expdp）</strong></strong></h4><p>这种数据泵效率非常高，但是使用这种数据泵导出的数据，<strong><strong>一般情况下只在本机导出</strong></strong>，需要用impdp导入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem my_dir是数据泵名称</span><br><span class=\"line\"></span><br><span class=\"line\">rem exclude table:&quot;in(表名,列名2，……)&quot;不导出某些表</span><br><span class=\"line\"></span><br><span class=\"line\">expdp test&#x2F;test@orcl directory&#x3D;my_dir dumpfile&#x3D;my.dmp exclude&#x3D;table:\\&quot;in \\(\\&#39;DEPT\\&#39;,\\&#39;EMP\\&#39;\\)\\&quot; SCHEMAS&#x3D;FSJSCX</span><br></pre></td></tr></table></figure>\n<p><a name=\"Impdp\"></a></p>\n<h4 id=\"Impdp\"><a href=\"#Impdp\" class=\"headerlink\" title=\"Impdp\"></a><strong><strong>Impdp</strong></strong></h4><p>跟expdp的语法格式差不多</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impdp test&#x2F;test@orcl DIRECTORY&#x3D;my_dir  DUMPFILE&#x3D;my.dmp SCHEMAS&#x3D;test logfile&#x3D;%logfile%</span><br></pre></td></tr></table></figure>\n<p><a name=\"d303267a\"></a></p>\n<h5 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a><strong><strong>问题：</strong></strong></h5><p><a name=\"29398c59\"></a></p>\n<h6 id=\"这些对象由-FSZJZ-导出-而不是当前用户\"><a href=\"#这些对象由-FSZJZ-导出-而不是当前用户\" class=\"headerlink\" title=\"这些对象由 FSZJZ 导出, 而不是当前用户\"></a><strong><strong>这些对象由 FSZJZ 导出, 而不是当前用户</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117805403-46bf4a8c-9f04-4d1a-9def-916cf1fd0a66.png#align=left&amp;display=inline&amp;height=134&amp;name=image.png&amp;originHeight=134&amp;originWidth=517&amp;size=10915&amp;status=done&amp;width=517\" alt=\"image.png\"><br>导出是哪个用户，导入时用户也要相同，需要自己再创建一个用户<br><br><a name=\"2e846665\"></a></p>\n<h6 id=\"只有管理员用户，才可以导入\"><a href=\"#只有管理员用户，才可以导入\" class=\"headerlink\" title=\"只有管理员用户，才可以导入\"></a><strong><strong>只有管理员用户，才可以导入</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550117815821-b03a30e3-3157-4e16-8e5d-4cfb4766f698.png#align=left&amp;display=inline&amp;height=80&amp;name=image.png&amp;originHeight=80&amp;originWidth=412&amp;size=4702&amp;status=done&amp;width=412\" alt=\"image.png\"><br><a name=\"5b692eb8\"></a></p>\n<h6 id=\"ora-28759-无法打开文件\"><a href=\"#ora-28759-无法打开文件\" class=\"headerlink\" title=\"ora-28759 无法打开文件\"></a><strong><strong>ora-28759 无法打开文件</strong></strong></h6><p>以下这两句可能在不同的操作系统，支持不同，不太清楚，我服务器，两个都是sever2008，但是只有一个报这个错误，这个报错确实跟用户连接有关系，<strong><strong>最好是采用second</strong></strong><br><br><a name=\"88e73bd4\"></a></p>\n<h3 id=\"sqlplus-远程连接数据库\"><a href=\"#sqlplus-远程连接数据库\" class=\"headerlink\" title=\"sqlplus 远程连接数据库\"></a><strong><strong>sqlplus 远程连接数据库</strong></strong></h3><p><a name=\"ce1ec2ce\"></a></p>\n<h4 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a><strong><strong>远程连接</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：sqlplus 用户名&#x2F;密码@ip地址[:端口]&#x2F;service_name [as sysdba]</span><br><span class=\"line\"></span><br><span class=\"line\">示例：sqlplus sys&#x2F;pwd@ip:1521&#x2F;test as sysdba</span><br></pre></td></tr></table></figure>\n<p><a name=\"0dfbe902\"></a></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong><strong>常用命令</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt;set colsep&#39; &#39;;　　　　 &#x2F;&#x2F;-域输出分隔符</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set echo off;　　　　 &#x2F;&#x2F;显示start启动的脚本中的每个sql命令，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set echo on              &#x2F;&#x2F;设置运行命令是是否显示语句</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set feedback on;       &#x2F;&#x2F;设置显示“已选择XX行”</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set feedback off;　    &#x2F;&#x2F;回显本次sql命令处理的记录条数，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set heading off;　　 &#x2F;&#x2F;输出域标题，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set pagesize 0;　　    &#x2F;&#x2F;输出每页行数，缺省为24,为了避免分页，可设定为0。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set linesize 80;　　   &#x2F;&#x2F;输出一行字符个数，缺省为80</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set numwidth 12;　    &#x2F;&#x2F;输出number类型域长度，缺省为10</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set termout off;　　   &#x2F;&#x2F;显示脚本中的命令的执行结果，缺省为on</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set trimout on;　　　&#x2F;&#x2F;去除标准输出每行的拖尾空格，缺省为off</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set trimspool on;　　&#x2F;&#x2F;去除重定向（spool）输出每行的拖尾空格，缺省为off</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;set serveroutput on; &#x2F;&#x2F;设置允许显示输出类似dbms_output</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set timing on;          &#x2F;&#x2F;设置显示“已用时间：XXXX”</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set autotrace on;    &#x2F;&#x2F;设置允许对执行的sql进行分析</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; set verify off;           &#x2F;&#x2F;可以关闭和打开提示确认信息old 1和new 1的显示.</span><br></pre></td></tr></table></figure>\n<p>导出结果到文本：<br>spool<spool_flat_file><br>例如：spool d:\\Spool_flatquery.txt<br>这样，SQL*Plus将把所有的输出以及在屏幕上的命令等都指定给该文件。<br>执行查询输出。此时，系统并没有把结果保存到文件中，而是保存到缓冲区中。<br>查询结束后，关闭文件即可。命令格式为：spool off。<br><a name=\"df0cbcf7\"></a></spool_flat_file></p>\n<h3 id=\"oracle之jdbc连接oracle\"><a href=\"#oracle之jdbc连接oracle\" class=\"headerlink\" title=\"oracle之jdbc连接oracle\"></a><strong><strong>oracle之jdbc连接oracle</strong></strong></h3><p><a name=\"b5f7449a\"></a></p>\n<h4 id=\"使用sid方式：\"><a href=\"#使用sid方式：\" class=\"headerlink\" title=\"使用sid方式：\"></a><strong><strong>使用sid方式：</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@host:port:SID </span><br><span class=\"line\"></span><br><span class=\"line\">Example: jdbc:oracle:thin:@localhost:1521:orcl</span><br></pre></td></tr></table></figure>\n<p><a name=\"e0db0567\"></a></p>\n<h4 id=\"使用服务名方式\"><a href=\"#使用服务名方式\" class=\"headerlink\" title=\"使用服务名方式\"></a><strong><strong>使用服务名方式</strong></strong></h4><p>使用服务名的方式，这种格式是Oracle 推荐的格式，因为对于集群来说，每个节点的SID 是不一样的，但是SERVICE_NAME 确可以包含所有节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@&#x2F;&#x2F;host:port&#x2F;service_name</span><br><span class=\"line\"></span><br><span class=\"line\">Example:jdbc:oracle:thin:@&#x2F;&#x2F;localhost:1521&#x2F;orcl.city.com</span><br></pre></td></tr></table></figure>\n<p><a name=\"859540a4\"></a></p>\n<h4 id=\"使用TNSName\"><a href=\"#使用TNSName\" class=\"headerlink\" title=\"使用TNSName \"></a><strong><strong>使用TNSName </strong></strong></h4><p>使用<a href=\"\">TNSName </a>， 要实现这种连接方式首先要建立tnsnames.ora文件，然后通过System.setProperty指明这个文件路径。再通过上面URL中的@符号指定文件中的要使用到的资源。<br>这种格式我现在水平几乎没见过，对于我来说用得到这种的情况并不多吧。当然既然是通过配置文件来读取指定资源肯定也可以直接将资源拿出来放在URL中，直接放在URL中的URL模版是下面这样的（tnsnames.ora这个文件中放的就是@符号后面的那一段代码，当然用文件的好处就是可以配置多个，便于管理）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@TNSName </span><br><span class=\"line\"></span><br><span class=\"line\">Example: jdbc:oracle:thin:@TNS_ALIAS_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">jdbc:oracle:thin:@(DESCRIPTION&#x3D;(ADDRESS_LIST&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D; TCP)(HOST&#x3D;hostA)(PORT&#x3D; 1522))(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;your host)(PORT&#x3D;1521)))(SOURCE_ROUTE&#x3D;yes)(CONNECT_DATA&#x3D;(SERVICE_NAME&#x3D;your service_name)))</span><br></pre></td></tr></table></figure>\n<p><a name=\"efbc27b9\"></a></p>\n<h2 id=\"Oracle-obj（plsql中解释为对象）\"><a href=\"#Oracle-obj（plsql中解释为对象）\" class=\"headerlink\" title=\"Oracle obj（plsql中解释为对象）\"></a><strong><strong>Oracle obj（plsql中解释为对象）</strong></strong></h2><p><a name=\"019aaceb\"></a></p>\n<h4 id=\"Function-函数\"><a href=\"#Function-函数\" class=\"headerlink\" title=\"Function 函数\"></a><strong><strong>Function 函数</strong></strong></h4><p><a name=\"d283ab83\"></a></p>\n<h4 id=\"Procedure-存储过程\"><a href=\"#Procedure-存储过程\" class=\"headerlink\" title=\"Procedure 存储过程\"></a><strong><strong>Procedure 存储过程</strong></strong></h4><p><a name=\"ea6f3b87-1\"></a></p>\n<h5 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"https://www.cnblogs.com/helong/articles/2093807.html\" target=\"_blank\" rel=\"noopener\">Oracle创建存储过程、创建函数、创建包——博客园@helong</a> <br><a href=\"https://blog.csdn.net/u010109335/article/details/60577055\" target=\"_blank\" rel=\"noopener\">ORACLE执行存储过程权限不足——CSDN@He之涅槃</a><br><br><a name=\"e3127cc1\"></a></p>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><strong><strong>格式</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace procedure procedure_name(Name in out type, Name in out type, ...) isbegin</span><br><span class=\"line\"></span><br><span class=\"line\">  end procedure_name;</span><br></pre></td></tr></table></figure>\n<p><a name=\"1a63ac23\"></a></p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong><strong>示例</strong></strong></h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--自动创建表格，并update数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--dbms_output.put_line()需要先在command（命令行界面）“set serverout on ”打开输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">procedure</span> update_qylxid_of_null_for_rygx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Authid</span> <span class=\"keyword\">Current_User</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">is</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_date <span class=\"built_in\">varchar2</span>(<span class=\"number\">8</span>);<span class=\"comment\">--定义日期变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_sql varchar2(2000);<span class=\"comment\">--定义动态sql</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v_tablename varchar2(20);<span class=\"comment\">--定义动态表名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">select</span> to_char(<span class=\"keyword\">sysdate</span>,<span class=\"string\">'yyyymmdd'</span>) <span class=\"keyword\">into</span> v_date <span class=\"keyword\">from</span> dual;<span class=\"comment\">--取日期变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">   v_tablename := 'T_'||v_date;<span class=\"comment\">--为动态表命名</span></span><br><span class=\"line\"></span><br><span class=\"line\">   v_sql := '<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">'||v_tablename||'</span><span class=\"keyword\">as</span> <span class=\"keyword\">select</span>*<span class=\"keyword\">from</span> t_qy<span class=\"string\">';--为动态sql赋值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   dbms_output.put_line(v_sql);--打印sql语句</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   execute immediate v_sql;--执行动态sql</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   v_sql:='</span><span class=\"keyword\">update</span> t_qy t <span class=\"keyword\">set</span> t.LXID=(<span class=\"keyword\">select</span> LXID <span class=\"keyword\">from</span> t_qy_qy lx <span class=\"keyword\">where</span> lx.bh=t.bh <span class=\"keyword\">and</span> lx.LX =t.dm) <span class=\"keyword\">where</span>  t.lxid <span class=\"keyword\">is</span> <span class=\"literal\">null</span><span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   dbms_output.put_line(v_sql);--打印sql语句</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   execute immediate v_sql;--执行动态sql</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">end update_qylxid_of_null_for_rygx;</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"50d52dd9\"></a></p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a><strong><strong>常见问题</strong></strong></h5><p><a name=\"1fc98647\"></a></p>\n<h6 id=\"ORACLE执行存储过程权限不足\"><a href=\"#ORACLE执行存储过程权限不足\" class=\"headerlink\" title=\"ORACLE执行存储过程权限不足\"></a><strong><strong>ORACLE执行存储过程权限不足</strong></strong></h6><p><a href=\"https://blog.csdn.net/u010109335/article/details/60577055\" target=\"_blank\" rel=\"noopener\">ORACLE执行存储过程权限不足——CSDN@He之涅槃</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--需要增加Authid Current_User</span><br><span class=\"line\"></span><br><span class=\"line\">--AUTHID DEFINER （定义者权限）：指编译存储对象的所有者。也是默认权限模式。</span><br><span class=\"line\"></span><br><span class=\"line\">--AUTHID CURRENT_USER（调用者权限）：指拥有当前会话权限的模式，这可能和当前登录用户相同或不同(alter session set current_schema 可以改变调用者Schema)create or replace PROCEDURE 存储过程名称</span><br><span class=\"line\"></span><br><span class=\"line\">Authid Current_User</span><br><span class=\"line\"></span><br><span class=\"line\">IS </span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">……；</span><br><span class=\"line\"></span><br><span class=\"line\">END;</span><br></pre></td></tr></table></figure>\n<p><a name=\"618d4aaf\"></a></p>\n<h4 id=\"Database-link-数据库链接\"><a href=\"#Database-link-数据库链接\" class=\"headerlink\" title=\"Database link 数据库链接\"></a><strong><strong>Database link 数据库链接</strong></strong></h4><p>即在需要在两个不同的数据库中连接表或者查询数据时，可创建数据库链接<br><a name=\"481feccf\"></a></p>\n<h5 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a><strong><strong>如何使用</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--user_tables 是DBLINK_test所链接的用户的表</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user_tables@DBLINK_test;</span><br><span class=\"line\"></span><br><span class=\"line\">--链接可以方便于多个数据库用户关联查询数据，非常方便,mytable 是你当前登录用户的表</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user_tables@DBLINK_test t,mytable t2 where t2.id&#x3D;t.id;</span><br></pre></td></tr></table></figure>\n<p><a name=\"ea6f3b87-2\"></a></p>\n<h5 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"#best-answer-746405041\">oracle中的database link如何使用——百度经验@wangzhiqing999</a><br><a name=\"345cd1b6\"></a></p>\n<h5 id=\"oracle-sql创建\"><a href=\"#oracle-sql创建\" class=\"headerlink\" title=\"oracle sql创建\"></a><strong><strong>oracle sql创建</strong></strong></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- Drop existing old  database link --DBLINK_test是database link的名称drop database link DBLINK_test;-- Create new database link -- other_db 为用户名 pwd为密码create database link DBLINK_test</span><br><span class=\"line\"></span><br><span class=\"line\">  connect to other_db IDENTIFIED BY  pwd</span><br><span class=\"line\"></span><br><span class=\"line\">  using &#39;(DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">(CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(SERVICE_NAME &#x3D; orcl)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">)&#39;;--查询 database link select * from dba_db_links;</span><br></pre></td></tr></table></figure>\n<p>如果创建全局dblink，必须使用systm或sys用户，在database前加public</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  public  database link DBLINK_test</span><br><span class=\"line\"></span><br><span class=\"line\">  connect to other_db IDENTIFIED BY  pwd</span><br><span class=\"line\"></span><br><span class=\"line\">  using &#39;(DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 127.0.0.1)(PORT &#x3D; 1521))</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">(CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">(SERVICE_NAME &#x3D; orcl)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">)&#39;;</span><br></pre></td></tr></table></figure>\n<p><a name=\"5f005e3c\"></a></p>\n<h5 id=\"通过plsql创建\"><a href=\"#通过plsql创建\" class=\"headerlink\" title=\"通过plsql创建\"></a><strong><strong>通过plsql创建</strong></strong></h5><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118003862-eccf0b6e-7132-4106-aa23-e2b350ce0b5b.png#align=left&amp;display=inline&amp;height=408&amp;name=image.png&amp;originHeight=408&amp;originWidth=327&amp;size=22765&amp;status=done&amp;width=327\" alt=\"image.png\"> <br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118072979-b08dec8d-fd6a-4d8f-99cc-50fbc1e4e75c.png#align=left&amp;display=inline&amp;height=376&amp;name=image.png&amp;originHeight=376&amp;originWidth=971&amp;size=30163&amp;status=done&amp;width=971\" alt=\"image.png\"> <br><br><a name=\"146704a5\"></a></p>\n<h2 id=\"常用函数及sql实例\"><a href=\"#常用函数及sql实例\" class=\"headerlink\" title=\"常用函数及sql实例\"></a><strong><strong>常用函数及sql实例</strong></strong></h2><p><a name=\"ea6f3b87-3\"></a></p>\n<h3 id=\"参考链接-3\"><a href=\"#参考链接-3\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h3><p><a href=\"http://www.cnblogs.com/harvey888/p/5957656.html\" target=\"_blank\" rel=\"noopener\">Oracle中replace函数的使用</a><br><a href=\"https://zhidao.baidu.com/question/14756835.html\" target=\"_blank\" rel=\"noopener\">Oracle round函数是什么意思?怎么运用?</a><br><a href=\"https://zhidao.baidu.com/question/552089573.html\" target=\"_blank\" rel=\"noopener\">oracle的nvl</a><br><a href=\"http://www.cnblogs.com/vinsonLu/p/3512526.html\" target=\"_blank\" rel=\"noopener\">Oracle 中 decode 函数用法</a><br><a href=\"http://www.cnblogs.com/gaojing/archive/2008/11/07/1328657.html\" target=\"_blank\" rel=\"noopener\">[oracle] to_date() 与 to_char() 日期和字符串转换</a><br><a href=\"http://blog.csdn.net/ziwen00/article/details/8685858\" target=\"_blank\" rel=\"noopener\">Oracle的Cast的用法</a> <br><a href=\"https://www.cnblogs.com/wangfuyou/p/6605166.html\" target=\"_blank\" rel=\"noopener\">Oracle 大小写转换函数——博客园@Twang</a><br><a name=\"ca48b68b\"></a></p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a><strong><strong>常用函数</strong></strong></h3><p><a name=\"2a18f8a8\"></a></p>\n<h4 id=\"判断是否为数字\"><a href=\"#判断是否为数字\" class=\"headerlink\" title=\"判断是否为数字\"></a><strong><strong>判断是否为数字</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注意只能判断纯数字，不带小数,判断带小数方式请查看下文“常用sql”创建函数</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT nvl2(translate(&#39;123&#39;,&#39;&#x2F;1234567890&#39;,&#39;&#x2F;&#39;),&#39;CHAR&#39;,&#39;NUMBER&#39;)   </span><br><span class=\"line\"></span><br><span class=\"line\">FROM   dual ;</span><br></pre></td></tr></table></figure>\n<p><a name=\"da5a6765\"></a></p>\n<h4 id=\"add-months-日期增加，以月为单位\"><a href=\"#add-months-日期增加，以月为单位\" class=\"headerlink\" title=\"add_months()日期增加，以月为单位\"></a><strong><strong>add_months()日期增加，以月为单位</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add_months(sysdate,12)--增加一年</span><br><span class=\"line\"></span><br><span class=\"line\">add_months(sysdate,-12)--减去一年</span><br><span class=\"line\"></span><br><span class=\"line\">sysdate+1 --加一天</span><br></pre></td></tr></table></figure>\n<p><a name=\"c79a4a1b\"></a></p>\n<h4 id=\"to-date\"><a href=\"#to-date\" class=\"headerlink\" title=\"to_date()\"></a><strong><strong>to_date()</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">to_date(&quot;要转换的字符串&quot;,&quot;转换的格式&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">to_date(t.access_date,&#39;yyyy-mm-dd hh24:mi:ss&#39;)--2005-12-25 13:25:59</span><br><span class=\"line\"></span><br><span class=\"line\">TO_DATE(&#39;17-DEC-1980&#39;, &#39;DD-MON-YYYY&#39;,&#39;NLS_DATE_LANGUAGE&#x3D;American&#39;)--日期语言</span><br></pre></td></tr></table></figure>\n<p><a name=\"b0a57818\"></a></p>\n<h4 id=\"replace替换字符\"><a href=\"#replace替换字符\" class=\"headerlink\" title=\"replace替换字符\"></a><strong><strong>replace替换字符</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace(原字段，&#39;原字段旧内容&#39;,&#39;原字段新内容&#39;)--替换字符串</span><br></pre></td></tr></table></figure>\n<p><a name=\"fecd35a6\"></a></p>\n<h4 id=\"round四舍五入\"><a href=\"#round四舍五入\" class=\"headerlink\" title=\"round四舍五入\"></a><strong><strong>round四舍五入</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;round(number)&#96;&#96;round(number, decimal_places )&#96;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">number ---需要四舍五入的数字</span><br><span class=\"line\"></span><br><span class=\"line\">decimal_places ---从哪里开始四舍五入，此参数是下标，预设为0</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">select round(123.456, 0) from dual;     --- 123</span><br></pre></td></tr></table></figure>\n<p><a name=\"2510b668\"></a></p>\n<h4 id=\"nvl如果为空返回新值\"><a href=\"#nvl如果为空返回新值\" class=\"headerlink\" title=\"nvl如果为空返回新值\"></a><strong><strong>nvl如果为空返回新值</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvl(字段名，&#39;新的返回的值&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">如果提供的字段的值为空，则将返回这个新值，注意：只是返回了这个值，并不是update到表中</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> nvl(name,&#39;小明&#39;)---name为空，返回小明</span><br></pre></td></tr></table></figure>\n<p><a name=\"d623ee97\"></a></p>\n<h4 id=\"decode逻辑判断简化\"><a href=\"#decode逻辑判断简化\" class=\"headerlink\" title=\"decode逻辑判断简化\"></a><strong><strong>decode逻辑判断简化</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">decode(条件,值1,返回值1,值2,返回值2,...值n,返回值n,缺省值)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">该函数的含义如下：IF 条件&#x3D;值1 THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值1)</span><br><span class=\"line\"></span><br><span class=\"line\">ELSIF 条件&#x3D;值2 THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值2)</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　......</span><br><span class=\"line\"></span><br><span class=\"line\">ELSIF 条件&#x3D;值n THEN</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(翻译值n)ELSE</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　RETURN(缺省值)</span><br><span class=\"line\"></span><br><span class=\"line\">END IF</span><br><span class=\"line\"></span><br><span class=\"line\">decode(字段或字段的运算，值1，值2，值3）</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">该函数的含义如下：</span><br><span class=\"line\"></span><br><span class=\"line\"> 这个函数运行的结果是，当字段或字段的运算的值等于值1时，该函数返回值2，否则返回值3</span><br><span class=\"line\"></span><br><span class=\"line\"> 当然值1，值2，值3也可以是表达式，这个函数使得某些sql语句简单了许多</span><br><span class=\"line\"> 注意：值2和值3的数据类型必须一致</span><br></pre></td></tr></table></figure>\n<p><a name=\"4e7db3ce\"></a></p>\n<h4 id=\"sys-guid-生成唯一32位字符串\"><a href=\"#sys-guid-生成唯一32位字符串\" class=\"headerlink\" title=\"sys_guid()生成唯一32位字符串\"></a><strong><strong>sys_guid()生成唯一32位字符串</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys_guid()</span><br></pre></td></tr></table></figure>\n<p><a name=\"774534e1\"></a></p>\n<h4 id=\"CAST-expr-AS-type-name-数值类型转换\"><a href=\"#CAST-expr-AS-type-name-数值类型转换\" class=\"headerlink\" title=\"CAST(expr AS type_name) 数值类型转换\"></a><strong><strong>CAST(expr AS type_name) 数值类型转换</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--例</span><br><span class=\"line\"></span><br><span class=\"line\">cast(R.MONTH as int)--将月份转换为整型类型</span><br></pre></td></tr></table></figure>\n<p><a name=\"5b106349\"></a></p>\n<h4 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a><strong><strong>大小写转换</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select UPPER(&#39;Test&#39;) as u from dual; --转大写</span><br><span class=\"line\"></span><br><span class=\"line\">select LOWER(&#39;Test&#39;) as l from dual;--转小写</span><br></pre></td></tr></table></figure>\n<p><a name=\"7db7c5f3\"></a></p>\n<h4 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a><strong><strong>截取字符串</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--截取身份证出生日期</span><br><span class=\"line\"></span><br><span class=\"line\">to_date(substr(&#39;XXXXXXXXXXXXXXXXX&#39;,7,8),&#39;YYYYMMDD&#39;)</span><br></pre></td></tr></table></figure>\n<p><a name=\"425d8a49\"></a></p>\n<h4 id=\"删除左右字符、添加左右字符\"><a href=\"#删除左右字符、添加左右字符\" class=\"headerlink\" title=\"删除左右字符、添加左右字符\"></a><strong><strong>删除左右字符、添加左右字符</strong></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ltrim(原字符,&#39;需要删除的字符&#39;)--删除左边字符</span><br><span class=\"line\"></span><br><span class=\"line\">rtrim(原字符,&#39;需要删除的字符&#39;)--删除右边字符</span><br><span class=\"line\"></span><br><span class=\"line\">LPAD(原字符,&#39;需要添加的字符&#39;) --添加字符在左边</span><br><span class=\"line\"></span><br><span class=\"line\">RPAD(原字符,&#39;需要添加的字符&#39;) --添加字符在右边--例</span><br><span class=\"line\"></span><br><span class=\"line\">ltrim(&#39;abcdefg&#39;,&#39;abc&#39;)--删除左边abc，输出defg</span><br><span class=\"line\"></span><br><span class=\"line\">ltrim(&#39;abqwert&#39;,&#39;abc&#39;)--删除左边ab，输出qwert</span><br></pre></td></tr></table></figure>\n<p><a name=\"349ddcfc\"></a></p>\n<h3 id=\"Sql实例\"><a href=\"#Sql实例\" class=\"headerlink\" title=\"Sql实例\"></a><strong><strong>Sql实例</strong></strong></h3><p><a name=\"89f6884e\"></a></p>\n<h4 id=\"判断数字（创建函数）\"><a href=\"#判断数字（创建函数）\" class=\"headerlink\" title=\"判断数字（创建函数）**\"></a><strong><strong>判断数字</strong></strong>（<strong><strong>创建函数</strong></strong>）<em>**</em></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create or replace function isNumber(p in varchar2)return number</span><br><span class=\"line\"></span><br><span class=\"line\">is</span><br><span class=\"line\"></span><br><span class=\"line\">result number;begin</span><br><span class=\"line\"></span><br><span class=\"line\">result :&#x3D; to_number(p);return 1;</span><br><span class=\"line\"></span><br><span class=\"line\">exceptionwhen VALUE_ERROR then return 0;end;</span><br></pre></td></tr></table></figure>\n<p>导出表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT B.TABLE_NAME     AS &quot;表名&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       C.COMMENTS       AS &quot;表说明&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.COLUMN_ID      AS &quot;字段序号&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.COLUMN_NAME    AS &quot;字段名&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_TYPE      AS &quot;字段数据类型&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_LENGTH    AS &quot;数据长度&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_PRECISION AS &quot;整数位&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       B.DATA_SCALE     AS &quot;小数位&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">       A.COMMENTS       AS &quot;字段说明&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  FROM ALL_COL_COMMENTS A, ALL_TAB_COLUMNS B, ALL_TAB_COMMENTS C</span><br><span class=\"line\"></span><br><span class=\"line\">WHERE A.TABLE_NAME IN (SELECT U.TABLE_NAME FROM USER_ALL_TABLES U)</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.OWNER &#x3D; B.OWNER</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.TABLE_NAME &#x3D; B.TABLE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.COLUMN_NAME &#x3D; B.COLUMN_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND C.TABLE_NAME &#x3D; A.TABLE_NAME</span><br><span class=\"line\"></span><br><span class=\"line\">   AND C.OWNER &#x3D; A.OWNER</span><br><span class=\"line\"></span><br><span class=\"line\">   AND A.OWNER &#x3D; &#39;PYE&#39;ORDER BY A.TABLE_NAME, B.COLUMN_ID;</span><br></pre></td></tr></table></figure>\n<p><a name=\"abcdb7f1\"></a></p>\n<h4 id=\"修改不符合的时间，修改年份和月份\"><a href=\"#修改不符合的时间，修改年份和月份\" class=\"headerlink\" title=\"**修改不符合的时间，修改年份和月份\"></a><strong>**修改不符合的时间，修改年份和月份</strong></h4><p>-</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-更新有&#x2F;的时间、有两个&#x2F;的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))),substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime)),(length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">--更新有&#x2F;的时间、有两个&#x2F;的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;&#x2F;&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;&#x2F;&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">--更新有&#x2F;的时间、有两个-的日期、月份为1位数的，改为两位数select  (substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))),t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;-&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,5)||&#39;0&#39;||substr(t.stime,6,length(t.stime))) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and  (length(substr(t.stime,0,7))-length(replace(substr(t.stime,0,7),&#39;-&#39;,&#39;&#39;)))&#x3D;2</span><br><span class=\"line\"></span><br><span class=\"line\">--更新有-的时间、有两个-的日期、年份为1位数的，改为两位数select (substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)), t.stime,t.*,t.rowid From t_test_cc_all_b20181212 t --where substr(t.stime,length(t.stime),length(t.stime)-1)&#x3D;&#39;-&#39;WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;-&#39;,&#39;&#39;)))&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">update  t_test_cc_all_b20181212 t set t.stime&#x3D;(substr(t.stime,1,length(t.stime)-1)||&#39;0&#39;|| substr(t.stime,length(t.stime),1)) --where (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;))) &#x3D;1WHERE length(t.stime)&lt;10 and  (length(t.stime)-length(replace(t.stime,&#39;-&#39;,&#39;&#39;)))&gt;&#x3D;2 and   (length(substr(t.stime,length(t.stime)-1,2))-length(replace(substr(t.stime,length(t.stime)-1,2),&#39;-&#39;,&#39;&#39;)))&#x3D;1</span><br></pre></td></tr></table></figure>\n<p><a name=\"37a3a350\"></a></p>\n<h4 id=\"查看所有表空间及容量\"><a href=\"#查看所有表空间及容量\" class=\"headerlink\" title=\"查看所有表空间及容量\"></a>查看所有表空间及容量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DBF.TABLESPACE_NAME,</span><br><span class=\"line\">       DBF.TOTALSPACE &quot;总量(M)&quot;,</span><br><span class=\"line\">       DBF.TOTALBLOCKS AS 总块数,</span><br><span class=\"line\">       DBF.TOTALSPACE-DFS.FREESPACE &quot;使用量(M)&quot;,</span><br><span class=\"line\">       DBF.TOTALBLOCKS-DFS.FREEBLOCKS AS 使用块数,      </span><br><span class=\"line\">       DFS.FREESPACE &quot;剩余总量(M)&quot;,</span><br><span class=\"line\">       DFS.FREEBLOCKS &quot;剩余块数&quot;,</span><br><span class=\"line\">       (DFS.FREESPACE &#x2F; DBF.TOTALSPACE) * 100 &quot;空闲比例&quot;</span><br><span class=\"line\">  FROM (SELECT T.TABLESPACE_NAME,</span><br><span class=\"line\">               SUM(T.BYTES) &#x2F; 1024 &#x2F; 1024 TOTALSPACE,</span><br><span class=\"line\">               SUM(T.BLOCKS) TOTALBLOCKS</span><br><span class=\"line\">          FROM DBA_DATA_FILES T</span><br><span class=\"line\">         GROUP BY T.TABLESPACE_NAME) DBF,</span><br><span class=\"line\">       (SELECT TT.TABLESPACE_NAME,</span><br><span class=\"line\">               SUM(TT.BYTES) &#x2F; 1024 &#x2F; 1024 FREESPACE,</span><br><span class=\"line\">               SUM(TT.BLOCKS) FREEBLOCKS</span><br><span class=\"line\">          FROM DBA_FREE_SPACE TT</span><br><span class=\"line\">         GROUP BY TT.TABLESPACE_NAME) DFS</span><br><span class=\"line\"> WHERE TRIM(DBF.TABLESPACE_NAME) &#x3D; TRIM(DFS.TABLESPACE_NAME);</span><br></pre></td></tr></table></figure>\n<p><a name=\"c60f6138\"></a></p>\n<h4 id=\"oracle表空间不足时处理\"><a href=\"#oracle表空间不足时处理\" class=\"headerlink\" title=\"oracle表空间不足时处理\"></a>oracle表空间不足时处理</h4><p>表空间数据文件最大是32G，也就是说扩容最大为32G<br><a name=\"e7a0542d\"></a></p>\n<h5 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h5><p><a href=\"https://blog.csdn.net/love_java_cc/article/details/52857363\" target=\"_blank\" rel=\"noopener\">oracle 11g 导入数据库，表空间超过32G的解决办法——CSDN@冷静cc</a>  <br><a href=\"https://jingyan.baidu.com/article/48b37f8d6ca1eb1a646488dc.html\" target=\"_blank\" rel=\"noopener\">oracle 表空间不足解决办法大全——百度经验@javababy5</a></p>\n<p><a name=\"b7cc6308\"></a></p>\n<h5 id=\"第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\"><a href=\"#第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\" class=\"headerlink\" title=\"第一，可能表空间还未达到最大扩容内存，但未设置自动扩容\"></a>第一，可能表空间还未达到最大扩容内存，但未设置自动扩容</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--修改数据文件内存50m为当前数据文件的内存大小</span><br><span class=\"line\">alter database datafile &#39;D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF&#39; resize 50m;</span><br><span class=\"line\">--增加数据文件自动扩容功能,每次扩容为50m，最大不会超过32G</span><br><span class=\"line\">alterdatabase datafile &#39;D:\\ORACLE\\PRODUCT\\ORADATA\\TEST\\USERS01.DBF&#39; autoextend onnext 50m maxsize 32767m;</span><br></pre></td></tr></table></figure>\n<p><a name=\"e3470cfa\"></a></p>\n<h5 id=\"第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\"><a href=\"#第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\" class=\"headerlink\" title=\"第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式\"></a>第二，表空间数据文件已经达到32G，则可以通过增加数据文件方式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--USERS是你的表空间名，H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf可以改为你的任意地址，最好放在一起方便，</span><br><span class=\"line\">--每次扩容50m，最大32G</span><br><span class=\"line\">alter tablespace USERS  </span><br><span class=\"line\">add datafile &#39;H:\\IDE\\oracle\\oradata\\orcl\\USERS02.dbf&#39; size 50m </span><br><span class=\"line\">autoextend on next 50m maxsize 32767m;</span><br></pre></td></tr></table></figure>\n<p><a name=\"5dc99f6e\"></a></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a><strong><strong>问题</strong></strong></h2><p><a name=\"122f6443\"></a></p>\n<h3 id=\"oracle之违反唯一约束条件\"><a href=\"#oracle之违反唯一约束条件\" class=\"headerlink\" title=\"oracle之违反唯一约束条件\"></a><strong><strong>oracle之违反唯一约束条件</strong></strong></h3><p>出现这个原因，除了自己手动新增ID的情况外，还有就是引用自己创建的sequance，导入新表数据后，没有将新的sequance导入进来，可以将新sequance导入进来，也可以自动手动修改<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118277133-fbbfbc99-569b-4a1e-ad5a-cf655ef6f786.png#align=left&amp;display=inline&amp;height=199&amp;name=image.png&amp;originHeight=199&amp;originWidth=822&amp;size=21888&amp;status=done&amp;width=822\" alt=\"image.png\"> <br><br><a name=\"e2d3e6c0\"></a></p>\n<h3 id=\"修改字符集\"><a href=\"#修改字符集\" class=\"headerlink\" title=\"修改字符集\"></a><strong><strong>修改字符集</strong></strong></h3><p><a name=\"ea6f3b87-4\"></a></p>\n<h4 id=\"参考链接-4\"><a href=\"#参考链接-4\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h4><p><a href=\"https://link.jianshu.com/?t=https://zhidao.baidu.com/question/134444813.html\" target=\"_blank\" rel=\"noopener\">如何改oracle AL16UTF16为AL32UTF8——百度知道</a><br><a href=\"https://link.jianshu.com/?t=http://www.itpub.net/thread-505857-1-1.html%23pid3728655\" target=\"_blank\" rel=\"noopener\">建库时AL16UTF16字符集怎么设置？——出处: ITPUB论坛－中国最专业的IT技术社区</a><br><strong><strong>操作：</strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Microsoft Windows [版本 6.1.7601]</span><br><span class=\"line\"></span><br><span class=\"line\">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\Administrator&gt;sqlplus &#x2F; as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 11.2.0.1.0 Production on 星期四 1月 11 12:00:49 2018</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2010, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">连接到:</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class=\"line\"></span><br><span class=\"line\">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; shutdown immediate</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">已经卸载数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; startup mount</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经启动。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Total System Global Area 3290345472 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Fixed Size                  2180224 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Variable Size            2164263808 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Database Buffers         1107296256 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Redo Buffers               16605184 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">数据库装载完毕。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM ENABLE RESTRICTED SESSION;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM SET JOB_QUEUE_PROCESSES&#x3D;0;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER SYSTEM SET AQ_TM_PROCESSES&#x3D;0;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">系统已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE OPEN;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">数据库已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE CHARACTER SET AL32UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE CHARACTER SET AL32UTF8</span><br><span class=\"line\"></span><br><span class=\"line\">*</span><br><span class=\"line\"></span><br><span class=\"line\">第 1 行出现错误:</span><br><span class=\"line\"></span><br><span class=\"line\">ORA-12712: 新字符集必须为旧字符集的超集</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE CHARACTER SET AL16UTF16;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER DATABASE CHARACTER SET AL16UTF16</span><br><span class=\"line\"></span><br><span class=\"line\">*</span><br><span class=\"line\"></span><br><span class=\"line\">第 1 行出现错误:</span><br><span class=\"line\"></span><br><span class=\"line\">ORA-12712: 新字符集必须为旧字符集的超集# ALTER DATABASE national CHARACTER SET AL16UTF16;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; ALTER DATABASE character set INTERNAL_USE AL32UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">数据库已更改。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; SHUTDOWN IMMEDIATE;</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">已经卸载数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; STARTUP</span><br><span class=\"line\"></span><br><span class=\"line\">ORACLE 例程已经启动。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">Total System Global Area 3290345472 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Fixed Size                  2180224 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Variable Size            2164263808 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Database Buffers         1107296256 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Redo Buffers               16605184 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">数据库装载完毕。</span><br><span class=\"line\"></span><br><span class=\"line\">数据库已经打开。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;</span><br></pre></td></tr></table></figure>\n<p>ALTER DATABASE character set INTERNAL_USE AL32UTF8;<br>INTERNAL_USE有点像是强制修改，其他用户角色可能会报错<br><a name=\"bf52b411\"></a></p>\n<h4 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a><strong><strong>其他问题</strong></strong></h4><p><a name=\"3e2e31b2\"></a></p>\n<h5 id=\"AL16UTF16不能作为character-set\"><a href=\"#AL16UTF16不能作为character-set\" class=\"headerlink\" title=\"AL16UTF16不能作为character set\"></a><strong><strong>AL16UTF16不能作为character set</strong></strong></h5><p>AL16UTF16 不能用做数据库的character set，只能用做national character set 。<br>character set必须是single byte 7-bit ASCII或是单字节EBCDIC的子集，因此fixed width的多字节字符集(AL16UTF16)就不能做为character set。<br> <br>你可以用如下这样用的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHARACTER SET US7ASCII NATIONAL CHARACTER SET AL16UTF16</span><br><span class=\"line\"></span><br><span class=\"line\">或是</span><br><span class=\"line\"></span><br><span class=\"line\">CHARACTER SET zhs16cgb231280  NATIONAL CHARACTER SET AL16UTF16</span><br></pre></td></tr></table></figure>\n<p><a name=\"46b308ed\"></a></p>\n<h3 id=\"如何修改服务名service-name\"><a href=\"#如何修改服务名service-name\" class=\"headerlink\" title=\"如何修改服务名service_name\"></a><strong><strong>如何修改服务名service_name</strong></strong></h3><p><a name=\"bd1bf7e7\"></a></p>\n<h5 id=\"转载链接\"><a href=\"#转载链接\" class=\"headerlink\" title=\"转载链接\"></a><strong><strong>转载链接</strong></strong></h5><p><a href=\"https://link.jianshu.com/?t=https://www.2cto.com/kf/201311/259856.html\" target=\"_blank\" rel=\"noopener\">如何修改 service_name</a><br><a name=\"d48898d5\"></a></p>\n<h5 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a><strong><strong>例：</strong></strong></h5><p><a name=\"64162c1b\"></a></p>\n<h6 id=\"service-name原有环境：\"><a href=\"#service-name原有环境：\" class=\"headerlink\" title=\"service_name原有环境：\"></a><strong><strong>service_name原有环境：</strong></strong></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sid： mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">global_name：mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">service_names： MYNEWDB</span><br><span class=\"line\"></span><br><span class=\"line\">db_domain  ：</span><br><span class=\"line\"></span><br><span class=\"line\">db_name：mynewdb</span><br></pre></td></tr></table></figure>\n<p><a name=\"f0740534\"></a></p>\n<h6 id=\"需要修改如下：\"><a href=\"#需要修改如下：\" class=\"headerlink\" title=\"需要修改如下：\"></a><strong><strong>需要修改如下：</strong></strong></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global_name：mynewdb</span><br><span class=\"line\"></span><br><span class=\"line\">service_names： test</span><br><span class=\"line\"></span><br><span class=\"line\">db_domain  ：</span><br><span class=\"line\"></span><br><span class=\"line\">db_name：mynewdb</span><br></pre></td></tr></table></figure>\n<p><a name=\"568a025c\"></a></p>\n<h5 id=\"方法：\"><a href=\"#方法：\" class=\"headerlink\" title=\"方法：\"></a><strong><strong>方法：</strong></strong></h5><p>服务器端：<br>alter system set service_names=’test’;<br>这里采用静态注册，同时还要修改下 listener.ora</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SID_LIST_LISTENER &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">  (SID_LIST &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">    (SID_DESC &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">      (SID_NAME &#x3D; PLSExtProc)</span><br><span class=\"line\"></span><br><span class=\"line\">      (ORACLE_HOME &#x3D;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">      (PROGRAM &#x3D; extproc)</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_DESC&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">        (GLOBAL_DBNAME &#x3D; mynewdb)</span><br><span class=\"line\"></span><br><span class=\"line\">        (ORALCE_HOME &#x3D; &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_NAME &#x3D; mynewdb)</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_DESC&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">        (GLOBAL_DBNAME &#x3D; test)  -------这个是需要添加</span><br><span class=\"line\"></span><br><span class=\"line\">        (ORALCE_HOME &#x3D; &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1)</span><br><span class=\"line\"></span><br><span class=\"line\">        (SID_NAME &#x3D; mynewdb)    ------这个还是原来的实例名</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>cmd下执行命令lsnrctl reload<br>查看监听状态lsnrctl status<br>L</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SNRCTL&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Connecting to (DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;TCP)(HOST&#x3D;10.80.11.202)(PORT&#x3D;1521)))</span><br><span class=\"line\"></span><br><span class=\"line\">STATUS of the LISTENER</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Alias                     LISTENER</span><br><span class=\"line\"></span><br><span class=\"line\">Version                   TNSLSNR for [Linux](https:&#x2F;&#x2F;www.2cto.com&#x2F;os&#x2F;linux&#x2F;): Version 11.2.0.1.0 - Production</span><br><span class=\"line\"></span><br><span class=\"line\">Start Date                21-NOV-2013 00:09:35</span><br><span class=\"line\"></span><br><span class=\"line\">Uptime                    0 days 20 hr. 30 min. 55 sec</span><br><span class=\"line\"></span><br><span class=\"line\">Trace Level               off</span><br><span class=\"line\"></span><br><span class=\"line\">Security                  ON: Local OS Authentication</span><br><span class=\"line\"></span><br><span class=\"line\">SNMP                      OFF</span><br><span class=\"line\"></span><br><span class=\"line\">Listener Parameter File   &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_1&#x2F;network&#x2F;admin&#x2F;listener.ora</span><br><span class=\"line\"></span><br><span class=\"line\">Listener Log File         &#x2F;u01&#x2F;app&#x2F;oracle&#x2F;diag&#x2F;tnslsnr&#x2F;oracle11g&#x2F;listener&#x2F;alert&#x2F;log.xml</span><br><span class=\"line\"></span><br><span class=\"line\">Listening Endpoints Summary...</span><br><span class=\"line\"></span><br><span class=\"line\">  (DESCRIPTION&#x3D;(ADDRESS&#x3D;(PROTOCOL&#x3D;tcp)(HOST&#x3D;10.80.11.202)(PORT&#x3D;1521)))</span><br><span class=\"line\"></span><br><span class=\"line\">Services Summary...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;PLSExtProc&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;PLSExtProc&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;mynewdb&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;mynewdb&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">Service &quot;test&quot; has 1 instance(s).</span><br><span class=\"line\"></span><br><span class=\"line\">  Instance &quot;mynewdb&quot;, status UNKNOWN, has 1 handler(s) for this service...</span><br><span class=\"line\"></span><br><span class=\"line\">The command completed successfully</span><br></pre></td></tr></table></figure>\n<p>可以看到新的 Service “test” 已经可以使用了<br>客户端配置：<br>net manager 配置 服务名为 test ，ip为数据库服务器主机ip，相应端口。<br>测试连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt;  conn sys&#x2F;oracle@test as sysdba</span><br><span class=\"line\"></span><br><span class=\"line\">已连接。</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt;</span><br></pre></td></tr></table></figure>\n<p>当然不使用静态注册，动态注册也可以<br><br><a name=\"3158f60d\"></a></p>\n<h3 id=\"警告日志文件\"><a href=\"#警告日志文件\" class=\"headerlink\" title=\"警告日志文件\"></a><strong><strong>警告日志文件</strong></strong></h3><p>不知道日志文件在哪的，可以使用这个命令<br>select value from v$diag_info where name=’Diag Trace’;<br>以下是我的输出地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL&gt; select value from v$diag_info where name&#x3D;&#39;Diag Trace&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">D:\\FLYINGCLOUD\\diag\\rdbms\\odb\\odb\\trace</span><br></pre></td></tr></table></figure>\n<p><a name=\"9e2e81b7\"></a></p>\n<h2 id=\"开发工具配置及问题\"><a href=\"#开发工具配置及问题\" class=\"headerlink\" title=\"开发工具配置及问题\"></a><strong><strong>开发工具配置及问题</strong></strong></h2><p><a name=\"Plsql\"></a></p>\n<h3 id=\"Plsql\"><a href=\"#Plsql\" class=\"headerlink\" title=\"Plsql\"></a><strong><strong>Plsql</strong></strong></h3><p><a name=\"d672874c\"></a></p>\n<h4 id=\"plsql设置可显示的查询记录条数\"><a href=\"#plsql设置可显示的查询记录条数\" class=\"headerlink\" title=\"plsql设置可显示的查询记录条数\"></a><strong><strong>plsql设置可显示的查询记录条数</strong></strong></h4><p>tools-&gt;prifereces-&gt;window types-&gt;sql window-&gt;records per page<br>查询所有记录<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118425257-e4d6330a-e5f6-4e7e-932c-fb25cf372fd2.png#align=left&amp;display=inline&amp;height=591&amp;name=image.png&amp;originHeight=591&amp;originWidth=564&amp;size=92527&amp;status=done&amp;width=564\" alt=\"image.png\"><br><a name=\"5c094ab1\"></a></p>\n<h4 id=\"plsql如何查询sql执行计划\"><a href=\"#plsql如何查询sql执行计划\" class=\"headerlink\" title=\"plsql如何查询sql执行计划\"></a><strong><strong>plsql如何查询sql执行计划</strong></strong></h4><p><a href=\"https://link.jianshu.com/?t=https://jingyan.baidu.com/article/ab69b270bffc2e2ca7189fee.html\" target=\"_blank\" rel=\"noopener\">怎么使用plsql查看执行计划</a><br>执行计划可以用计划sql执行的性能<br>选中需要执行的sql语句，然后按F5，或者直接点击”执行计划”<br><a name=\"e33957e7\"></a></p>\n<h4 id=\"PLSQL工具如何远程连接数据库\"><a href=\"#PLSQL工具如何远程连接数据库\" class=\"headerlink\" title=\"PLSQL工具如何远程连接数据库\"></a><strong><strong>PLSQL工具如何远程连接数据库</strong></strong></h4><p><a name=\"ea6f3b87-5\"></a></p>\n<h5 id=\"参考链接-5\"><a href=\"#参考链接-5\" class=\"headerlink\" title=\"参考链接\"></a><strong><strong>参考链接</strong></strong></h5><p><a href=\"https://link.jianshu.com/?t=https://zhidao.baidu.com/question/333852172.html\" target=\"_blank\" rel=\"noopener\">如何配置pl/sql 连接远程oracle服务器——百度知道</a><br><a name=\"d7ecf9b4\"></a></p>\n<h5 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a><strong><strong>方法1：</strong></strong></h5><p>找到oracle的安装目录。如：C:\\oracle\\product\\10.2.0\\db_1\\network\\ADMIN<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118449158-f157887f-799b-4b90-a947-2218b90f25ac.png#align=left&amp;display=inline&amp;height=30&amp;name=image.png&amp;originHeight=30&amp;originWidth=311&amp;size=2681&amp;status=done&amp;width=311\" alt=\"image.png\"> <br>添加如下内容<br>其中中文部分是需要修改的部分，除第一个“本地实例名”外，其他需要跟远程数据库管理员咨询，本地实例名就是方便自己识别数据库的一个名字，可以自定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地实例名 &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">  (DESCRIPTION &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 远程数据库IP地址)(PORT &#x3D; 远程服务器端口号))</span><br><span class=\"line\"></span><br><span class=\"line\">    (CONNECT_DATA &#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">      (SERVER &#x3D; DEDICATED)</span><br><span class=\"line\"></span><br><span class=\"line\">      (SERVICE_NAME &#x3D; 远程数据库服务名)</span><br><span class=\"line\"></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>然后打开pl/sql就能看到自己创建的链接，如图：<br><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118496776-446fbbd8-7f17-4ec9-be0b-219d248b2910.png#align=left&amp;display=inline&amp;height=204&amp;name=image.png&amp;originHeight=204&amp;originWidth=392&amp;size=17502&amp;status=done&amp;width=392\" alt=\"image.png\"> <br>方法2：<br> <br><br><a name=\"5d64018c\"></a></p>\n<h5 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a><strong><strong>方法2：</strong></strong></h5><p><a name=\"ef35ed63\"></a></p>\n<h6 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a><strong><strong>格式：</strong></strong></h6><p>ip:端口/sid<br><a name=\"614fc656\"></a></p>\n<h6 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a><strong><strong>示例：</strong></strong></h6><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/244275/1550118525263-c7c6ad21-d3fb-4563-9154-f8bc23c3f375.png#align=left&amp;display=inline&amp;height=209&amp;name=image.png&amp;originHeight=209&amp;originWidth=393&amp;size=10049&amp;status=done&amp;width=393\" alt=\"image.png\"> </p>"}],"PostAsset":[{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/2.png","slug":"2.png","post":"ck77ncie30008y8us30z3j4n0","modified":0,"renderable":0},{"_id":"source/_posts/AlarmManager详解/01.gif","slug":"01.gif","post":"ck77nci8o0000y8usscw0ynuk","modified":0,"renderable":0},{"_id":"source/_posts/Android中传递对象的三种方法/1.png","slug":"1.png","post":"ck77nci8x0001y8us10fz3a9r","modified":0,"renderable":0},{"_id":"source/_posts/broadcast与broadcast-receiver/01.gif","slug":"01.gif","post":"ck77ncieb000fy8usn34joq7b","modified":0,"renderable":0},{"_id":"source/_posts/hexo个人博客-如何在markdown上引用本地图片的地址？/1.png","slug":"1.png","post":"ck77nciei000my8us5xj0o6cq","modified":0,"renderable":0},{"_id":"source/_posts/算法：冒泡排序/来自算法爱好者.png","slug":"来自算法爱好者.png","post":"ck77ncif10010y8us5ess6qr1","modified":0,"renderable":0},{"_id":"source/_posts/hexo之如何强制访问https/1.png","slug":"1.png","post":"ck77nciej000ny8uskwtfhbb2","modified":0,"renderable":0},{"_id":"source/_posts/hexo之如何强制访问https/2.png","slug":"2.png","post":"ck77nciej000ny8uskwtfhbb2","modified":0,"renderable":0},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/1.gif","slug":"1.gif","post":"ck77ncie30008y8us30z3j4n0","modified":0,"renderable":0},{"_id":"source/_posts/TCP协议中的三次握手和四次挥手/3.gif","slug":"3.gif","post":"ck77ncie30008y8us30z3j4n0","modified":0,"renderable":0},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/2017-03-23_105452.png","slug":"2017-03-23_105452.png","post":"ck77ncif30011y8usk4rl6b1q","modified":0,"renderable":0},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/diagram_backstack.png","slug":"diagram_backstack.png","post":"ck77ncif30011y8usk4rl6b1q","modified":0,"renderable":0},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/singleInstance.png","slug":"singleInstance.png","post":"ck77ncif30011y8usk4rl6b1q","modified":0,"renderable":0},{"_id":"source/_posts/理解Android-Activity运行模式（understand-Android-Activity-s-launch-mode）/singleTask.gif","slug":"singleTask.gif","post":"ck77ncif30011y8usk4rl6b1q","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_154037.png","slug":"2017-06-12_154037.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_162203.png","slug":"2017-06-12_162203.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_181756.png","slug":"2017-06-12_181756.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_181946.png","slug":"2017-06-12_181946.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_182814.png","slug":"2017-06-12_182814.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/git之head-detached-from-xxx/2017-06-12_183817.png","slug":"2017-06-12_183817.png","post":"ck77ncief000jy8usyeeowbqd","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234335.png","slug":"2017-07-29_234335.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_234739.png","slug":"2017-07-29_234739.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-29_235311.png","slug":"2017-07-29_235311.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_000208.png","slug":"2017-07-30_000208.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001401.png","slug":"2017-07-30_001401.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_001931.png","slug":"2017-07-30_001931.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002457.png","slug":"2017-07-30_002457.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/vmware之ubuntu如何在仅主机模式下联网/2017-07-30_002750.png","slug":"2017-07-30_002750.png","post":"ck77nciew000xy8usw934p1a0","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130204.jpg","slug":"2017-05-02_130204.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130529.jpg","slug":"2017-05-02_130529.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130706.jpg","slug":"2017-05-02_130706.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_130841.jpg","slug":"2017-05-02_130841.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_131022.jpg","slug":"2017-05-02_131022.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_131313.jpg","slug":"2017-05-02_131313.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_132947.jpg","slug":"2017-05-02_132947.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_134259.jpg","slug":"2017-05-02_134259.jpg","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/hexo从多说评论转为韩国来必力评论/2017-05-02_150715.png","slug":"2017-05-02_150715.png","post":"ck77nciel000py8us3kt3jl1t","modified":0,"renderable":0},{"_id":"source/_posts/Android-Service总结/1.jpg","slug":"1.jpg","post":"ck77ncigi0016y8us2ckt24uv","modified":0,"renderable":0},{"_id":"source/_posts/viewpager在最后一页滑动之后，跳转到主页面/20160731130745293.gif","slug":"20160731130745293.gif","post":"ck77ncijf0037y8us8tv2f8ip","modified":0,"renderable":0},{"_id":"source/_posts/再总结一下activity的生命周期吧/1生命周期中文.png","slug":"1生命周期中文.png","post":"ck77ncijm003fy8usjjn6jji5","modified":0,"renderable":0},{"_id":"source/_posts/再总结一下activity的生命周期吧/2生命周期英文.png","slug":"2生命周期英文.png","post":"ck77ncijm003fy8usjjn6jji5","modified":0,"renderable":0},{"_id":"source/_posts/设计模式：工厂方法模式、简单工厂模式与抽象工厂模式/1.jpg","slug":"1.jpg","post":"ck77ncioa007uy8usnkdc2pq6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck77nci8o0000y8usscw0ynuk","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncijj003by8usi5jh3vwa"},{"post_id":"ck77nci8o0000y8usscw0ynuk","category_id":"ck77ncigl0017y8usff3oxanc","_id":"ck77ncijl003ey8usnk6fdppk"},{"post_id":"ck77ncien000ry8us88gn6n58","category_id":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncijn003hy8usjns88sva"},{"post_id":"ck77nciew000xy8usw934p1a0","category_id":"ck77ncihj002dy8usqacx55yy","_id":"ck77ncijp003ky8usq7daieas"},{"post_id":"ck77nciez000zy8us8di5lj7y","category_id":"ck77ncihl002hy8us4scl474y","_id":"ck77ncijr003my8usmi1ulcci"},{"post_id":"ck77ncif80014y8ustgbunpof","category_id":"ck77ncihq002py8usgrc4fkrf","_id":"ck77ncijs003py8ust9cxdhzp"},{"post_id":"ck77ncifc0015y8usblyyymwz","category_id":"ck77ncihs002ry8uski26sq6r","_id":"ck77ncijt003ry8usg97amqzg"},{"post_id":"ck77ncidv0002y8useix6lx1v","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77nciju003uy8uslb1rsxuq"},{"post_id":"ck77ncidv0002y8useix6lx1v","category_id":"ck77nciht002ty8usba9gz3tw","_id":"ck77ncijv003wy8us16d1d9i7"},{"post_id":"ck77ncie7000cy8us0wnvpfpp","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncijx003zy8us9ee5lcbl"},{"post_id":"ck77ncie7000cy8us0wnvpfpp","category_id":"ck77ncihu002vy8usytykle2j","_id":"ck77ncijy0041y8usaj2wu0ju"},{"post_id":"ck77ncie9000dy8usahx7yarp","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncijy0043y8usxfr2vto5"},{"post_id":"ck77ncie9000dy8usahx7yarp","category_id":"ck77ncihu002vy8usytykle2j","_id":"ck77ncik00046y8usyl0sgoxo"},{"post_id":"ck77nciee000iy8usymo1otdr","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncik00048y8useqv3jzzz"},{"post_id":"ck77nciee000iy8usymo1otdr","category_id":"ck77ncihx0031y8uskyu7hy5m","_id":"ck77ncik1004by8ushhlsgysy"},{"post_id":"ck77nci8x0001y8us10fz3a9r","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncimd005ny8usgmohd0w2"},{"post_id":"ck77nci8x0001y8us10fz3a9r","category_id":"ck77ncigp001cy8us6ndqlqb4","_id":"ck77ncimg005qy8useiuava8k"},{"post_id":"ck77nci8x0001y8us10fz3a9r","category_id":"ck77nciji0038y8usvldeh44p","_id":"ck77ncimi005ty8usdgcles3v"},{"post_id":"ck77ncie10006y8us1zydsc43","category_id":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncimj005wy8us26veed9w"},{"post_id":"ck77ncie10006y8us1zydsc43","category_id":"ck77ncijn003iy8usep4embq7","_id":"ck77ncimk005yy8usgsd0ltyz"},{"post_id":"ck77ncie30008y8us30z3j4n0","category_id":"ck77ncigt001hy8usontnj968","_id":"ck77ncimm0060y8us9r1bmpvo"},{"post_id":"ck77ncie30008y8us30z3j4n0","category_id":"ck77ncijr003ny8usk917z1t6","_id":"ck77ncimn0062y8usd79rfyd7"},{"post_id":"ck77nciec000gy8usuiund6uo","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncimp0064y8uswamrby90"},{"post_id":"ck77nciec000gy8usuiund6uo","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncimq0066y8uscp7qs2ck"},{"post_id":"ck77ncief000jy8usyeeowbqd","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncimr0068y8ushgehg5yx"},{"post_id":"ck77ncief000jy8usyeeowbqd","category_id":"ck77ncijw003xy8usmhs8w8sy","_id":"ck77ncims006ay8us0uvd38dk"},{"post_id":"ck77ncieg000ky8uscvx6wl96","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncimt006cy8us9a7qqzfq"},{"post_id":"ck77ncieg000ky8uscvx6wl96","category_id":"ck77ncijw003xy8usmhs8w8sy","_id":"ck77ncimv006ey8us6fx2cbot"},{"post_id":"ck77ncieh000ly8us8uwy4yzh","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncimw006gy8us4iwz2iq4"},{"post_id":"ck77ncieh000ly8us8uwy4yzh","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncimy006iy8us7mocznof"},{"post_id":"ck77nciei000my8us5xj0o6cq","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncin0006ky8usgjbs5hya"},{"post_id":"ck77nciei000my8us5xj0o6cq","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncin2006my8usr8p8td9t"},{"post_id":"ck77nciej000ny8uskwtfhbb2","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncin3006oy8uswfcm3ne0"},{"post_id":"ck77nciej000ny8uskwtfhbb2","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncin4006qy8usz24d8mln"},{"post_id":"ck77nciek000oy8us88o8hdmz","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncin6006sy8us82qpkweo"},{"post_id":"ck77nciek000oy8us88o8hdmz","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncin6006ty8usnc14iihg"},{"post_id":"ck77nciel000py8us3kt3jl1t","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncin6006uy8ustz45oe0g"},{"post_id":"ck77nciel000py8us3kt3jl1t","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncin7006vy8usbs8uzidq"},{"post_id":"ck77nciem000qy8usibzjeccj","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncin7006wy8usjrik2g5o"},{"post_id":"ck77nciem000qy8usibzjeccj","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncin8006xy8us6euq9i0d"},{"post_id":"ck77ncieo000sy8usnn8kilaa","category_id":"ck77ncihb0023y8usufhop95x","_id":"ck77ncin8006yy8uszsw4e9ri"},{"post_id":"ck77ncieo000sy8usnn8kilaa","category_id":"ck77ncikc004sy8usz2ve86b2","_id":"ck77ncin8006zy8ustkwial91"},{"post_id":"ck77nciep000ty8us6o09sf8a","category_id":"ck77ncihc0025y8usida8x24z","_id":"ck77ncin80070y8us2e4j1gqm"},{"post_id":"ck77nciep000ty8us6o09sf8a","category_id":"ck77ncikd004vy8us9tnuf2a7","_id":"ck77ncin90071y8us03s7mv61"},{"post_id":"ck77ncieq000uy8ustybkwskw","category_id":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncin90072y8usgo5km8li"},{"post_id":"ck77ncieq000uy8ustybkwskw","category_id":"ck77ncijn003iy8usep4embq7","_id":"ck77ncin90073y8usifghu4at"},{"post_id":"ck77ncies000vy8usmh9d23f8","category_id":"ck77ncihg0029y8usk6ms6m66","_id":"ck77ncina0074y8us9vvxec4n"},{"post_id":"ck77ncies000vy8usmh9d23f8","category_id":"ck77ncikg0051y8us9csgfs0x","_id":"ck77ncina0075y8us3kabhaqn"},{"post_id":"ck77nciet000wy8us55bbw9co","category_id":"ck77ncigr001fy8us7fuj4nwp","_id":"ck77ncina0076y8us9980uj01"},{"post_id":"ck77nciet000wy8us55bbw9co","category_id":"ck77ncikh0054y8usnoiadpbk","_id":"ck77ncinc0077y8usl0459hfn"},{"post_id":"ck77nciey000yy8ust6g8fuk8","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncinc0078y8usgp5atmtt"},{"post_id":"ck77nciey000yy8ust6g8fuk8","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncind0079y8usx1bu7t0p"},{"post_id":"ck77ncif10010y8us5ess6qr1","category_id":"ck77ncihm002jy8usznqgdhza","_id":"ck77ncind007ay8us0iuhtn1b"},{"post_id":"ck77ncif10010y8us5ess6qr1","category_id":"ck77ncikk005by8usszbfpgkc","_id":"ck77ncind007by8us0nngiglz"},{"post_id":"ck77ncif40012y8usprnixtkj","category_id":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncind007cy8uscto4tpic"},{"post_id":"ck77ncif40012y8usprnixtkj","category_id":"ck77ncikl005ey8usbteniry7","_id":"ck77ncine007dy8usg4a98ydm"},{"post_id":"ck77ncif60013y8usmbm3q74d","category_id":"ck77ncihm002jy8usznqgdhza","_id":"ck77ncine007ey8us28v1xjmu"},{"post_id":"ck77ncif60013y8usmbm3q74d","category_id":"ck77ncikm005fy8usirtpv6x6","_id":"ck77ncine007fy8us8ajeslyv"},{"post_id":"ck77ncieb000fy8usn34joq7b","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncine007gy8usrsctb6kx"},{"post_id":"ck77ncieb000fy8usn34joq7b","category_id":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncinf007hy8usjp5xd58h"},{"post_id":"ck77ncieb000fy8usn34joq7b","category_id":"ck77ncikm005gy8us11tw4kdy","_id":"ck77ncinf007iy8usra7tc1o2"},{"post_id":"ck77ncif30011y8usk4rl6b1q","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncinf007jy8usdaeb83og"},{"post_id":"ck77ncif30011y8usk4rl6b1q","category_id":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncinf007ky8ushxtyi916"},{"post_id":"ck77ncif30011y8usk4rl6b1q","category_id":"ck77ncikn005hy8uswudt4wje","_id":"ck77ncing007ly8usx34koyx8"},{"post_id":"ck77ncigi0016y8us2ckt24uv","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncing007my8usuteq93yh"},{"post_id":"ck77ncigi0016y8us2ckt24uv","category_id":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncing007ny8us6o8pzyn7"},{"post_id":"ck77ncigi0016y8us2ckt24uv","category_id":"ck77nciko005iy8usp99mux3q","_id":"ck77ncinh007oy8usaufkuez6"},{"post_id":"ck77ncijk003cy8us4g0qgh3z","category_id":"ck77ncigv001jy8uszw6cogm3","_id":"ck77ncinh007py8usku2i434o"},{"post_id":"ck77ncijk003cy8us4g0qgh3z","category_id":"ck77ncijt003sy8usvc428mqv","_id":"ck77ncinh007qy8usss6g0ywc"},{"post_id":"ck77ncijm003fy8usjjn6jji5","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncinh007ry8us0wlouhtj"},{"post_id":"ck77ncijm003fy8usjjn6jji5","category_id":"ck77ncihw002zy8uslksy4uge","_id":"ck77ncini007sy8uskk1phzgd"},{"post_id":"ck77ncijm003fy8usjjn6jji5","category_id":"ck77ncikn005hy8uswudt4wje","_id":"ck77ncini007ty8usadozpx3d"},{"post_id":"ck77ncijf0037y8us8tv2f8ip","category_id":"ck77ncidx0004y8us7s9v919c","_id":"ck77ncioe007yy8us1ad4g8xn"},{"post_id":"ck77ncijf0037y8us8tv2f8ip","category_id":"ck77ncimd005my8usmmbolj8m","_id":"ck77nciog0081y8uso27kt8cm"},{"post_id":"ck77ncin3006py8usa7rp5av2","category_id":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncioi0084y8usmwfpanq2"},{"post_id":"ck77nciml005zy8usmzxkf1t3","category_id":"ck77ncioc007wy8usefxb7frb","_id":"ck77ncipg008ry8us0cep985k"},{"post_id":"ck77ncimq0067y8usm7j8isic","category_id":"ck77ncioi0085y8usqbv1vla0","_id":"ck77ncipi008ty8usl3upmsg8"},{"post_id":"ck77ncims0069y8us96wa8fd7","category_id":"ck77nciok0088y8us2bg7sr5u","_id":"ck77ncipk008vy8usrx0qso1c"},{"post_id":"ck77ncimw006hy8us72qm6144","category_id":"ck77nciok0088y8us2bg7sr5u","_id":"ck77ncipn008zy8usly49t0go"},{"post_id":"ck77ncin5006ry8usvhiijoq6","category_id":"ck77ncion008cy8usvluaqhlx","_id":"ck77ncipp0091y8ustjmcwrby"},{"post_id":"ck77nciof007zy8usrcnidfzl","category_id":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncipr0094y8us5gszn6o6"},{"post_id":"ck77ncioh0082y8usnkg3nfw7","category_id":"ck77ncipd008qy8us2ee0gpv4","_id":"ck77ncir8009ky8usidx2mdj2"},{"post_id":"ck77ncioa007uy8usnkdc2pq6","category_id":"ck77ncihn002ly8us3y5zo8t1","_id":"ck77ncira009my8usozoy610b"},{"post_id":"ck77ncioa007uy8usnkdc2pq6","category_id":"ck77ncipl008xy8usom63uvxd","_id":"ck77ncirb009oy8uszm1xlbkk"},{"post_id":"ck77ncipa008ny8us1syubsqi","category_id":"ck77ncir7009iy8us92sjtm7t","_id":"ck77nciri009vy8us14ixvzeh"},{"post_id":"ck77ncipa008ny8us1syubsqi","category_id":"ck77ncirf009ry8us3996z0ty","_id":"ck77ncirj009wy8usxqwe35n1"}],"PostTag":[{"post_id":"ck77nci8o0000y8usscw0ynuk","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncigm0018y8us22axebc3"},{"post_id":"ck77nci8o0000y8usscw0ynuk","tag_id":"ck77ncie6000by8usnpx99yaj","_id":"ck77ncigo001ay8usm28yjd2o"},{"post_id":"ck77nci8x0001y8us10fz3a9r","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncigp001by8usv53nwu26"},{"post_id":"ck77nci8x0001y8us10fz3a9r","tag_id":"ck77ncied000hy8usrnkrrrk0","_id":"ck77ncigr001ey8usi1mhamaz"},{"post_id":"ck77ncidv0002y8useix6lx1v","tag_id":"ck77ncigm0019y8usc9eou0lr","_id":"ck77nciji0039y8usmu32c1ei"},{"post_id":"ck77ncidv0002y8useix6lx1v","tag_id":"ck77ncigq001dy8usxazgp3ki","_id":"ck77ncijl003dy8us8lx6lz33"},{"post_id":"ck77ncidv0002y8useix6lx1v","tag_id":"ck77ncigs001gy8uspmlizmo7","_id":"ck77ncijn003gy8uso127gn17"},{"post_id":"ck77ncidv0002y8useix6lx1v","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncijp003jy8usy91ywfp1"},{"post_id":"ck77ncie10006y8us1zydsc43","tag_id":"ck77ncigu001iy8us2dfn6pn5","_id":"ck77ncijq003ly8ustawxie3u"},{"post_id":"ck77ncie30008y8us30z3j4n0","tag_id":"ck77ncigv001ky8ushywmmwzo","_id":"ck77ncijs003oy8usceg7jna5"},{"post_id":"ck77ncie7000cy8us0wnvpfpp","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncijs003qy8us90z73d9y"},{"post_id":"ck77ncie7000cy8us0wnvpfpp","tag_id":"ck77ncigw001my8uswcblfsgj","_id":"ck77ncijt003ty8us2yx9eupk"},{"post_id":"ck77ncie9000dy8usahx7yarp","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77nciju003vy8us2atxa61x"},{"post_id":"ck77ncie9000dy8usahx7yarp","tag_id":"ck77ncigw001my8uswcblfsgj","_id":"ck77ncijx003yy8uslgvgo2ij"},{"post_id":"ck77ncieb000fy8usn34joq7b","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncijx0040y8uspi6tgkoe"},{"post_id":"ck77ncieb000fy8usn34joq7b","tag_id":"ck77ncih0001qy8us4k2xz0e4","_id":"ck77ncijy0042y8usxqn1dm02"},{"post_id":"ck77nciec000gy8usuiund6uo","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncijz0045y8usl111kl19"},{"post_id":"ck77nciee000iy8usymo1otdr","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncik00047y8us0ubs7m32"},{"post_id":"ck77nciee000iy8usymo1otdr","tag_id":"ck77ncih3001uy8uswlg1xc3t","_id":"ck77ncik1004ay8us1yb0v557"},{"post_id":"ck77nciee000iy8usymo1otdr","tag_id":"ck77ncih4001wy8usnw12sigv","_id":"ck77ncik2004cy8usoehmap9t"},{"post_id":"ck77ncief000jy8usyeeowbqd","tag_id":"ck77ncih4001wy8usnw12sigv","_id":"ck77ncik3004ey8ussormkl1u"},{"post_id":"ck77ncieg000ky8uscvx6wl96","tag_id":"ck77ncih4001wy8usnw12sigv","_id":"ck77ncik3004fy8usq6z2xmcq"},{"post_id":"ck77ncieh000ly8us8uwy4yzh","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncik5004hy8usqeoy1g5j"},{"post_id":"ck77nciei000my8us5xj0o6cq","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncik5004iy8usbi4zihzx"},{"post_id":"ck77nciej000ny8uskwtfhbb2","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncik8004ky8us1eoh7brg"},{"post_id":"ck77nciek000oy8us88o8hdmz","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncik8004ly8usizvauas6"},{"post_id":"ck77nciel000py8us3kt3jl1t","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncika004ny8usqgq2hpbj"},{"post_id":"ck77nciem000qy8usibzjeccj","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncika004oy8usq9wuk8ks"},{"post_id":"ck77ncien000ry8us88gn6n58","tag_id":"ck77ncihj002ey8usw7fvx3ar","_id":"ck77ncikc004qy8usgdpym3lb"},{"post_id":"ck77ncieo000sy8usnn8kilaa","tag_id":"ck77ncihk002gy8uss8ovl7o0","_id":"ck77ncikc004ry8usp543in72"},{"post_id":"ck77nciep000ty8us6o09sf8a","tag_id":"ck77ncihl002iy8usonf7t1tq","_id":"ck77ncikd004ty8us3yvhva8y"},{"post_id":"ck77ncieq000uy8ustybkwskw","tag_id":"ck77ncigu001iy8us2dfn6pn5","_id":"ck77ncikd004uy8usuicj5eer"},{"post_id":"ck77ncies000vy8usmh9d23f8","tag_id":"ck77ncihn002my8us1dasi785","_id":"ck77ncike004wy8usnu8bi9pp"},{"post_id":"ck77ncies000vy8usmh9d23f8","tag_id":"ck77ncihp002oy8us3q8t8lkl","_id":"ck77ncike004xy8usu95xpgxx"},{"post_id":"ck77nciet000wy8us55bbw9co","tag_id":"ck77ncihr002qy8usf9q7ob73","_id":"ck77ncikf004zy8uss5uzmz8m"},{"post_id":"ck77nciew000xy8usw934p1a0","tag_id":"ck77ncihs002sy8usl1qk3p9y","_id":"ck77ncikg0050y8usju5ac961"},{"post_id":"ck77nciey000yy8ust6g8fuk8","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncikh0052y8usmwtakyjm"},{"post_id":"ck77nciez000zy8us8di5lj7y","tag_id":"ck77ncihu002wy8uskypxi93y","_id":"ck77ncikh0053y8usbgqhtih9"},{"post_id":"ck77ncif10010y8us5ess6qr1","tag_id":"ck77ncihw002yy8ussl6b8og8","_id":"ck77nciki0055y8usqlhvbbsw"},{"post_id":"ck77ncif30011y8usk4rl6b1q","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77nciki0056y8us7gxwz3qx"},{"post_id":"ck77ncif30011y8usk4rl6b1q","tag_id":"ck77ncihx0030y8usd53cn7lq","_id":"ck77ncikj0057y8usftrs6b47"},{"post_id":"ck77ncif40012y8usprnixtkj","tag_id":"ck77ncihy0032y8us7cpk0j89","_id":"ck77ncikk0059y8usat6z94ay"},{"post_id":"ck77ncif60013y8usmbm3q74d","tag_id":"ck77ncihz0034y8usapl2vxp0","_id":"ck77ncikk005ay8usbpc5wrfl"},{"post_id":"ck77ncif80014y8ustgbunpof","tag_id":"ck77ncihz0035y8us8zzl2yu2","_id":"ck77ncikl005cy8usc5sihguj"},{"post_id":"ck77ncifc0015y8usblyyymwz","tag_id":"ck77ncii00036y8usng06ww3z","_id":"ck77ncikl005dy8usl9tg5fvq"},{"post_id":"ck77ncigi0016y8us2ckt24uv","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncimc005ky8us70kflk4b"},{"post_id":"ck77ncigi0016y8us2ckt24uv","tag_id":"ck77ncijj003ay8use5yoda2y","_id":"ck77ncimg005py8usa39pr5o3"},{"post_id":"ck77ncijk003cy8us4g0qgh3z","tag_id":"ck77ncih1001sy8usltrfd9c7","_id":"ck77ncimh005sy8usvbab795b"},{"post_id":"ck77ncijf0037y8us8tv2f8ip","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncioc007vy8usrqiny5ok"},{"post_id":"ck77ncijf0037y8us8tv2f8ip","tag_id":"ck77ncimd005ly8usuipdbfvi","_id":"ck77nciof0080y8usrjq5ohhu"},{"post_id":"ck77ncijm003fy8usjjn6jji5","tag_id":"ck77ncie00005y8usw82yu2e5","_id":"ck77ncioi0083y8usbmmpb6su"},{"post_id":"ck77ncijm003fy8usjjn6jji5","tag_id":"ck77ncimi005uy8us7ad6lx6i","_id":"ck77ncioj0087y8usdgg9zbz6"},{"post_id":"ck77nciml005zy8usmzxkf1t3","tag_id":"ck77ncioc007xy8usjqqm7fep","_id":"ck77ncipc008oy8usyl2g8arm"},{"post_id":"ck77nciml005zy8usmzxkf1t3","tag_id":"ck77ncioj0086y8uszljinzdf","_id":"ck77nciph008sy8usedbd5gxf"},{"post_id":"ck77nciml005zy8usmzxkf1t3","tag_id":"ck77nciol0089y8usfuszlss8","_id":"ck77ncipj008uy8usindw1hg4"},{"post_id":"ck77ncimq0067y8usm7j8isic","tag_id":"ck77nciom008by8us102g0sts","_id":"ck77ncipm008yy8usx6w60oyb"},{"post_id":"ck77ncimq0067y8usm7j8isic","tag_id":"ck77ncioo008dy8usfl23dxah","_id":"ck77ncipo0090y8ussc5arm4i"},{"post_id":"ck77ncims0069y8us96wa8fd7","tag_id":"ck77ncioo008dy8usfl23dxah","_id":"ck77ncipq0093y8us68k29m7q"},{"post_id":"ck77ncims0069y8us96wa8fd7","tag_id":"ck77ncioq008fy8us1w1uqliz","_id":"ck77ncipr0095y8us4ld800uv"},{"post_id":"ck77ncimw006hy8us72qm6144","tag_id":"ck77ncioo008dy8usfl23dxah","_id":"ck77ncips0097y8uspilhvsfu"},{"post_id":"ck77ncimw006hy8us72qm6144","tag_id":"ck77ncior008hy8us9l2nhpou","_id":"ck77ncipt0098y8usp00qkn7k"},{"post_id":"ck77ncin3006py8usa7rp5av2","tag_id":"ck77ncios008iy8usxpoqhrtg","_id":"ck77ncipx0099y8us5daowxtu"},{"post_id":"ck77ncin3006py8usa7rp5av2","tag_id":"ck77ncios008jy8usmu1n7ghu","_id":"ck77nciq0009ay8usjhh23bdw"},{"post_id":"ck77ncin3006py8usa7rp5av2","tag_id":"ck77nciot008ky8us01pwybow","_id":"ck77nciq1009by8usrn30rpf3"},{"post_id":"ck77ncin5006ry8usvhiijoq6","tag_id":"ck77nciot008ly8us38ky8f4s","_id":"ck77nciq2009cy8usigyoco1z"},{"post_id":"ck77ncin5006ry8usvhiijoq6","tag_id":"ck77nciot008my8usmzntcudk","_id":"ck77nciq3009dy8usvwyveysz"},{"post_id":"ck77nciof007zy8usrcnidfzl","tag_id":"ck77ncios008iy8usxpoqhrtg","_id":"ck77nciq5009ey8usj21isa9l"},{"post_id":"ck77nciof007zy8usrcnidfzl","tag_id":"ck77ncios008jy8usmu1n7ghu","_id":"ck77nciq6009fy8us4bi82hno"},{"post_id":"ck77nciof007zy8usrcnidfzl","tag_id":"ck77nciot008ky8us01pwybow","_id":"ck77nciq7009gy8us88a5o8vf"},{"post_id":"ck77ncioa007uy8usnkdc2pq6","tag_id":"ck77ncipd008py8us56azcfwi","_id":"ck77ncir6009hy8usx3h7fob9"},{"post_id":"ck77ncioh0082y8usnkg3nfw7","tag_id":"ck77ncipl008wy8usym2qhw9v","_id":"ck77ncir9009ly8usy3w2s03q"},{"post_id":"ck77ncioh0082y8usnkg3nfw7","tag_id":"ck77ncipp0092y8usoak1lpmq","_id":"ck77ncira009ny8us89sc25j8"},{"post_id":"ck77ncioh0082y8usnkg3nfw7","tag_id":"ck77ncips0096y8us560iptdn","_id":"ck77ncirb009qy8usp0hkfk3l"},{"post_id":"ck77ncipa008ny8us1syubsqi","tag_id":"ck77ncir7009jy8us2jy6bo15","_id":"ck77ncirf009sy8usqv0ib4id"},{"post_id":"ck77ncipa008ny8us1syubsqi","tag_id":"ck77ncirb009py8usbxttw3cx","_id":"ck77ncirg009uy8us6fs6ymz9"}],"Tag":[{"name":"android","_id":"ck77ncie00005y8usw82yu2e5"},{"name":"android各种manager","_id":"ck77ncie6000by8usnpx99yaj"},{"name":"对象传递","_id":"ck77ncied000hy8usrnkrrrk0"},{"name":"GreenDao","_id":"ck77ncigm0019y8usc9eou0lr"},{"name":"sqlite","_id":"ck77ncigq001dy8usxazgp3ki"},{"name":"框架","_id":"ck77ncigs001gy8uspmlizmo7"},{"name":"javascript模块化","_id":"ck77ncigu001iy8us2dfn6pn5"},{"name":"TCP","_id":"ck77ncigv001ky8ushywmmwzo"},{"name":"Material Design","_id":"ck77ncigw001my8uswcblfsgj"},{"name":"android broadcast","_id":"ck77ncih0001qy8us4k2xz0e4"},{"name":"个人主页","_id":"ck77ncih1001sy8usltrfd9c7"},{"name":"android studio","_id":"ck77ncih3001uy8uswlg1xc3t"},{"name":"git","_id":"ck77ncih4001wy8usnw12sigv"},{"name":"javascript闭包","_id":"ck77ncihj002ey8usw7fvx3ar"},{"name":"javatoexe","_id":"ck77ncihk002gy8uss8ovl7o0"},{"name":"tomcat","_id":"ck77ncihl002iy8usonf7t1tq"},{"name":"oralce","_id":"ck77ncihn002my8us1dasi785"},{"name":"sql","_id":"ck77ncihp002oy8us3q8t8lkl"},{"name":"javascript ajax","_id":"ck77ncihr002qy8usf9q7ob73"},{"name":"vmware","_id":"ck77ncihs002sy8usl1qk3p9y"},{"name":"regex","_id":"ck77ncihu002wy8uskypxi93y"},{"name":"冒泡排序","_id":"ck77ncihw002yy8ussl6b8og8"},{"name":"activity launchMode","_id":"ck77ncihx0030y8usd53cn7lq"},{"name":"适配器模式","_id":"ck77ncihy0032y8us7cpk0j89"},{"name":"二分查找法","_id":"ck77ncihz0034y8usapl2vxp0"},{"name":"python","_id":"ck77ncihz0035y8us8zzl2yu2"},{"name":"php","_id":"ck77ncii00036y8usng06ww3z"},{"name":"android service","_id":"ck77ncijj003ay8use5yoda2y"},{"name":"widget","_id":"ck77ncimd005ly8usuipdbfvi"},{"name":"activity lifetime","_id":"ck77ncimi005uy8us7ad6lx6i"},{"name":"操作系统","_id":"ck77ncioc007xy8usjqqm7fep"},{"name":"deepin","_id":"ck77ncioj0086y8uszljinzdf"},{"name":"教程","_id":"ck77nciol0089y8usfuszlss8"},{"name":"maven","_id":"ck77nciom008by8us102g0sts"},{"name":"oracle","_id":"ck77ncioo008dy8usfl23dxah"},{"name":"表空间","_id":"ck77ncioq008fy8us1w1uqliz"},{"name":"数据库","_id":"ck77ncior008hy8us9l2nhpou"},{"name":"设计模式","_id":"ck77ncios008iy8usxpoqhrtg"},{"name":"mvp","_id":"ck77ncios008jy8usmu1n7ghu"},{"name":"android设计模式","_id":"ck77nciot008ky8us01pwybow"},{"name":"svn","_id":"ck77nciot008ly8us38ky8f4s"},{"name":"版本控制工具","_id":"ck77nciot008my8usmzntcudk"},{"name":"工厂模式","_id":"ck77ncipd008py8us56azcfwi"},{"name":"语雀","_id":"ck77ncipl008wy8usym2qhw9v"},{"name":"travis","_id":"ck77ncipp0092y8usoak1lpmq"},{"name":"serverless","_id":"ck77ncips0096y8us560iptdn"},{"name":"面试","_id":"ck77ncir7009jy8us2jy6bo15"},{"name":"java","_id":"ck77ncirb009py8usbxttw3cx"}]}}